
ADC_Lec2AnalogSensorsWithLoginProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  000035e6  0000367a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008001c2  008001c2  000037dc  2**0
                  ALLOC
  3 .stab         00003660  00000000  00000000  000037dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018e2  00000000  00000000  00006e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000871e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000885e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000089ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a617  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b502  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c2b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3c       	cpi	r26, 0xCE	; 206
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 13 	call	0x2626	; 0x2626 <main>
      8a:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ec       	ldi	r26, 0xC7	; 199
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ec       	ldi	r24, 0xC7	; 199
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:

/**
 * @brief Function to initialize ADC with prebuild configuration.
 */
void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#if	ADC_u8REF_VOLT == AREF_REF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_u8REF_VOLT == AVCC_REF
	SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

#endif

	/*Left Adjust Result Selection*/
#if	ADC_u8RESOLUTION == EIGHT_BITS
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
	/*ADC Interrupt Enable/Disable*/
#if ADC_u8INT_ENABLE == ENABLED
	SET_BIT(ADCSRA,ADCSRA_ADIE);

#elif ADC_u8INT_ENABLE == DISABLED
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8c 93       	st	X, r24
#error Wrong ADC_u8INT_ENABLE configuration option

#endif

	/*Prescaler Selection*/
	ADCSRA = ADCSRA & PRESCALER_MASK;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 7f       	andi	r24, 0xF8	; 248
     b92:	8c 93       	st	X, r24
	ADCSRA = ADCSRA | ADC_u8PRESCALER_VALUE;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	87 60       	ori	r24, 0x07	; 7
     ba0:	8c 93       	st	X, r24

	/*Enable the ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8StartConversionSynch>:
 * @param Copy_u8Channel The number of channel you want to read.
 * @param Copy_pu16Result This pointer return the reading of the channel selected.
 * @return Error State of the function.
 */
uint8 ADC_u8StartConversionSynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <ADC_u8StartConversionSynch+0x6>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <ADC_u8StartConversionSynch+0x8>
     bbe:	0f 92       	push	r0
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	8b 83       	std	Y+3, r24	; 0x03
     bc6:	7d 83       	std	Y+5, r23	; 0x05
     bc8:	6c 83       	std	Y+4, r22	; 0x04
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
     bca:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u32TimeoutCounter = 0u;
     bcc:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Copy_pu16Rsult*/
	if(Copy_pu16Result != NULL)
     bce:	8c 81       	ldd	r24, Y+4	; 0x04
     bd0:	9d 81       	ldd	r25, Y+5	; 0x05
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <ADC_u8StartConversionSynch+0x22>
     bd6:	42 c0       	rjmp	.+132    	; 0xc5c <ADC_u8StartConversionSynch+0xa6>
	{
		if(ADC_u8BusyFlag == IDLE)
     bd8:	80 91 cf 00 	lds	r24, 0x00CF
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	d9 f5       	brne	.+118    	; 0xc56 <ADC_u8StartConversionSynch+0xa0>
		{
			/*Inform others that adc is busy*/
			ADC_u8BusyFlag = BUSY;
     be0:	10 92 cf 00 	sts	0x00CF, r1

			/*Set the required channel*/
			ADMUX = ADMUX & CHANNEL_MASK;
     be4:	a7 e2       	ldi	r26, 0x27	; 39
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e7 e2       	ldi	r30, 0x27	; 39
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	80 7e       	andi	r24, 0xE0	; 224
     bf0:	8c 93       	st	X, r24
			ADMUX = ADMUX | Copy_u8Channel;
     bf2:	a7 e2       	ldi	r26, 0x27	; 39
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e7 e2       	ldi	r30, 0x27	; 39
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	90 81       	ld	r25, Z
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	89 2b       	or	r24, r25
     c00:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     c02:	a6 e2       	ldi	r26, 0x26	; 38
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e6 e2       	ldi	r30, 0x26	; 38
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 64       	ori	r24, 0x40	; 64
     c0e:	8c 93       	st	X, r24

			/*Polling until the interrupt flag rise*/
			while((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter < ADC_u32TIMEOUT))
     c10:	e6 e2       	ldi	r30, 0x26	; 38
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 95       	swap	r24
     c18:	8f 70       	andi	r24, 0x0F	; 15
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	81 70       	andi	r24, 0x01	; 1
     c20:	90 70       	andi	r25, 0x00	; 0
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	21 f4       	brne	.+8      	; 0xc2e <ADC_u8StartConversionSynch+0x78>
			{
				Local_u32TimeoutCounter++;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	f1 cf       	rjmp	.-30     	; 0xc10 <ADC_u8StartConversionSynch+0x5a>
			else
			{
				/*Loop is broken because the conversion has been done*/

				/*Clear the conversion complete flag flag*/
				SET_BIT(ADCSRA,ADCSRA_ADIF);
     c2e:	a6 e2       	ldi	r26, 0x26	; 38
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e6 e2       	ldi	r30, 0x26	; 38
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	8c 93       	st	X, r24

				/*Return the data*/
#if ADC_u8RESOLUTION == EIGHT_BITS
				*Copy_pu16Result = ADCH;
     c3c:	e5 e2       	ldi	r30, 0x25	; 37
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	ec 81       	ldd	r30, Y+4	; 0x04
     c48:	fd 81       	ldd	r31, Y+5	; 0x05
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
				*Copy_pu16Result = ADC;
#endif
			}

			/*Inform others that ADC is idle now*/
			ADC_u8BusyFlag = IDLE;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 cf 00 	sts	0x00CF, r24
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <ADC_u8StartConversionSynch+0xaa>
		}
		else
		{
			/*ADC is busy now*/
			Local_u8ErrorState = BUSY_STATE_ERR;
     c56:	84 e0       	ldi	r24, 0x04	; 4
     c58:	8a 83       	std	Y+2, r24	; 0x02
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <ADC_u8StartConversionSynch+0xaa>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Return the error state*/
	return Local_u8ErrorState;
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <ADC_u8StartConversionAsynch>:
 * @param Copy_pu16Result This pointer return the reading of the channel selected.
 * @param Copy_pvNotificationFunc This pointer set call back the notification function from the application layer.
 * @return Error State of the function.
 */
uint8 ADC_u8StartConversionAsynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result, void (* Copy_pvNotificationFunc)(void))
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	00 d0       	rcall	.+0      	; 0xc78 <ADC_u8StartConversionAsynch+0x6>
     c78:	00 d0       	rcall	.+0      	; 0xc7a <ADC_u8StartConversionAsynch+0x8>
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <ADC_u8StartConversionAsynch+0xa>
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	8a 83       	std	Y+2, r24	; 0x02
     c82:	7c 83       	std	Y+4, r23	; 0x04
     c84:	6b 83       	std	Y+3, r22	; 0x03
     c86:	5e 83       	std	Y+6, r21	; 0x06
     c88:	4d 83       	std	Y+5, r20	; 0x05
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
     c8a:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Copy_pu16Rsult*/
	if((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	b9 f1       	breq	.+110    	; 0xd02 <ADC_u8StartConversionAsynch+0x90>
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	99 f1       	breq	.+102    	; 0xd02 <ADC_u8StartConversionAsynch+0x90>
	{
		/*Check if ADC is busy or idle*/
		if(ADC_u8BusyFlag == IDLE)
     c9c:	80 91 cf 00 	lds	r24, 0x00CF
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	61 f5       	brne	.+88     	; 0xcfc <ADC_u8StartConversionAsynch+0x8a>
		{
			/*Inform others that ADC is busy now*/
			ADC_u8BusyFlag = BUSY;
     ca4:	10 92 cf 00 	sts	0x00CF, r1

			/*Initialize the result pointer globally*/
			ADC_pu16ConversionResult = Copy_pu16Result;
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	9c 81       	ldd	r25, Y+4	; 0x04
     cac:	90 93 c5 01 	sts	0x01C5, r25
     cb0:	80 93 c4 01 	sts	0x01C4, r24

			/*Initialize the notification function globally*/
			ADC_pvNotificationFunc = Copy_pvNotificationFunc;
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
     cb6:	9e 81       	ldd	r25, Y+6	; 0x06
     cb8:	90 93 c3 01 	sts	0x01C3, r25
     cbc:	80 93 c2 01 	sts	0x01C2, r24

			/*Set the required channel*/
			ADMUX = ADMUX & CHANNEL_MASK;
     cc0:	a7 e2       	ldi	r26, 0x27	; 39
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 e2       	ldi	r30, 0x27	; 39
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 7e       	andi	r24, 0xE0	; 224
     ccc:	8c 93       	st	X, r24
			ADMUX = ADMUX | Copy_u8Channel;
     cce:	a7 e2       	ldi	r26, 0x27	; 39
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e2       	ldi	r30, 0x27	; 39
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	90 81       	ld	r25, Z
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	89 2b       	or	r24, r25
     cdc:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24

			/*Enable ADC Conversion Complete Interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	8c 93       	st	X, r24
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <ADC_u8StartConversionAsynch+0x94>
		}
		else
		{
			/*ADC is busy now*/
			Local_u8ErrorState = BUSY_STATE_ERR;
     cfc:	84 e0       	ldi	r24, 0x04	; 4
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <ADC_u8StartConversionAsynch+0x94>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
     d06:	89 81       	ldd	r24, Y+1	; 0x01
}
     d08:	26 96       	adiw	r28, 0x06	; 6
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <__vector_16>:
/**
 * @brief ADC Conversion Complete ISR.
 */
void __vector_16 (void) __attribute((signal));
void __vector_16 (void)
{
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pu16ConversionResult != NULL)
     d44:	80 91 c4 01 	lds	r24, 0x01C4
     d48:	90 91 c5 01 	lds	r25, 0x01C5
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	01 f1       	breq	.+64     	; 0xd90 <__vector_16+0x76>
	{
		/*Return the data*/
#if ADC_u8RESOLUTION == EIGHT_BITS
		*ADC_pu16ConversionResult = ADCH;
     d50:	a0 91 c4 01 	lds	r26, 0x01C4
     d54:	b0 91 c5 01 	lds	r27, 0x01C5
     d58:	e5 e2       	ldi	r30, 0x25	; 37
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	8d 93       	st	X+, r24
     d64:	9c 93       	st	X, r25
#elif ADC_u8RESOLUTION == TEN_BITS
		*ADC_pu16ConversionResult = ADC;
#endif

		/*Disable ADC Conversion Complete Interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     d66:	a6 e2       	ldi	r26, 0x26	; 38
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e6 e2       	ldi	r30, 0x26	; 38
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	87 7f       	andi	r24, 0xF7	; 247
     d72:	8c 93       	st	X, r24

		/*Inform others that ADC is idle now*/
		ADC_u8BusyFlag = IDLE;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	80 93 cf 00 	sts	0x00CF, r24

		/*Invoke the application notification function*/
		if(ADC_pvNotificationFunc != NULL)
     d7a:	80 91 c2 01 	lds	r24, 0x01C2
     d7e:	90 91 c3 01 	lds	r25, 0x01C3
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	29 f0       	breq	.+10     	; 0xd90 <__vector_16+0x76>
		{
			ADC_pvNotificationFunc();
     d86:	e0 91 c2 01 	lds	r30, 0x01C2
     d8a:	f0 91 c3 01 	lds	r31, 0x01C3
     d8e:	09 95       	icall
	}
	else
	{
		/*Result pointer is assigned to NULL*/
	}
}
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	ff 91       	pop	r31
     d96:	ef 91       	pop	r30
     d98:	bf 91       	pop	r27
     d9a:	af 91       	pop	r26
     d9c:	9f 91       	pop	r25
     d9e:	8f 91       	pop	r24
     da0:	7f 91       	pop	r23
     da2:	6f 91       	pop	r22
     da4:	5f 91       	pop	r21
     da6:	4f 91       	pop	r20
     da8:	3f 91       	pop	r19
     daa:	2f 91       	pop	r18
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <voidSendEnablePulse>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

static void voidSendEnablePulse(void)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	2e 97       	sbiw	r28, 0x0e	; 14
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	66 e0       	ldi	r22, 0x06	; 6
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	a0 e0       	ldi	r26, 0x00	; 0
     dda:	b0 e4       	ldi	r27, 0x40	; 64
     ddc:	8b 87       	std	Y+11, r24	; 0x0b
     dde:	9c 87       	std	Y+12, r25	; 0x0c
     de0:	ad 87       	std	Y+13, r26	; 0x0d
     de2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de4:	6b 85       	ldd	r22, Y+11	; 0x0b
     de6:	7c 85       	ldd	r23, Y+12	; 0x0c
     de8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dea:	9e 85       	ldd	r25, Y+14	; 0x0e
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	4a ef       	ldi	r20, 0xFA	; 250
     df2:	54 e4       	ldi	r21, 0x44	; 68
     df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	8f 83       	std	Y+7, r24	; 0x07
     dfe:	98 87       	std	Y+8, r25	; 0x08
     e00:	a9 87       	std	Y+9, r26	; 0x09
     e02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e04:	6f 81       	ldd	r22, Y+7	; 0x07
     e06:	78 85       	ldd	r23, Y+8	; 0x08
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e8       	ldi	r20, 0x80	; 128
     e12:	5f e3       	ldi	r21, 0x3F	; 63
     e14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e18:	88 23       	and	r24, r24
     e1a:	2c f4       	brge	.+10     	; 0xe26 <voidSendEnablePulse+0x70>
		__ticks = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9e 83       	std	Y+6, r25	; 0x06
     e22:	8d 83       	std	Y+5, r24	; 0x05
     e24:	3f c0       	rjmp	.+126    	; 0xea4 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     e26:	6f 81       	ldd	r22, Y+7	; 0x07
     e28:	78 85       	ldd	r23, Y+8	; 0x08
     e2a:	89 85       	ldd	r24, Y+9	; 0x09
     e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	3f ef       	ldi	r19, 0xFF	; 255
     e32:	4f e7       	ldi	r20, 0x7F	; 127
     e34:	57 e4       	ldi	r21, 0x47	; 71
     e36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	4c f5       	brge	.+82     	; 0xe90 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e40:	7c 85       	ldd	r23, Y+12	; 0x0c
     e42:	8d 85       	ldd	r24, Y+13	; 0x0d
     e44:	9e 85       	ldd	r25, Y+14	; 0x0e
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e2       	ldi	r20, 0x20	; 32
     e4c:	51 e4       	ldi	r21, 0x41	; 65
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	0f c0       	rjmp	.+30     	; 0xe86 <voidSendEnablePulse+0xd0>
     e68:	88 ec       	ldi	r24, 0xC8	; 200
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <voidSendEnablePulse+0xbe>
     e78:	9c 83       	std	Y+4, r25	; 0x04
     e7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	9e 83       	std	Y+6, r25	; 0x06
     e84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	69 f7       	brne	.-38     	; 0xe68 <voidSendEnablePulse+0xb2>
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e90:	6f 81       	ldd	r22, Y+7	; 0x07
     e92:	78 85       	ldd	r23, Y+8	; 0x08
     e94:	89 85       	ldd	r24, Y+9	; 0x09
     e96:	9a 85       	ldd	r25, Y+10	; 0x0a
     e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	9e 83       	std	Y+6, r25	; 0x06
     ea2:	8d 83       	std	Y+5, r24	; 0x05
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <voidSendEnablePulse+0xfa>
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	66 e0       	ldi	r22, 0x06	; 6
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
}
     ec2:	2e 96       	adiw	r28, 0x0e	; 14
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	0f 92       	push	r0
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple, 0));
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	98 2f       	mov	r25, r24
     ee4:	91 70       	andi	r25, 0x01	; 1
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	49 2f       	mov	r20, r25
     eec:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple, 1));
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	86 95       	lsr	r24
     ef4:	98 2f       	mov	r25, r24
     ef6:	91 70       	andi	r25, 0x01	; 1
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	49 2f       	mov	r20, r25
     efe:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple, 2));
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	86 95       	lsr	r24
     f06:	86 95       	lsr	r24
     f08:	98 2f       	mov	r25, r24
     f0a:	91 70       	andi	r25, 0x01	; 1
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	62 e0       	ldi	r22, 0x02	; 2
     f10:	49 2f       	mov	r20, r25
     f12:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple, 3));
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	86 95       	lsr	r24
     f1a:	86 95       	lsr	r24
     f1c:	86 95       	lsr	r24
     f1e:	98 2f       	mov	r25, r24
     f20:	91 70       	andi	r25, 0x01	; 1
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	63 e0       	ldi	r22, 0x03	; 3
     f26:	49 2f       	mov	r20, r25
     f28:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
}
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	64 e0       	ldi	r22, 0x04	; 4
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	65 e0       	ldi	r22, 0x05	; 5
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4);
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	82 95       	swap	r24
     f58:	8f 70       	andi	r24, 0x0F	; 15
     f5a:	0e 94 6a 07 	call	0xed4	; 0xed4 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     f5e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	0e 94 6a 07 	call	0xed4	; 0xed4 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     f68:	0e 94 db 06 	call	0xdb6	; 0xdb6 <voidSendEnablePulse>

#endif

}
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <CLCD_voidSendData>:

void CLCD_voidSendData(char Copy_c8Data)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	64 e0       	ldi	r22, 0x04	; 4
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	65 e0       	ldi	r22, 0x05	; 5
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data >> 4);
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	82 95       	swap	r24
     f98:	8f 70       	andi	r24, 0x0F	; 15
     f9a:	0e 94 6a 07 	call	0xed4	; 0xed4 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     f9e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data);
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	0e 94 6a 07 	call	0xed4	; 0xed4 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     fa8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <voidSendEnablePulse>

#endif

}
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	2e 97       	sbiw	r28, 0x0e	; 14
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a0 e2       	ldi	r26, 0x20	; 32
     fce:	b2 e4       	ldi	r27, 0x42	; 66
     fd0:	8b 87       	std	Y+11, r24	; 0x0b
     fd2:	9c 87       	std	Y+12, r25	; 0x0c
     fd4:	ad 87       	std	Y+13, r26	; 0x0d
     fd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fda:	7c 85       	ldd	r23, Y+12	; 0x0c
     fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fde:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	4a ef       	ldi	r20, 0xFA	; 250
     fe6:	54 e4       	ldi	r21, 0x44	; 68
     fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	8f 83       	std	Y+7, r24	; 0x07
     ff2:	98 87       	std	Y+8, r25	; 0x08
     ff4:	a9 87       	std	Y+9, r26	; 0x09
     ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff8:	6f 81       	ldd	r22, Y+7	; 0x07
     ffa:	78 85       	ldd	r23, Y+8	; 0x08
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e8       	ldi	r20, 0x80	; 128
    1006:	5f e3       	ldi	r21, 0x3F	; 63
    1008:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100c:	88 23       	and	r24, r24
    100e:	2c f4       	brge	.+10     	; 0x101a <CLCD_voidInit+0x66>
		__ticks = 1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	3f c0       	rjmp	.+126    	; 0x1098 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    101a:	6f 81       	ldd	r22, Y+7	; 0x07
    101c:	78 85       	ldd	r23, Y+8	; 0x08
    101e:	89 85       	ldd	r24, Y+9	; 0x09
    1020:	9a 85       	ldd	r25, Y+10	; 0x0a
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	3f ef       	ldi	r19, 0xFF	; 255
    1026:	4f e7       	ldi	r20, 0x7F	; 127
    1028:	57 e4       	ldi	r21, 0x47	; 71
    102a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102e:	18 16       	cp	r1, r24
    1030:	4c f5       	brge	.+82     	; 0x1084 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1032:	6b 85       	ldd	r22, Y+11	; 0x0b
    1034:	7c 85       	ldd	r23, Y+12	; 0x0c
    1036:	8d 85       	ldd	r24, Y+13	; 0x0d
    1038:	9e 85       	ldd	r25, Y+14	; 0x0e
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e2       	ldi	r20, 0x20	; 32
    1040:	51 e4       	ldi	r21, 0x41	; 65
    1042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	9e 83       	std	Y+6, r25	; 0x06
    1058:	8d 83       	std	Y+5, r24	; 0x05
    105a:	0f c0       	rjmp	.+30     	; 0x107a <CLCD_voidInit+0xc6>
    105c:	88 ec       	ldi	r24, 0xC8	; 200
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <CLCD_voidInit+0xb4>
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	9e 83       	std	Y+6, r25	; 0x06
    1078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	69 f7       	brne	.-38     	; 0x105c <CLCD_voidInit+0xa8>
    1082:	14 c0       	rjmp	.+40     	; 0x10ac <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1084:	6f 81       	ldd	r22, Y+7	; 0x07
    1086:	78 85       	ldd	r23, Y+8	; 0x08
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	9a 85       	ldd	r25, Y+10	; 0x0a
    108c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	9e 83       	std	Y+6, r25	; 0x06
    1096:	8d 83       	std	Y+5, r24	; 0x05
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <CLCD_voidInit+0xf0>
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	64 e0       	ldi	r22, 0x04	; 4
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	65 e0       	ldi	r22, 0x05	; 5
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>

	/*Set Commands to lcd*/
	voidSetLCDHalfDataPort(0b0010);
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	0e 94 6a 07 	call	0xed4	; 0xed4 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    10c6:	0e 94 db 06 	call	0xdb6	; 0xdb6 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	0e 94 6a 07 	call	0xed4	; 0xed4 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    10d0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    10d4:	88 e0       	ldi	r24, 0x08	; 8
    10d6:	0e 94 6a 07 	call	0xed4	; 0xed4 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    10da:	0e 94 db 06 	call	0xdb6	; 0xdb6 <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    10de:	8c e0       	ldi	r24, 0x0C	; 12
    10e0:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendCmd>

	/*Display Clear cmd*/
	CLCD_voidSendCmd(0b00000001);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendCmd>
}
    10ea:	2e 96       	adiw	r28, 0x0e	; 14
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendCmd>
}
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <CLCD_u8SendString+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <CLCD_u8SendString+0x8>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
    1120:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0;
    1122:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ch8String != NULL)
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	d9 f0       	breq	.+54     	; 0x1162 <CLCD_u8SendString+0x52>
    112c:	0e c0       	rjmp	.+28     	; 0x114a <CLCD_u8SendString+0x3a>
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	fc 01       	movw	r30, r24
    113a:	e2 0f       	add	r30, r18
    113c:	f3 1f       	adc	r31, r19
    113e:	80 81       	ld	r24, Z
    1140:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
			Local_u8Counter++;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	fc 01       	movw	r30, r24
    1156:	e2 0f       	add	r30, r18
    1158:	f3 1f       	adc	r31, r19
    115a:	80 81       	ld	r24, Z
    115c:	88 23       	and	r24, r24
    115e:	39 f7       	brne	.-50     	; 0x112e <CLCD_u8SendString+0x1e>
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <CLCD_voidSendDecimalNumber>:


void CLCD_voidSendDecimalNumber(sint32 Copy_s32Number)
{
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	60 97       	sbiw	r28, 0x10	; 16
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	6d 87       	std	Y+13, r22	; 0x0d
    1190:	7e 87       	std	Y+14, r23	; 0x0e
    1192:	8f 87       	std	Y+15, r24	; 0x0f
    1194:	98 8b       	std	Y+16, r25	; 0x10
	char Local_ch8Digit[10] = {0};
    1196:	8a e0       	ldi	r24, 0x0A	; 10
    1198:	fe 01       	movw	r30, r28
    119a:	33 96       	adiw	r30, 0x03	; 3
    119c:	df 01       	movw	r26, r30
    119e:	98 2f       	mov	r25, r24
    11a0:	1d 92       	st	X+, r1
    11a2:	9a 95       	dec	r25
    11a4:	e9 f7       	brne	.-6      	; 0x11a0 <CLCD_voidSendDecimalNumber+0x2a>

	uint8 Local_u8ReverseCounter = 0u;
    11a6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	if(Copy_s32Number == 0)
    11a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ac:	af 85       	ldd	r26, Y+15	; 0x0f
    11ae:	b8 89       	ldd	r27, Y+16	; 0x10
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	a1 05       	cpc	r26, r1
    11b4:	b1 05       	cpc	r27, r1
    11b6:	21 f4       	brne	.+8      	; 0x11c0 <CLCD_voidSendDecimalNumber+0x4a>
	{
		CLCD_voidSendData('0');
    11b8:	80 e3       	ldi	r24, 0x30	; 48
    11ba:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
    11be:	7b c0       	rjmp	.+246    	; 0x12b6 <CLCD_voidSendDecimalNumber+0x140>
	}
	else
	{
		/*Check for the negative sign*/
		if(Copy_s32Number < 0)
    11c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c4:	af 85       	ldd	r26, Y+15	; 0x0f
    11c6:	b8 89       	ldd	r27, Y+16	; 0x10
    11c8:	bb 23       	and	r27, r27
    11ca:	0c f0       	brlt	.+2      	; 0x11ce <CLCD_voidSendDecimalNumber+0x58>
    11cc:	54 c0       	rjmp	.+168    	; 0x1276 <CLCD_voidSendDecimalNumber+0x100>
		{
			/*Print the negative sign to the lcd*/
			CLCD_voidSendData('-');
    11ce:	8d e2       	ldi	r24, 0x2D	; 45
    11d0:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>

			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
    11d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d8:	af 85       	ldd	r26, Y+15	; 0x0f
    11da:	b8 89       	ldd	r27, Y+16	; 0x10
    11dc:	b0 95       	com	r27
    11de:	a0 95       	com	r26
    11e0:	90 95       	com	r25
    11e2:	81 95       	neg	r24
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	af 4f       	sbci	r26, 0xFF	; 255
    11e8:	bf 4f       	sbci	r27, 0xFF	; 255
    11ea:	8d 87       	std	Y+13, r24	; 0x0d
    11ec:	9e 87       	std	Y+14, r25	; 0x0e
    11ee:	af 87       	std	Y+15, r26	; 0x0f
    11f0:	b8 8b       	std	Y+16, r27	; 0x10
    11f2:	41 c0       	rjmp	.+130    	; 0x1276 <CLCD_voidSendDecimalNumber+0x100>
		{
			/*
			 * Extract every digit number to the array of characters,
			 * then translate it into ascii value through adding '0'
			 */
			Local_ch8Digit[Local_u8ReverseCounter] = (char) (Copy_s32Number % 10);
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	08 2f       	mov	r16, r24
    11f8:	10 e0       	ldi	r17, 0x00	; 0
    11fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11fe:	af 85       	ldd	r26, Y+15	; 0x0f
    1200:	b8 89       	ldd	r27, Y+16	; 0x10
    1202:	2a e0       	ldi	r18, 0x0A	; 10
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	0e 94 9f 1a 	call	0x353e	; 0x353e <__divmodsi4>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	28 2f       	mov	r18, r24
    1218:	ce 01       	movw	r24, r28
    121a:	03 96       	adiw	r24, 0x03	; 3
    121c:	fc 01       	movw	r30, r24
    121e:	e0 0f       	add	r30, r16
    1220:	f1 1f       	adc	r31, r17
    1222:	20 83       	st	Z, r18
			Local_ch8Digit[Local_u8ReverseCounter] = Local_ch8Digit[Local_u8ReverseCounter] + '0';
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	48 2f       	mov	r20, r24
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	ce 01       	movw	r24, r28
    1232:	03 96       	adiw	r24, 0x03	; 3
    1234:	fc 01       	movw	r30, r24
    1236:	e2 0f       	add	r30, r18
    1238:	f3 1f       	adc	r31, r19
    123a:	80 81       	ld	r24, Z
    123c:	28 2f       	mov	r18, r24
    123e:	20 5d       	subi	r18, 0xD0	; 208
    1240:	ce 01       	movw	r24, r28
    1242:	03 96       	adiw	r24, 0x03	; 3
    1244:	fc 01       	movw	r30, r24
    1246:	e4 0f       	add	r30, r20
    1248:	f5 1f       	adc	r31, r21
    124a:	20 83       	st	Z, r18

			Copy_s32Number = Copy_s32Number / 10;
    124c:	8d 85       	ldd	r24, Y+13	; 0x0d
    124e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1250:	af 85       	ldd	r26, Y+15	; 0x0f
    1252:	b8 89       	ldd	r27, Y+16	; 0x10
    1254:	2a e0       	ldi	r18, 0x0A	; 10
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 9f 1a 	call	0x353e	; 0x353e <__divmodsi4>
    1264:	da 01       	movw	r26, r20
    1266:	c9 01       	movw	r24, r18
    1268:	8d 87       	std	Y+13, r24	; 0x0d
    126a:	9e 87       	std	Y+14, r25	; 0x0e
    126c:	af 87       	std	Y+15, r26	; 0x0f
    126e:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8ReverseCounter++;
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	8a 83       	std	Y+2, r24	; 0x02
			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
		}

		/*Extracting the number digits into array of characters*/
		while(Copy_s32Number > 0)
    1276:	8d 85       	ldd	r24, Y+13	; 0x0d
    1278:	9e 85       	ldd	r25, Y+14	; 0x0e
    127a:	af 85       	ldd	r26, Y+15	; 0x0f
    127c:	b8 89       	ldd	r27, Y+16	; 0x10
    127e:	18 16       	cp	r1, r24
    1280:	19 06       	cpc	r1, r25
    1282:	1a 06       	cpc	r1, r26
    1284:	1b 06       	cpc	r1, r27
    1286:	0c f4       	brge	.+2      	; 0x128a <CLCD_voidSendDecimalNumber+0x114>
    1288:	b5 cf       	rjmp	.-150    	; 0x11f4 <CLCD_voidSendDecimalNumber+0x7e>
			Copy_s32Number = Copy_s32Number / 10;
			Local_u8ReverseCounter++;
		}

		/*Printing every character in the array until the end of the number*/
		Local_u8PrintCounter = Local_u8ReverseCounter;
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			CLCD_voidSendData(Local_ch8Digit[Local_u8PrintCounter - 1u]);
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9c 01       	movw	r18, r24
    1296:	21 50       	subi	r18, 0x01	; 1
    1298:	30 40       	sbci	r19, 0x00	; 0
    129a:	ce 01       	movw	r24, r28
    129c:	03 96       	adiw	r24, 0x03	; 3
    129e:	fc 01       	movw	r30, r24
    12a0:	e2 0f       	add	r30, r18
    12a2:	f3 1f       	adc	r31, r19
    12a4:	80 81       	ld	r24, Z
    12a6:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
			Local_u8PrintCounter--;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	81 50       	subi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
		}
		while(Local_u8PrintCounter > 0u);
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	88 23       	and	r24, r24
    12b4:	61 f7       	brne	.-40     	; 0x128e <CLCD_voidSendDecimalNumber+0x118>
	}
}
    12b6:	60 96       	adiw	r28, 0x10	; 16
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	08 95       	ret

000012cc <CLCD_voidSendBinaryNumber>:


void CLCD_voidSendBinaryNumber(sint16 Copy_s16Number)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	a4 97       	sbiw	r28, 0x24	; 36
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	9c a3       	std	Y+36, r25	; 0x24
    12e2:	8b a3       	std	Y+35, r24	; 0x23
	uint8 Local_u8BinaryDigits[32] = {0u};
    12e4:	80 e2       	ldi	r24, 0x20	; 32
    12e6:	fe 01       	movw	r30, r28
    12e8:	33 96       	adiw	r30, 0x03	; 3
    12ea:	df 01       	movw	r26, r30
    12ec:	98 2f       	mov	r25, r24
    12ee:	1d 92       	st	X+, r1
    12f0:	9a 95       	dec	r25
    12f2:	e9 f7       	brne	.-6      	; 0x12ee <CLCD_voidSendBinaryNumber+0x22>

	uint8 Local_u8ReverseCounter = 0u;
    12f4:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");
    12f6:	80 e6       	ldi	r24, 0x60	; 96
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    12fe:	1a 82       	std	Y+2, r1	; 0x02
    1300:	23 c0       	rjmp	.+70     	; 0x1348 <CLCD_voidSendBinaryNumber+0x7c>
	{
		if((Copy_s16Number & 1) == 1)
    1302:	8b a1       	ldd	r24, Y+35	; 0x23
    1304:	9c a1       	ldd	r25, Y+36	; 0x24
    1306:	81 70       	andi	r24, 0x01	; 1
    1308:	90 70       	andi	r25, 0x00	; 0
    130a:	88 23       	and	r24, r24
    130c:	59 f0       	breq	.+22     	; 0x1324 <CLCD_voidSendBinaryNumber+0x58>
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 1u;
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	ce 01       	movw	r24, r28
    1316:	03 96       	adiw	r24, 0x03	; 3
    1318:	fc 01       	movw	r30, r24
    131a:	e2 0f       	add	r30, r18
    131c:	f3 1f       	adc	r31, r19
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	80 83       	st	Z, r24
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <CLCD_voidSendBinaryNumber+0x6a>
		}
		else
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 0u;
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	ce 01       	movw	r24, r28
    132c:	03 96       	adiw	r24, 0x03	; 3
    132e:	fc 01       	movw	r30, r24
    1330:	e2 0f       	add	r30, r18
    1332:	f3 1f       	adc	r31, r19
    1334:	10 82       	st	Z, r1
		}
		Copy_s16Number = Copy_s16Number >> 1;
    1336:	8b a1       	ldd	r24, Y+35	; 0x23
    1338:	9c a1       	ldd	r25, Y+36	; 0x24
    133a:	95 95       	asr	r25
    133c:	87 95       	ror	r24
    133e:	9c a3       	std	Y+36, r25	; 0x24
    1340:	8b a3       	std	Y+35, r24	; 0x23

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	80 31       	cpi	r24, 0x10	; 16
    134c:	d0 f2       	brcs	.-76     	; 0x1302 <CLCD_voidSendBinaryNumber+0x36>
		}
		Copy_s16Number = Copy_s16Number >> 1;
	}

	/*Go to the next line in the lcd*/
	CLCD_u8GoToXY(0,1);
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>

	/*Printing every character in the array until the end of the number*/
	Local_u8PrintCounter = 16;
    1356:	80 e1       	ldi	r24, 0x10	; 16
    1358:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		if(Local_u8BinaryDigits[Local_u8PrintCounter - 1] == 0)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 01       	movw	r18, r24
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	30 40       	sbci	r19, 0x00	; 0
    1366:	ce 01       	movw	r24, r28
    1368:	03 96       	adiw	r24, 0x03	; 3
    136a:	fc 01       	movw	r30, r24
    136c:	e2 0f       	add	r30, r18
    136e:	f3 1f       	adc	r31, r19
    1370:	80 81       	ld	r24, Z
    1372:	88 23       	and	r24, r24
    1374:	21 f4       	brne	.+8      	; 0x137e <CLCD_voidSendBinaryNumber+0xb2>
		{
			CLCD_voidSendData('0');
    1376:	80 e3       	ldi	r24, 0x30	; 48
    1378:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <CLCD_voidSendBinaryNumber+0xb8>
		}
		else
		{
			CLCD_voidSendData('1');
    137e:	81 e3       	ldi	r24, 0x31	; 49
    1380:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
		}

		Local_u8PrintCounter--;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	81 50       	subi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
	}
	while(Local_u8PrintCounter > 0);
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	88 23       	and	r24, r24
    138e:	29 f7       	brne	.-54     	; 0x135a <CLCD_voidSendBinaryNumber+0x8e>
}
    1390:	a4 96       	adiw	r28, 0x24	; 36
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <CLCD_voidSendHexaNumber>:
//	/*Returnning the MaxZeros counter*/
//	return MaxZeros;
//}

void CLCD_voidSendHexaNumber(sint32 Copy_s32Number)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	a5 97       	sbiw	r28, 0x25	; 37
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	6d 8f       	std	Y+29, r22	; 0x1d
    13b8:	7e 8f       	std	Y+30, r23	; 0x1e
    13ba:	8f 8f       	std	Y+31, r24	; 0x1f
    13bc:	98 a3       	std	Y+32, r25	; 0x20
	/*Define Variables*/
	char Local_ch8HexaTable[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
									'A', 'B', 'C', 'D', 'E', 'F'};
    13be:	ce 01       	movw	r24, r28
    13c0:	05 96       	adiw	r24, 0x05	; 5
    13c2:	9a a3       	std	Y+34, r25	; 0x22
    13c4:	89 a3       	std	Y+33, r24	; 0x21
    13c6:	e2 eb       	ldi	r30, 0xB2	; 178
    13c8:	f1 e0       	ldi	r31, 0x01	; 1
    13ca:	fc a3       	std	Y+36, r31	; 0x24
    13cc:	eb a3       	std	Y+35, r30	; 0x23
    13ce:	f0 e1       	ldi	r31, 0x10	; 16
    13d0:	fd a3       	std	Y+37, r31	; 0x25
    13d2:	eb a1       	ldd	r30, Y+35	; 0x23
    13d4:	fc a1       	ldd	r31, Y+36	; 0x24
    13d6:	00 80       	ld	r0, Z
    13d8:	8b a1       	ldd	r24, Y+35	; 0x23
    13da:	9c a1       	ldd	r25, Y+36	; 0x24
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	9c a3       	std	Y+36, r25	; 0x24
    13e0:	8b a3       	std	Y+35, r24	; 0x23
    13e2:	e9 a1       	ldd	r30, Y+33	; 0x21
    13e4:	fa a1       	ldd	r31, Y+34	; 0x22
    13e6:	00 82       	st	Z, r0
    13e8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ea:	9a a1       	ldd	r25, Y+34	; 0x22
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	9a a3       	std	Y+34, r25	; 0x22
    13f0:	89 a3       	std	Y+33, r24	; 0x21
    13f2:	9d a1       	ldd	r25, Y+37	; 0x25
    13f4:	91 50       	subi	r25, 0x01	; 1
    13f6:	9d a3       	std	Y+37, r25	; 0x25
    13f8:	ed a1       	ldd	r30, Y+37	; 0x25
    13fa:	ee 23       	and	r30, r30
    13fc:	51 f7       	brne	.-44     	; 0x13d2 <CLCD_voidSendHexaNumber+0x30>
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    13fe:	1b 82       	std	Y+3, r1	; 0x03
    1400:	20 c0       	rjmp	.+64     	; 0x1442 <CLCD_voidSendHexaNumber+0xa0>
	{
		/*Get the least for bits of the number*/
		Local_u8LeastFourBits = Copy_s32Number & 0x0f;
    1402:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1404:	8f 70       	andi	r24, 0x0F	; 15
    1406:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number = Copy_s32Number >> 4;
    1408:	8d 8d       	ldd	r24, Y+29	; 0x1d
    140a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    140c:	af 8d       	ldd	r26, Y+31	; 0x1f
    140e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1410:	68 94       	set
    1412:	13 f8       	bld	r1, 3
    1414:	b5 95       	asr	r27
    1416:	a7 95       	ror	r26
    1418:	97 95       	ror	r25
    141a:	87 95       	ror	r24
    141c:	16 94       	lsr	r1
    141e:	d1 f7       	brne	.-12     	; 0x1414 <CLCD_voidSendHexaNumber+0x72>
    1420:	8d 8f       	std	Y+29, r24	; 0x1d
    1422:	9e 8f       	std	Y+30, r25	; 0x1e
    1424:	af 8f       	std	Y+31, r26	; 0x1f
    1426:	b8 a3       	std	Y+32, r27	; 0x20

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	ce 01       	movw	r24, r28
    1430:	45 96       	adiw	r24, 0x15	; 21
    1432:	fc 01       	movw	r30, r24
    1434:	e2 0f       	add	r30, r18
    1436:	f3 1f       	adc	r31, r19
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	80 83       	st	Z, r24
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	8b 83       	std	Y+3, r24	; 0x03
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	88 30       	cpi	r24, 0x08	; 8
    1446:	e8 f2       	brcs	.-70     	; 0x1402 <CLCD_voidSendHexaNumber+0x60>

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
	}

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");
    1448:	83 e6       	ldi	r24, 0x63	; 99
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    1450:	87 e0       	ldi	r24, 0x07	; 7
    1452:	8c 83       	std	Y+4, r24	; 0x04
    1454:	1a c0       	rjmp	.+52     	; 0x148a <CLCD_voidSendHexaNumber+0xe8>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	28 2f       	mov	r18, r24
    145a:	33 27       	eor	r19, r19
    145c:	27 fd       	sbrc	r18, 7
    145e:	30 95       	com	r19
    1460:	ce 01       	movw	r24, r28
    1462:	45 96       	adiw	r24, 0x15	; 21
    1464:	fc 01       	movw	r30, r24
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	80 81       	ld	r24, Z
    146c:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	ce 01       	movw	r24, r28
    1476:	05 96       	adiw	r24, 0x05	; 5
    1478:	fc 01       	movw	r30, r24
    147a:	e2 0f       	add	r30, r18
    147c:	f3 1f       	adc	r31, r19
    147e:	80 81       	ld	r24, Z
    1480:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	81 50       	subi	r24, 0x01	; 1
    1488:	8c 83       	std	Y+4, r24	; 0x04
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	88 23       	and	r24, r24
    148e:	1c f7       	brge	.-58     	; 0x1456 <CLCD_voidSendHexaNumber+0xb4>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
	}
}
    1490:	a5 96       	adiw	r28, 0x25	; 37
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	27 97       	sbiw	r28, 0x07	; 7
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
    14ba:	6d 83       	std	Y+5, r22	; 0x05
    14bc:	4e 83       	std	Y+6, r20	; 0x06
    14be:	2f 83       	std	Y+7, r18	; 0x07
	/*Define Variables*/
	uint8 Local_u8CGRAMAdd = Copy_u8PatternNum * 8u;
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter;

	/*Set bit 6 in CGRAMAdd for CGRAM Address command standard*/
	SET_BIT(Local_u8CGRAMAdd, 6);
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	80 64       	ori	r24, 0x40	; 64
    14d8:	8a 83       	std	Y+2, r24	; 0x02

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendCmd>

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	0e c0       	rjmp	.+28     	; 0x1500 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	fc 01       	movw	r30, r24
    14f0:	e2 0f       	add	r30, r18
    14f2:	f3 1f       	adc	r31, r19
    14f4:	80 81       	ld	r24, Z
    14f6:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	78 f3       	brcs	.-34     	; 0x14e4 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}

	/*Go to DDRAM Address to display the pattern*/
	CLCD_u8GoToXY(Copy_u8XPos, Copy_u8YPos);
    1506:	8e 81       	ldd	r24, Y+6	; 0x06
    1508:	6f 81       	ldd	r22, Y+7	; 0x07
    150a:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>

	/*Display the pattern from CGRAM to DDRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
}
    1514:	27 96       	adiw	r28, 0x07	; 7
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <CLCD_u8GoToXY>:

uint8 CLCD_u8GoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <CLCD_u8GoToXY+0x6>
    152c:	00 d0       	rcall	.+0      	; 0x152e <CLCD_u8GoToXY+0x8>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	8b 83       	std	Y+3, r24	; 0x03
    1534:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    1536:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8DDRamAdd;

	/*Configure the address of DDRam*/
	if(Copy_u8YPos == 0u)
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	88 23       	and	r24, r24
    153c:	19 f4       	brne	.+6      	; 0x1544 <CLCD_u8GoToXY+0x1e>
	{
		Local_u8DDRamAdd = Copy_u8XPos;
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <CLCD_u8GoToXY+0x30>
	}
	else if(Copy_u8YPos == 1u)
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	21 f4       	brne	.+8      	; 0x1552 <CLCD_u8GoToXY+0x2c>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	80 5c       	subi	r24, 0xC0	; 192
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <CLCD_u8GoToXY+0x30>
	}
	else
	{
		Local_u8ErrorState = NOK;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Send DDRam Set Address command to lcd*/
	SET_BIT(Local_u8DDRamAdd,7);
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	80 68       	ori	r24, 0x80	; 128
    155a:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendCmd>

	return Local_u8ErrorState;
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	28 97       	sbiw	r28, 0x08	; 8
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	8a 83       	std	Y+2, r24	; 0x02
    1588:	6b 83       	std	Y+3, r22	; 0x03
    158a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
    158c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	88 30       	cpi	r24, 0x08	; 8
    1592:	08 f0       	brcs	.+2      	; 0x1596 <DIO_u8SetPinDirection+0x24>
    1594:	f4 c0       	rjmp	.+488    	; 0x177e <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	09 f0       	breq	.+2      	; 0x159e <DIO_u8SetPinDirection+0x2c>
    159c:	72 c0       	rjmp	.+228    	; 0x1682 <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	38 87       	std	Y+8, r19	; 0x08
    15a6:	2f 83       	std	Y+7, r18	; 0x07
    15a8:	8f 81       	ldd	r24, Y+7	; 0x07
    15aa:	98 85       	ldd	r25, Y+8	; 0x08
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	91 05       	cpc	r25, r1
    15b0:	49 f1       	breq	.+82     	; 0x1604 <DIO_u8SetPinDirection+0x92>
    15b2:	2f 81       	ldd	r18, Y+7	; 0x07
    15b4:	38 85       	ldd	r19, Y+8	; 0x08
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	31 05       	cpc	r19, r1
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <DIO_u8SetPinDirection+0x54>
    15bc:	8f 81       	ldd	r24, Y+7	; 0x07
    15be:	98 85       	ldd	r25, Y+8	; 0x08
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	61 f0       	breq	.+24     	; 0x15dc <DIO_u8SetPinDirection+0x6a>
    15c4:	5b c0       	rjmp	.+182    	; 0x167c <DIO_u8SetPinDirection+0x10a>
    15c6:	2f 81       	ldd	r18, Y+7	; 0x07
    15c8:	38 85       	ldd	r19, Y+8	; 0x08
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	71 f1       	breq	.+92     	; 0x162c <DIO_u8SetPinDirection+0xba>
    15d0:	8f 81       	ldd	r24, Y+7	; 0x07
    15d2:	98 85       	ldd	r25, Y+8	; 0x08
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	91 05       	cpc	r25, r1
    15d8:	e9 f1       	breq	.+122    	; 0x1654 <DIO_u8SetPinDirection+0xe2>
    15da:	50 c0       	rjmp	.+160    	; 0x167c <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
    15dc:	aa e3       	ldi	r26, 0x3A	; 58
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ea e3       	ldi	r30, 0x3A	; 58
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_u8SetPinDirection+0x88>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_u8SetPinDirection+0x84>
    15fe:	84 2b       	or	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	bf c0       	rjmp	.+382    	; 0x1782 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
    1604:	a7 e3       	ldi	r26, 0x37	; 55
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e7 e3       	ldi	r30, 0x37	; 55
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_u8SetPinDirection+0xb0>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_u8SetPinDirection+0xac>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	ab c0       	rjmp	.+342    	; 0x1782 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
    162c:	a4 e3       	ldi	r26, 0x34	; 52
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e4 e3       	ldi	r30, 0x34	; 52
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_u8SetPinDirection+0xd8>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_u8SetPinDirection+0xd4>
    164e:	84 2b       	or	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	97 c0       	rjmp	.+302    	; 0x1782 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
    1654:	a1 e3       	ldi	r26, 0x31	; 49
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e1 e3       	ldi	r30, 0x31	; 49
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_u8SetPinDirection+0x100>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_u8SetPinDirection+0xfc>
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	83 c0       	rjmp	.+262    	; 0x1782 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	80 c0       	rjmp	.+256    	; 0x1782 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	88 23       	and	r24, r24
    1686:	09 f0       	breq	.+2      	; 0x168a <DIO_u8SetPinDirection+0x118>
    1688:	77 c0       	rjmp	.+238    	; 0x1778 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3e 83       	std	Y+6, r19	; 0x06
    1692:	2d 83       	std	Y+5, r18	; 0x05
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	59 f1       	breq	.+86     	; 0x16f4 <DIO_u8SetPinDirection+0x182>
    169e:	2d 81       	ldd	r18, Y+5	; 0x05
    16a0:	3e 81       	ldd	r19, Y+6	; 0x06
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <DIO_u8SetPinDirection+0x140>
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	69 f0       	breq	.+26     	; 0x16ca <DIO_u8SetPinDirection+0x158>
    16b0:	60 c0       	rjmp	.+192    	; 0x1772 <DIO_u8SetPinDirection+0x200>
    16b2:	2d 81       	ldd	r18, Y+5	; 0x05
    16b4:	3e 81       	ldd	r19, Y+6	; 0x06
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	89 f1       	breq	.+98     	; 0x171e <DIO_u8SetPinDirection+0x1ac>
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <DIO_u8SetPinDirection+0x156>
    16c6:	40 c0       	rjmp	.+128    	; 0x1748 <DIO_u8SetPinDirection+0x1d6>
    16c8:	54 c0       	rjmp	.+168    	; 0x1772 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
    16ca:	aa e3       	ldi	r26, 0x3A	; 58
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ea e3       	ldi	r30, 0x3A	; 58
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_u8SetPinDirection+0x176>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_u8SetPinDirection+0x172>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	47 c0       	rjmp	.+142    	; 0x1782 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
    16f4:	a7 e3       	ldi	r26, 0x37	; 55
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e7 e3       	ldi	r30, 0x37	; 55
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_u8SetPinDirection+0x1a0>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <DIO_u8SetPinDirection+0x19c>
    1716:	80 95       	com	r24
    1718:	84 23       	and	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	32 c0       	rjmp	.+100    	; 0x1782 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
    171e:	a4 e3       	ldi	r26, 0x34	; 52
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e4 e3       	ldi	r30, 0x34	; 52
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_u8SetPinDirection+0x1ca>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_u8SetPinDirection+0x1c6>
    1740:	80 95       	com	r24
    1742:	84 23       	and	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	1d c0       	rjmp	.+58     	; 0x1782 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    1748:	a1 e3       	ldi	r26, 0x31	; 49
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e1 e3       	ldi	r30, 0x31	; 49
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <DIO_u8SetPinDirection+0x1f4>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <DIO_u8SetPinDirection+0x1f0>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	08 c0       	rjmp	.+16     	; 0x1782 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    1782:	89 81       	ldd	r24, Y+1	; 0x01
}
    1784:	28 96       	adiw	r28, 0x08	; 8
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	28 97       	sbiw	r28, 0x08	; 8
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	8a 83       	std	Y+2, r24	; 0x02
    17ac:	6b 83       	std	Y+3, r22	; 0x03
    17ae:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    17b0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	88 30       	cpi	r24, 0x08	; 8
    17b6:	08 f0       	brcs	.+2      	; 0x17ba <DIO_u8SetPinValue+0x24>
    17b8:	f4 c0       	rjmp	.+488    	; 0x19a2 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	09 f0       	breq	.+2      	; 0x17c2 <DIO_u8SetPinValue+0x2c>
    17c0:	72 c0       	rjmp	.+228    	; 0x18a6 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	38 87       	std	Y+8, r19	; 0x08
    17ca:	2f 83       	std	Y+7, r18	; 0x07
    17cc:	8f 81       	ldd	r24, Y+7	; 0x07
    17ce:	98 85       	ldd	r25, Y+8	; 0x08
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	91 05       	cpc	r25, r1
    17d4:	49 f1       	breq	.+82     	; 0x1828 <DIO_u8SetPinValue+0x92>
    17d6:	2f 81       	ldd	r18, Y+7	; 0x07
    17d8:	38 85       	ldd	r19, Y+8	; 0x08
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	2c f4       	brge	.+10     	; 0x17ea <DIO_u8SetPinValue+0x54>
    17e0:	8f 81       	ldd	r24, Y+7	; 0x07
    17e2:	98 85       	ldd	r25, Y+8	; 0x08
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	61 f0       	breq	.+24     	; 0x1800 <DIO_u8SetPinValue+0x6a>
    17e8:	5b c0       	rjmp	.+182    	; 0x18a0 <DIO_u8SetPinValue+0x10a>
    17ea:	2f 81       	ldd	r18, Y+7	; 0x07
    17ec:	38 85       	ldd	r19, Y+8	; 0x08
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	71 f1       	breq	.+92     	; 0x1850 <DIO_u8SetPinValue+0xba>
    17f4:	8f 81       	ldd	r24, Y+7	; 0x07
    17f6:	98 85       	ldd	r25, Y+8	; 0x08
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	91 05       	cpc	r25, r1
    17fc:	e9 f1       	breq	.+122    	; 0x1878 <DIO_u8SetPinValue+0xe2>
    17fe:	50 c0       	rjmp	.+160    	; 0x18a0 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    1800:	ab e3       	ldi	r26, 0x3B	; 59
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 2e       	mov	r0, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <DIO_u8SetPinValue+0x88>
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	0a 94       	dec	r0
    1820:	e2 f7       	brpl	.-8      	; 0x181a <DIO_u8SetPinValue+0x84>
    1822:	84 2b       	or	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	bf c0       	rjmp	.+382    	; 0x19a6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    1828:	a8 e3       	ldi	r26, 0x38	; 56
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e8 e3       	ldi	r30, 0x38	; 56
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_u8SetPinValue+0xb0>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <DIO_u8SetPinValue+0xac>
    184a:	84 2b       	or	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	ab c0       	rjmp	.+342    	; 0x19a6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    1850:	a5 e3       	ldi	r26, 0x35	; 53
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e3       	ldi	r30, 0x35	; 53
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_u8SetPinValue+0xd8>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <DIO_u8SetPinValue+0xd4>
    1872:	84 2b       	or	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	97 c0       	rjmp	.+302    	; 0x19a6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    1878:	a2 e3       	ldi	r26, 0x32	; 50
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e2 e3       	ldi	r30, 0x32	; 50
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_u8SetPinValue+0x100>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_u8SetPinValue+0xfc>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	83 c0       	rjmp	.+262    	; 0x19a6 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	80 c0       	rjmp	.+256    	; 0x19a6 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	88 23       	and	r24, r24
    18aa:	09 f0       	breq	.+2      	; 0x18ae <DIO_u8SetPinValue+0x118>
    18ac:	77 c0       	rjmp	.+238    	; 0x199c <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3e 83       	std	Y+6, r19	; 0x06
    18b6:	2d 83       	std	Y+5, r18	; 0x05
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	59 f1       	breq	.+86     	; 0x1918 <DIO_u8SetPinValue+0x182>
    18c2:	2d 81       	ldd	r18, Y+5	; 0x05
    18c4:	3e 81       	ldd	r19, Y+6	; 0x06
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <DIO_u8SetPinValue+0x140>
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	69 f0       	breq	.+26     	; 0x18ee <DIO_u8SetPinValue+0x158>
    18d4:	60 c0       	rjmp	.+192    	; 0x1996 <DIO_u8SetPinValue+0x200>
    18d6:	2d 81       	ldd	r18, Y+5	; 0x05
    18d8:	3e 81       	ldd	r19, Y+6	; 0x06
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	89 f1       	breq	.+98     	; 0x1942 <DIO_u8SetPinValue+0x1ac>
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	9e 81       	ldd	r25, Y+6	; 0x06
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <DIO_u8SetPinValue+0x156>
    18ea:	40 c0       	rjmp	.+128    	; 0x196c <DIO_u8SetPinValue+0x1d6>
    18ec:	54 c0       	rjmp	.+168    	; 0x1996 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    18ee:	ab e3       	ldi	r26, 0x3B	; 59
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	eb e3       	ldi	r30, 0x3B	; 59
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_u8SetPinValue+0x176>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_u8SetPinValue+0x172>
    1910:	80 95       	com	r24
    1912:	84 23       	and	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	47 c0       	rjmp	.+142    	; 0x19a6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    1918:	a8 e3       	ldi	r26, 0x38	; 56
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e8 e3       	ldi	r30, 0x38	; 56
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_u8SetPinValue+0x1a0>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_u8SetPinValue+0x19c>
    193a:	80 95       	com	r24
    193c:	84 23       	and	r24, r20
    193e:	8c 93       	st	X, r24
    1940:	32 c0       	rjmp	.+100    	; 0x19a6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    1942:	a5 e3       	ldi	r26, 0x35	; 53
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e5 e3       	ldi	r30, 0x35	; 53
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_u8SetPinValue+0x1ca>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_u8SetPinValue+0x1c6>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	1d c0       	rjmp	.+58     	; 0x19a6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    196c:	a2 e3       	ldi	r26, 0x32	; 50
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e2 e3       	ldi	r30, 0x32	; 50
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_u8SetPinValue+0x1f4>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_u8SetPinValue+0x1f0>
    198e:	80 95       	com	r24
    1990:	84 23       	and	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	08 c0       	rjmp	.+16     	; 0x19a6 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a8:	28 96       	adiw	r28, 0x08	; 8
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <DIO_u8TogglePinValue+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <DIO_u8TogglePinValue+0x8>
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    19cc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 30       	cpi	r24, 0x08	; 8
    19d2:	08 f0       	brcs	.+2      	; 0x19d6 <DIO_u8TogglePinValue+0x1c>
    19d4:	72 c0       	rjmp	.+228    	; 0x1aba <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3d 83       	std	Y+5, r19	; 0x05
    19de:	2c 83       	std	Y+4, r18	; 0x04
    19e0:	8c 81       	ldd	r24, Y+4	; 0x04
    19e2:	9d 81       	ldd	r25, Y+5	; 0x05
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	49 f1       	breq	.+82     	; 0x1a3c <DIO_u8TogglePinValue+0x82>
    19ea:	2c 81       	ldd	r18, Y+4	; 0x04
    19ec:	3d 81       	ldd	r19, Y+5	; 0x05
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	2c f4       	brge	.+10     	; 0x19fe <DIO_u8TogglePinValue+0x44>
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	61 f0       	breq	.+24     	; 0x1a14 <DIO_u8TogglePinValue+0x5a>
    19fc:	5b c0       	rjmp	.+182    	; 0x1ab4 <DIO_u8TogglePinValue+0xfa>
    19fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1a00:	3d 81       	ldd	r19, Y+5	; 0x05
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	71 f1       	breq	.+92     	; 0x1a64 <DIO_u8TogglePinValue+0xaa>
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	91 05       	cpc	r25, r1
    1a10:	e9 f1       	breq	.+122    	; 0x1a8c <DIO_u8TogglePinValue+0xd2>
    1a12:	50 c0       	rjmp	.+160    	; 0x1ab4 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    1a14:	ab e3       	ldi	r26, 0x3B	; 59
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	eb e3       	ldi	r30, 0x3B	; 59
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_u8TogglePinValue+0x78>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <DIO_u8TogglePinValue+0x74>
    1a36:	84 27       	eor	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	41 c0       	rjmp	.+130    	; 0x1abe <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    1a3c:	a8 e3       	ldi	r26, 0x38	; 56
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e8 e3       	ldi	r30, 0x38	; 56
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_u8TogglePinValue+0xa0>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <DIO_u8TogglePinValue+0x9c>
    1a5e:	84 27       	eor	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	2d c0       	rjmp	.+90     	; 0x1abe <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    1a64:	a5 e3       	ldi	r26, 0x35	; 53
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e5 e3       	ldi	r30, 0x35	; 53
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_u8TogglePinValue+0xc8>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_u8TogglePinValue+0xc4>
    1a86:	84 27       	eor	r24, r20
    1a88:	8c 93       	st	X, r24
    1a8a:	19 c0       	rjmp	.+50     	; 0x1abe <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    1a8c:	a2 e3       	ldi	r26, 0x32	; 50
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e2 e3       	ldi	r30, 0x32	; 50
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <DIO_u8TogglePinValue+0xf0>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <DIO_u8TogglePinValue+0xec>
    1aae:	84 27       	eor	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	05 c0       	rjmp	.+10     	; 0x1abe <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	27 97       	sbiw	r28, 0x07	; 7
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    1ae6:	6b 83       	std	Y+3, r22	; 0x03
    1ae8:	5d 83       	std	Y+5, r21	; 0x05
    1aea:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1aec:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	88 30       	cpi	r24, 0x08	; 8
    1af2:	08 f0       	brcs	.+2      	; 0x1af6 <DIO_u8GetPinValue+0x26>
    1af4:	74 c0       	rjmp	.+232    	; 0x1bde <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	3f 83       	std	Y+7, r19	; 0x07
    1afe:	2e 83       	std	Y+6, r18	; 0x06
    1b00:	4e 81       	ldd	r20, Y+6	; 0x06
    1b02:	5f 81       	ldd	r21, Y+7	; 0x07
    1b04:	41 30       	cpi	r20, 0x01	; 1
    1b06:	51 05       	cpc	r21, r1
    1b08:	59 f1       	breq	.+86     	; 0x1b60 <DIO_u8GetPinValue+0x90>
    1b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	91 05       	cpc	r25, r1
    1b12:	34 f4       	brge	.+12     	; 0x1b20 <DIO_u8GetPinValue+0x50>
    1b14:	2e 81       	ldd	r18, Y+6	; 0x06
    1b16:	3f 81       	ldd	r19, Y+7	; 0x07
    1b18:	21 15       	cp	r18, r1
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	69 f0       	breq	.+26     	; 0x1b38 <DIO_u8GetPinValue+0x68>
    1b1e:	5c c0       	rjmp	.+184    	; 0x1bd8 <DIO_u8GetPinValue+0x108>
    1b20:	4e 81       	ldd	r20, Y+6	; 0x06
    1b22:	5f 81       	ldd	r21, Y+7	; 0x07
    1b24:	42 30       	cpi	r20, 0x02	; 2
    1b26:	51 05       	cpc	r21, r1
    1b28:	79 f1       	breq	.+94     	; 0x1b88 <DIO_u8GetPinValue+0xb8>
    1b2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2e:	83 30       	cpi	r24, 0x03	; 3
    1b30:	91 05       	cpc	r25, r1
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <DIO_u8GetPinValue+0x66>
    1b34:	3d c0       	rjmp	.+122    	; 0x1bb0 <DIO_u8GetPinValue+0xe0>
    1b36:	50 c0       	rjmp	.+160    	; 0x1bd8 <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    1b38:	e9 e3       	ldi	r30, 0x39	; 57
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a9 01       	movw	r20, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <DIO_u8GetPinValue+0x80>
    1b4c:	55 95       	asr	r21
    1b4e:	47 95       	ror	r20
    1b50:	8a 95       	dec	r24
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <DIO_u8GetPinValue+0x7c>
    1b54:	ca 01       	movw	r24, r20
    1b56:	81 70       	andi	r24, 0x01	; 1
    1b58:	ec 81       	ldd	r30, Y+4	; 0x04
    1b5a:	fd 81       	ldd	r31, Y+5	; 0x05
    1b5c:	80 83       	st	Z, r24
    1b5e:	41 c0       	rjmp	.+130    	; 0x1be2 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    1b60:	e6 e3       	ldi	r30, 0x36	; 54
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a9 01       	movw	r20, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <DIO_u8GetPinValue+0xa8>
    1b74:	55 95       	asr	r21
    1b76:	47 95       	ror	r20
    1b78:	8a 95       	dec	r24
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <DIO_u8GetPinValue+0xa4>
    1b7c:	ca 01       	movw	r24, r20
    1b7e:	81 70       	andi	r24, 0x01	; 1
    1b80:	ec 81       	ldd	r30, Y+4	; 0x04
    1b82:	fd 81       	ldd	r31, Y+5	; 0x05
    1b84:	80 83       	st	Z, r24
    1b86:	2d c0       	rjmp	.+90     	; 0x1be2 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    1b88:	e3 e3       	ldi	r30, 0x33	; 51
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a9 01       	movw	r20, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <DIO_u8GetPinValue+0xd0>
    1b9c:	55 95       	asr	r21
    1b9e:	47 95       	ror	r20
    1ba0:	8a 95       	dec	r24
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <DIO_u8GetPinValue+0xcc>
    1ba4:	ca 01       	movw	r24, r20
    1ba6:	81 70       	andi	r24, 0x01	; 1
    1ba8:	ec 81       	ldd	r30, Y+4	; 0x04
    1baa:	fd 81       	ldd	r31, Y+5	; 0x05
    1bac:	80 83       	st	Z, r24
    1bae:	19 c0       	rjmp	.+50     	; 0x1be2 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    1bb0:	e0 e3       	ldi	r30, 0x30	; 48
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a9 01       	movw	r20, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_u8GetPinValue+0xf8>
    1bc4:	55 95       	asr	r21
    1bc6:	47 95       	ror	r20
    1bc8:	8a 95       	dec	r24
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_u8GetPinValue+0xf4>
    1bcc:	ca 01       	movw	r24, r20
    1bce:	81 70       	andi	r24, 0x01	; 1
    1bd0:	ec 81       	ldd	r30, Y+4	; 0x04
    1bd2:	fd 81       	ldd	r31, Y+5	; 0x05
    1bd4:	80 83       	st	Z, r24
    1bd6:	05 c0       	rjmp	.+10     	; 0x1be2 <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be4:	27 96       	adiw	r28, 0x07	; 7
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <DIO_u8SetPortDirection+0x6>
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <DIO_u8SetPortDirection+0x8>
    1bfe:	0f 92       	push	r0
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1c08:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	3d 83       	std	Y+5, r19	; 0x05
    1c12:	2c 83       	std	Y+4, r18	; 0x04
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	d1 f0       	breq	.+52     	; 0x1c52 <DIO_u8SetPortDirection+0x5c>
    1c1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c20:	3d 81       	ldd	r19, Y+5	; 0x05
    1c22:	22 30       	cpi	r18, 0x02	; 2
    1c24:	31 05       	cpc	r19, r1
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <DIO_u8SetPortDirection+0x3c>
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	61 f0       	breq	.+24     	; 0x1c48 <DIO_u8SetPortDirection+0x52>
    1c30:	1f c0       	rjmp	.+62     	; 0x1c70 <DIO_u8SetPortDirection+0x7a>
    1c32:	2c 81       	ldd	r18, Y+4	; 0x04
    1c34:	3d 81       	ldd	r19, Y+5	; 0x05
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	81 f0       	breq	.+32     	; 0x1c5c <DIO_u8SetPortDirection+0x66>
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	91 05       	cpc	r25, r1
    1c44:	81 f0       	breq	.+32     	; 0x1c66 <DIO_u8SetPortDirection+0x70>
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    1c48:	ea e3       	ldi	r30, 0x3A	; 58
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	80 83       	st	Z, r24
    1c50:	11 c0       	rjmp	.+34     	; 0x1c74 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    1c52:	e7 e3       	ldi	r30, 0x37	; 55
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	80 83       	st	Z, r24
    1c5a:	0c c0       	rjmp	.+24     	; 0x1c74 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    1c5c:	e4 e3       	ldi	r30, 0x34	; 52
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	80 83       	st	Z, r24
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    1c66:	e1 e3       	ldi	r30, 0x31	; 49
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	80 83       	st	Z, r24
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <DIO_u8SetPortValue+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <DIO_u8SetPortValue+0x8>
    1c8e:	0f 92       	push	r0
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	8a 83       	std	Y+2, r24	; 0x02
    1c96:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1c98:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	3d 83       	std	Y+5, r19	; 0x05
    1ca2:	2c 83       	std	Y+4, r18	; 0x04
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	91 05       	cpc	r25, r1
    1cac:	d1 f0       	breq	.+52     	; 0x1ce2 <DIO_u8SetPortValue+0x5c>
    1cae:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <DIO_u8SetPortValue+0x3c>
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	61 f0       	breq	.+24     	; 0x1cd8 <DIO_u8SetPortValue+0x52>
    1cc0:	1f c0       	rjmp	.+62     	; 0x1d00 <DIO_u8SetPortValue+0x7a>
    1cc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	81 f0       	breq	.+32     	; 0x1cec <DIO_u8SetPortValue+0x66>
    1ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cce:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd0:	83 30       	cpi	r24, 0x03	; 3
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	81 f0       	breq	.+32     	; 0x1cf6 <DIO_u8SetPortValue+0x70>
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    1cd8:	eb e3       	ldi	r30, 0x3B	; 59
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	80 83       	st	Z, r24
    1ce0:	11 c0       	rjmp	.+34     	; 0x1d04 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    1ce2:	e8 e3       	ldi	r30, 0x38	; 56
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	80 83       	st	Z, r24
    1cea:	0c c0       	rjmp	.+24     	; 0x1d04 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    1cec:	e5 e3       	ldi	r30, 0x35	; 53
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	80 83       	st	Z, r24
    1cf4:	07 c0       	rjmp	.+14     	; 0x1d04 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    1cf6:	e2 e3       	ldi	r30, 0x32	; 50
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	80 83       	st	Z, r24
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"


uint8 KEYPAD_u8GetPressedKey(void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <KEYPAD_u8GetPressedKey+0x6>
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <KEYPAD_u8GetPressedKey+0x8>
    1d1e:	0f 92       	push	r0
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8ColumnCounter;
	uint8 Local_u8RowCounter;
	uint8 Local_u8KeyState;
	uint8 Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	89 83       	std	Y+1, r24	; 0x01
	static uint8 Local_u8ColumnArr[KEYPAD_u8COLUMN_NUM] = {KEYPAD_u8COLUMN1_PIN, KEYPAD_u8COLUMN2_PIN, KEYPAD_u8COLUMN3_PIN, KEYPAD_u8COLUMN4_PIN};
	static uint8 Local_u8RowArr[KEYPAD_u8ROW_NUM] = {KEYPAD_u8ROW1_PIN, KEYPAD_u8ROW2_PIN, KEYPAD_u8ROW3_PIN, KEYPAD_u8ROW4_PIN};
	static uint8 Local_u8KeypadArr[KEYPAD_u8ROW_NUM][KEYPAD_u8COLUMN_NUM] = KEYPAD_u8BUTTON_ARR;

	/*Activate column pins and read the rows*/
	for(Local_u8ColumnCounter = 0; Local_u8ColumnCounter < KEYPAD_u8COLUMN_NUM; Local_u8ColumnCounter++)
    1d28:	1b 82       	std	Y+3, r1	; 0x03
    1d2a:	6a c0       	rjmp	.+212    	; 0x1e00 <KEYPAD_u8GetPressedKey+0xea>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_LOW);
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	fc 01       	movw	r30, r24
    1d34:	ec 51       	subi	r30, 0x1C	; 28
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	90 81       	ld	r25, Z
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	69 2f       	mov	r22, r25
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>

		/*Get values of rows and check for signals from them*/
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KEYPAD_u8ROW_NUM; Local_u8RowCounter++)
    1d44:	1a 82       	std	Y+2, r1	; 0x02
    1d46:	49 c0       	rjmp	.+146    	; 0x1dda <KEYPAD_u8GetPressedKey+0xc4>
		{
			/*Get the value of the current row*/
			DIO_u8GetPinValue(KEYPAD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	fc 01       	movw	r30, r24
    1d50:	e0 52       	subi	r30, 0x20	; 32
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	90 81       	ld	r25, Z
    1d56:	9e 01       	movw	r18, r28
    1d58:	2c 5f       	subi	r18, 0xFC	; 252
    1d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	69 2f       	mov	r22, r25
    1d60:	a9 01       	movw	r20, r18
    1d62:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <DIO_u8GetPinValue>

			/*If the current row is low, then button is pressed*/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	88 23       	and	r24, r24
    1d6a:	a1 f5       	brne	.+104    	; 0x1dd4 <KEYPAD_u8GetPressedKey+0xbe>
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <KEYPAD_u8GetPressedKey+0x76>
			{
				/*Wait until the key is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KEYPAD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	fc 01       	movw	r30, r24
    1d76:	e0 52       	subi	r30, 0x20	; 32
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	90 81       	ld	r25, Z
    1d7c:	9e 01       	movw	r18, r28
    1d7e:	2c 5f       	subi	r18, 0xFC	; 252
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	69 2f       	mov	r22, r25
    1d86:	a9 01       	movw	r20, r18
    1d88:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <DIO_u8GetPinValue>

			/*If the current row is low, then button is pressed*/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
			{
				/*Wait until the key is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	88 23       	and	r24, r24
    1d90:	71 f3       	breq	.-36     	; 0x1d6e <KEYPAD_u8GetPressedKey+0x58>
				{
					DIO_u8GetPinValue(KEYPAD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
				}

				/*Return the corresponding value of the key from the buttons array*/
				Local_u8PressedKey = Local_u8KeypadArr[Local_u8RowCounter][Local_u8ColumnCounter];
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	48 2f       	mov	r20, r24
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	ca 01       	movw	r24, r20
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	fc 01       	movw	r30, r24
    1dae:	e0 53       	subi	r30, 0x30	; 48
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	89 83       	std	Y+1, r24	; 0x01

				/*Deactivate the current column*/
				DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_HIGH);
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	ec 51       	subi	r30, 0x1C	; 28
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	90 81       	ld	r25, Z
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	69 2f       	mov	r22, r25
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>

				/*Return the pressed key*/
				return Local_u8PressedKey;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	1c c0       	rjmp	.+56     	; 0x1e0c <KEYPAD_u8GetPressedKey+0xf6>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_LOW);

		/*Get values of rows and check for signals from them*/
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KEYPAD_u8ROW_NUM; Local_u8RowCounter++)
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	8f 5f       	subi	r24, 0xFF	; 255
    1dd8:	8a 83       	std	Y+2, r24	; 0x02
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	84 30       	cpi	r24, 0x04	; 4
    1dde:	08 f4       	brcc	.+2      	; 0x1de2 <KEYPAD_u8GetPressedKey+0xcc>
    1de0:	b3 cf       	rjmp	.-154    	; 0x1d48 <KEYPAD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_HIGH);
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	fc 01       	movw	r30, r24
    1dea:	ec 51       	subi	r30, 0x1C	; 28
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	90 81       	ld	r25, Z
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	69 2f       	mov	r22, r25
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
	static uint8 Local_u8ColumnArr[KEYPAD_u8COLUMN_NUM] = {KEYPAD_u8COLUMN1_PIN, KEYPAD_u8COLUMN2_PIN, KEYPAD_u8COLUMN3_PIN, KEYPAD_u8COLUMN4_PIN};
	static uint8 Local_u8RowArr[KEYPAD_u8ROW_NUM] = {KEYPAD_u8ROW1_PIN, KEYPAD_u8ROW2_PIN, KEYPAD_u8ROW3_PIN, KEYPAD_u8ROW4_PIN};
	static uint8 Local_u8KeypadArr[KEYPAD_u8ROW_NUM][KEYPAD_u8COLUMN_NUM] = KEYPAD_u8BUTTON_ARR;

	/*Activate column pins and read the rows*/
	for(Local_u8ColumnCounter = 0; Local_u8ColumnCounter < KEYPAD_u8COLUMN_NUM; Local_u8ColumnCounter++)
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	8f 5f       	subi	r24, 0xFF	; 255
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	84 30       	cpi	r24, 0x04	; 4
    1e04:	08 f4       	brcc	.+2      	; 0x1e08 <KEYPAD_u8GetPressedKey+0xf2>
    1e06:	92 cf       	rjmp	.-220    	; 0x1d2c <KEYPAD_u8GetPressedKey+0x16>
		/*Deactivate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_HIGH);
	}

	/*Return that is no pressed key*/
	return Local_u8PressedKey;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <LDR_u8GetAnalogVolt>:
 * @param Copy_u8ADCChannel The ADC Channel to which the sensor is attached.
 * @param Copy_pu16AnalogVolt A pointer to return The analog voltage in milli volt.
 * @return Error State.
 */
uint8 LDR_u8GetAnalogVolt(uint8 Copy_u8ADCChannel, uint16 *Copy_pu16AnalogVolt)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	2a 97       	sbiw	r28, 0x0a	; 10
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	8e 83       	std	Y+6, r24	; 0x06
    1e34:	78 87       	std	Y+8, r23	; 0x08
    1e36:	6f 83       	std	Y+7, r22	; 0x07
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    1e38:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u16Voltage = 0;
    1e3a:	1a 82       	std	Y+2, r1	; 0x02
    1e3c:	19 82       	std	Y+1, r1	; 0x01
	uint16 Local_u16ADCReading = 0;
    1e3e:	1d 82       	std	Y+5, r1	; 0x05
    1e40:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer passed by the user*/
	if(Copy_pu16AnalogVolt != NULL)
    1e42:	8f 81       	ldd	r24, Y+7	; 0x07
    1e44:	98 85       	ldd	r25, Y+8	; 0x08
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <LDR_u8GetAnalogVolt+0x2e>
    1e4a:	8e c0       	rjmp	.+284    	; 0x1f68 <LDR_u8GetAnalogVolt+0x14a>
	{
		/*Get the reading from ADC*/
		switch(Copy_u8ADCChannel)
    1e4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	3a 87       	std	Y+10, r19	; 0x0a
    1e54:	29 87       	std	Y+9, r18	; 0x09
    1e56:	89 85       	ldd	r24, Y+9	; 0x09
    1e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <LDR_u8GetAnalogVolt+0x44>
    1e60:	41 c0       	rjmp	.+130    	; 0x1ee4 <LDR_u8GetAnalogVolt+0xc6>
    1e62:	29 85       	ldd	r18, Y+9	; 0x09
    1e64:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e66:	24 30       	cpi	r18, 0x04	; 4
    1e68:	31 05       	cpc	r19, r1
    1e6a:	7c f4       	brge	.+30     	; 0x1e8a <LDR_u8GetAnalogVolt+0x6c>
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	91 05       	cpc	r25, r1
    1e74:	39 f1       	breq	.+78     	; 0x1ec4 <LDR_u8GetAnalogVolt+0xa6>
    1e76:	29 85       	ldd	r18, Y+9	; 0x09
    1e78:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e7a:	22 30       	cpi	r18, 0x02	; 2
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	54 f5       	brge	.+84     	; 0x1ed4 <LDR_u8GetAnalogVolt+0xb6>
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	b1 f0       	breq	.+44     	; 0x1eb4 <LDR_u8GetAnalogVolt+0x96>
    1e88:	55 c0       	rjmp	.+170    	; 0x1f34 <LDR_u8GetAnalogVolt+0x116>
    1e8a:	29 85       	ldd	r18, Y+9	; 0x09
    1e8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e8e:	25 30       	cpi	r18, 0x05	; 5
    1e90:	31 05       	cpc	r19, r1
    1e92:	c1 f1       	breq	.+112    	; 0x1f04 <LDR_u8GetAnalogVolt+0xe6>
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	85 30       	cpi	r24, 0x05	; 5
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	5c f1       	brlt	.+86     	; 0x1ef4 <LDR_u8GetAnalogVolt+0xd6>
    1e9e:	29 85       	ldd	r18, Y+9	; 0x09
    1ea0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ea2:	26 30       	cpi	r18, 0x06	; 6
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	b1 f1       	breq	.+108    	; 0x1f14 <LDR_u8GetAnalogVolt+0xf6>
    1ea8:	89 85       	ldd	r24, Y+9	; 0x09
    1eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eac:	87 30       	cpi	r24, 0x07	; 7
    1eae:	91 05       	cpc	r25, r1
    1eb0:	c9 f1       	breq	.+114    	; 0x1f24 <LDR_u8GetAnalogVolt+0x106>
    1eb2:	40 c0       	rjmp	.+128    	; 0x1f34 <LDR_u8GetAnalogVolt+0x116>
		{
		case LDR_u8ADC_CH0: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH0, &Local_u16ADCReading);	break;
    1eb4:	9e 01       	movw	r18, r28
    1eb6:	2c 5f       	subi	r18, 0xFC	; 252
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	b9 01       	movw	r22, r18
    1ebe:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    1ec2:	3a c0       	rjmp	.+116    	; 0x1f38 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH1: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH1, &Local_u16ADCReading);	break;
    1ec4:	9e 01       	movw	r18, r28
    1ec6:	2c 5f       	subi	r18, 0xFC	; 252
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	b9 01       	movw	r22, r18
    1ece:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    1ed2:	32 c0       	rjmp	.+100    	; 0x1f38 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH2: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH2, &Local_u16ADCReading);	break;
    1ed4:	9e 01       	movw	r18, r28
    1ed6:	2c 5f       	subi	r18, 0xFC	; 252
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	b9 01       	movw	r22, r18
    1ede:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    1ee2:	2a c0       	rjmp	.+84     	; 0x1f38 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH3: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH3, &Local_u16ADCReading);	break;
    1ee4:	9e 01       	movw	r18, r28
    1ee6:	2c 5f       	subi	r18, 0xFC	; 252
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	b9 01       	movw	r22, r18
    1eee:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    1ef2:	22 c0       	rjmp	.+68     	; 0x1f38 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH4: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH4, &Local_u16ADCReading);	break;
    1ef4:	9e 01       	movw	r18, r28
    1ef6:	2c 5f       	subi	r18, 0xFC	; 252
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	84 e0       	ldi	r24, 0x04	; 4
    1efc:	b9 01       	movw	r22, r18
    1efe:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    1f02:	1a c0       	rjmp	.+52     	; 0x1f38 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH5: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH5, &Local_u16ADCReading);	break;
    1f04:	9e 01       	movw	r18, r28
    1f06:	2c 5f       	subi	r18, 0xFC	; 252
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	85 e0       	ldi	r24, 0x05	; 5
    1f0c:	b9 01       	movw	r22, r18
    1f0e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    1f12:	12 c0       	rjmp	.+36     	; 0x1f38 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH6: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH6, &Local_u16ADCReading);	break;
    1f14:	9e 01       	movw	r18, r28
    1f16:	2c 5f       	subi	r18, 0xFC	; 252
    1f18:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1a:	86 e0       	ldi	r24, 0x06	; 6
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    1f22:	0a c0       	rjmp	.+20     	; 0x1f38 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH7: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH7, &Local_u16ADCReading);	break;
    1f24:	9e 01       	movw	r18, r28
    1f26:	2c 5f       	subi	r18, 0xFC	; 252
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	87 e0       	ldi	r24, 0x07	; 7
    1f2c:	b9 01       	movw	r22, r18
    1f2e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <LDR_u8GetAnalogVolt+0x11a>
		default: Local_u8ErrorState = NOK;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	8b 83       	std	Y+3, r24	; 0x03
		}

		/*Calculate the voltage and return it to the user*/
#if LDR_u8ADC_RESOLUTION == LDR_u8ADC_8BITS_RES
		*Copy_pu16AnalogVolt = (uint16) (((uint32) Local_u16ADCReading * LDR_u8ADC_REF_VOLT * 1000UL) / 256UL);
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	cc 01       	movw	r24, r24
    1f3e:	a0 e0       	ldi	r26, 0x00	; 0
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	28 e8       	ldi	r18, 0x88	; 136
    1f44:	33 e1       	ldi	r19, 0x13	; 19
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__mulsi3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	89 2f       	mov	r24, r25
    1f58:	9a 2f       	mov	r25, r26
    1f5a:	ab 2f       	mov	r26, r27
    1f5c:	bb 27       	eor	r27, r27
    1f5e:	ef 81       	ldd	r30, Y+7	; 0x07
    1f60:	f8 85       	ldd	r31, Y+8	; 0x08
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <LDR_u8GetAnalogVolt+0x14e>
#endif

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f6e:	2a 96       	adiw	r28, 0x0a	; 10
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <LDR_u8GetResistance>:
 * @param Copy_u16SourceVoltage The source voltage which support the LDR with power in milli volt.
 * @param Copy_u16KnownResistance The resistance which participate in the voltage divider circuit in ohm.
 * @return Error State.
 */
uint8 LDR_u8GetResistance(uint8 Copy_u8ADCChannel, uint16 Copy_u16SourceVoltage, uint16 Copy_u16KnownResistance, uint32 *Copy_pu32LDRResistance)
{
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	2e 97       	sbiw	r28, 0x0e	; 14
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	88 87       	std	Y+8, r24	; 0x08
    1f9e:	7a 87       	std	Y+10, r23	; 0x0a
    1fa0:	69 87       	std	Y+9, r22	; 0x09
    1fa2:	5c 87       	std	Y+12, r21	; 0x0c
    1fa4:	4b 87       	std	Y+11, r20	; 0x0b
    1fa6:	3e 87       	std	Y+14, r19	; 0x0e
    1fa8:	2d 87       	std	Y+13, r18	; 0x0d
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    1faa:	1d 82       	std	Y+5, r1	; 0x05
	uint16 Local_u16Voltage = 0;
    1fac:	1f 82       	std	Y+7, r1	; 0x07
    1fae:	1e 82       	std	Y+6, r1	; 0x06
	uint32 Local_u32Resistance = 0;
    1fb0:	19 82       	std	Y+1, r1	; 0x01
    1fb2:	1a 82       	std	Y+2, r1	; 0x02
    1fb4:	1b 82       	std	Y+3, r1	; 0x03
    1fb6:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer passed by the user*/
	if(Copy_pu32LDRResistance != NULL)
    1fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <LDR_u8GetResistance+0x42>
    1fc0:	64 c0       	rjmp	.+200    	; 0x208a <LDR_u8GetResistance+0x10a>
	{
		/*Get the voltage out from the LDR sensor*/
		LDR_u8GetAnalogVolt(Copy_u8ADCChannel, &Local_u16Voltage);
    1fc2:	9e 01       	movw	r18, r28
    1fc4:	2a 5f       	subi	r18, 0xFA	; 250
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	88 85       	ldd	r24, Y+8	; 0x08
    1fca:	b9 01       	movw	r22, r18
    1fcc:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LDR_u8GetAnalogVolt>

		/*Calculate the resistance*/
		Local_u32Resistance = ((uint32) Copy_u16SourceVoltage / 10UL) * ((uint32) Copy_u16KnownResistance / 10UL);
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	2a e0       	ldi	r18, 0x0A	; 10
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	b9 01       	movw	r22, r18
    1fda:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__udivmodhi4>
    1fde:	cb 01       	movw	r24, r22
    1fe0:	7c 01       	movw	r14, r24
    1fe2:	00 e0       	ldi	r16, 0x00	; 0
    1fe4:	10 e0       	ldi	r17, 0x00	; 0
    1fe6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fe8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fea:	2a e0       	ldi	r18, 0x0A	; 10
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	b9 01       	movw	r22, r18
    1ff0:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__udivmodhi4>
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9c 01       	movw	r18, r24
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	c8 01       	movw	r24, r16
    1ffe:	b7 01       	movw	r22, r14
    2000:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__mulsi3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	9a 83       	std	Y+2, r25	; 0x02
    200c:	ab 83       	std	Y+3, r26	; 0x03
    200e:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32Resistance = Local_u32Resistance / (uint32) Local_u16Voltage;
    2010:	8e 81       	ldd	r24, Y+6	; 0x06
    2012:	9f 81       	ldd	r25, Y+7	; 0x07
    2014:	9c 01       	movw	r18, r24
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	9a 81       	ldd	r25, Y+2	; 0x02
    201e:	ab 81       	ldd	r26, Y+3	; 0x03
    2020:	bc 81       	ldd	r27, Y+4	; 0x04
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__udivmodsi4>
    202a:	da 01       	movw	r26, r20
    202c:	c9 01       	movw	r24, r18
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	ab 83       	std	Y+3, r26	; 0x03
    2034:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32Resistance = (Local_u32Resistance * 100UL) - (uint32) Copy_u16KnownResistance;
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	ab 81       	ldd	r26, Y+3	; 0x03
    203c:	bc 81       	ldd	r27, Y+4	; 0x04
    203e:	24 e6       	ldi	r18, 0x64	; 100
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__mulsi3>
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	8b 85       	ldd	r24, Y+11	; 0x0b
    2054:	9c 85       	ldd	r25, Y+12	; 0x0c
    2056:	cc 01       	movw	r24, r24
    2058:	a0 e0       	ldi	r26, 0x00	; 0
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	79 01       	movw	r14, r18
    205e:	8a 01       	movw	r16, r20
    2060:	e8 1a       	sub	r14, r24
    2062:	f9 0a       	sbc	r15, r25
    2064:	0a 0b       	sbc	r16, r26
    2066:	1b 0b       	sbc	r17, r27
    2068:	d8 01       	movw	r26, r16
    206a:	c7 01       	movw	r24, r14
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	ab 83       	std	Y+3, r26	; 0x03
    2072:	bc 83       	std	Y+4, r27	; 0x04
		*Copy_pu32LDRResistance = Local_u32Resistance;
    2074:	ed 85       	ldd	r30, Y+13	; 0x0d
    2076:	fe 85       	ldd	r31, Y+14	; 0x0e
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	ab 81       	ldd	r26, Y+3	; 0x03
    207e:	bc 81       	ldd	r27, Y+4	; 0x04
    2080:	80 83       	st	Z, r24
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	a2 83       	std	Z+2, r26	; 0x02
    2086:	b3 83       	std	Z+3, r27	; 0x03
    2088:	02 c0       	rjmp	.+4      	; 0x208e <LDR_u8GetResistance+0x10e>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2090:	2e 96       	adiw	r28, 0x0e	; 14
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
    20a8:	08 95       	ret

000020aa <LIBRARY_s32Mapping>:
 * @param Copy_s32InputValue	Input value.
 * @return	Output Value
 */
sint32 LIBRARY_s32Mapping(sint32 Copy_s32InputRangeMin, sint32 Copy_s32InputRangeMax,
		sint32 Copy_s32OutputRangeMin, sint32 Copy_s32OutputRangeMax, sint32 Copy_s32InputValue)
{
    20aa:	af 92       	push	r10
    20ac:	bf 92       	push	r11
    20ae:	cf 92       	push	r12
    20b0:	df 92       	push	r13
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	64 97       	sbiw	r28, 0x14	; 20
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	6d 83       	std	Y+5, r22	; 0x05
    20d0:	7e 83       	std	Y+6, r23	; 0x06
    20d2:	8f 83       	std	Y+7, r24	; 0x07
    20d4:	98 87       	std	Y+8, r25	; 0x08
    20d6:	29 87       	std	Y+9, r18	; 0x09
    20d8:	3a 87       	std	Y+10, r19	; 0x0a
    20da:	4b 87       	std	Y+11, r20	; 0x0b
    20dc:	5c 87       	std	Y+12, r21	; 0x0c
    20de:	ed 86       	std	Y+13, r14	; 0x0d
    20e0:	fe 86       	std	Y+14, r15	; 0x0e
    20e2:	0f 87       	std	Y+15, r16	; 0x0f
    20e4:	18 8b       	std	Y+16, r17	; 0x10
    20e6:	a9 8a       	std	Y+17, r10	; 0x11
    20e8:	ba 8a       	std	Y+18, r11	; 0x12
    20ea:	cb 8a       	std	Y+19, r12	; 0x13
    20ec:	dc 8a       	std	Y+20, r13	; 0x14
	/*Define Variables*/
	sint32 Local_s32OutputValue = 0;
    20ee:	19 82       	std	Y+1, r1	; 0x01
    20f0:	1a 82       	std	Y+2, r1	; 0x02
    20f2:	1b 82       	std	Y+3, r1	; 0x03
    20f4:	1c 82       	std	Y+4, r1	; 0x04

	/*Calculate the output value*/
	Local_s32OutputValue = (Copy_s32OutputRangeMax - Copy_s32OutputRangeMin) * (Copy_s32InputValue - Copy_s32InputRangeMin);
    20f6:	29 89       	ldd	r18, Y+17	; 0x11
    20f8:	3a 89       	ldd	r19, Y+18	; 0x12
    20fa:	4b 89       	ldd	r20, Y+19	; 0x13
    20fc:	5c 89       	ldd	r21, Y+20	; 0x14
    20fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2100:	9e 85       	ldd	r25, Y+14	; 0x0e
    2102:	af 85       	ldd	r26, Y+15	; 0x0f
    2104:	b8 89       	ldd	r27, Y+16	; 0x10
    2106:	79 01       	movw	r14, r18
    2108:	8a 01       	movw	r16, r20
    210a:	e8 1a       	sub	r14, r24
    210c:	f9 0a       	sbc	r15, r25
    210e:	0a 0b       	sbc	r16, r26
    2110:	1b 0b       	sbc	r17, r27
    2112:	29 a1       	ldd	r18, Y+33	; 0x21
    2114:	3a a1       	ldd	r19, Y+34	; 0x22
    2116:	4b a1       	ldd	r20, Y+35	; 0x23
    2118:	5c a1       	ldd	r21, Y+36	; 0x24
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	af 81       	ldd	r26, Y+7	; 0x07
    2120:	b8 85       	ldd	r27, Y+8	; 0x08
    2122:	28 1b       	sub	r18, r24
    2124:	39 0b       	sbc	r19, r25
    2126:	4a 0b       	sbc	r20, r26
    2128:	5b 0b       	sbc	r21, r27
    212a:	c8 01       	movw	r24, r16
    212c:	b7 01       	movw	r22, r14
    212e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__mulsi3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	ab 83       	std	Y+3, r26	; 0x03
    213c:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue / (Copy_s32InputRangeMax - Copy_s32InputRangeMin);
    213e:	29 85       	ldd	r18, Y+9	; 0x09
    2140:	3a 85       	ldd	r19, Y+10	; 0x0a
    2142:	4b 85       	ldd	r20, Y+11	; 0x0b
    2144:	5c 85       	ldd	r21, Y+12	; 0x0c
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	af 81       	ldd	r26, Y+7	; 0x07
    214c:	b8 85       	ldd	r27, Y+8	; 0x08
    214e:	28 1b       	sub	r18, r24
    2150:	39 0b       	sbc	r19, r25
    2152:	4a 0b       	sbc	r20, r26
    2154:	5b 0b       	sbc	r21, r27
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	9a 81       	ldd	r25, Y+2	; 0x02
    215a:	ab 81       	ldd	r26, Y+3	; 0x03
    215c:	bc 81       	ldd	r27, Y+4	; 0x04
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 9f 1a 	call	0x353e	; 0x353e <__divmodsi4>
    2166:	da 01       	movw	r26, r20
    2168:	c9 01       	movw	r24, r18
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	ab 83       	std	Y+3, r26	; 0x03
    2170:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue + Copy_s32OutputRangeMin;
    2172:	29 81       	ldd	r18, Y+1	; 0x01
    2174:	3a 81       	ldd	r19, Y+2	; 0x02
    2176:	4b 81       	ldd	r20, Y+3	; 0x03
    2178:	5c 81       	ldd	r21, Y+4	; 0x04
    217a:	8d 85       	ldd	r24, Y+13	; 0x0d
    217c:	9e 85       	ldd	r25, Y+14	; 0x0e
    217e:	af 85       	ldd	r26, Y+15	; 0x0f
    2180:	b8 89       	ldd	r27, Y+16	; 0x10
    2182:	82 0f       	add	r24, r18
    2184:	93 1f       	adc	r25, r19
    2186:	a4 1f       	adc	r26, r20
    2188:	b5 1f       	adc	r27, r21
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	ab 83       	std	Y+3, r26	; 0x03
    2190:	bc 83       	std	Y+4, r27	; 0x04

	return Local_s32OutputValue;
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	ab 81       	ldd	r26, Y+3	; 0x03
    2198:	bc 81       	ldd	r27, Y+4	; 0x04
}
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	64 96       	adiw	r28, 0x14	; 20
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	cf 90       	pop	r12
    21ba:	bf 90       	pop	r11
    21bc:	af 90       	pop	r10
    21be:	08 95       	ret

000021c0 <LM35_u8GetTemp>:
 * @param Copy_u8ADCChannel The ADC Channel to which the sensor is attached.
 * @param Copy_pu8Temp A pointer to return The temperature in celsius degrees.
 * @return Error State.
 */
uint8 LM35_u8GetTemp(uint8 Copy_u8ADCChannel, uint8 *Copy_pu8Temp)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	2a 97       	sbiw	r28, 0x0a	; 10
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	8e 83       	std	Y+6, r24	; 0x06
    21d6:	78 87       	std	Y+8, r23	; 0x08
    21d8:	6f 83       	std	Y+7, r22	; 0x07
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    21da:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u16Voltage = 0;
    21dc:	1a 82       	std	Y+2, r1	; 0x02
    21de:	19 82       	std	Y+1, r1	; 0x01
	uint16 Local_u16ADCReading = 0;
    21e0:	1d 82       	std	Y+5, r1	; 0x05
    21e2:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer passed by the user*/
	if(Copy_pu8Temp != NULL)
    21e4:	8f 81       	ldd	r24, Y+7	; 0x07
    21e6:	98 85       	ldd	r25, Y+8	; 0x08
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	09 f4       	brne	.+2      	; 0x21ee <LM35_u8GetTemp+0x2e>
    21ec:	97 c0       	rjmp	.+302    	; 0x231c <LM35_u8GetTemp+0x15c>
	{
		/*Get the reading from ADC*/
		switch(Copy_u8ADCChannel)
    21ee:	8e 81       	ldd	r24, Y+6	; 0x06
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	3a 87       	std	Y+10, r19	; 0x0a
    21f6:	29 87       	std	Y+9, r18	; 0x09
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	83 30       	cpi	r24, 0x03	; 3
    21fe:	91 05       	cpc	r25, r1
    2200:	09 f4       	brne	.+2      	; 0x2204 <LM35_u8GetTemp+0x44>
    2202:	41 c0       	rjmp	.+130    	; 0x2286 <LM35_u8GetTemp+0xc6>
    2204:	29 85       	ldd	r18, Y+9	; 0x09
    2206:	3a 85       	ldd	r19, Y+10	; 0x0a
    2208:	24 30       	cpi	r18, 0x04	; 4
    220a:	31 05       	cpc	r19, r1
    220c:	7c f4       	brge	.+30     	; 0x222c <LM35_u8GetTemp+0x6c>
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	91 05       	cpc	r25, r1
    2216:	39 f1       	breq	.+78     	; 0x2266 <LM35_u8GetTemp+0xa6>
    2218:	29 85       	ldd	r18, Y+9	; 0x09
    221a:	3a 85       	ldd	r19, Y+10	; 0x0a
    221c:	22 30       	cpi	r18, 0x02	; 2
    221e:	31 05       	cpc	r19, r1
    2220:	54 f5       	brge	.+84     	; 0x2276 <LM35_u8GetTemp+0xb6>
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	b1 f0       	breq	.+44     	; 0x2256 <LM35_u8GetTemp+0x96>
    222a:	55 c0       	rjmp	.+170    	; 0x22d6 <LM35_u8GetTemp+0x116>
    222c:	29 85       	ldd	r18, Y+9	; 0x09
    222e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2230:	25 30       	cpi	r18, 0x05	; 5
    2232:	31 05       	cpc	r19, r1
    2234:	c1 f1       	breq	.+112    	; 0x22a6 <LM35_u8GetTemp+0xe6>
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	85 30       	cpi	r24, 0x05	; 5
    223c:	91 05       	cpc	r25, r1
    223e:	5c f1       	brlt	.+86     	; 0x2296 <LM35_u8GetTemp+0xd6>
    2240:	29 85       	ldd	r18, Y+9	; 0x09
    2242:	3a 85       	ldd	r19, Y+10	; 0x0a
    2244:	26 30       	cpi	r18, 0x06	; 6
    2246:	31 05       	cpc	r19, r1
    2248:	b1 f1       	breq	.+108    	; 0x22b6 <LM35_u8GetTemp+0xf6>
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	87 30       	cpi	r24, 0x07	; 7
    2250:	91 05       	cpc	r25, r1
    2252:	c9 f1       	breq	.+114    	; 0x22c6 <LM35_u8GetTemp+0x106>
    2254:	40 c0       	rjmp	.+128    	; 0x22d6 <LM35_u8GetTemp+0x116>
		{
		case LM35_u8ADC_CH0: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH0, &Local_u16ADCReading);	break;
    2256:	9e 01       	movw	r18, r28
    2258:	2c 5f       	subi	r18, 0xFC	; 252
    225a:	3f 4f       	sbci	r19, 0xFF	; 255
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	b9 01       	movw	r22, r18
    2260:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    2264:	3a c0       	rjmp	.+116    	; 0x22da <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH1: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH1, &Local_u16ADCReading);	break;
    2266:	9e 01       	movw	r18, r28
    2268:	2c 5f       	subi	r18, 0xFC	; 252
    226a:	3f 4f       	sbci	r19, 0xFF	; 255
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	b9 01       	movw	r22, r18
    2270:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    2274:	32 c0       	rjmp	.+100    	; 0x22da <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH2: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH2, &Local_u16ADCReading);	break;
    2276:	9e 01       	movw	r18, r28
    2278:	2c 5f       	subi	r18, 0xFC	; 252
    227a:	3f 4f       	sbci	r19, 0xFF	; 255
    227c:	82 e0       	ldi	r24, 0x02	; 2
    227e:	b9 01       	movw	r22, r18
    2280:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    2284:	2a c0       	rjmp	.+84     	; 0x22da <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH3: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH3, &Local_u16ADCReading);	break;
    2286:	9e 01       	movw	r18, r28
    2288:	2c 5f       	subi	r18, 0xFC	; 252
    228a:	3f 4f       	sbci	r19, 0xFF	; 255
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	b9 01       	movw	r22, r18
    2290:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    2294:	22 c0       	rjmp	.+68     	; 0x22da <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH4: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH4, &Local_u16ADCReading);	break;
    2296:	9e 01       	movw	r18, r28
    2298:	2c 5f       	subi	r18, 0xFC	; 252
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	84 e0       	ldi	r24, 0x04	; 4
    229e:	b9 01       	movw	r22, r18
    22a0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    22a4:	1a c0       	rjmp	.+52     	; 0x22da <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH5: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH5, &Local_u16ADCReading);	break;
    22a6:	9e 01       	movw	r18, r28
    22a8:	2c 5f       	subi	r18, 0xFC	; 252
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	85 e0       	ldi	r24, 0x05	; 5
    22ae:	b9 01       	movw	r22, r18
    22b0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    22b4:	12 c0       	rjmp	.+36     	; 0x22da <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH6: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH6, &Local_u16ADCReading);	break;
    22b6:	9e 01       	movw	r18, r28
    22b8:	2c 5f       	subi	r18, 0xFC	; 252
    22ba:	3f 4f       	sbci	r19, 0xFF	; 255
    22bc:	86 e0       	ldi	r24, 0x06	; 6
    22be:	b9 01       	movw	r22, r18
    22c0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    22c4:	0a c0       	rjmp	.+20     	; 0x22da <LM35_u8GetTemp+0x11a>
		case LM35_u8ADC_CH7: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH7, &Local_u16ADCReading);	break;
    22c6:	9e 01       	movw	r18, r28
    22c8:	2c 5f       	subi	r18, 0xFC	; 252
    22ca:	3f 4f       	sbci	r19, 0xFF	; 255
    22cc:	87 e0       	ldi	r24, 0x07	; 7
    22ce:	b9 01       	movw	r22, r18
    22d0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <LM35_u8GetTemp+0x11a>
		default: Local_u8ErrorState = NOK;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	8b 83       	std	Y+3, r24	; 0x03
		}

		/*Calculate the voltage*/
#if LM35_u8ADC_RESOLUTION == LM35_u8ADC_8BITS_RES
		Local_u16Voltage = (uint16) (((uint32) Local_u16ADCReading * LM35_u8ADC_REF_VOLT * 1000UL) / 256UL);
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	9d 81       	ldd	r25, Y+5	; 0x05
    22de:	cc 01       	movw	r24, r24
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	28 e8       	ldi	r18, 0x88	; 136
    22e6:	33 e1       	ldi	r19, 0x13	; 19
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	50 e0       	ldi	r21, 0x00	; 0
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__mulsi3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	89 2f       	mov	r24, r25
    22fa:	9a 2f       	mov	r25, r26
    22fc:	ab 2f       	mov	r26, r27
    22fe:	bb 27       	eor	r27, r27
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
#else
#error Wrong LM35_u8ADC_RESOLUTION configuration option
#endif

		/*Calculate the temperature*/
		*Copy_pu8Temp = (uint8) (Local_u16Voltage /  10u);
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	2a e0       	ldi	r18, 0x0A	; 10
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	b9 01       	movw	r22, r18
    230e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__udivmodhi4>
    2312:	cb 01       	movw	r24, r22
    2314:	ef 81       	ldd	r30, Y+7	; 0x07
    2316:	f8 85       	ldd	r31, Y+8	; 0x08
    2318:	80 83       	st	Z, r24
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <LM35_u8GetTemp+0x160>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2322:	2a 96       	adiw	r28, 0x0a	; 10
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <MOTOR_u8RotateCW>:
#include "MOTOR_private.h"
#include "MOTOR_interface.h"


uint8 MOTOR_u8RotateCW(const MOTOR_t *Copy_pmotortMotorInfo)
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	00 d0       	rcall	.+0      	; 0x233a <MOTOR_u8RotateCW+0x6>
    233a:	0f 92       	push	r0
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	9b 83       	std	Y+3, r25	; 0x03
    2342:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2344:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	9b 81       	ldd	r25, Y+3	; 0x03
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	a9 f0       	breq	.+42     	; 0x2378 <MOTOR_u8RotateCW+0x44>
	{
		/*Set pin 1 as low, pin 2 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_LOW);
    234e:	ea 81       	ldd	r30, Y+2	; 0x02
    2350:	fb 81       	ldd	r31, Y+3	; 0x03
    2352:	80 81       	ld	r24, Z
    2354:	ea 81       	ldd	r30, Y+2	; 0x02
    2356:	fb 81       	ldd	r31, Y+3	; 0x03
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	69 2f       	mov	r22, r25
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_HIGH);
    2362:	ea 81       	ldd	r30, Y+2	; 0x02
    2364:	fb 81       	ldd	r31, Y+3	; 0x03
    2366:	80 81       	ld	r24, Z
    2368:	ea 81       	ldd	r30, Y+2	; 0x02
    236a:	fb 81       	ldd	r31, Y+3	; 0x03
    236c:	92 81       	ldd	r25, Z+2	; 0x02
    236e:	69 2f       	mov	r22, r25
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
    2376:	02 c0       	rjmp	.+4      	; 0x237c <MOTOR_u8RotateCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
}
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <MOTOR_u8RotateCCW>:

uint8 MOTOR_u8RotateCCW(const MOTOR_t *Copy_pmotortMotorInfo)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	00 d0       	rcall	.+0      	; 0x2390 <MOTOR_u8RotateCCW+0x6>
    2390:	0f 92       	push	r0
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	9b 83       	std	Y+3, r25	; 0x03
    2398:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    239a:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	9b 81       	ldd	r25, Y+3	; 0x03
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	a9 f0       	breq	.+42     	; 0x23ce <MOTOR_u8RotateCCW+0x44>
	{
		/*Set pin 2 as low, pin 1 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_LOW);
    23a4:	ea 81       	ldd	r30, Y+2	; 0x02
    23a6:	fb 81       	ldd	r31, Y+3	; 0x03
    23a8:	80 81       	ld	r24, Z
    23aa:	ea 81       	ldd	r30, Y+2	; 0x02
    23ac:	fb 81       	ldd	r31, Y+3	; 0x03
    23ae:	92 81       	ldd	r25, Z+2	; 0x02
    23b0:	69 2f       	mov	r22, r25
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_HIGH);
    23b8:	ea 81       	ldd	r30, Y+2	; 0x02
    23ba:	fb 81       	ldd	r31, Y+3	; 0x03
    23bc:	80 81       	ld	r24, Z
    23be:	ea 81       	ldd	r30, Y+2	; 0x02
    23c0:	fb 81       	ldd	r31, Y+3	; 0x03
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	69 2f       	mov	r22, r25
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <MOTOR_u8RotateCCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <MOTOR_u8Stop>:

uint8 MOTOR_u8Stop(const MOTOR_t *Copy_pmotortMotorInfo)
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <MOTOR_u8Stop+0x6>
    23e6:	0f 92       	push	r0
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	9b 83       	std	Y+3, r25	; 0x03
    23ee:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    23f0:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	9b 81       	ldd	r25, Y+3	; 0x03
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	a9 f0       	breq	.+42     	; 0x2424 <MOTOR_u8Stop+0x44>
	{
		/*Set pin 1 and 2 as low*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_LOW);
    23fa:	ea 81       	ldd	r30, Y+2	; 0x02
    23fc:	fb 81       	ldd	r31, Y+3	; 0x03
    23fe:	80 81       	ld	r24, Z
    2400:	ea 81       	ldd	r30, Y+2	; 0x02
    2402:	fb 81       	ldd	r31, Y+3	; 0x03
    2404:	92 81       	ldd	r25, Z+2	; 0x02
    2406:	69 2f       	mov	r22, r25
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_LOW);
    240e:	ea 81       	ldd	r30, Y+2	; 0x02
    2410:	fb 81       	ldd	r31, Y+3	; 0x03
    2412:	80 81       	ld	r24, Z
    2414:	ea 81       	ldd	r30, Y+2	; 0x02
    2416:	fb 81       	ldd	r31, Y+3	; 0x03
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	69 2f       	mov	r22, r25
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <MOTOR_u8Stop+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2424:	82 e0       	ldi	r24, 0x02	; 2
    2426:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    2428:	89 81       	ldd	r24, Y+1	; 0x01
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    243e:	ea e3       	ldi	r30, 0x3A	; 58
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	8e e1       	ldi	r24, 0x1E	; 30
    2444:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2446:	e7 e3       	ldi	r30, 0x37	; 55
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8f ef       	ldi	r24, 0xFF	; 255
    244c:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    244e:	e4 e3       	ldi	r30, 0x34	; 52
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	8f e0       	ldi	r24, 0x0F	; 15
    2454:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2456:	e1 e3       	ldi	r30, 0x31	; 49
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	8f ef       	ldi	r24, 0xFF	; 255
    245c:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
    245e:	eb e3       	ldi	r30, 0x3B	; 59
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	84 e0       	ldi	r24, 0x04	; 4
    2464:	80 83       	st	Z, r24
	PORTB = PORTB_INITIAL_VALUE;
    2466:	e8 e3       	ldi	r30, 0x38	; 56
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    246c:	e5 e3       	ldi	r30, 0x35	; 53
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 ef       	ldi	r24, 0xF0	; 240
    2472:	80 83       	st	Z, r24
	PORTD = PORTD_INITIAL_VALUE;
    2474:	e2 e3       	ldi	r30, 0x32	; 50
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	10 82       	st	Z, r1
}
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <SSD_u8SetNumber>:
//	uint8 LedPin;
//	uint8 EnablePort;
//	uint8 EnablePin;

uint8 SSD_u8SetNumber(const SSD_t *Copy_pssdtSSDInformation, uint8 Copy_u8Number)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	00 d0       	rcall	.+0      	; 0x2486 <SSD_u8SetNumber+0x6>
    2486:	00 d0       	rcall	.+0      	; 0x2488 <SSD_u8SetNumber+0x8>
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	9b 83       	std	Y+3, r25	; 0x03
    248e:	8a 83       	std	Y+2, r24	; 0x02
    2490:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    2492:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pssdtSSDInformation != NULL)
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	9b 81       	ldd	r25, Y+3	; 0x03
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	09 f4       	brne	.+2      	; 0x249e <SSD_u8SetNumber+0x1e>
    249c:	81 c0       	rjmp	.+258    	; 0x25a0 <SSD_u8SetNumber+0x120>
	{

		/*Set the number to the SSD according to the type of it*/
		if(Copy_pssdtSSDInformation -> Type == SSD_u8CATHODE)
    249e:	ea 81       	ldd	r30, Y+2	; 0x02
    24a0:	fb 81       	ldd	r31, Y+3	; 0x03
    24a2:	80 81       	ld	r24, Z
    24a4:	82 30       	cpi	r24, 0x02	; 2
    24a6:	b9 f5       	brne	.+110    	; 0x2516 <SSD_u8SetNumber+0x96>
		{
			/*Set enable pin to HIGH*/
			DIO_u8SetPinValue(Copy_pssdtSSDInformation -> EnablePort, Copy_pssdtSSDInformation -> EnablePin, DIO_u8PIN_LOW);
    24a8:	ea 81       	ldd	r30, Y+2	; 0x02
    24aa:	fb 81       	ldd	r31, Y+3	; 0x03
    24ac:	83 81       	ldd	r24, Z+3	; 0x03
    24ae:	ea 81       	ldd	r30, Y+2	; 0x02
    24b0:	fb 81       	ldd	r31, Y+3	; 0x03
    24b2:	94 81       	ldd	r25, Z+4	; 0x04
    24b4:	69 2f       	mov	r22, r25
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>

			/*Set the first of the pins*/
			if(Copy_pssdtSSDInformation -> LedPin == 0)
    24bc:	ea 81       	ldd	r30, Y+2	; 0x02
    24be:	fb 81       	ldd	r31, Y+3	; 0x03
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	88 23       	and	r24, r24
    24c4:	79 f4       	brne	.+30     	; 0x24e4 <SSD_u8SetNumber+0x64>
			{
				DIO_u8SetPortValue(Copy_pssdtSSDInformation -> Port, SSD_u8NumbersArray[Copy_u8Number]);
    24c6:	ea 81       	ldd	r30, Y+2	; 0x02
    24c8:	fb 81       	ldd	r31, Y+3	; 0x03
    24ca:	21 81       	ldd	r18, Z+1	; 0x01
    24cc:	8c 81       	ldd	r24, Y+4	; 0x04
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	fc 01       	movw	r30, r24
    24d4:	e8 51       	subi	r30, 0x18	; 24
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	90 81       	ld	r25, Z
    24da:	82 2f       	mov	r24, r18
    24dc:	69 2f       	mov	r22, r25
    24de:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    24e2:	60 c0       	rjmp	.+192    	; 0x25a4 <SSD_u8SetNumber+0x124>
			}
			else if(Copy_pssdtSSDInformation -> LedPin == 1)
    24e4:	ea 81       	ldd	r30, Y+2	; 0x02
    24e6:	fb 81       	ldd	r31, Y+3	; 0x03
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	89 f4       	brne	.+34     	; 0x2510 <SSD_u8SetNumber+0x90>
			{
				DIO_u8SetPortValue(Copy_pssdtSSDInformation -> Port, (SSD_u8NumbersArray[Copy_u8Number] << 1));
    24ee:	ea 81       	ldd	r30, Y+2	; 0x02
    24f0:	fb 81       	ldd	r31, Y+3	; 0x03
    24f2:	21 81       	ldd	r18, Z+1	; 0x01
    24f4:	8c 81       	ldd	r24, Y+4	; 0x04
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	fc 01       	movw	r30, r24
    24fc:	e8 51       	subi	r30, 0x18	; 24
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	98 2f       	mov	r25, r24
    2504:	99 0f       	add	r25, r25
    2506:	82 2f       	mov	r24, r18
    2508:	69 2f       	mov	r22, r25
    250a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    250e:	4a c0       	rjmp	.+148    	; 0x25a4 <SSD_u8SetNumber+0x124>
			}
			else
			{
				Local_u8ErrorState = NOK;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	47 c0       	rjmp	.+142    	; 0x25a4 <SSD_u8SetNumber+0x124>
			}
		}
		else if(Copy_pssdtSSDInformation -> Type == SSD_u8ANODE)
    2516:	ea 81       	ldd	r30, Y+2	; 0x02
    2518:	fb 81       	ldd	r31, Y+3	; 0x03
    251a:	80 81       	ld	r24, Z
    251c:	81 30       	cpi	r24, 0x01	; 1
    251e:	e9 f5       	brne	.+122    	; 0x259a <SSD_u8SetNumber+0x11a>
		{
			/*Set enable pin to LOW*/
			DIO_u8SetPinValue(Copy_pssdtSSDInformation -> EnablePort, Copy_pssdtSSDInformation -> EnablePin, DIO_u8PIN_HIGH);
    2520:	ea 81       	ldd	r30, Y+2	; 0x02
    2522:	fb 81       	ldd	r31, Y+3	; 0x03
    2524:	83 81       	ldd	r24, Z+3	; 0x03
    2526:	ea 81       	ldd	r30, Y+2	; 0x02
    2528:	fb 81       	ldd	r31, Y+3	; 0x03
    252a:	94 81       	ldd	r25, Z+4	; 0x04
    252c:	69 2f       	mov	r22, r25
    252e:	41 e0       	ldi	r20, 0x01	; 1
    2530:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>

			/*Set the first of the pins*/
			if(Copy_pssdtSSDInformation -> LedPin == 0)
    2534:	ea 81       	ldd	r30, Y+2	; 0x02
    2536:	fb 81       	ldd	r31, Y+3	; 0x03
    2538:	82 81       	ldd	r24, Z+2	; 0x02
    253a:	88 23       	and	r24, r24
    253c:	89 f4       	brne	.+34     	; 0x2560 <SSD_u8SetNumber+0xe0>
			{
				DIO_u8SetPortValue(Copy_pssdtSSDInformation -> Port, ~SSD_u8NumbersArray[Copy_u8Number]);
    253e:	ea 81       	ldd	r30, Y+2	; 0x02
    2540:	fb 81       	ldd	r31, Y+3	; 0x03
    2542:	21 81       	ldd	r18, Z+1	; 0x01
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	88 2f       	mov	r24, r24
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	fc 01       	movw	r30, r24
    254c:	e8 51       	subi	r30, 0x18	; 24
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	98 2f       	mov	r25, r24
    2554:	90 95       	com	r25
    2556:	82 2f       	mov	r24, r18
    2558:	69 2f       	mov	r22, r25
    255a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    255e:	22 c0       	rjmp	.+68     	; 0x25a4 <SSD_u8SetNumber+0x124>
			}
			else if(Copy_pssdtSSDInformation -> LedPin == 1)
    2560:	ea 81       	ldd	r30, Y+2	; 0x02
    2562:	fb 81       	ldd	r31, Y+3	; 0x03
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	81 30       	cpi	r24, 0x01	; 1
    2568:	a9 f4       	brne	.+42     	; 0x2594 <SSD_u8SetNumber+0x114>
			{
				DIO_u8SetPortValue(Copy_pssdtSSDInformation -> Port, ~(SSD_u8NumbersArray[Copy_u8Number] << 1));
    256a:	ea 81       	ldd	r30, Y+2	; 0x02
    256c:	fb 81       	ldd	r31, Y+3	; 0x03
    256e:	21 81       	ldd	r18, Z+1	; 0x01
    2570:	8c 81       	ldd	r24, Y+4	; 0x04
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	fc 01       	movw	r30, r24
    2578:	e8 51       	subi	r30, 0x18	; 24
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	88 2f       	mov	r24, r24
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	98 2f       	mov	r25, r24
    2588:	90 95       	com	r25
    258a:	82 2f       	mov	r24, r18
    258c:	69 2f       	mov	r22, r25
    258e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    2592:	08 c0       	rjmp	.+16     	; 0x25a4 <SSD_u8SetNumber+0x124>
			}
			else
			{
				Local_u8ErrorState = NOK;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	05 c0       	rjmp	.+10     	; 0x25a4 <SSD_u8SetNumber+0x124>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <SSD_u8SetNumber+0x124>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <SSD_u8Disable>:


uint8 SSD_u8Disable(const SSD_t *Copy_pssdtSSDInformation)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <SSD_u8Disable+0x6>
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	9b 83       	std	Y+3, r25	; 0x03
    25c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    25c4:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pssdtSSDInformation != NULL)
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	19 f1       	breq	.+70     	; 0x2614 <SSD_u8Disable+0x60>
	{
		if(Copy_pssdtSSDInformation -> Type == SSD_u8CATHODE)
    25ce:	ea 81       	ldd	r30, Y+2	; 0x02
    25d0:	fb 81       	ldd	r31, Y+3	; 0x03
    25d2:	80 81       	ld	r24, Z
    25d4:	82 30       	cpi	r24, 0x02	; 2
    25d6:	59 f4       	brne	.+22     	; 0x25ee <SSD_u8Disable+0x3a>
		{
			DIO_u8SetPinValue(Copy_pssdtSSDInformation -> EnablePort, Copy_pssdtSSDInformation -> EnablePin, DIO_u8PIN_HIGH);
    25d8:	ea 81       	ldd	r30, Y+2	; 0x02
    25da:	fb 81       	ldd	r31, Y+3	; 0x03
    25dc:	83 81       	ldd	r24, Z+3	; 0x03
    25de:	ea 81       	ldd	r30, Y+2	; 0x02
    25e0:	fb 81       	ldd	r31, Y+3	; 0x03
    25e2:	94 81       	ldd	r25, Z+4	; 0x04
    25e4:	69 2f       	mov	r22, r25
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
    25ec:	15 c0       	rjmp	.+42     	; 0x2618 <SSD_u8Disable+0x64>
		}
		else if(Copy_pssdtSSDInformation -> Type == SSD_u8ANODE)
    25ee:	ea 81       	ldd	r30, Y+2	; 0x02
    25f0:	fb 81       	ldd	r31, Y+3	; 0x03
    25f2:	80 81       	ld	r24, Z
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	59 f4       	brne	.+22     	; 0x260e <SSD_u8Disable+0x5a>
		{
			DIO_u8SetPinValue(Copy_pssdtSSDInformation -> EnablePort, Copy_pssdtSSDInformation -> EnablePin, DIO_u8PIN_LOW);
    25f8:	ea 81       	ldd	r30, Y+2	; 0x02
    25fa:	fb 81       	ldd	r31, Y+3	; 0x03
    25fc:	83 81       	ldd	r24, Z+3	; 0x03
    25fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2600:	fb 81       	ldd	r31, Y+3	; 0x03
    2602:	94 81       	ldd	r25, Z+4	; 0x04
    2604:	69 2f       	mov	r22, r25
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <SSD_u8Disable+0x64>
		}
		else
		{
			Local_u8ErrorState = NOK;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <SSD_u8Disable+0x64>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2614:	82 e0       	ldi	r24, 0x02	; 2
    2616:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2618:	89 81       	ldd	r24, Y+1	; 0x01
}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <main>:
#include <util/delay.h>


/*It is the main*/
void main(void)
{
    2626:	af 92       	push	r10
    2628:	bf 92       	push	r11
    262a:	cf 92       	push	r12
    262c:	df 92       	push	r13
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	cf 56       	subi	r28, 0x6F	; 111
    2640:	d0 40       	sbci	r29, 0x00	; 0
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
	 * MOTOR connections are defined on line 57 on main file.
	 * Connect DIO_u8PIN3 with a button to the ground for INTERRUPT 1.
	 * */

	/*Peripherals Initialization*/
	PORT_voidInit();
    264c:	0e 94 1b 12 	call	0x2436	; 0x2436 <PORT_voidInit>
	CLCD_voidInit();
    2650:	0e 94 da 07 	call	0xfb4	; 0xfb4 <CLCD_voidInit>
	ADC_voidInit();
    2654:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

	/*Define variables*/
	uint8 Local_u8Temperature = 0;
    2658:	fe 01       	movw	r30, r28
    265a:	ed 59       	subi	r30, 0x9D	; 157
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	10 82       	st	Z, r1
	uint16 Local_u16LDRVoltage = 0;
    2660:	fe 01       	movw	r30, r28
    2662:	ec 59       	subi	r30, 0x9C	; 156
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	11 82       	std	Z+1, r1	; 0x01
    2668:	10 82       	st	Z, r1
	uint8 Local_u8PrintIterator = 0;
    266a:	fe 01       	movw	r30, r28
    266c:	ee 59       	subi	r30, 0x9E	; 158
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	10 82       	st	Z, r1
	uint8 Local_u8HamokshaIterator = 0;
    2672:	fe 01       	movw	r30, r28
    2674:	ef 59       	subi	r30, 0x9F	; 159
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	10 82       	st	Z, r1
	uint8 Local_u8LedsMap = 0;
    267a:	fe 01       	movw	r30, r28
    267c:	e0 5a       	subi	r30, 0xA0	; 160
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	10 82       	st	Z, r1

	uint8 Local_u8Iterator = 0;
    2682:	fe 01       	movw	r30, r28
    2684:	e1 5a       	subi	r30, 0xA1	; 161
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	10 82       	st	Z, r1
	uint8 Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    268a:	fe 01       	movw	r30, r28
    268c:	e2 5a       	subi	r30, 0xA2	; 162
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	8f ef       	ldi	r24, 0xFF	; 255
    2692:	80 83       	st	Z, r24
	uint8 Local_u8IDIterator = 0;
    2694:	fe 01       	movw	r30, r28
    2696:	e3 5a       	subi	r30, 0xA3	; 163
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	10 82       	st	Z, r1
	uint8 Local_u8SevenSegmentIterator = 3;
    269c:	fe 01       	movw	r30, r28
    269e:	e4 5a       	subi	r30, 0xA4	; 164
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	80 83       	st	Z, r24
	uint8 Local_u8LoginFlag = 0;
    26a6:	fe 01       	movw	r30, r28
    26a8:	e5 5a       	subi	r30, 0xA5	; 165
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	10 82       	st	Z, r1

	uint16 Local_u16ID = 0;
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5a       	subi	r30, 0xA7	; 167
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	11 82       	std	Z+1, r1	; 0x01
    26b6:	10 82       	st	Z, r1
	uint16 Local_u16Password = 0;
    26b8:	fe 01       	movw	r30, r28
    26ba:	e9 5a       	subi	r30, 0xA9	; 169
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	11 82       	std	Z+1, r1	; 0x01
    26c0:	10 82       	st	Z, r1
	uint16 Local_u16ReversedID = 0;
    26c2:	fe 01       	movw	r30, r28
    26c4:	eb 5a       	subi	r30, 0xAB	; 171
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	11 82       	std	Z+1, r1	; 0x01
    26ca:	10 82       	st	Z, r1


	/*Define the seven segment*/
	SSD_t Local_ssdtLoginCounter;
	Local_ssdtLoginCounter.Port = DIO_u8PORTD;
    26cc:	fe 01       	movw	r30, r28
    26ce:	ea 59       	subi	r30, 0x9A	; 154
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	83 e0       	ldi	r24, 0x03	; 3
    26d4:	81 83       	std	Z+1, r24	; 0x01
	Local_ssdtLoginCounter.EnablePort = DIO_u8PORTA;
    26d6:	fe 01       	movw	r30, r28
    26d8:	ea 59       	subi	r30, 0x9A	; 154
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	13 82       	std	Z+3, r1	; 0x03
	Local_ssdtLoginCounter.EnablePin = DIO_u8PIN1;
    26de:	fe 01       	movw	r30, r28
    26e0:	ea 59       	subi	r30, 0x9A	; 154
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	84 83       	std	Z+4, r24	; 0x04
	Local_ssdtLoginCounter.LedPin = DIO_u8PIN0;
    26e8:	fe 01       	movw	r30, r28
    26ea:	ea 59       	subi	r30, 0x9A	; 154
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	12 82       	std	Z+2, r1	; 0x02
	Local_ssdtLoginCounter.Type = SSD_u8CATHODE;
    26f0:	fe 01       	movw	r30, r28
    26f2:	ea 59       	subi	r30, 0x9A	; 154
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	80 83       	st	Z, r24


	/*Define the motor*/
	MOTOR_t Local_motortSystemMotor;
	Local_motortSystemMotor.Port = DIO_u8PORTA;
    26fa:	fe 01       	movw	r30, r28
    26fc:	e5 59       	subi	r30, 0x95	; 149
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	10 82       	st	Z, r1
	Local_motortSystemMotor.Pin1 = DIO_u8PIN3;
    2702:	fe 01       	movw	r30, r28
    2704:	e5 59       	subi	r30, 0x95	; 149
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	81 83       	std	Z+1, r24	; 0x01
	Local_motortSystemMotor.Pin2 = DIO_u8PIN4;
    270c:	fe 01       	movw	r30, r28
    270e:	e5 59       	subi	r30, 0x95	; 149
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	84 e0       	ldi	r24, 0x04	; 4
    2714:	82 83       	std	Z+2, r24	; 0x02
	MOTOR_u8Stop(&Local_motortSystemMotor);
    2716:	ce 01       	movw	r24, r28
    2718:	85 59       	subi	r24, 0x95	; 149
    271a:	9f 4f       	sbci	r25, 0xFF	; 255
    271c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <MOTOR_u8Stop>


	/*Hamoksha welcome the user*/
	for(Local_u8HamokshaIterator = 0; Local_u8HamokshaIterator < 16; Local_u8HamokshaIterator++)
    2720:	fe 01       	movw	r30, r28
    2722:	ef 59       	subi	r30, 0x9F	; 159
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	10 82       	st	Z, r1
    2728:	d2 c0       	rjmp	.+420    	; 0x28ce <main+0x2a8>
	{
		CLCD_voidClearDisplay();
    272a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidClearDisplay>
		CLCD_voidSendSpecialCharacter(Local_u8Hamoksha1, 0, Local_u8HamokshaIterator, 0);
    272e:	82 e2       	ldi	r24, 0x22	; 34
    2730:	91 e0       	ldi	r25, 0x01	; 1
    2732:	fe 01       	movw	r30, r28
    2734:	ef 59       	subi	r30, 0x9F	; 159
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	40 81       	ld	r20, Z
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
		CLCD_voidSendSpecialCharacter(Local_u8Hamoksha2, 1, Local_u8HamokshaIterator, 1);
    2742:	8a e2       	ldi	r24, 0x2A	; 42
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	fe 01       	movw	r30, r28
    2748:	ef 59       	subi	r30, 0x9F	; 159
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	61 e0       	ldi	r22, 0x01	; 1
    274e:	40 81       	ld	r20, Z
    2750:	21 e0       	ldi	r18, 0x01	; 1
    2752:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
    2756:	fe 01       	movw	r30, r28
    2758:	ef 5a       	subi	r30, 0xAF	; 175
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a8 ec       	ldi	r26, 0xC8	; 200
    2762:	b2 e4       	ldi	r27, 0x42	; 66
    2764:	80 83       	st	Z, r24
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	a2 83       	std	Z+2, r26	; 0x02
    276a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	8e 01       	movw	r16, r28
    276e:	03 5b       	subi	r16, 0xB3	; 179
    2770:	1f 4f       	sbci	r17, 0xFF	; 255
    2772:	fe 01       	movw	r30, r28
    2774:	ef 5a       	subi	r30, 0xAF	; 175
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	60 81       	ld	r22, Z
    277a:	71 81       	ldd	r23, Z+1	; 0x01
    277c:	82 81       	ldd	r24, Z+2	; 0x02
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a ef       	ldi	r20, 0xFA	; 250
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	f8 01       	movw	r30, r16
    2792:	80 83       	st	Z, r24
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	a2 83       	std	Z+2, r26	; 0x02
    2798:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    279a:	fe 01       	movw	r30, r28
    279c:	e3 5b       	subi	r30, 0xB3	; 179
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e8       	ldi	r20, 0x80	; 128
    27ae:	5f e3       	ldi	r21, 0x3F	; 63
    27b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b4:	88 23       	and	r24, r24
    27b6:	44 f4       	brge	.+16     	; 0x27c8 <main+0x1a2>
		__ticks = 1;
    27b8:	fe 01       	movw	r30, r28
    27ba:	e5 5b       	subi	r30, 0xB5	; 181
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
    27c6:	64 c0       	rjmp	.+200    	; 0x2890 <main+0x26a>
	else if (__tmp > 65535)
    27c8:	fe 01       	movw	r30, r28
    27ca:	e3 5b       	subi	r30, 0xB3	; 179
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	0c f0       	brlt	.+2      	; 0x27e8 <main+0x1c2>
    27e6:	43 c0       	rjmp	.+134    	; 0x286e <main+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	fe 01       	movw	r30, r28
    27ea:	ef 5a       	subi	r30, 0xAF	; 175
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e2       	ldi	r20, 0x20	; 32
    27fc:	51 e4       	ldi	r21, 0x41	; 65
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	8e 01       	movw	r16, r28
    2808:	05 5b       	subi	r16, 0xB5	; 181
    280a:	1f 4f       	sbci	r17, 0xFF	; 255
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	f8 01       	movw	r30, r16
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	1f c0       	rjmp	.+62     	; 0x285e <main+0x238>
    2820:	fe 01       	movw	r30, r28
    2822:	e7 5b       	subi	r30, 0xB7	; 183
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	88 ec       	ldi	r24, 0xC8	; 200
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	80 83       	st	Z, r24
    282e:	fe 01       	movw	r30, r28
    2830:	e7 5b       	subi	r30, 0xB7	; 183
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <main+0x212>
    283c:	fe 01       	movw	r30, r28
    283e:	e7 5b       	subi	r30, 0xB7	; 183
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2846:	de 01       	movw	r26, r28
    2848:	a5 5b       	subi	r26, 0xB5	; 181
    284a:	bf 4f       	sbci	r27, 0xFF	; 255
    284c:	fe 01       	movw	r30, r28
    284e:	e5 5b       	subi	r30, 0xB5	; 181
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	11 96       	adiw	r26, 0x01	; 1
    285a:	9c 93       	st	X, r25
    285c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285e:	fe 01       	movw	r30, r28
    2860:	e5 5b       	subi	r30, 0xB5	; 181
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	d1 f6       	brne	.-76     	; 0x2820 <main+0x1fa>
    286c:	27 c0       	rjmp	.+78     	; 0x28bc <main+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286e:	8e 01       	movw	r16, r28
    2870:	05 5b       	subi	r16, 0xB5	; 181
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    2874:	fe 01       	movw	r30, r28
    2876:	e3 5b       	subi	r30, 0xB3	; 179
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	f8 01       	movw	r30, r16
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	80 83       	st	Z, r24
    2890:	de 01       	movw	r26, r28
    2892:	a9 5b       	subi	r26, 0xB9	; 185
    2894:	bf 4f       	sbci	r27, 0xFF	; 255
    2896:	fe 01       	movw	r30, r28
    2898:	e5 5b       	subi	r30, 0xB5	; 181
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	8d 93       	st	X+, r24
    28a2:	9c 93       	st	X, r25
    28a4:	fe 01       	movw	r30, r28
    28a6:	e9 5b       	subi	r30, 0xB9	; 185
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	91 81       	ldd	r25, Z+1	; 0x01
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <main+0x288>
    28b2:	fe 01       	movw	r30, r28
    28b4:	e9 5b       	subi	r30, 0xB9	; 185
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	91 83       	std	Z+1, r25	; 0x01
    28ba:	80 83       	st	Z, r24
	Local_motortSystemMotor.Pin2 = DIO_u8PIN4;
	MOTOR_u8Stop(&Local_motortSystemMotor);


	/*Hamoksha welcome the user*/
	for(Local_u8HamokshaIterator = 0; Local_u8HamokshaIterator < 16; Local_u8HamokshaIterator++)
    28bc:	de 01       	movw	r26, r28
    28be:	af 59       	subi	r26, 0x9F	; 159
    28c0:	bf 4f       	sbci	r27, 0xFF	; 255
    28c2:	fe 01       	movw	r30, r28
    28c4:	ef 59       	subi	r30, 0x9F	; 159
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 81       	ld	r24, Z
    28ca:	8f 5f       	subi	r24, 0xFF	; 255
    28cc:	8c 93       	st	X, r24
    28ce:	fe 01       	movw	r30, r28
    28d0:	ef 59       	subi	r30, 0x9F	; 159
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	80 31       	cpi	r24, 0x10	; 16
    28d8:	08 f4       	brcc	.+2      	; 0x28dc <main+0x2b6>
    28da:	27 cf       	rjmp	.-434    	; 0x272a <main+0x104>
		CLCD_voidClearDisplay();
		CLCD_voidSendSpecialCharacter(Local_u8Hamoksha1, 0, Local_u8HamokshaIterator, 0);
		CLCD_voidSendSpecialCharacter(Local_u8Hamoksha2, 1, Local_u8HamokshaIterator, 1);
		_delay_ms(100);
	}
	CLCD_u8GoToXY(1, 0);
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
	CLCD_u8SendString("Welcome Mido!");
    28e4:	86 e6       	ldi	r24, 0x66	; 102
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>
    28ec:	fe 01       	movw	r30, r28
    28ee:	ed 5b       	subi	r30, 0xBD	; 189
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	aa e7       	ldi	r26, 0x7A	; 122
    28f8:	b4 e4       	ldi	r27, 0x44	; 68
    28fa:	80 83       	st	Z, r24
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	a2 83       	std	Z+2, r26	; 0x02
    2900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2902:	8e 01       	movw	r16, r28
    2904:	01 5c       	subi	r16, 0xC1	; 193
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	fe 01       	movw	r30, r28
    290a:	ed 5b       	subi	r30, 0xBD	; 189
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	60 81       	ld	r22, Z
    2910:	71 81       	ldd	r23, Z+1	; 0x01
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a ef       	ldi	r20, 0xFA	; 250
    291c:	54 e4       	ldi	r21, 0x44	; 68
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	f8 01       	movw	r30, r16
    2928:	80 83       	st	Z, r24
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	a2 83       	std	Z+2, r26	; 0x02
    292e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2930:	fe 01       	movw	r30, r28
    2932:	ff 96       	adiw	r30, 0x3f	; 63
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2948:	88 23       	and	r24, r24
    294a:	2c f4       	brge	.+10     	; 0x2956 <main+0x330>
		__ticks = 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9e af       	std	Y+62, r25	; 0x3e
    2952:	8d af       	std	Y+61, r24	; 0x3d
    2954:	46 c0       	rjmp	.+140    	; 0x29e2 <main+0x3bc>
	else if (__tmp > 65535)
    2956:	fe 01       	movw	r30, r28
    2958:	ff 96       	adiw	r30, 0x3f	; 63
    295a:	60 81       	ld	r22, Z
    295c:	71 81       	ldd	r23, Z+1	; 0x01
    295e:	82 81       	ldd	r24, Z+2	; 0x02
    2960:	93 81       	ldd	r25, Z+3	; 0x03
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	64 f5       	brge	.+88     	; 0x29ca <main+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	fe 01       	movw	r30, r28
    2974:	ed 5b       	subi	r30, 0xBD	; 189
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	51 e4       	ldi	r21, 0x41	; 65
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9e af       	std	Y+62, r25	; 0x3e
    299e:	8d af       	std	Y+61, r24	; 0x3d
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <main+0x39a>
    29a2:	88 ec       	ldi	r24, 0xC8	; 200
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9c af       	std	Y+60, r25	; 0x3c
    29a8:	8b af       	std	Y+59, r24	; 0x3b
    29aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    29ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <main+0x388>
    29b2:	9c af       	std	Y+60, r25	; 0x3c
    29b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	9e af       	std	Y+62, r25	; 0x3e
    29be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	69 f7       	brne	.-38     	; 0x29a2 <main+0x37c>
    29c8:	7c c3       	rjmp	.+1784   	; 0x30c2 <main+0xa9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ca:	fe 01       	movw	r30, r28
    29cc:	ff 96       	adiw	r30, 0x3f	; 63
    29ce:	60 81       	ld	r22, Z
    29d0:	71 81       	ldd	r23, Z+1	; 0x01
    29d2:	82 81       	ldd	r24, Z+2	; 0x02
    29d4:	93 81       	ldd	r25, Z+3	; 0x03
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9e af       	std	Y+62, r25	; 0x3e
    29e0:	8d af       	std	Y+61, r24	; 0x3d
    29e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e6:	9a af       	std	Y+58, r25	; 0x3a
    29e8:	89 af       	std	Y+57, r24	; 0x39
    29ea:	89 ad       	ldd	r24, Y+57	; 0x39
    29ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <main+0x3c8>
    29f2:	9a af       	std	Y+58, r25	; 0x3a
    29f4:	89 af       	std	Y+57, r24	; 0x39
    29f6:	65 c3       	rjmp	.+1738   	; 0x30c2 <main+0xa9c>
	/*Super Loop*/
	while(1)
	{
		while(Local_u8SevenSegmentIterator != 0)
		{
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    29f8:	fe 01       	movw	r30, r28
    29fa:	e1 5a       	subi	r30, 0xA1	; 161
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	10 82       	st	Z, r1
    2a00:	1d c0       	rjmp	.+58     	; 0x2a3c <main+0x416>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
    2a02:	86 ec       	ldi	r24, 0xC6	; 198
    2a04:	91 e0       	ldi	r25, 0x01	; 1
    2a06:	fe 01       	movw	r30, r28
    2a08:	e1 5a       	subi	r30, 0xA1	; 161
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	62 e0       	ldi	r22, 0x02	; 2
    2a0e:	40 81       	ld	r20, Z
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 1);
    2a16:	86 ec       	ldi	r24, 0xC6	; 198
    2a18:	91 e0       	ldi	r25, 0x01	; 1
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e1 5a       	subi	r30, 0xA1	; 161
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	62 e0       	ldi	r22, 0x02	; 2
    2a22:	40 81       	ld	r20, Z
    2a24:	21 e0       	ldi	r18, 0x01	; 1
    2a26:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
	/*Super Loop*/
	while(1)
	{
		while(Local_u8SevenSegmentIterator != 0)
		{
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    2a2a:	de 01       	movw	r26, r28
    2a2c:	a1 5a       	subi	r26, 0xA1	; 161
    2a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a30:	fe 01       	movw	r30, r28
    2a32:	e1 5a       	subi	r30, 0xA1	; 161
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	8f 5f       	subi	r24, 0xFF	; 255
    2a3a:	8c 93       	st	X, r24
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e1 5a       	subi	r30, 0xA1	; 161
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	8e 30       	cpi	r24, 0x0E	; 14
    2a46:	e8 f2       	brcs	.-70     	; 0x2a02 <main+0x3dc>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 1);
			}

			CLCD_u8GoToXY(0, 0);
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
			CLCD_u8SendString("ID: ");
    2a50:	84 e7       	ldi	r24, 0x74	; 116
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>
			CLCD_u8GoToXY(0, 1);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	61 e0       	ldi	r22, 0x01	; 1
    2a5c:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
			CLCD_u8SendString("Password: ");
    2a60:	89 e7       	ldi	r24, 0x79	; 121
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>

			/*Print Login times remained to seven segment*/
			SSD_u8SetNumber(&Local_ssdtLoginCounter, Local_u8SevenSegmentIterator);
    2a68:	ce 01       	movw	r24, r28
    2a6a:	8a 59       	subi	r24, 0x9A	; 154
    2a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e4 5a       	subi	r30, 0xA4	; 164
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	60 81       	ld	r22, Z
    2a76:	0e 94 40 12 	call	0x2480	; 0x2480 <SSD_u8SetNumber>

			/*Scan ID from the user*/
			Local_u8IDIterator = 0;
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e3 5a       	subi	r30, 0xA3	; 163
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	10 82       	st	Z, r1
			CLCD_u8GoToXY(4, 0);
    2a82:	84 e0       	ldi	r24, 0x04	; 4
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
    2a8a:	51 c0       	rjmp	.+162    	; 0x2b2e <main+0x508>

			while(Local_u8IDIterator != 4)
			{
				while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
				{
					Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    2a8c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <KEYPAD_u8GetPressedKey>
    2a90:	fe 01       	movw	r30, r28
    2a92:	e2 5a       	subi	r30, 0xA2	; 162
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 83       	st	Z, r24
			Local_u8IDIterator = 0;
			CLCD_u8GoToXY(4, 0);

			while(Local_u8IDIterator != 4)
			{
				while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e2 5a       	subi	r30, 0xA2	; 162
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa2:	a1 f3       	breq	.-24     	; 0x2a8c <main+0x466>
				{
					Local_u8PressedKey = KEYPAD_u8GetPressedKey();
				}

				switch(Local_u8PressedKey)
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e2 5a       	subi	r30, 0xA2	; 162
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	8b 30       	cpi	r24, 0x0B	; 11
    2ab2:	91 05       	cpc	r25, r1
    2ab4:	b9 f1       	breq	.+110    	; 0x2b24 <main+0x4fe>
				{
				default:
					CLCD_voidSendDecimalNumber(Local_u8PressedKey);
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e2 5a       	subi	r30, 0xA2	; 162
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 81       	ld	r24, Z
    2abe:	88 2f       	mov	r24, r24
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 e0       	ldi	r26, 0x00	; 0
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 bb 08 	call	0x1176	; 0x1176 <CLCD_voidSendDecimalNumber>
					Local_u16ID = Local_u8PressedKey + Local_u16ID * 10;
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e2 5a       	subi	r30, 0xA2	; 162
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	48 2f       	mov	r20, r24
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	fe 01       	movw	r30, r28
    2adc:	e7 5a       	subi	r30, 0xA7	; 167
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	9c 01       	movw	r18, r24
    2ae6:	22 0f       	add	r18, r18
    2ae8:	33 1f       	adc	r19, r19
    2aea:	c9 01       	movw	r24, r18
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	82 0f       	add	r24, r18
    2af6:	93 1f       	adc	r25, r19
    2af8:	fe 01       	movw	r30, r28
    2afa:	e7 5a       	subi	r30, 0xA7	; 167
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	84 0f       	add	r24, r20
    2b00:	95 1f       	adc	r25, r21
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	80 83       	st	Z, r24
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    2b06:	fe 01       	movw	r30, r28
    2b08:	e2 5a       	subi	r30, 0xA2	; 162
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	8f ef       	ldi	r24, 0xFF	; 255
    2b0e:	80 83       	st	Z, r24
					Local_u8IDIterator++;
    2b10:	de 01       	movw	r26, r28
    2b12:	a3 5a       	subi	r26, 0xA3	; 163
    2b14:	bf 4f       	sbci	r27, 0xFF	; 255
    2b16:	fe 01       	movw	r30, r28
    2b18:	e3 5a       	subi	r30, 0xA3	; 163
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	8f 5f       	subi	r24, 0xFF	; 255
    2b20:	8c 93       	st	X, r24
    2b22:	05 c0       	rjmp	.+10     	; 0x2b2e <main+0x508>
					break;
				case 11:
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    2b24:	fe 01       	movw	r30, r28
    2b26:	e2 5a       	subi	r30, 0xA2	; 162
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	8f ef       	ldi	r24, 0xFF	; 255
    2b2c:	80 83       	st	Z, r24

			/*Scan ID from the user*/
			Local_u8IDIterator = 0;
			CLCD_u8GoToXY(4, 0);

			while(Local_u8IDIterator != 4)
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e3 5a       	subi	r30, 0xA3	; 163
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	84 30       	cpi	r24, 0x04	; 4
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <main+0x516>
    2b3a:	ae cf       	rjmp	.-164    	; 0x2a98 <main+0x472>
					break;
				}
			}

			/*Scan Password from the user*/
			Local_u8IDIterator = 0;
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e3 5a       	subi	r30, 0xA3	; 163
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	10 82       	st	Z, r1
			CLCD_u8GoToXY(10, 1);
    2b44:	8a e0       	ldi	r24, 0x0A	; 10
    2b46:	61 e0       	ldi	r22, 0x01	; 1
    2b48:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
    2b4c:	cf c0       	rjmp	.+414    	; 0x2cec <main+0x6c6>

			while(Local_u8IDIterator != 4)
			{
				while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
				{
					Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    2b4e:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <KEYPAD_u8GetPressedKey>
    2b52:	fe 01       	movw	r30, r28
    2b54:	e2 5a       	subi	r30, 0xA2	; 162
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 83       	st	Z, r24
			Local_u8IDIterator = 0;
			CLCD_u8GoToXY(10, 1);

			while(Local_u8IDIterator != 4)
			{
				while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e2 5a       	subi	r30, 0xA2	; 162
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	8f 3f       	cpi	r24, 0xFF	; 255
    2b64:	a1 f3       	breq	.-24     	; 0x2b4e <main+0x528>
				{
					Local_u8PressedKey = KEYPAD_u8GetPressedKey();
				}
				switch(Local_u8PressedKey)
    2b66:	fe 01       	movw	r30, r28
    2b68:	e2 5a       	subi	r30, 0xA2	; 162
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	88 2f       	mov	r24, r24
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	8b 30       	cpi	r24, 0x0B	; 11
    2b74:	91 05       	cpc	r25, r1
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <main+0x554>
    2b78:	b4 c0       	rjmp	.+360    	; 0x2ce2 <main+0x6bc>
				{
				default:
					CLCD_voidSendDecimalNumber(Local_u8PressedKey);
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e2 5a       	subi	r30, 0xA2	; 162
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a0 e0       	ldi	r26, 0x00	; 0
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 bb 08 	call	0x1176	; 0x1176 <CLCD_voidSendDecimalNumber>
					Local_u16Password = Local_u8PressedKey + Local_u16Password * 10;
    2b92:	fe 01       	movw	r30, r28
    2b94:	e2 5a       	subi	r30, 0xA2	; 162
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	80 81       	ld	r24, Z
    2b9a:	48 2f       	mov	r20, r24
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e9 5a       	subi	r30, 0xA9	; 169
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	80 81       	ld	r24, Z
    2ba6:	91 81       	ldd	r25, Z+1	; 0x01
    2ba8:	9c 01       	movw	r18, r24
    2baa:	22 0f       	add	r18, r18
    2bac:	33 1f       	adc	r19, r19
    2bae:	c9 01       	movw	r24, r18
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	82 0f       	add	r24, r18
    2bba:	93 1f       	adc	r25, r19
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e9 5a       	subi	r30, 0xA9	; 169
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	84 0f       	add	r24, r20
    2bc4:	95 1f       	adc	r25, r21
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
					CLCD_u8GoToXY(10 + Local_u8IDIterator, 1);
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e3 5a       	subi	r30, 0xA3	; 163
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	86 5f       	subi	r24, 0xF6	; 246
    2bd4:	61 e0       	ldi	r22, 0x01	; 1
    2bd6:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	aa e7       	ldi	r26, 0x7A	; 122
    2be0:	b3 e4       	ldi	r27, 0x43	; 67
    2be2:	8d ab       	std	Y+53, r24	; 0x35
    2be4:	9e ab       	std	Y+54, r25	; 0x36
    2be6:	af ab       	std	Y+55, r26	; 0x37
    2be8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	6d a9       	ldd	r22, Y+53	; 0x35
    2bec:	7e a9       	ldd	r23, Y+54	; 0x36
    2bee:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf0:	98 ad       	ldd	r25, Y+56	; 0x38
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a ef       	ldi	r20, 0xFA	; 250
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	89 ab       	std	Y+49, r24	; 0x31
    2c04:	9a ab       	std	Y+50, r25	; 0x32
    2c06:	ab ab       	std	Y+51, r26	; 0x33
    2c08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c0a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c0c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c0e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c10:	9c a9       	ldd	r25, Y+52	; 0x34
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <main+0x606>
		__ticks = 1;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	98 ab       	std	Y+48, r25	; 0x30
    2c28:	8f a7       	std	Y+47, r24	; 0x2f
    2c2a:	3f c0       	rjmp	.+126    	; 0x2caa <main+0x684>
	else if (__tmp > 65535)
    2c2c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c2e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c30:	8b a9       	ldd	r24, Y+51	; 0x33
    2c32:	9c a9       	ldd	r25, Y+52	; 0x34
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	4c f5       	brge	.+82     	; 0x2c96 <main+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	6d a9       	ldd	r22, Y+53	; 0x35
    2c46:	7e a9       	ldd	r23, Y+54	; 0x36
    2c48:	8f a9       	ldd	r24, Y+55	; 0x37
    2c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	98 ab       	std	Y+48, r25	; 0x30
    2c6a:	8f a7       	std	Y+47, r24	; 0x2f
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <main+0x666>
    2c6e:	88 ec       	ldi	r24, 0xC8	; 200
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9e a7       	std	Y+46, r25	; 0x2e
    2c74:	8d a7       	std	Y+45, r24	; 0x2d
    2c76:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c78:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <main+0x654>
    2c7e:	9e a7       	std	Y+46, r25	; 0x2e
    2c80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c84:	98 a9       	ldd	r25, Y+48	; 0x30
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	98 ab       	std	Y+48, r25	; 0x30
    2c8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <main+0x648>
    2c94:	14 c0       	rjmp	.+40     	; 0x2cbe <main+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	69 a9       	ldd	r22, Y+49	; 0x31
    2c98:	7a a9       	ldd	r23, Y+50	; 0x32
    2c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	98 ab       	std	Y+48, r25	; 0x30
    2ca8:	8f a7       	std	Y+47, r24	; 0x2f
    2caa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cac:	98 a9       	ldd	r25, Y+48	; 0x30
    2cae:	9c a7       	std	Y+44, r25	; 0x2c
    2cb0:	8b a7       	std	Y+43, r24	; 0x2b
    2cb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <main+0x690>
    2cba:	9c a7       	std	Y+44, r25	; 0x2c
    2cbc:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(250);
					CLCD_voidSendData('*');
    2cbe:	8a e2       	ldi	r24, 0x2A	; 42
    2cc0:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e2 5a       	subi	r30, 0xA2	; 162
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	8f ef       	ldi	r24, 0xFF	; 255
    2ccc:	80 83       	st	Z, r24
					Local_u8IDIterator++;
    2cce:	de 01       	movw	r26, r28
    2cd0:	a3 5a       	subi	r26, 0xA3	; 163
    2cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e3 5a       	subi	r30, 0xA3	; 163
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	80 81       	ld	r24, Z
    2cdc:	8f 5f       	subi	r24, 0xFF	; 255
    2cde:	8c 93       	st	X, r24
    2ce0:	05 c0       	rjmp	.+10     	; 0x2cec <main+0x6c6>
					break;
				case 11:
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e2 5a       	subi	r30, 0xA2	; 162
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	8f ef       	ldi	r24, 0xFF	; 255
    2cea:	80 83       	st	Z, r24

			/*Scan Password from the user*/
			Local_u8IDIterator = 0;
			CLCD_u8GoToXY(10, 1);

			while(Local_u8IDIterator != 4)
    2cec:	fe 01       	movw	r30, r28
    2cee:	e3 5a       	subi	r30, 0xA3	; 163
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	84 30       	cpi	r24, 0x04	; 4
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <main+0x6d4>
    2cf8:	30 cf       	rjmp	.-416    	; 0x2b5a <main+0x534>
					break;
				}
			}

			/*Reverse the ID*/
			Local_u8IDIterator = 0;
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e3 5a       	subi	r30, 0xA3	; 163
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	10 82       	st	Z, r1
    2d02:	3b c0       	rjmp	.+118    	; 0x2d7a <main+0x754>
			while(Local_u8IDIterator != 4)
			{
				Local_u8IDIterator++;
    2d04:	de 01       	movw	r26, r28
    2d06:	a3 5a       	subi	r26, 0xA3	; 163
    2d08:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e3 5a       	subi	r30, 0xA3	; 163
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	8f 5f       	subi	r24, 0xFF	; 255
    2d14:	8c 93       	st	X, r24
				Local_u16ReversedID = (Local_u16ID % 10) + Local_u16ReversedID * 10;
    2d16:	fe 01       	movw	r30, r28
    2d18:	e7 5a       	subi	r30, 0xA7	; 167
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 81       	ld	r24, Z
    2d1e:	91 81       	ldd	r25, Z+1	; 0x01
    2d20:	2a e0       	ldi	r18, 0x0A	; 10
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	b9 01       	movw	r22, r18
    2d26:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__udivmodhi4>
    2d2a:	ac 01       	movw	r20, r24
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	eb 5a       	subi	r30, 0xAB	; 171
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	80 81       	ld	r24, Z
    2d34:	91 81       	ldd	r25, Z+1	; 0x01
    2d36:	9c 01       	movw	r18, r24
    2d38:	22 0f       	add	r18, r18
    2d3a:	33 1f       	adc	r19, r19
    2d3c:	c9 01       	movw	r24, r18
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	82 0f       	add	r24, r18
    2d48:	93 1f       	adc	r25, r19
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	eb 5a       	subi	r30, 0xAB	; 171
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	84 0f       	add	r24, r20
    2d52:	95 1f       	adc	r25, r21
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	80 83       	st	Z, r24
				Local_u16ID = Local_u16ID / 10;
    2d58:	8e 01       	movw	r16, r28
    2d5a:	07 5a       	subi	r16, 0xA7	; 167
    2d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e7 5a       	subi	r30, 0xA7	; 167
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 81       	ld	r24, Z
    2d66:	91 81       	ldd	r25, Z+1	; 0x01
    2d68:	2a e0       	ldi	r18, 0x0A	; 10
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	b9 01       	movw	r22, r18
    2d6e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__udivmodhi4>
    2d72:	cb 01       	movw	r24, r22
    2d74:	f8 01       	movw	r30, r16
    2d76:	91 83       	std	Z+1, r25	; 0x01
    2d78:	80 83       	st	Z, r24
				}
			}

			/*Reverse the ID*/
			Local_u8IDIterator = 0;
			while(Local_u8IDIterator != 4)
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e3 5a       	subi	r30, 0xA3	; 163
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	80 81       	ld	r24, Z
    2d82:	84 30       	cpi	r24, 0x04	; 4
    2d84:	09 f0       	breq	.+2      	; 0x2d88 <main+0x762>
    2d86:	be cf       	rjmp	.-132    	; 0x2d04 <main+0x6de>
				Local_u8IDIterator++;
				Local_u16ReversedID = (Local_u16ID % 10) + Local_u16ReversedID * 10;
				Local_u16ID = Local_u16ID / 10;
			}

			CLCD_u8GoToXY(0, 0);
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>

			/*Erase the CLCD*/
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    2d90:	fe 01       	movw	r30, r28
    2d92:	e1 5a       	subi	r30, 0xA1	; 161
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	10 82       	st	Z, r1
    2d98:	13 c0       	rjmp	.+38     	; 0x2dc0 <main+0x79a>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
    2d9a:	86 ec       	ldi	r24, 0xC6	; 198
    2d9c:	91 e0       	ldi	r25, 0x01	; 1
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e1 5a       	subi	r30, 0xA1	; 161
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	62 e0       	ldi	r22, 0x02	; 2
    2da6:	40 81       	ld	r20, Z
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
			}

			CLCD_u8GoToXY(0, 0);

			/*Erase the CLCD*/
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    2dae:	de 01       	movw	r26, r28
    2db0:	a1 5a       	subi	r26, 0xA1	; 161
    2db2:	bf 4f       	sbci	r27, 0xFF	; 255
    2db4:	fe 01       	movw	r30, r28
    2db6:	e1 5a       	subi	r30, 0xA1	; 161
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	80 81       	ld	r24, Z
    2dbc:	8f 5f       	subi	r24, 0xFF	; 255
    2dbe:	8c 93       	st	X, r24
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e1 5a       	subi	r30, 0xA1	; 161
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	80 81       	ld	r24, Z
    2dc8:	8e 30       	cpi	r24, 0x0E	; 14
    2dca:	38 f3       	brcs	.-50     	; 0x2d9a <main+0x774>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
			}
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e1 5a       	subi	r30, 0xA1	; 161
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	10 82       	st	Z, r1
    2dd4:	13 c0       	rjmp	.+38     	; 0x2dfc <main+0x7d6>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 1);
    2dd6:	86 ec       	ldi	r24, 0xC6	; 198
    2dd8:	91 e0       	ldi	r25, 0x01	; 1
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e1 5a       	subi	r30, 0xA1	; 161
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	62 e0       	ldi	r22, 0x02	; 2
    2de2:	40 81       	ld	r20, Z
    2de4:	21 e0       	ldi	r18, 0x01	; 1
    2de6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
			/*Erase the CLCD*/
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
			}
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    2dea:	de 01       	movw	r26, r28
    2dec:	a1 5a       	subi	r26, 0xA1	; 161
    2dee:	bf 4f       	sbci	r27, 0xFF	; 255
    2df0:	fe 01       	movw	r30, r28
    2df2:	e1 5a       	subi	r30, 0xA1	; 161
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 81       	ld	r24, Z
    2df8:	8f 5f       	subi	r24, 0xFF	; 255
    2dfa:	8c 93       	st	X, r24
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e1 5a       	subi	r30, 0xA1	; 161
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	8e 30       	cpi	r24, 0x0E	; 14
    2e06:	38 f3       	brcs	.-50     	; 0x2dd6 <main+0x7b0>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 1);
			}

			/*Check ID and Password*/
			if(Local_u16Password == Local_u16ReversedID)
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e9 5a       	subi	r30, 0xA9	; 169
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	de 01       	movw	r26, r28
    2e10:	ab 5a       	subi	r26, 0xAB	; 171
    2e12:	bf 4f       	sbci	r27, 0xFF	; 255
    2e14:	20 81       	ld	r18, Z
    2e16:	31 81       	ldd	r19, Z+1	; 0x01
    2e18:	8d 91       	ld	r24, X+
    2e1a:	9c 91       	ld	r25, X
    2e1c:	11 97       	sbiw	r26, 0x01	; 1
    2e1e:	28 17       	cp	r18, r24
    2e20:	39 07       	cpc	r19, r25
    2e22:	09 f0       	breq	.+2      	; 0x2e26 <main+0x800>
    2e24:	ae c0       	rjmp	.+348    	; 0x2f82 <main+0x95c>
			{
				CLCD_u8GoToXY(4, 0);
    2e26:	84 e0       	ldi	r24, 0x04	; 4
    2e28:	60 e0       	ldi	r22, 0x00	; 0
    2e2a:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
				CLCD_u8SendString("Welcome");
    2e2e:	84 e8       	ldi	r24, 0x84	; 132
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>
				SSD_u8Disable(&Local_ssdtLoginCounter);
    2e36:	ce 01       	movw	r24, r28
    2e38:	8a 59       	subi	r24, 0x9A	; 154
    2e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <SSD_u8Disable>
				Local_u8LoginFlag = 1;
    2e40:	fe 01       	movw	r30, r28
    2e42:	e5 5a       	subi	r30, 0xA5	; 165
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	80 83       	st	Z, r24
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	aa e7       	ldi	r26, 0x7A	; 122
    2e50:	b4 e4       	ldi	r27, 0x44	; 68
    2e52:	8f a3       	std	Y+39, r24	; 0x27
    2e54:	98 a7       	std	Y+40, r25	; 0x28
    2e56:	a9 a7       	std	Y+41, r26	; 0x29
    2e58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4a ef       	ldi	r20, 0xFA	; 250
    2e68:	54 e4       	ldi	r21, 0x44	; 68
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	8b a3       	std	Y+35, r24	; 0x23
    2e74:	9c a3       	std	Y+36, r25	; 0x24
    2e76:	ad a3       	std	Y+37, r26	; 0x25
    2e78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e80:	9e a1       	ldd	r25, Y+38	; 0x26
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e8       	ldi	r20, 0x80	; 128
    2e88:	5f e3       	ldi	r21, 0x3F	; 63
    2e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8e:	88 23       	and	r24, r24
    2e90:	2c f4       	brge	.+10     	; 0x2e9c <main+0x876>
		__ticks = 1;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9a a3       	std	Y+34, r25	; 0x22
    2e98:	89 a3       	std	Y+33, r24	; 0x21
    2e9a:	3f c0       	rjmp	.+126    	; 0x2f1a <main+0x8f4>
	else if (__tmp > 65535)
    2e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	3f ef       	ldi	r19, 0xFF	; 255
    2ea8:	4f e7       	ldi	r20, 0x7F	; 127
    2eaa:	57 e4       	ldi	r21, 0x47	; 71
    2eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb0:	18 16       	cp	r1, r24
    2eb2:	4c f5       	brge	.+82     	; 0x2f06 <main+0x8e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb4:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb6:	78 a5       	ldd	r23, Y+40	; 0x28
    2eb8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e2       	ldi	r20, 0x20	; 32
    2ec2:	51 e4       	ldi	r21, 0x41	; 65
    2ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9a a3       	std	Y+34, r25	; 0x22
    2eda:	89 a3       	std	Y+33, r24	; 0x21
    2edc:	0f c0       	rjmp	.+30     	; 0x2efc <main+0x8d6>
    2ede:	88 ec       	ldi	r24, 0xC8	; 200
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	98 a3       	std	Y+32, r25	; 0x20
    2ee4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ee8:	98 a1       	ldd	r25, Y+32	; 0x20
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <main+0x8c4>
    2eee:	98 a3       	std	Y+32, r25	; 0x20
    2ef0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	9a a3       	std	Y+34, r25	; 0x22
    2efa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efc:	89 a1       	ldd	r24, Y+33	; 0x21
    2efe:	9a a1       	ldd	r25, Y+34	; 0x22
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	69 f7       	brne	.-38     	; 0x2ede <main+0x8b8>
    2f04:	14 c0       	rjmp	.+40     	; 0x2f2e <main+0x908>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f06:	6b a1       	ldd	r22, Y+35	; 0x23
    2f08:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9a a3       	std	Y+34, r25	; 0x22
    2f18:	89 a3       	std	Y+33, r24	; 0x21
    2f1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f20:	8d 8f       	std	Y+29, r24	; 0x1d
    2f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <main+0x900>
    2f2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f2c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				for(Local_u8PrintIterator = 4; Local_u8PrintIterator < 11; Local_u8PrintIterator++)
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ee 59       	subi	r30, 0x9E	; 158
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	84 e0       	ldi	r24, 0x04	; 4
    2f36:	80 83       	st	Z, r24
    2f38:	1d c0       	rjmp	.+58     	; 0x2f74 <main+0x94e>
				{
					CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8PrintIterator, 0);
    2f3a:	86 ec       	ldi	r24, 0xC6	; 198
    2f3c:	91 e0       	ldi	r25, 0x01	; 1
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ee 59       	subi	r30, 0x9E	; 158
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	62 e0       	ldi	r22, 0x02	; 2
    2f46:	40 81       	ld	r20, Z
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
					CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8PrintIterator, 1);
    2f4e:	86 ec       	ldi	r24, 0xC6	; 198
    2f50:	91 e0       	ldi	r25, 0x01	; 1
    2f52:	fe 01       	movw	r30, r28
    2f54:	ee 59       	subi	r30, 0x9E	; 158
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	62 e0       	ldi	r22, 0x02	; 2
    2f5a:	40 81       	ld	r20, Z
    2f5c:	21 e0       	ldi	r18, 0x01	; 1
    2f5e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
				CLCD_u8GoToXY(4, 0);
				CLCD_u8SendString("Welcome");
				SSD_u8Disable(&Local_ssdtLoginCounter);
				Local_u8LoginFlag = 1;
				_delay_ms(1000);
				for(Local_u8PrintIterator = 4; Local_u8PrintIterator < 11; Local_u8PrintIterator++)
    2f62:	de 01       	movw	r26, r28
    2f64:	ae 59       	subi	r26, 0x9E	; 158
    2f66:	bf 4f       	sbci	r27, 0xFF	; 255
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ee 59       	subi	r30, 0x9E	; 158
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	8c 93       	st	X, r24
    2f74:	fe 01       	movw	r30, r28
    2f76:	ee 59       	subi	r30, 0x9E	; 158
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	8b 30       	cpi	r24, 0x0B	; 11
    2f7e:	e8 f2       	brcs	.-70     	; 0x2f3a <main+0x914>
    2f80:	a7 c0       	rjmp	.+334    	; 0x30d0 <main+0xaaa>
				}
				break;
			}
			else
			{
				Local_u16ID = 0;
    2f82:	fe 01       	movw	r30, r28
    2f84:	e7 5a       	subi	r30, 0xA7	; 167
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	11 82       	std	Z+1, r1	; 0x01
    2f8a:	10 82       	st	Z, r1
				Local_u16Password = 0;
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e9 5a       	subi	r30, 0xA9	; 169
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	11 82       	std	Z+1, r1	; 0x01
    2f94:	10 82       	st	Z, r1
				Local_u16ReversedID = 0;
    2f96:	fe 01       	movw	r30, r28
    2f98:	eb 5a       	subi	r30, 0xAB	; 171
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	11 82       	std	Z+1, r1	; 0x01
    2f9e:	10 82       	st	Z, r1
				Local_u8SevenSegmentIterator--;
    2fa0:	de 01       	movw	r26, r28
    2fa2:	a4 5a       	subi	r26, 0xA4	; 164
    2fa4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e4 5a       	subi	r30, 0xA4	; 164
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	81 50       	subi	r24, 0x01	; 1
    2fb0:	8c 93       	st	X, r24
				CLCD_u8GoToXY(1, 0);
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
				CLCD_u8SendString("Wrong Input!");
    2fba:	8c e8       	ldi	r24, 0x8C	; 140
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>
				if(Local_u8SevenSegmentIterator > 0)
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e4 5a       	subi	r30, 0xA4	; 164
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	88 23       	and	r24, r24
    2fcc:	41 f0       	breq	.+16     	; 0x2fde <main+0x9b8>
				{
					CLCD_u8GoToXY(2, 1);
    2fce:	82 e0       	ldi	r24, 0x02	; 2
    2fd0:	61 e0       	ldi	r22, 0x01	; 1
    2fd2:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
					CLCD_u8SendString("Try again!");
    2fd6:	89 e9       	ldi	r24, 0x99	; 153
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	aa ef       	ldi	r26, 0xFA	; 250
    2fe4:	b3 e4       	ldi	r27, 0x43	; 67
    2fe6:	89 8f       	std	Y+25, r24	; 0x19
    2fe8:	9a 8f       	std	Y+26, r25	; 0x1a
    2fea:	ab 8f       	std	Y+27, r26	; 0x1b
    2fec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fee:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	4a ef       	ldi	r20, 0xFA	; 250
    2ffc:	54 e4       	ldi	r21, 0x44	; 68
    2ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	8d 8b       	std	Y+21, r24	; 0x15
    3008:	9e 8b       	std	Y+22, r25	; 0x16
    300a:	af 8b       	std	Y+23, r26	; 0x17
    300c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    300e:	6d 89       	ldd	r22, Y+21	; 0x15
    3010:	7e 89       	ldd	r23, Y+22	; 0x16
    3012:	8f 89       	ldd	r24, Y+23	; 0x17
    3014:	98 8d       	ldd	r25, Y+24	; 0x18
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e8       	ldi	r20, 0x80	; 128
    301c:	5f e3       	ldi	r21, 0x3F	; 63
    301e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3022:	88 23       	and	r24, r24
    3024:	2c f4       	brge	.+10     	; 0x3030 <main+0xa0a>
		__ticks = 1;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	9c 8b       	std	Y+20, r25	; 0x14
    302c:	8b 8b       	std	Y+19, r24	; 0x13
    302e:	3f c0       	rjmp	.+126    	; 0x30ae <main+0xa88>
	else if (__tmp > 65535)
    3030:	6d 89       	ldd	r22, Y+21	; 0x15
    3032:	7e 89       	ldd	r23, Y+22	; 0x16
    3034:	8f 89       	ldd	r24, Y+23	; 0x17
    3036:	98 8d       	ldd	r25, Y+24	; 0x18
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	3f ef       	ldi	r19, 0xFF	; 255
    303c:	4f e7       	ldi	r20, 0x7F	; 127
    303e:	57 e4       	ldi	r21, 0x47	; 71
    3040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3044:	18 16       	cp	r1, r24
    3046:	4c f5       	brge	.+82     	; 0x309a <main+0xa74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3048:	69 8d       	ldd	r22, Y+25	; 0x19
    304a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e2       	ldi	r20, 0x20	; 32
    3056:	51 e4       	ldi	r21, 0x41	; 65
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	bc 01       	movw	r22, r24
    3062:	cd 01       	movw	r24, r26
    3064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	9c 8b       	std	Y+20, r25	; 0x14
    306e:	8b 8b       	std	Y+19, r24	; 0x13
    3070:	0f c0       	rjmp	.+30     	; 0x3090 <main+0xa6a>
    3072:	88 ec       	ldi	r24, 0xC8	; 200
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	9a 8b       	std	Y+18, r25	; 0x12
    3078:	89 8b       	std	Y+17, r24	; 0x11
    307a:	89 89       	ldd	r24, Y+17	; 0x11
    307c:	9a 89       	ldd	r25, Y+18	; 0x12
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <main+0xa58>
    3082:	9a 8b       	std	Y+18, r25	; 0x12
    3084:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3086:	8b 89       	ldd	r24, Y+19	; 0x13
    3088:	9c 89       	ldd	r25, Y+20	; 0x14
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	9c 8b       	std	Y+20, r25	; 0x14
    308e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3090:	8b 89       	ldd	r24, Y+19	; 0x13
    3092:	9c 89       	ldd	r25, Y+20	; 0x14
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	69 f7       	brne	.-38     	; 0x3072 <main+0xa4c>
    3098:	14 c0       	rjmp	.+40     	; 0x30c2 <main+0xa9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309a:	6d 89       	ldd	r22, Y+21	; 0x15
    309c:	7e 89       	ldd	r23, Y+22	; 0x16
    309e:	8f 89       	ldd	r24, Y+23	; 0x17
    30a0:	98 8d       	ldd	r25, Y+24	; 0x18
    30a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	9c 8b       	std	Y+20, r25	; 0x14
    30ac:	8b 8b       	std	Y+19, r24	; 0x13
    30ae:	8b 89       	ldd	r24, Y+19	; 0x13
    30b0:	9c 89       	ldd	r25, Y+20	; 0x14
    30b2:	98 8b       	std	Y+16, r25	; 0x10
    30b4:	8f 87       	std	Y+15, r24	; 0x0f
    30b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b8:	98 89       	ldd	r25, Y+16	; 0x10
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <main+0xa94>
    30be:	98 8b       	std	Y+16, r25	; 0x10
    30c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);

	/*Super Loop*/
	while(1)
	{
		while(Local_u8SevenSegmentIterator != 0)
    30c2:	fe 01       	movw	r30, r28
    30c4:	e4 5a       	subi	r30, 0xA4	; 164
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 81       	ld	r24, Z
    30ca:	88 23       	and	r24, r24
    30cc:	09 f0       	breq	.+2      	; 0x30d0 <main+0xaaa>
    30ce:	94 cc       	rjmp	.-1752   	; 0x29f8 <main+0x3d2>
				_delay_ms(500);
				continue;
			}
		}

		if(Local_u8SevenSegmentIterator == 0)
    30d0:	fe 01       	movw	r30, r28
    30d2:	e4 5a       	subi	r30, 0xA4	; 164
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	80 81       	ld	r24, Z
    30d8:	88 23       	and	r24, r24
    30da:	89 f4       	brne	.+34     	; 0x30fe <main+0xad8>
		{
			SSD_u8SetNumber(&Local_ssdtLoginCounter, Local_u8SevenSegmentIterator);
    30dc:	ce 01       	movw	r24, r28
    30de:	8a 59       	subi	r24, 0x9A	; 154
    30e0:	9f 4f       	sbci	r25, 0xFF	; 255
    30e2:	fe 01       	movw	r30, r28
    30e4:	e4 5a       	subi	r30, 0xA4	; 164
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	60 81       	ld	r22, Z
    30ea:	0e 94 40 12 	call	0x2480	; 0x2480 <SSD_u8SetNumber>
			CLCD_u8GoToXY(0, 1);
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	61 e0       	ldi	r22, 0x01	; 1
    30f2:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
			CLCD_u8SendString("Call Emergency!");
    30f6:	84 ea       	ldi	r24, 0xA4	; 164
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>
		}

		CLCD_u8GoToXY(0, 0);
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
		CLCD_u8SendString("Temp.: ");
    3106:	84 eb       	ldi	r24, 0xB4	; 180
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>

		CLCD_u8GoToXY(0, 1);
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	61 e0       	ldi	r22, 0x01	; 1
    3112:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
		CLCD_u8SendString("LEDs: 0 - ");
    3116:	8c eb       	ldi	r24, 0xBC	; 188
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	0e 94 88 08 	call	0x1110	; 0x1110 <CLCD_u8SendString>

		CLCD_u8GoToXY(11, 0);
    311e:	8b e0       	ldi	r24, 0x0B	; 11
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
		CLCD_voidSendData('(');
    3126:	88 e2       	ldi	r24, 0x28	; 40
    3128:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
		CLCD_u8GoToXY(13, 0);
    312c:	8d e0       	ldi	r24, 0x0D	; 13
    312e:	60 e0       	ldi	r22, 0x00	; 0
    3130:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
		CLCD_voidSendData(')');
    3134:	89 e2       	ldi	r24, 0x29	; 41
    3136:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
		DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN2, DIO_u8PIN_LOW);
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	62 e0       	ldi	r22, 0x02	; 2
    313e:	40 e0       	ldi	r20, 0x00	; 0
    3140:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_u8SetPinValue>

		while(1)
		{
			for(Local_u8PrintIterator = 7; Local_u8PrintIterator < 10; Local_u8PrintIterator++)
    3144:	fe 01       	movw	r30, r28
    3146:	ee 59       	subi	r30, 0x9E	; 158
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	87 e0       	ldi	r24, 0x07	; 7
    314c:	80 83       	st	Z, r24
    314e:	13 c0       	rjmp	.+38     	; 0x3176 <main+0xb50>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8PrintIterator, 0);
    3150:	86 ec       	ldi	r24, 0xC6	; 198
    3152:	91 e0       	ldi	r25, 0x01	; 1
    3154:	fe 01       	movw	r30, r28
    3156:	ee 59       	subi	r30, 0x9E	; 158
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	62 e0       	ldi	r22, 0x02	; 2
    315c:	40 81       	ld	r20, Z
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
		CLCD_voidSendData(')');
		DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN2, DIO_u8PIN_LOW);

		while(1)
		{
			for(Local_u8PrintIterator = 7; Local_u8PrintIterator < 10; Local_u8PrintIterator++)
    3164:	de 01       	movw	r26, r28
    3166:	ae 59       	subi	r26, 0x9E	; 158
    3168:	bf 4f       	sbci	r27, 0xFF	; 255
    316a:	fe 01       	movw	r30, r28
    316c:	ee 59       	subi	r30, 0x9E	; 158
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 81       	ld	r24, Z
    3172:	8f 5f       	subi	r24, 0xFF	; 255
    3174:	8c 93       	st	X, r24
    3176:	fe 01       	movw	r30, r28
    3178:	ee 59       	subi	r30, 0x9E	; 158
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 81       	ld	r24, Z
    317e:	8a 30       	cpi	r24, 0x0A	; 10
    3180:	38 f3       	brcs	.-50     	; 0x3150 <main+0xb2a>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8PrintIterator, 0);
			}
			CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, 10, 1);
    3182:	86 ec       	ldi	r24, 0xC6	; 198
    3184:	91 e0       	ldi	r25, 0x01	; 1
    3186:	62 e0       	ldi	r22, 0x02	; 2
    3188:	4a e0       	ldi	r20, 0x0A	; 10
    318a:	21 e0       	ldi	r18, 0x01	; 1
    318c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>

			/*Get temp and voltage*/
			LM35_u8GetTemp(LM35_u8ADC_CH0, &Local_u8Temperature);
    3190:	9e 01       	movw	r18, r28
    3192:	2d 59       	subi	r18, 0x9D	; 157
    3194:	3f 4f       	sbci	r19, 0xFF	; 255
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	b9 01       	movw	r22, r18
    319a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LM35_u8GetTemp>
			LDR_u8GetAnalogVolt(LDR_u8ADC_CH7, &Local_u16LDRVoltage);
    319e:	9e 01       	movw	r18, r28
    31a0:	2c 59       	subi	r18, 0x9C	; 156
    31a2:	3f 4f       	sbci	r19, 0xFF	; 255
    31a4:	87 e0       	ldi	r24, 0x07	; 7
    31a6:	b9 01       	movw	r22, r18
    31a8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LDR_u8GetAnalogVolt>
			CLCD_u8GoToXY(7, 0);
    31ac:	87 e0       	ldi	r24, 0x07	; 7
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_u8Temperature);
    31b4:	fe 01       	movw	r30, r28
    31b6:	ed 59       	subi	r30, 0x9D	; 157
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	a0 e0       	ldi	r26, 0x00	; 0
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 bb 08 	call	0x1176	; 0x1176 <CLCD_voidSendDecimalNumber>

			if(Local_u8Temperature > 40)
    31cc:	fe 01       	movw	r30, r28
    31ce:	ed 59       	subi	r30, 0x9D	; 157
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	89 32       	cpi	r24, 0x29	; 41
    31d6:	68 f0       	brcs	.+26     	; 0x31f2 <main+0xbcc>
			{
				MOTOR_u8RotateCW(&Local_motortSystemMotor);
    31d8:	ce 01       	movw	r24, r28
    31da:	85 59       	subi	r24, 0x95	; 149
    31dc:	9f 4f       	sbci	r25, 0xFF	; 255
    31de:	0e 94 9a 11 	call	0x2334	; 0x2334 <MOTOR_u8RotateCW>
				CLCD_u8GoToXY(12, 0);
    31e2:	8c e0       	ldi	r24, 0x0C	; 12
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
				CLCD_voidSendData('M');
    31ea:	8d e4       	ldi	r24, 0x4D	; 77
    31ec:	0e 94 ba 07 	call	0xf74	; 0xf74 <CLCD_voidSendData>
    31f0:	16 c0       	rjmp	.+44     	; 0x321e <main+0xbf8>
			}
			else if(Local_u8Temperature < 35)
    31f2:	fe 01       	movw	r30, r28
    31f4:	ed 59       	subi	r30, 0x9D	; 157
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	80 81       	ld	r24, Z
    31fa:	83 32       	cpi	r24, 0x23	; 35
    31fc:	80 f4       	brcc	.+32     	; 0x321e <main+0xbf8>
			{
				MOTOR_u8Stop(&Local_motortSystemMotor);
    31fe:	ce 01       	movw	r24, r28
    3200:	85 59       	subi	r24, 0x95	; 149
    3202:	9f 4f       	sbci	r25, 0xFF	; 255
    3204:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <MOTOR_u8Stop>
				CLCD_u8GoToXY(12, 0);
    3208:	8c e0       	ldi	r24, 0x0C	; 12
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, 12, 0);
    3210:	86 ec       	ldi	r24, 0xC6	; 198
    3212:	91 e0       	ldi	r25, 0x01	; 1
    3214:	62 e0       	ldi	r22, 0x02	; 2
    3216:	4c e0       	ldi	r20, 0x0C	; 12
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CLCD_voidSendSpecialCharacter>
			}

			/*Set the pins*/
			Local_u8LedsMap = LIBRARY_s32Mapping(0, 4980, 0, 8, Local_u16LDRVoltage);
    321e:	fe 01       	movw	r30, r28
    3220:	ec 59       	subi	r30, 0x9C	; 156
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	cc 01       	movw	r24, r24
    322a:	a0 e0       	ldi	r26, 0x00	; 0
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	00 d0       	rcall	.+0      	; 0x3230 <main+0xc0a>
    3230:	00 d0       	rcall	.+0      	; 0x3232 <main+0xc0c>
    3232:	ed b7       	in	r30, 0x3d	; 61
    3234:	fe b7       	in	r31, 0x3e	; 62
    3236:	31 96       	adiw	r30, 0x01	; 1
    3238:	80 83       	st	Z, r24
    323a:	91 83       	std	Z+1, r25	; 0x01
    323c:	a2 83       	std	Z+2, r26	; 0x02
    323e:	b3 83       	std	Z+3, r27	; 0x03
    3240:	60 e0       	ldi	r22, 0x00	; 0
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	24 e7       	ldi	r18, 0x74	; 116
    324a:	33 e1       	ldi	r19, 0x13	; 19
    324c:	40 e0       	ldi	r20, 0x00	; 0
    324e:	50 e0       	ldi	r21, 0x00	; 0
    3250:	ee 24       	eor	r14, r14
    3252:	ff 24       	eor	r15, r15
    3254:	87 01       	movw	r16, r14
    3256:	aa 24       	eor	r10, r10
    3258:	bb 24       	eor	r11, r11
    325a:	65 01       	movw	r12, r10
    325c:	68 94       	set
    325e:	a3 f8       	bld	r10, 3
    3260:	0e 94 55 10 	call	0x20aa	; 0x20aa <LIBRARY_s32Mapping>
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	fe 01       	movw	r30, r28
    3272:	e0 5a       	subi	r30, 0xA0	; 160
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	80 83       	st	Z, r24
			CLCD_u8GoToXY(10, 1);
    3278:	8a e0       	ldi	r24, 0x0A	; 10
    327a:	61 e0       	ldi	r22, 0x01	; 1
    327c:	0e 94 93 0a 	call	0x1526	; 0x1526 <CLCD_u8GoToXY>
			CLCD_voidSendDecimalNumber(Local_u8LedsMap);
    3280:	fe 01       	movw	r30, r28
    3282:	e0 5a       	subi	r30, 0xA0	; 160
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 81       	ld	r24, Z
    3288:	88 2f       	mov	r24, r24
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	a0 e0       	ldi	r26, 0x00	; 0
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	0e 94 bb 08 	call	0x1176	; 0x1176 <CLCD_voidSendDecimalNumber>
			DIO_u8SetPortValue(DIO_u8PORTD, 0);
    3298:	83 e0       	ldi	r24, 0x03	; 3
    329a:	60 e0       	ldi	r22, 0x00	; 0
    329c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
			switch(Local_u8LedsMap)
    32a0:	fe 01       	movw	r30, r28
    32a2:	e0 5a       	subi	r30, 0xA0	; 160
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 81       	ld	r24, Z
    32a8:	28 2f       	mov	r18, r24
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	e0 96       	adiw	r28, 0x30	; 48
    32ae:	3f af       	std	Y+63, r19	; 0x3f
    32b0:	2e af       	std	Y+62, r18	; 0x3e
    32b2:	e0 97       	sbiw	r28, 0x30	; 48
    32b4:	e0 96       	adiw	r28, 0x30	; 48
    32b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    32b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    32ba:	e0 97       	sbiw	r28, 0x30	; 48
    32bc:	84 30       	cpi	r24, 0x04	; 4
    32be:	91 05       	cpc	r25, r1
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <main+0xc9e>
    32c2:	5d c0       	rjmp	.+186    	; 0x337e <main+0xd58>
    32c4:	e0 96       	adiw	r28, 0x30	; 48
    32c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    32c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    32ca:	e0 97       	sbiw	r28, 0x30	; 48
    32cc:	e5 30       	cpi	r30, 0x05	; 5
    32ce:	f1 05       	cpc	r31, r1
    32d0:	2c f5       	brge	.+74     	; 0x331c <main+0xcf6>
    32d2:	e0 96       	adiw	r28, 0x30	; 48
    32d4:	2e ad       	ldd	r18, Y+62	; 0x3e
    32d6:	3f ad       	ldd	r19, Y+63	; 0x3f
    32d8:	e0 97       	sbiw	r28, 0x30	; 48
    32da:	21 30       	cpi	r18, 0x01	; 1
    32dc:	31 05       	cpc	r19, r1
    32de:	09 f4       	brne	.+2      	; 0x32e2 <main+0xcbc>
    32e0:	3f c0       	rjmp	.+126    	; 0x3360 <main+0xd3a>
    32e2:	e0 96       	adiw	r28, 0x30	; 48
    32e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    32e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    32e8:	e0 97       	sbiw	r28, 0x30	; 48
    32ea:	82 30       	cpi	r24, 0x02	; 2
    32ec:	91 05       	cpc	r25, r1
    32ee:	3c f4       	brge	.+14     	; 0x32fe <main+0xcd8>
    32f0:	e0 96       	adiw	r28, 0x30	; 48
    32f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    32f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    32f6:	e0 97       	sbiw	r28, 0x30	; 48
    32f8:	30 97       	sbiw	r30, 0x00	; 0
    32fa:	69 f1       	breq	.+90     	; 0x3356 <main+0xd30>
    32fc:	58 c0       	rjmp	.+176    	; 0x33ae <main+0xd88>
    32fe:	e0 96       	adiw	r28, 0x30	; 48
    3300:	2e ad       	ldd	r18, Y+62	; 0x3e
    3302:	3f ad       	ldd	r19, Y+63	; 0x3f
    3304:	e0 97       	sbiw	r28, 0x30	; 48
    3306:	22 30       	cpi	r18, 0x02	; 2
    3308:	31 05       	cpc	r19, r1
    330a:	79 f1       	breq	.+94     	; 0x336a <main+0xd44>
    330c:	e0 96       	adiw	r28, 0x30	; 48
    330e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3310:	9f ad       	ldd	r25, Y+63	; 0x3f
    3312:	e0 97       	sbiw	r28, 0x30	; 48
    3314:	83 30       	cpi	r24, 0x03	; 3
    3316:	91 05       	cpc	r25, r1
    3318:	69 f1       	breq	.+90     	; 0x3374 <main+0xd4e>
    331a:	49 c0       	rjmp	.+146    	; 0x33ae <main+0xd88>
    331c:	e0 96       	adiw	r28, 0x30	; 48
    331e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3320:	ff ad       	ldd	r31, Y+63	; 0x3f
    3322:	e0 97       	sbiw	r28, 0x30	; 48
    3324:	e6 30       	cpi	r30, 0x06	; 6
    3326:	f1 05       	cpc	r31, r1
    3328:	a1 f1       	breq	.+104    	; 0x3392 <main+0xd6c>
    332a:	e0 96       	adiw	r28, 0x30	; 48
    332c:	2e ad       	ldd	r18, Y+62	; 0x3e
    332e:	3f ad       	ldd	r19, Y+63	; 0x3f
    3330:	e0 97       	sbiw	r28, 0x30	; 48
    3332:	26 30       	cpi	r18, 0x06	; 6
    3334:	31 05       	cpc	r19, r1
    3336:	44 f1       	brlt	.+80     	; 0x3388 <main+0xd62>
    3338:	e0 96       	adiw	r28, 0x30	; 48
    333a:	8e ad       	ldd	r24, Y+62	; 0x3e
    333c:	9f ad       	ldd	r25, Y+63	; 0x3f
    333e:	e0 97       	sbiw	r28, 0x30	; 48
    3340:	87 30       	cpi	r24, 0x07	; 7
    3342:	91 05       	cpc	r25, r1
    3344:	59 f1       	breq	.+86     	; 0x339c <main+0xd76>
    3346:	e0 96       	adiw	r28, 0x30	; 48
    3348:	ee ad       	ldd	r30, Y+62	; 0x3e
    334a:	ff ad       	ldd	r31, Y+63	; 0x3f
    334c:	e0 97       	sbiw	r28, 0x30	; 48
    334e:	e8 30       	cpi	r30, 0x08	; 8
    3350:	f1 05       	cpc	r31, r1
    3352:	49 f1       	breq	.+82     	; 0x33a6 <main+0xd80>
    3354:	2c c0       	rjmp	.+88     	; 0x33ae <main+0xd88>
			{
			case 0:	DIO_u8SetPortValue(DIO_u8PORTD, 0x00);	break;
    3356:	83 e0       	ldi	r24, 0x03	; 3
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    335e:	27 c0       	rjmp	.+78     	; 0x33ae <main+0xd88>
			case 1:	DIO_u8SetPortValue(DIO_u8PORTD, 0x01);	break;
    3360:	83 e0       	ldi	r24, 0x03	; 3
    3362:	61 e0       	ldi	r22, 0x01	; 1
    3364:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    3368:	22 c0       	rjmp	.+68     	; 0x33ae <main+0xd88>
			case 2:	DIO_u8SetPortValue(DIO_u8PORTD, 0x03);	break;
    336a:	83 e0       	ldi	r24, 0x03	; 3
    336c:	63 e0       	ldi	r22, 0x03	; 3
    336e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    3372:	1d c0       	rjmp	.+58     	; 0x33ae <main+0xd88>
			case 3:	DIO_u8SetPortValue(DIO_u8PORTD, 0x07);	break;
    3374:	83 e0       	ldi	r24, 0x03	; 3
    3376:	67 e0       	ldi	r22, 0x07	; 7
    3378:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    337c:	18 c0       	rjmp	.+48     	; 0x33ae <main+0xd88>
			case 4:	DIO_u8SetPortValue(DIO_u8PORTD, 0x0f);	break;
    337e:	83 e0       	ldi	r24, 0x03	; 3
    3380:	6f e0       	ldi	r22, 0x0F	; 15
    3382:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    3386:	13 c0       	rjmp	.+38     	; 0x33ae <main+0xd88>
			case 5:	DIO_u8SetPortValue(DIO_u8PORTD, 0x1f);	break;
    3388:	83 e0       	ldi	r24, 0x03	; 3
    338a:	6f e1       	ldi	r22, 0x1F	; 31
    338c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    3390:	0e c0       	rjmp	.+28     	; 0x33ae <main+0xd88>
			case 6:	DIO_u8SetPortValue(DIO_u8PORTD, 0x3f);	break;
    3392:	83 e0       	ldi	r24, 0x03	; 3
    3394:	6f e3       	ldi	r22, 0x3F	; 63
    3396:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    339a:	09 c0       	rjmp	.+18     	; 0x33ae <main+0xd88>
			case 7:	DIO_u8SetPortValue(DIO_u8PORTD, 0x7f);	break;
    339c:	83 e0       	ldi	r24, 0x03	; 3
    339e:	6f e7       	ldi	r22, 0x7F	; 127
    33a0:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    33a4:	04 c0       	rjmp	.+8      	; 0x33ae <main+0xd88>
			case 8:	DIO_u8SetPortValue(DIO_u8PORTD, 0xff);	break;
    33a6:	83 e0       	ldi	r24, 0x03	; 3
    33a8:	6f ef       	ldi	r22, 0xFF	; 255
    33aa:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_u8SetPortValue>
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	aa ef       	ldi	r26, 0xFA	; 250
    33b4:	b4 e4       	ldi	r27, 0x44	; 68
    33b6:	8b 87       	std	Y+11, r24	; 0x0b
    33b8:	9c 87       	std	Y+12, r25	; 0x0c
    33ba:	ad 87       	std	Y+13, r26	; 0x0d
    33bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33be:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	4a ef       	ldi	r20, 0xFA	; 250
    33cc:	54 e4       	ldi	r21, 0x44	; 68
    33ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	8f 83       	std	Y+7, r24	; 0x07
    33d8:	98 87       	std	Y+8, r25	; 0x08
    33da:	a9 87       	std	Y+9, r26	; 0x09
    33dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33de:	6f 81       	ldd	r22, Y+7	; 0x07
    33e0:	78 85       	ldd	r23, Y+8	; 0x08
    33e2:	89 85       	ldd	r24, Y+9	; 0x09
    33e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e8       	ldi	r20, 0x80	; 128
    33ec:	5f e3       	ldi	r21, 0x3F	; 63
    33ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f2:	88 23       	and	r24, r24
    33f4:	2c f4       	brge	.+10     	; 0x3400 <main+0xdda>
		__ticks = 1;
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	9e 83       	std	Y+6, r25	; 0x06
    33fc:	8d 83       	std	Y+5, r24	; 0x05
    33fe:	3f c0       	rjmp	.+126    	; 0x347e <main+0xe58>
	else if (__tmp > 65535)
    3400:	6f 81       	ldd	r22, Y+7	; 0x07
    3402:	78 85       	ldd	r23, Y+8	; 0x08
    3404:	89 85       	ldd	r24, Y+9	; 0x09
    3406:	9a 85       	ldd	r25, Y+10	; 0x0a
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	3f ef       	ldi	r19, 0xFF	; 255
    340c:	4f e7       	ldi	r20, 0x7F	; 127
    340e:	57 e4       	ldi	r21, 0x47	; 71
    3410:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3414:	18 16       	cp	r1, r24
    3416:	4c f5       	brge	.+82     	; 0x346a <main+0xe44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3418:	6b 85       	ldd	r22, Y+11	; 0x0b
    341a:	7c 85       	ldd	r23, Y+12	; 0x0c
    341c:	8d 85       	ldd	r24, Y+13	; 0x0d
    341e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	40 e2       	ldi	r20, 0x20	; 32
    3426:	51 e4       	ldi	r21, 0x41	; 65
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	bc 01       	movw	r22, r24
    3432:	cd 01       	movw	r24, r26
    3434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	9e 83       	std	Y+6, r25	; 0x06
    343e:	8d 83       	std	Y+5, r24	; 0x05
    3440:	0f c0       	rjmp	.+30     	; 0x3460 <main+0xe3a>
    3442:	88 ec       	ldi	r24, 0xC8	; 200
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	9c 83       	std	Y+4, r25	; 0x04
    3448:	8b 83       	std	Y+3, r24	; 0x03
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	9c 81       	ldd	r25, Y+4	; 0x04
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <main+0xe28>
    3452:	9c 83       	std	Y+4, r25	; 0x04
    3454:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	01 97       	sbiw	r24, 0x01	; 1
    345c:	9e 83       	std	Y+6, r25	; 0x06
    345e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3460:	8d 81       	ldd	r24, Y+5	; 0x05
    3462:	9e 81       	ldd	r25, Y+6	; 0x06
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	69 f7       	brne	.-38     	; 0x3442 <main+0xe1c>
    3468:	6d ce       	rjmp	.-806    	; 0x3144 <main+0xb1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346a:	6f 81       	ldd	r22, Y+7	; 0x07
    346c:	78 85       	ldd	r23, Y+8	; 0x08
    346e:	89 85       	ldd	r24, Y+9	; 0x09
    3470:	9a 85       	ldd	r25, Y+10	; 0x0a
    3472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	9e 83       	std	Y+6, r25	; 0x06
    347c:	8d 83       	std	Y+5, r24	; 0x05
    347e:	8d 81       	ldd	r24, Y+5	; 0x05
    3480:	9e 81       	ldd	r25, Y+6	; 0x06
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	89 83       	std	Y+1, r24	; 0x01
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	9a 81       	ldd	r25, Y+2	; 0x02
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	f1 f7       	brne	.-4      	; 0x348a <main+0xe64>
    348e:	9a 83       	std	Y+2, r25	; 0x02
    3490:	89 83       	std	Y+1, r24	; 0x01
    3492:	58 ce       	rjmp	.-848    	; 0x3144 <main+0xb1e>

00003494 <__mulsi3>:
    3494:	62 9f       	mul	r22, r18
    3496:	d0 01       	movw	r26, r0
    3498:	73 9f       	mul	r23, r19
    349a:	f0 01       	movw	r30, r0
    349c:	82 9f       	mul	r24, r18
    349e:	e0 0d       	add	r30, r0
    34a0:	f1 1d       	adc	r31, r1
    34a2:	64 9f       	mul	r22, r20
    34a4:	e0 0d       	add	r30, r0
    34a6:	f1 1d       	adc	r31, r1
    34a8:	92 9f       	mul	r25, r18
    34aa:	f0 0d       	add	r31, r0
    34ac:	83 9f       	mul	r24, r19
    34ae:	f0 0d       	add	r31, r0
    34b0:	74 9f       	mul	r23, r20
    34b2:	f0 0d       	add	r31, r0
    34b4:	65 9f       	mul	r22, r21
    34b6:	f0 0d       	add	r31, r0
    34b8:	99 27       	eor	r25, r25
    34ba:	72 9f       	mul	r23, r18
    34bc:	b0 0d       	add	r27, r0
    34be:	e1 1d       	adc	r30, r1
    34c0:	f9 1f       	adc	r31, r25
    34c2:	63 9f       	mul	r22, r19
    34c4:	b0 0d       	add	r27, r0
    34c6:	e1 1d       	adc	r30, r1
    34c8:	f9 1f       	adc	r31, r25
    34ca:	bd 01       	movw	r22, r26
    34cc:	cf 01       	movw	r24, r30
    34ce:	11 24       	eor	r1, r1
    34d0:	08 95       	ret

000034d2 <__udivmodhi4>:
    34d2:	aa 1b       	sub	r26, r26
    34d4:	bb 1b       	sub	r27, r27
    34d6:	51 e1       	ldi	r21, 0x11	; 17
    34d8:	07 c0       	rjmp	.+14     	; 0x34e8 <__udivmodhi4_ep>

000034da <__udivmodhi4_loop>:
    34da:	aa 1f       	adc	r26, r26
    34dc:	bb 1f       	adc	r27, r27
    34de:	a6 17       	cp	r26, r22
    34e0:	b7 07       	cpc	r27, r23
    34e2:	10 f0       	brcs	.+4      	; 0x34e8 <__udivmodhi4_ep>
    34e4:	a6 1b       	sub	r26, r22
    34e6:	b7 0b       	sbc	r27, r23

000034e8 <__udivmodhi4_ep>:
    34e8:	88 1f       	adc	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	5a 95       	dec	r21
    34ee:	a9 f7       	brne	.-22     	; 0x34da <__udivmodhi4_loop>
    34f0:	80 95       	com	r24
    34f2:	90 95       	com	r25
    34f4:	bc 01       	movw	r22, r24
    34f6:	cd 01       	movw	r24, r26
    34f8:	08 95       	ret

000034fa <__udivmodsi4>:
    34fa:	a1 e2       	ldi	r26, 0x21	; 33
    34fc:	1a 2e       	mov	r1, r26
    34fe:	aa 1b       	sub	r26, r26
    3500:	bb 1b       	sub	r27, r27
    3502:	fd 01       	movw	r30, r26
    3504:	0d c0       	rjmp	.+26     	; 0x3520 <__udivmodsi4_ep>

00003506 <__udivmodsi4_loop>:
    3506:	aa 1f       	adc	r26, r26
    3508:	bb 1f       	adc	r27, r27
    350a:	ee 1f       	adc	r30, r30
    350c:	ff 1f       	adc	r31, r31
    350e:	a2 17       	cp	r26, r18
    3510:	b3 07       	cpc	r27, r19
    3512:	e4 07       	cpc	r30, r20
    3514:	f5 07       	cpc	r31, r21
    3516:	20 f0       	brcs	.+8      	; 0x3520 <__udivmodsi4_ep>
    3518:	a2 1b       	sub	r26, r18
    351a:	b3 0b       	sbc	r27, r19
    351c:	e4 0b       	sbc	r30, r20
    351e:	f5 0b       	sbc	r31, r21

00003520 <__udivmodsi4_ep>:
    3520:	66 1f       	adc	r22, r22
    3522:	77 1f       	adc	r23, r23
    3524:	88 1f       	adc	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	1a 94       	dec	r1
    352a:	69 f7       	brne	.-38     	; 0x3506 <__udivmodsi4_loop>
    352c:	60 95       	com	r22
    352e:	70 95       	com	r23
    3530:	80 95       	com	r24
    3532:	90 95       	com	r25
    3534:	9b 01       	movw	r18, r22
    3536:	ac 01       	movw	r20, r24
    3538:	bd 01       	movw	r22, r26
    353a:	cf 01       	movw	r24, r30
    353c:	08 95       	ret

0000353e <__divmodsi4>:
    353e:	97 fb       	bst	r25, 7
    3540:	09 2e       	mov	r0, r25
    3542:	05 26       	eor	r0, r21
    3544:	0e d0       	rcall	.+28     	; 0x3562 <__divmodsi4_neg1>
    3546:	57 fd       	sbrc	r21, 7
    3548:	04 d0       	rcall	.+8      	; 0x3552 <__divmodsi4_neg2>
    354a:	d7 df       	rcall	.-82     	; 0x34fa <__udivmodsi4>
    354c:	0a d0       	rcall	.+20     	; 0x3562 <__divmodsi4_neg1>
    354e:	00 1c       	adc	r0, r0
    3550:	38 f4       	brcc	.+14     	; 0x3560 <__divmodsi4_exit>

00003552 <__divmodsi4_neg2>:
    3552:	50 95       	com	r21
    3554:	40 95       	com	r20
    3556:	30 95       	com	r19
    3558:	21 95       	neg	r18
    355a:	3f 4f       	sbci	r19, 0xFF	; 255
    355c:	4f 4f       	sbci	r20, 0xFF	; 255
    355e:	5f 4f       	sbci	r21, 0xFF	; 255

00003560 <__divmodsi4_exit>:
    3560:	08 95       	ret

00003562 <__divmodsi4_neg1>:
    3562:	f6 f7       	brtc	.-4      	; 0x3560 <__divmodsi4_exit>
    3564:	90 95       	com	r25
    3566:	80 95       	com	r24
    3568:	70 95       	com	r23
    356a:	61 95       	neg	r22
    356c:	7f 4f       	sbci	r23, 0xFF	; 255
    356e:	8f 4f       	sbci	r24, 0xFF	; 255
    3570:	9f 4f       	sbci	r25, 0xFF	; 255
    3572:	08 95       	ret

00003574 <__prologue_saves__>:
    3574:	2f 92       	push	r2
    3576:	3f 92       	push	r3
    3578:	4f 92       	push	r4
    357a:	5f 92       	push	r5
    357c:	6f 92       	push	r6
    357e:	7f 92       	push	r7
    3580:	8f 92       	push	r8
    3582:	9f 92       	push	r9
    3584:	af 92       	push	r10
    3586:	bf 92       	push	r11
    3588:	cf 92       	push	r12
    358a:	df 92       	push	r13
    358c:	ef 92       	push	r14
    358e:	ff 92       	push	r15
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	cf 93       	push	r28
    3596:	df 93       	push	r29
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	ca 1b       	sub	r28, r26
    359e:	db 0b       	sbc	r29, r27
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	f8 94       	cli
    35a4:	de bf       	out	0x3e, r29	; 62
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	09 94       	ijmp

000035ac <__epilogue_restores__>:
    35ac:	2a 88       	ldd	r2, Y+18	; 0x12
    35ae:	39 88       	ldd	r3, Y+17	; 0x11
    35b0:	48 88       	ldd	r4, Y+16	; 0x10
    35b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    35b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    35b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    35b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    35ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    35bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    35be:	b9 84       	ldd	r11, Y+9	; 0x09
    35c0:	c8 84       	ldd	r12, Y+8	; 0x08
    35c2:	df 80       	ldd	r13, Y+7	; 0x07
    35c4:	ee 80       	ldd	r14, Y+6	; 0x06
    35c6:	fd 80       	ldd	r15, Y+5	; 0x05
    35c8:	0c 81       	ldd	r16, Y+4	; 0x04
    35ca:	1b 81       	ldd	r17, Y+3	; 0x03
    35cc:	aa 81       	ldd	r26, Y+2	; 0x02
    35ce:	b9 81       	ldd	r27, Y+1	; 0x01
    35d0:	ce 0f       	add	r28, r30
    35d2:	d1 1d       	adc	r29, r1
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	de bf       	out	0x3e, r29	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	cd bf       	out	0x3d, r28	; 61
    35de:	ed 01       	movw	r28, r26
    35e0:	08 95       	ret

000035e2 <_exit>:
    35e2:	f8 94       	cli

000035e4 <__stop_program>:
    35e4:	ff cf       	rjmp	.-2      	; 0x35e4 <__stop_program>
