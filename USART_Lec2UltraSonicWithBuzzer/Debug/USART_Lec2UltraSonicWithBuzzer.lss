
USART_Lec2UltraSonicWithBuzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000040d6  0000416a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080017e  0080017e  00004288  2**0
                  ALLOC
  3 .stab         00003780  00000000  00000000  00004288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018b6  00000000  00000000  00007a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000092be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000945e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ba5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cde1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000dfb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e46e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__vector_4>
      14:	0c 94 36 19 	jmp	0x326c	; 0x326c <__vector_5>
      18:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__vector_6>
      1c:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__vector_7>
      20:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__vector_8>
      24:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__vector_9>
      28:	0c 94 37 18 	jmp	0x306e	; 0x306e <__vector_10>
      2c:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 1b 	call	0x3794	; 0x3794 <main>
      8a:	0c 94 69 20 	jmp	0x40d2	; 0x40d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 56 20 	jmp	0x40ac	; 0x40ac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 56 20 	jmp	0x40ac	; 0x40ac <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 59       	subi	r30, 0x92	; 146
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <voidSendEnablePulse>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

static void voidSendEnablePulse(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2e 97       	sbiw	r28, 0x0e	; 14
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	66 e0       	ldi	r22, 0x06	; 6
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a0 e0       	ldi	r26, 0x00	; 0
     e52:	b0 e4       	ldi	r27, 0x40	; 64
     e54:	8b 87       	std	Y+11, r24	; 0x0b
     e56:	9c 87       	std	Y+12, r25	; 0x0c
     e58:	ad 87       	std	Y+13, r26	; 0x0d
     e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e60:	8d 85       	ldd	r24, Y+13	; 0x0d
     e62:	9e 85       	ldd	r25, Y+14	; 0x0e
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a ef       	ldi	r20, 0xFA	; 250
     e6a:	54 e4       	ldi	r21, 0x44	; 68
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8f 83       	std	Y+7, r24	; 0x07
     e76:	98 87       	std	Y+8, r25	; 0x08
     e78:	a9 87       	std	Y+9, r26	; 0x09
     e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	2c f4       	brge	.+10     	; 0xe9e <voidSendEnablePulse+0x70>
		__ticks = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	57 e4       	ldi	r21, 0x47	; 71
     eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	4c f5       	brge	.+82     	; 0xf08 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	0f c0       	rjmp	.+30     	; 0xefe <voidSendEnablePulse+0xd0>
     ee0:	88 ec       	ldi	r24, 0xC8	; 200
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <voidSendEnablePulse+0xbe>
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f7       	brne	.-38     	; 0xee0 <voidSendEnablePulse+0xb2>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <voidSendEnablePulse+0xfa>
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	66 e0       	ldi	r22, 0x06	; 6
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
}
     f3a:	2e 96       	adiw	r28, 0x0e	; 14
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple, 0));
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	98 2f       	mov	r25, r24
     f5c:	91 70       	andi	r25, 0x01	; 1
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	49 2f       	mov	r20, r25
     f64:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple, 1));
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	86 95       	lsr	r24
     f6c:	98 2f       	mov	r25, r24
     f6e:	91 70       	andi	r25, 0x01	; 1
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	49 2f       	mov	r20, r25
     f76:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple, 2));
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	86 95       	lsr	r24
     f7e:	86 95       	lsr	r24
     f80:	98 2f       	mov	r25, r24
     f82:	91 70       	andi	r25, 0x01	; 1
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	62 e0       	ldi	r22, 0x02	; 2
     f88:	49 2f       	mov	r20, r25
     f8a:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple, 3));
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	86 95       	lsr	r24
     f92:	86 95       	lsr	r24
     f94:	86 95       	lsr	r24
     f96:	98 2f       	mov	r25, r24
     f98:	91 70       	andi	r25, 0x01	; 1
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	63 e0       	ldi	r22, 0x03	; 3
     f9e:	49 2f       	mov	r20, r25
     fa0:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
}
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	64 e0       	ldi	r22, 0x04	; 4
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	65 e0       	ldi	r22, 0x05	; 5
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4);
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	82 95       	swap	r24
     fd0:	8f 70       	andi	r24, 0x0F	; 15
     fd2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     fd6:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     fe0:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>

#endif

}
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <CLCD_voidSendData>:

void CLCD_voidSendData(char Copy_c8Data)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	0f 92       	push	r0
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	64 e0       	ldi	r22, 0x04	; 4
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	65 e0       	ldi	r22, 0x05	; 5
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data >> 4);
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	82 95       	swap	r24
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1016:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data);
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1020:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>

#endif

}
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	2e 97       	sbiw	r28, 0x0e	; 14
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e2       	ldi	r26, 0x20	; 32
    1046:	b2 e4       	ldi	r27, 0x42	; 66
    1048:	8b 87       	std	Y+11, r24	; 0x0b
    104a:	9c 87       	std	Y+12, r25	; 0x0c
    104c:	ad 87       	std	Y+13, r26	; 0x0d
    104e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1050:	6b 85       	ldd	r22, Y+11	; 0x0b
    1052:	7c 85       	ldd	r23, Y+12	; 0x0c
    1054:	8d 85       	ldd	r24, Y+13	; 0x0d
    1056:	9e 85       	ldd	r25, Y+14	; 0x0e
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	4a ef       	ldi	r20, 0xFA	; 250
    105e:	54 e4       	ldi	r21, 0x44	; 68
    1060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	8f 83       	std	Y+7, r24	; 0x07
    106a:	98 87       	std	Y+8, r25	; 0x08
    106c:	a9 87       	std	Y+9, r26	; 0x09
    106e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1070:	6f 81       	ldd	r22, Y+7	; 0x07
    1072:	78 85       	ldd	r23, Y+8	; 0x08
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	9a 85       	ldd	r25, Y+10	; 0x0a
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e8       	ldi	r20, 0x80	; 128
    107e:	5f e3       	ldi	r21, 0x3F	; 63
    1080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1084:	88 23       	and	r24, r24
    1086:	2c f4       	brge	.+10     	; 0x1092 <CLCD_voidInit+0x66>
		__ticks = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	3f c0       	rjmp	.+126    	; 0x1110 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	3f ef       	ldi	r19, 0xFF	; 255
    109e:	4f e7       	ldi	r20, 0x7F	; 127
    10a0:	57 e4       	ldi	r21, 0x47	; 71
    10a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10a6:	18 16       	cp	r1, r24
    10a8:	4c f5       	brge	.+82     	; 0x10fc <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e2       	ldi	r20, 0x20	; 32
    10b8:	51 e4       	ldi	r21, 0x41	; 65
    10ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	bc 01       	movw	r22, r24
    10c4:	cd 01       	movw	r24, r26
    10c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	0f c0       	rjmp	.+30     	; 0x10f2 <CLCD_voidInit+0xc6>
    10d4:	88 ec       	ldi	r24, 0xC8	; 200
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9c 83       	std	Y+4, r25	; 0x04
    10da:	8b 83       	std	Y+3, r24	; 0x03
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <CLCD_voidInit+0xb4>
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	69 f7       	brne	.-38     	; 0x10d4 <CLCD_voidInit+0xa8>
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fc:	6f 81       	ldd	r22, Y+7	; 0x07
    10fe:	78 85       	ldd	r23, Y+8	; 0x08
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <CLCD_voidInit+0xf0>
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	64 e0       	ldi	r22, 0x04	; 4
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	65 e0       	ldi	r22, 0x05	; 5
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>

	/*Set Commands to lcd*/
	voidSetLCDHalfDataPort(0b0010);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    113e:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1148:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1152:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    1156:	8c e0       	ldi	r24, 0x0C	; 12
    1158:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>

	/*Display Clear cmd*/
	CLCD_voidSendCmd(0b00000001);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>
}
    1162:	2e 96       	adiw	r28, 0x0e	; 14
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>
}
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <CLCD_u8SendString+0x6>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <CLCD_u8SendString+0x8>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
    1198:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0;
    119a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ch8String != NULL)
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	d9 f0       	breq	.+54     	; 0x11da <CLCD_u8SendString+0x52>
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <CLCD_u8SendString+0x3a>
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	fc 01       	movw	r30, r24
    11b2:	e2 0f       	add	r30, r18
    11b4:	f3 1f       	adc	r31, r19
    11b6:	80 81       	ld	r24, Z
    11b8:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
			Local_u8Counter++;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	fc 01       	movw	r30, r24
    11ce:	e2 0f       	add	r30, r18
    11d0:	f3 1f       	adc	r31, r19
    11d2:	80 81       	ld	r24, Z
    11d4:	88 23       	and	r24, r24
    11d6:	39 f7       	brne	.-50     	; 0x11a6 <CLCD_u8SendString+0x1e>
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <CLCD_voidSendDecimalNumber>:


void CLCD_voidSendDecimalNumber(sint32 Copy_s32Number)
{
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	60 97       	sbiw	r28, 0x10	; 16
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	6d 87       	std	Y+13, r22	; 0x0d
    1208:	7e 87       	std	Y+14, r23	; 0x0e
    120a:	8f 87       	std	Y+15, r24	; 0x0f
    120c:	98 8b       	std	Y+16, r25	; 0x10
	char Local_ch8Digit[10] = {0};
    120e:	8a e0       	ldi	r24, 0x0A	; 10
    1210:	fe 01       	movw	r30, r28
    1212:	33 96       	adiw	r30, 0x03	; 3
    1214:	df 01       	movw	r26, r30
    1216:	98 2f       	mov	r25, r24
    1218:	1d 92       	st	X+, r1
    121a:	9a 95       	dec	r25
    121c:	e9 f7       	brne	.-6      	; 0x1218 <CLCD_voidSendDecimalNumber+0x2a>

	uint8 Local_u8ReverseCounter = 0u;
    121e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	if(Copy_s32Number == 0)
    1220:	8d 85       	ldd	r24, Y+13	; 0x0d
    1222:	9e 85       	ldd	r25, Y+14	; 0x0e
    1224:	af 85       	ldd	r26, Y+15	; 0x0f
    1226:	b8 89       	ldd	r27, Y+16	; 0x10
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	a1 05       	cpc	r26, r1
    122c:	b1 05       	cpc	r27, r1
    122e:	21 f4       	brne	.+8      	; 0x1238 <CLCD_voidSendDecimalNumber+0x4a>
	{
		CLCD_voidSendData('0');
    1230:	80 e3       	ldi	r24, 0x30	; 48
    1232:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
    1236:	7b c0       	rjmp	.+246    	; 0x132e <CLCD_voidSendDecimalNumber+0x140>
	}
	else
	{
		/*Check for the negative sign*/
		if(Copy_s32Number < 0)
    1238:	8d 85       	ldd	r24, Y+13	; 0x0d
    123a:	9e 85       	ldd	r25, Y+14	; 0x0e
    123c:	af 85       	ldd	r26, Y+15	; 0x0f
    123e:	b8 89       	ldd	r27, Y+16	; 0x10
    1240:	bb 23       	and	r27, r27
    1242:	0c f0       	brlt	.+2      	; 0x1246 <CLCD_voidSendDecimalNumber+0x58>
    1244:	54 c0       	rjmp	.+168    	; 0x12ee <CLCD_voidSendDecimalNumber+0x100>
		{
			/*Print the negative sign to the lcd*/
			CLCD_voidSendData('-');
    1246:	8d e2       	ldi	r24, 0x2D	; 45
    1248:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>

			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
    124c:	8d 85       	ldd	r24, Y+13	; 0x0d
    124e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1250:	af 85       	ldd	r26, Y+15	; 0x0f
    1252:	b8 89       	ldd	r27, Y+16	; 0x10
    1254:	b0 95       	com	r27
    1256:	a0 95       	com	r26
    1258:	90 95       	com	r25
    125a:	81 95       	neg	r24
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	af 4f       	sbci	r26, 0xFF	; 255
    1260:	bf 4f       	sbci	r27, 0xFF	; 255
    1262:	8d 87       	std	Y+13, r24	; 0x0d
    1264:	9e 87       	std	Y+14, r25	; 0x0e
    1266:	af 87       	std	Y+15, r26	; 0x0f
    1268:	b8 8b       	std	Y+16, r27	; 0x10
    126a:	41 c0       	rjmp	.+130    	; 0x12ee <CLCD_voidSendDecimalNumber+0x100>
		{
			/*
			 * Extract every digit number to the array of characters,
			 * then translate it into ascii value through adding '0'
			 */
			Local_ch8Digit[Local_u8ReverseCounter] = (char) (Copy_s32Number % 10);
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	08 2f       	mov	r16, r24
    1270:	10 e0       	ldi	r17, 0x00	; 0
    1272:	8d 85       	ldd	r24, Y+13	; 0x0d
    1274:	9e 85       	ldd	r25, Y+14	; 0x0e
    1276:	af 85       	ldd	r26, Y+15	; 0x0f
    1278:	b8 89       	ldd	r27, Y+16	; 0x10
    127a:	2a e0       	ldi	r18, 0x0A	; 10
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	bc 01       	movw	r22, r24
    1284:	cd 01       	movw	r24, r26
    1286:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <__divmodsi4>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	28 2f       	mov	r18, r24
    1290:	ce 01       	movw	r24, r28
    1292:	03 96       	adiw	r24, 0x03	; 3
    1294:	fc 01       	movw	r30, r24
    1296:	e0 0f       	add	r30, r16
    1298:	f1 1f       	adc	r31, r17
    129a:	20 83       	st	Z, r18
			Local_ch8Digit[Local_u8ReverseCounter] = Local_ch8Digit[Local_u8ReverseCounter] + '0';
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	48 2f       	mov	r20, r24
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	ce 01       	movw	r24, r28
    12aa:	03 96       	adiw	r24, 0x03	; 3
    12ac:	fc 01       	movw	r30, r24
    12ae:	e2 0f       	add	r30, r18
    12b0:	f3 1f       	adc	r31, r19
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	20 5d       	subi	r18, 0xD0	; 208
    12b8:	ce 01       	movw	r24, r28
    12ba:	03 96       	adiw	r24, 0x03	; 3
    12bc:	fc 01       	movw	r30, r24
    12be:	e4 0f       	add	r30, r20
    12c0:	f5 1f       	adc	r31, r21
    12c2:	20 83       	st	Z, r18

			Copy_s32Number = Copy_s32Number / 10;
    12c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c8:	af 85       	ldd	r26, Y+15	; 0x0f
    12ca:	b8 89       	ldd	r27, Y+16	; 0x10
    12cc:	2a e0       	ldi	r18, 0x0A	; 10
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <__divmodsi4>
    12dc:	da 01       	movw	r26, r20
    12de:	c9 01       	movw	r24, r18
    12e0:	8d 87       	std	Y+13, r24	; 0x0d
    12e2:	9e 87       	std	Y+14, r25	; 0x0e
    12e4:	af 87       	std	Y+15, r26	; 0x0f
    12e6:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8ReverseCounter++;
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	8f 5f       	subi	r24, 0xFF	; 255
    12ec:	8a 83       	std	Y+2, r24	; 0x02
			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
		}

		/*Extracting the number digits into array of characters*/
		while(Copy_s32Number > 0)
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f2:	af 85       	ldd	r26, Y+15	; 0x0f
    12f4:	b8 89       	ldd	r27, Y+16	; 0x10
    12f6:	18 16       	cp	r1, r24
    12f8:	19 06       	cpc	r1, r25
    12fa:	1a 06       	cpc	r1, r26
    12fc:	1b 06       	cpc	r1, r27
    12fe:	0c f4       	brge	.+2      	; 0x1302 <CLCD_voidSendDecimalNumber+0x114>
    1300:	b5 cf       	rjmp	.-150    	; 0x126c <CLCD_voidSendDecimalNumber+0x7e>
			Copy_s32Number = Copy_s32Number / 10;
			Local_u8ReverseCounter++;
		}

		/*Printing every character in the array until the end of the number*/
		Local_u8PrintCounter = Local_u8ReverseCounter;
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			CLCD_voidSendData(Local_ch8Digit[Local_u8PrintCounter - 1u]);
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 01       	movw	r18, r24
    130e:	21 50       	subi	r18, 0x01	; 1
    1310:	30 40       	sbci	r19, 0x00	; 0
    1312:	ce 01       	movw	r24, r28
    1314:	03 96       	adiw	r24, 0x03	; 3
    1316:	fc 01       	movw	r30, r24
    1318:	e2 0f       	add	r30, r18
    131a:	f3 1f       	adc	r31, r19
    131c:	80 81       	ld	r24, Z
    131e:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
			Local_u8PrintCounter--;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	81 50       	subi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01
		}
		while(Local_u8PrintCounter > 0u);
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	88 23       	and	r24, r24
    132c:	61 f7       	brne	.-40     	; 0x1306 <CLCD_voidSendDecimalNumber+0x118>
	}
}
    132e:	60 96       	adiw	r28, 0x10	; 16
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	08 95       	ret

00001344 <CLCD_voidSendBinaryNumber>:


void CLCD_voidSendBinaryNumber(sint16 Copy_s16Number)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	a4 97       	sbiw	r28, 0x24	; 36
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	9c a3       	std	Y+36, r25	; 0x24
    135a:	8b a3       	std	Y+35, r24	; 0x23
	uint8 Local_u8BinaryDigits[32] = {0u};
    135c:	80 e2       	ldi	r24, 0x20	; 32
    135e:	fe 01       	movw	r30, r28
    1360:	33 96       	adiw	r30, 0x03	; 3
    1362:	df 01       	movw	r26, r30
    1364:	98 2f       	mov	r25, r24
    1366:	1d 92       	st	X+, r1
    1368:	9a 95       	dec	r25
    136a:	e9 f7       	brne	.-6      	; 0x1366 <CLCD_voidSendBinaryNumber+0x22>

	uint8 Local_u8ReverseCounter = 0u;
    136c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");
    136e:	80 e6       	ldi	r24, 0x60	; 96
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_u8SendString>

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    1376:	1a 82       	std	Y+2, r1	; 0x02
    1378:	23 c0       	rjmp	.+70     	; 0x13c0 <CLCD_voidSendBinaryNumber+0x7c>
	{
		if((Copy_s16Number & 1) == 1)
    137a:	8b a1       	ldd	r24, Y+35	; 0x23
    137c:	9c a1       	ldd	r25, Y+36	; 0x24
    137e:	81 70       	andi	r24, 0x01	; 1
    1380:	90 70       	andi	r25, 0x00	; 0
    1382:	88 23       	and	r24, r24
    1384:	59 f0       	breq	.+22     	; 0x139c <CLCD_voidSendBinaryNumber+0x58>
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 1u;
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	ce 01       	movw	r24, r28
    138e:	03 96       	adiw	r24, 0x03	; 3
    1390:	fc 01       	movw	r30, r24
    1392:	e2 0f       	add	r30, r18
    1394:	f3 1f       	adc	r31, r19
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 83       	st	Z, r24
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <CLCD_voidSendBinaryNumber+0x6a>
		}
		else
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 0u;
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	ce 01       	movw	r24, r28
    13a4:	03 96       	adiw	r24, 0x03	; 3
    13a6:	fc 01       	movw	r30, r24
    13a8:	e2 0f       	add	r30, r18
    13aa:	f3 1f       	adc	r31, r19
    13ac:	10 82       	st	Z, r1
		}
		Copy_s16Number = Copy_s16Number >> 1;
    13ae:	8b a1       	ldd	r24, Y+35	; 0x23
    13b0:	9c a1       	ldd	r25, Y+36	; 0x24
    13b2:	95 95       	asr	r25
    13b4:	87 95       	ror	r24
    13b6:	9c a3       	std	Y+36, r25	; 0x24
    13b8:	8b a3       	std	Y+35, r24	; 0x23

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	8f 5f       	subi	r24, 0xFF	; 255
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 31       	cpi	r24, 0x10	; 16
    13c4:	d0 f2       	brcs	.-76     	; 0x137a <CLCD_voidSendBinaryNumber+0x36>
		}
		Copy_s16Number = Copy_s16Number >> 1;
	}

	/*Go to the next line in the lcd*/
	CLCD_u8GoToXY(0,1);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	0e 94 cf 0a 	call	0x159e	; 0x159e <CLCD_u8GoToXY>

	/*Printing every character in the array until the end of the number*/
	Local_u8PrintCounter = 16;
    13ce:	80 e1       	ldi	r24, 0x10	; 16
    13d0:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		if(Local_u8BinaryDigits[Local_u8PrintCounter - 1] == 0)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9c 01       	movw	r18, r24
    13da:	21 50       	subi	r18, 0x01	; 1
    13dc:	30 40       	sbci	r19, 0x00	; 0
    13de:	ce 01       	movw	r24, r28
    13e0:	03 96       	adiw	r24, 0x03	; 3
    13e2:	fc 01       	movw	r30, r24
    13e4:	e2 0f       	add	r30, r18
    13e6:	f3 1f       	adc	r31, r19
    13e8:	80 81       	ld	r24, Z
    13ea:	88 23       	and	r24, r24
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <CLCD_voidSendBinaryNumber+0xb2>
		{
			CLCD_voidSendData('0');
    13ee:	80 e3       	ldi	r24, 0x30	; 48
    13f0:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
    13f4:	03 c0       	rjmp	.+6      	; 0x13fc <CLCD_voidSendBinaryNumber+0xb8>
		}
		else
		{
			CLCD_voidSendData('1');
    13f6:	81 e3       	ldi	r24, 0x31	; 49
    13f8:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
		}

		Local_u8PrintCounter--;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	81 50       	subi	r24, 0x01	; 1
    1400:	89 83       	std	Y+1, r24	; 0x01
	}
	while(Local_u8PrintCounter > 0);
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	88 23       	and	r24, r24
    1406:	29 f7       	brne	.-54     	; 0x13d2 <CLCD_voidSendBinaryNumber+0x8e>
}
    1408:	a4 96       	adiw	r28, 0x24	; 36
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <CLCD_voidSendHexaNumber>:
//	/*Returnning the MaxZeros counter*/
//	return MaxZeros;
//}

void CLCD_voidSendHexaNumber(sint32 Copy_s32Number)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	a5 97       	sbiw	r28, 0x25	; 37
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	6d 8f       	std	Y+29, r22	; 0x1d
    1430:	7e 8f       	std	Y+30, r23	; 0x1e
    1432:	8f 8f       	std	Y+31, r24	; 0x1f
    1434:	98 a3       	std	Y+32, r25	; 0x20
	/*Define Variables*/
	char Local_ch8HexaTable[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
									'A', 'B', 'C', 'D', 'E', 'F'};
    1436:	ce 01       	movw	r24, r28
    1438:	05 96       	adiw	r24, 0x05	; 5
    143a:	9a a3       	std	Y+34, r25	; 0x22
    143c:	89 a3       	std	Y+33, r24	; 0x21
    143e:	ee e6       	ldi	r30, 0x6E	; 110
    1440:	f1 e0       	ldi	r31, 0x01	; 1
    1442:	fc a3       	std	Y+36, r31	; 0x24
    1444:	eb a3       	std	Y+35, r30	; 0x23
    1446:	f0 e1       	ldi	r31, 0x10	; 16
    1448:	fd a3       	std	Y+37, r31	; 0x25
    144a:	eb a1       	ldd	r30, Y+35	; 0x23
    144c:	fc a1       	ldd	r31, Y+36	; 0x24
    144e:	00 80       	ld	r0, Z
    1450:	8b a1       	ldd	r24, Y+35	; 0x23
    1452:	9c a1       	ldd	r25, Y+36	; 0x24
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	9c a3       	std	Y+36, r25	; 0x24
    1458:	8b a3       	std	Y+35, r24	; 0x23
    145a:	e9 a1       	ldd	r30, Y+33	; 0x21
    145c:	fa a1       	ldd	r31, Y+34	; 0x22
    145e:	00 82       	st	Z, r0
    1460:	89 a1       	ldd	r24, Y+33	; 0x21
    1462:	9a a1       	ldd	r25, Y+34	; 0x22
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
    146a:	9d a1       	ldd	r25, Y+37	; 0x25
    146c:	91 50       	subi	r25, 0x01	; 1
    146e:	9d a3       	std	Y+37, r25	; 0x25
    1470:	ed a1       	ldd	r30, Y+37	; 0x25
    1472:	ee 23       	and	r30, r30
    1474:	51 f7       	brne	.-44     	; 0x144a <CLCD_voidSendHexaNumber+0x30>
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    1476:	1b 82       	std	Y+3, r1	; 0x03
    1478:	20 c0       	rjmp	.+64     	; 0x14ba <CLCD_voidSendHexaNumber+0xa0>
	{
		/*Get the least for bits of the number*/
		Local_u8LeastFourBits = Copy_s32Number & 0x0f;
    147a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    147c:	8f 70       	andi	r24, 0x0F	; 15
    147e:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number = Copy_s32Number >> 4;
    1480:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1482:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1484:	af 8d       	ldd	r26, Y+31	; 0x1f
    1486:	b8 a1       	ldd	r27, Y+32	; 0x20
    1488:	68 94       	set
    148a:	13 f8       	bld	r1, 3
    148c:	b5 95       	asr	r27
    148e:	a7 95       	ror	r26
    1490:	97 95       	ror	r25
    1492:	87 95       	ror	r24
    1494:	16 94       	lsr	r1
    1496:	d1 f7       	brne	.-12     	; 0x148c <CLCD_voidSendHexaNumber+0x72>
    1498:	8d 8f       	std	Y+29, r24	; 0x1d
    149a:	9e 8f       	std	Y+30, r25	; 0x1e
    149c:	af 8f       	std	Y+31, r26	; 0x1f
    149e:	b8 a3       	std	Y+32, r27	; 0x20

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	ce 01       	movw	r24, r28
    14a8:	45 96       	adiw	r24, 0x15	; 21
    14aa:	fc 01       	movw	r30, r24
    14ac:	e2 0f       	add	r30, r18
    14ae:	f3 1f       	adc	r31, r19
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	80 83       	st	Z, r24
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	8b 83       	std	Y+3, r24	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	e8 f2       	brcs	.-70     	; 0x147a <CLCD_voidSendHexaNumber+0x60>

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
	}

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");
    14c0:	83 e6       	ldi	r24, 0x63	; 99
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_u8SendString>

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    14c8:	87 e0       	ldi	r24, 0x07	; 7
    14ca:	8c 83       	std	Y+4, r24	; 0x04
    14cc:	1a c0       	rjmp	.+52     	; 0x1502 <CLCD_voidSendHexaNumber+0xe8>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	28 2f       	mov	r18, r24
    14d2:	33 27       	eor	r19, r19
    14d4:	27 fd       	sbrc	r18, 7
    14d6:	30 95       	com	r19
    14d8:	ce 01       	movw	r24, r28
    14da:	45 96       	adiw	r24, 0x15	; 21
    14dc:	fc 01       	movw	r30, r24
    14de:	e2 0f       	add	r30, r18
    14e0:	f3 1f       	adc	r31, r19
    14e2:	80 81       	ld	r24, Z
    14e4:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	ce 01       	movw	r24, r28
    14ee:	05 96       	adiw	r24, 0x05	; 5
    14f0:	fc 01       	movw	r30, r24
    14f2:	e2 0f       	add	r30, r18
    14f4:	f3 1f       	adc	r31, r19
    14f6:	80 81       	ld	r24, Z
    14f8:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	81 50       	subi	r24, 0x01	; 1
    1500:	8c 83       	std	Y+4, r24	; 0x04
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	88 23       	and	r24, r24
    1506:	1c f7       	brge	.-58     	; 0x14ce <CLCD_voidSendHexaNumber+0xb4>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
	}
}
    1508:	a5 96       	adiw	r28, 0x25	; 37
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	27 97       	sbiw	r28, 0x07	; 7
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	6d 83       	std	Y+5, r22	; 0x05
    1534:	4e 83       	std	Y+6, r20	; 0x06
    1536:	2f 83       	std	Y+7, r18	; 0x07
	/*Define Variables*/
	uint8 Local_u8CGRAMAdd = Copy_u8PatternNum * 8u;
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter;

	/*Set bit 6 in CGRAMAdd for CGRAM Address command standard*/
	SET_BIT(Local_u8CGRAMAdd, 6);
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 64       	ori	r24, 0x40	; 64
    1550:	8a 83       	std	Y+2, r24	; 0x02

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    1558:	19 82       	std	Y+1, r1	; 0x01
    155a:	0e c0       	rjmp	.+28     	; 0x1578 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	fc 01       	movw	r30, r24
    1568:	e2 0f       	add	r30, r18
    156a:	f3 1f       	adc	r31, r19
    156c:	80 81       	ld	r24, Z
    156e:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	78 f3       	brcs	.-34     	; 0x155c <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}

	/*Go to DDRAM Address to display the pattern*/
	CLCD_u8GoToXY(Copy_u8XPos, Copy_u8YPos);
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	0e 94 cf 0a 	call	0x159e	; 0x159e <CLCD_u8GoToXY>

	/*Display the pattern from CGRAM to DDRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
}
    158c:	27 96       	adiw	r28, 0x07	; 7
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <CLCD_u8GoToXY>:

uint8 CLCD_u8GoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <CLCD_u8GoToXY+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <CLCD_u8GoToXY+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8b 83       	std	Y+3, r24	; 0x03
    15ac:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    15ae:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8DDRamAdd;

	/*Configure the address of DDRam*/
	if(Copy_u8YPos == 0u)
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	88 23       	and	r24, r24
    15b4:	19 f4       	brne	.+6      	; 0x15bc <CLCD_u8GoToXY+0x1e>
	{
		Local_u8DDRamAdd = Copy_u8XPos;
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <CLCD_u8GoToXY+0x30>
	}
	else if(Copy_u8YPos == 1u)
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	21 f4       	brne	.+8      	; 0x15ca <CLCD_u8GoToXY+0x2c>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	80 5c       	subi	r24, 0xC0	; 192
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <CLCD_u8GoToXY+0x30>
	}
	else
	{
		Local_u8ErrorState = NOK;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Send DDRam Set Address command to lcd*/
	SET_BIT(Local_u8DDRamAdd,7);
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	80 68       	ori	r24, 0x80	; 128
    15d2:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>

	return Local_u8ErrorState;
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	28 97       	sbiw	r28, 0x08	; 8
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	8a 83       	std	Y+2, r24	; 0x02
    1600:	6b 83       	std	Y+3, r22	; 0x03
    1602:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
    1604:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 30       	cpi	r24, 0x08	; 8
    160a:	08 f0       	brcs	.+2      	; 0x160e <DIO_u8SetPinDirection+0x24>
    160c:	f4 c0       	rjmp	.+488    	; 0x17f6 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	09 f0       	breq	.+2      	; 0x1616 <DIO_u8SetPinDirection+0x2c>
    1614:	72 c0       	rjmp	.+228    	; 0x16fa <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	38 87       	std	Y+8, r19	; 0x08
    161e:	2f 83       	std	Y+7, r18	; 0x07
    1620:	8f 81       	ldd	r24, Y+7	; 0x07
    1622:	98 85       	ldd	r25, Y+8	; 0x08
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	49 f1       	breq	.+82     	; 0x167c <DIO_u8SetPinDirection+0x92>
    162a:	2f 81       	ldd	r18, Y+7	; 0x07
    162c:	38 85       	ldd	r19, Y+8	; 0x08
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	2c f4       	brge	.+10     	; 0x163e <DIO_u8SetPinDirection+0x54>
    1634:	8f 81       	ldd	r24, Y+7	; 0x07
    1636:	98 85       	ldd	r25, Y+8	; 0x08
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 f0       	breq	.+24     	; 0x1654 <DIO_u8SetPinDirection+0x6a>
    163c:	5b c0       	rjmp	.+182    	; 0x16f4 <DIO_u8SetPinDirection+0x10a>
    163e:	2f 81       	ldd	r18, Y+7	; 0x07
    1640:	38 85       	ldd	r19, Y+8	; 0x08
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	71 f1       	breq	.+92     	; 0x16a4 <DIO_u8SetPinDirection+0xba>
    1648:	8f 81       	ldd	r24, Y+7	; 0x07
    164a:	98 85       	ldd	r25, Y+8	; 0x08
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	91 05       	cpc	r25, r1
    1650:	e9 f1       	breq	.+122    	; 0x16cc <DIO_u8SetPinDirection+0xe2>
    1652:	50 c0       	rjmp	.+160    	; 0x16f4 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
    1654:	aa e3       	ldi	r26, 0x3A	; 58
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ea e3       	ldi	r30, 0x3A	; 58
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_u8SetPinDirection+0x88>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_u8SetPinDirection+0x84>
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	bf c0       	rjmp	.+382    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
    167c:	a7 e3       	ldi	r26, 0x37	; 55
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e7 e3       	ldi	r30, 0x37	; 55
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_u8SetPinDirection+0xb0>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_u8SetPinDirection+0xac>
    169e:	84 2b       	or	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	ab c0       	rjmp	.+342    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
    16a4:	a4 e3       	ldi	r26, 0x34	; 52
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e4 e3       	ldi	r30, 0x34	; 52
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_u8SetPinDirection+0xd8>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_u8SetPinDirection+0xd4>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	97 c0       	rjmp	.+302    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
    16cc:	a1 e3       	ldi	r26, 0x31	; 49
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e1 e3       	ldi	r30, 0x31	; 49
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <DIO_u8SetPinDirection+0x100>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <DIO_u8SetPinDirection+0xfc>
    16ee:	84 2b       	or	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	83 c0       	rjmp	.+262    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	80 c0       	rjmp	.+256    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	88 23       	and	r24, r24
    16fe:	09 f0       	breq	.+2      	; 0x1702 <DIO_u8SetPinDirection+0x118>
    1700:	77 c0       	rjmp	.+238    	; 0x17f0 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3e 83       	std	Y+6, r19	; 0x06
    170a:	2d 83       	std	Y+5, r18	; 0x05
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	91 05       	cpc	r25, r1
    1714:	59 f1       	breq	.+86     	; 0x176c <DIO_u8SetPinDirection+0x182>
    1716:	2d 81       	ldd	r18, Y+5	; 0x05
    1718:	3e 81       	ldd	r19, Y+6	; 0x06
    171a:	22 30       	cpi	r18, 0x02	; 2
    171c:	31 05       	cpc	r19, r1
    171e:	2c f4       	brge	.+10     	; 0x172a <DIO_u8SetPinDirection+0x140>
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	69 f0       	breq	.+26     	; 0x1742 <DIO_u8SetPinDirection+0x158>
    1728:	60 c0       	rjmp	.+192    	; 0x17ea <DIO_u8SetPinDirection+0x200>
    172a:	2d 81       	ldd	r18, Y+5	; 0x05
    172c:	3e 81       	ldd	r19, Y+6	; 0x06
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	89 f1       	breq	.+98     	; 0x1796 <DIO_u8SetPinDirection+0x1ac>
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	83 30       	cpi	r24, 0x03	; 3
    173a:	91 05       	cpc	r25, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <DIO_u8SetPinDirection+0x156>
    173e:	40 c0       	rjmp	.+128    	; 0x17c0 <DIO_u8SetPinDirection+0x1d6>
    1740:	54 c0       	rjmp	.+168    	; 0x17ea <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
    1742:	aa e3       	ldi	r26, 0x3A	; 58
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ea e3       	ldi	r30, 0x3A	; 58
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_u8SetPinDirection+0x176>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_u8SetPinDirection+0x172>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	47 c0       	rjmp	.+142    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
    176c:	a7 e3       	ldi	r26, 0x37	; 55
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e7 e3       	ldi	r30, 0x37	; 55
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_u8SetPinDirection+0x1a0>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_u8SetPinDirection+0x19c>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	32 c0       	rjmp	.+100    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
    1796:	a4 e3       	ldi	r26, 0x34	; 52
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e4 e3       	ldi	r30, 0x34	; 52
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_u8SetPinDirection+0x1ca>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_u8SetPinDirection+0x1c6>
    17b8:	80 95       	com	r24
    17ba:	84 23       	and	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	1d c0       	rjmp	.+58     	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    17c0:	a1 e3       	ldi	r26, 0x31	; 49
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e1 e3       	ldi	r30, 0x31	; 49
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_u8SetPinDirection+0x1f4>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <DIO_u8SetPinDirection+0x1f0>
    17e2:	80 95       	com	r24
    17e4:	84 23       	and	r24, r20
    17e6:	8c 93       	st	X, r24
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fc:	28 96       	adiw	r28, 0x08	; 8
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	28 97       	sbiw	r28, 0x08	; 8
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	8a 83       	std	Y+2, r24	; 0x02
    1824:	6b 83       	std	Y+3, r22	; 0x03
    1826:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1828:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	88 30       	cpi	r24, 0x08	; 8
    182e:	08 f0       	brcs	.+2      	; 0x1832 <DIO_u8SetPinValue+0x24>
    1830:	f4 c0       	rjmp	.+488    	; 0x1a1a <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	09 f0       	breq	.+2      	; 0x183a <DIO_u8SetPinValue+0x2c>
    1838:	72 c0       	rjmp	.+228    	; 0x191e <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	38 87       	std	Y+8, r19	; 0x08
    1842:	2f 83       	std	Y+7, r18	; 0x07
    1844:	8f 81       	ldd	r24, Y+7	; 0x07
    1846:	98 85       	ldd	r25, Y+8	; 0x08
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	49 f1       	breq	.+82     	; 0x18a0 <DIO_u8SetPinValue+0x92>
    184e:	2f 81       	ldd	r18, Y+7	; 0x07
    1850:	38 85       	ldd	r19, Y+8	; 0x08
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	2c f4       	brge	.+10     	; 0x1862 <DIO_u8SetPinValue+0x54>
    1858:	8f 81       	ldd	r24, Y+7	; 0x07
    185a:	98 85       	ldd	r25, Y+8	; 0x08
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	61 f0       	breq	.+24     	; 0x1878 <DIO_u8SetPinValue+0x6a>
    1860:	5b c0       	rjmp	.+182    	; 0x1918 <DIO_u8SetPinValue+0x10a>
    1862:	2f 81       	ldd	r18, Y+7	; 0x07
    1864:	38 85       	ldd	r19, Y+8	; 0x08
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	71 f1       	breq	.+92     	; 0x18c8 <DIO_u8SetPinValue+0xba>
    186c:	8f 81       	ldd	r24, Y+7	; 0x07
    186e:	98 85       	ldd	r25, Y+8	; 0x08
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	91 05       	cpc	r25, r1
    1874:	e9 f1       	breq	.+122    	; 0x18f0 <DIO_u8SetPinValue+0xe2>
    1876:	50 c0       	rjmp	.+160    	; 0x1918 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    1878:	ab e3       	ldi	r26, 0x3B	; 59
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	eb e3       	ldi	r30, 0x3B	; 59
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_u8SetPinValue+0x88>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_u8SetPinValue+0x84>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	bf c0       	rjmp	.+382    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    18a0:	a8 e3       	ldi	r26, 0x38	; 56
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_u8SetPinValue+0xb0>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_u8SetPinValue+0xac>
    18c2:	84 2b       	or	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	ab c0       	rjmp	.+342    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    18c8:	a5 e3       	ldi	r26, 0x35	; 53
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e3       	ldi	r30, 0x35	; 53
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_u8SetPinValue+0xd8>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_u8SetPinValue+0xd4>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	97 c0       	rjmp	.+302    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    18f0:	a2 e3       	ldi	r26, 0x32	; 50
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e2 e3       	ldi	r30, 0x32	; 50
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_u8SetPinValue+0x100>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_u8SetPinValue+0xfc>
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	83 c0       	rjmp	.+262    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	80 c0       	rjmp	.+256    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    191e:	8c 81       	ldd	r24, Y+4	; 0x04
    1920:	88 23       	and	r24, r24
    1922:	09 f0       	breq	.+2      	; 0x1926 <DIO_u8SetPinValue+0x118>
    1924:	77 c0       	rjmp	.+238    	; 0x1a14 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3e 83       	std	Y+6, r19	; 0x06
    192e:	2d 83       	std	Y+5, r18	; 0x05
    1930:	8d 81       	ldd	r24, Y+5	; 0x05
    1932:	9e 81       	ldd	r25, Y+6	; 0x06
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	91 05       	cpc	r25, r1
    1938:	59 f1       	breq	.+86     	; 0x1990 <DIO_u8SetPinValue+0x182>
    193a:	2d 81       	ldd	r18, Y+5	; 0x05
    193c:	3e 81       	ldd	r19, Y+6	; 0x06
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	2c f4       	brge	.+10     	; 0x194e <DIO_u8SetPinValue+0x140>
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f0       	breq	.+26     	; 0x1966 <DIO_u8SetPinValue+0x158>
    194c:	60 c0       	rjmp	.+192    	; 0x1a0e <DIO_u8SetPinValue+0x200>
    194e:	2d 81       	ldd	r18, Y+5	; 0x05
    1950:	3e 81       	ldd	r19, Y+6	; 0x06
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	89 f1       	breq	.+98     	; 0x19ba <DIO_u8SetPinValue+0x1ac>
    1958:	8d 81       	ldd	r24, Y+5	; 0x05
    195a:	9e 81       	ldd	r25, Y+6	; 0x06
    195c:	83 30       	cpi	r24, 0x03	; 3
    195e:	91 05       	cpc	r25, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <DIO_u8SetPinValue+0x156>
    1962:	40 c0       	rjmp	.+128    	; 0x19e4 <DIO_u8SetPinValue+0x1d6>
    1964:	54 c0       	rjmp	.+168    	; 0x1a0e <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    1966:	ab e3       	ldi	r26, 0x3B	; 59
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	eb e3       	ldi	r30, 0x3B	; 59
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_u8SetPinValue+0x176>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_u8SetPinValue+0x172>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	47 c0       	rjmp	.+142    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    1990:	a8 e3       	ldi	r26, 0x38	; 56
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e8 e3       	ldi	r30, 0x38	; 56
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_u8SetPinValue+0x1a0>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_u8SetPinValue+0x19c>
    19b2:	80 95       	com	r24
    19b4:	84 23       	and	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	32 c0       	rjmp	.+100    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    19ba:	a5 e3       	ldi	r26, 0x35	; 53
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e5 e3       	ldi	r30, 0x35	; 53
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_u8SetPinValue+0x1ca>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_u8SetPinValue+0x1c6>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	1d c0       	rjmp	.+58     	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    19e4:	a2 e3       	ldi	r26, 0x32	; 50
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e2 e3       	ldi	r30, 0x32	; 50
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_u8SetPinValue+0x1f4>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <DIO_u8SetPinValue+0x1f0>
    1a06:	80 95       	com	r24
    1a08:	84 23       	and	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	08 c0       	rjmp	.+16     	; 0x1a1e <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a20:	28 96       	adiw	r28, 0x08	; 8
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <DIO_u8TogglePinValue+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <DIO_u8TogglePinValue+0x8>
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	8a 83       	std	Y+2, r24	; 0x02
    1a42:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1a44:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	88 30       	cpi	r24, 0x08	; 8
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <DIO_u8TogglePinValue+0x1c>
    1a4c:	72 c0       	rjmp	.+228    	; 0x1b32 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3d 83       	std	Y+5, r19	; 0x05
    1a56:	2c 83       	std	Y+4, r18	; 0x04
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	49 f1       	breq	.+82     	; 0x1ab4 <DIO_u8TogglePinValue+0x82>
    1a62:	2c 81       	ldd	r18, Y+4	; 0x04
    1a64:	3d 81       	ldd	r19, Y+5	; 0x05
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <DIO_u8TogglePinValue+0x44>
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	61 f0       	breq	.+24     	; 0x1a8c <DIO_u8TogglePinValue+0x5a>
    1a74:	5b c0       	rjmp	.+182    	; 0x1b2c <DIO_u8TogglePinValue+0xfa>
    1a76:	2c 81       	ldd	r18, Y+4	; 0x04
    1a78:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7a:	22 30       	cpi	r18, 0x02	; 2
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	71 f1       	breq	.+92     	; 0x1adc <DIO_u8TogglePinValue+0xaa>
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	83 30       	cpi	r24, 0x03	; 3
    1a86:	91 05       	cpc	r25, r1
    1a88:	e9 f1       	breq	.+122    	; 0x1b04 <DIO_u8TogglePinValue+0xd2>
    1a8a:	50 c0       	rjmp	.+160    	; 0x1b2c <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    1a8c:	ab e3       	ldi	r26, 0x3B	; 59
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	eb e3       	ldi	r30, 0x3B	; 59
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <DIO_u8TogglePinValue+0x78>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <DIO_u8TogglePinValue+0x74>
    1aae:	84 27       	eor	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	41 c0       	rjmp	.+130    	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    1ab4:	a8 e3       	ldi	r26, 0x38	; 56
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e8 e3       	ldi	r30, 0x38	; 56
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_u8TogglePinValue+0xa0>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_u8TogglePinValue+0x9c>
    1ad6:	84 27       	eor	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	2d c0       	rjmp	.+90     	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    1adc:	a5 e3       	ldi	r26, 0x35	; 53
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e5 e3       	ldi	r30, 0x35	; 53
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <DIO_u8TogglePinValue+0xc8>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <DIO_u8TogglePinValue+0xc4>
    1afe:	84 27       	eor	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	19 c0       	rjmp	.+50     	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    1b04:	a2 e3       	ldi	r26, 0x32	; 50
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e2 e3       	ldi	r30, 0x32	; 50
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <DIO_u8TogglePinValue+0xf0>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <DIO_u8TogglePinValue+0xec>
    1b26:	84 27       	eor	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	05 c0       	rjmp	.+10     	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	27 97       	sbiw	r28, 0x07	; 7
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
    1b5e:	6b 83       	std	Y+3, r22	; 0x03
    1b60:	5d 83       	std	Y+5, r21	; 0x05
    1b62:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1b64:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	88 30       	cpi	r24, 0x08	; 8
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <DIO_u8GetPinValue+0x26>
    1b6c:	74 c0       	rjmp	.+232    	; 0x1c56 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	3f 83       	std	Y+7, r19	; 0x07
    1b76:	2e 83       	std	Y+6, r18	; 0x06
    1b78:	4e 81       	ldd	r20, Y+6	; 0x06
    1b7a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b7c:	41 30       	cpi	r20, 0x01	; 1
    1b7e:	51 05       	cpc	r21, r1
    1b80:	59 f1       	breq	.+86     	; 0x1bd8 <DIO_u8GetPinValue+0x90>
    1b82:	8e 81       	ldd	r24, Y+6	; 0x06
    1b84:	9f 81       	ldd	r25, Y+7	; 0x07
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	91 05       	cpc	r25, r1
    1b8a:	34 f4       	brge	.+12     	; 0x1b98 <DIO_u8GetPinValue+0x50>
    1b8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b90:	21 15       	cp	r18, r1
    1b92:	31 05       	cpc	r19, r1
    1b94:	69 f0       	breq	.+26     	; 0x1bb0 <DIO_u8GetPinValue+0x68>
    1b96:	5c c0       	rjmp	.+184    	; 0x1c50 <DIO_u8GetPinValue+0x108>
    1b98:	4e 81       	ldd	r20, Y+6	; 0x06
    1b9a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b9c:	42 30       	cpi	r20, 0x02	; 2
    1b9e:	51 05       	cpc	r21, r1
    1ba0:	79 f1       	breq	.+94     	; 0x1c00 <DIO_u8GetPinValue+0xb8>
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba6:	83 30       	cpi	r24, 0x03	; 3
    1ba8:	91 05       	cpc	r25, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <DIO_u8GetPinValue+0x66>
    1bac:	3d c0       	rjmp	.+122    	; 0x1c28 <DIO_u8GetPinValue+0xe0>
    1bae:	50 c0       	rjmp	.+160    	; 0x1c50 <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    1bb0:	e9 e3       	ldi	r30, 0x39	; 57
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a9 01       	movw	r20, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_u8GetPinValue+0x80>
    1bc4:	55 95       	asr	r21
    1bc6:	47 95       	ror	r20
    1bc8:	8a 95       	dec	r24
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_u8GetPinValue+0x7c>
    1bcc:	ca 01       	movw	r24, r20
    1bce:	81 70       	andi	r24, 0x01	; 1
    1bd0:	ec 81       	ldd	r30, Y+4	; 0x04
    1bd2:	fd 81       	ldd	r31, Y+5	; 0x05
    1bd4:	80 83       	st	Z, r24
    1bd6:	41 c0       	rjmp	.+130    	; 0x1c5a <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    1bd8:	e6 e3       	ldi	r30, 0x36	; 54
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a9 01       	movw	r20, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_u8GetPinValue+0xa8>
    1bec:	55 95       	asr	r21
    1bee:	47 95       	ror	r20
    1bf0:	8a 95       	dec	r24
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_u8GetPinValue+0xa4>
    1bf4:	ca 01       	movw	r24, r20
    1bf6:	81 70       	andi	r24, 0x01	; 1
    1bf8:	ec 81       	ldd	r30, Y+4	; 0x04
    1bfa:	fd 81       	ldd	r31, Y+5	; 0x05
    1bfc:	80 83       	st	Z, r24
    1bfe:	2d c0       	rjmp	.+90     	; 0x1c5a <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    1c00:	e3 e3       	ldi	r30, 0x33	; 51
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a9 01       	movw	r20, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_u8GetPinValue+0xd0>
    1c14:	55 95       	asr	r21
    1c16:	47 95       	ror	r20
    1c18:	8a 95       	dec	r24
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <DIO_u8GetPinValue+0xcc>
    1c1c:	ca 01       	movw	r24, r20
    1c1e:	81 70       	andi	r24, 0x01	; 1
    1c20:	ec 81       	ldd	r30, Y+4	; 0x04
    1c22:	fd 81       	ldd	r31, Y+5	; 0x05
    1c24:	80 83       	st	Z, r24
    1c26:	19 c0       	rjmp	.+50     	; 0x1c5a <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    1c28:	e0 e3       	ldi	r30, 0x30	; 48
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a9 01       	movw	r20, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <DIO_u8GetPinValue+0xf8>
    1c3c:	55 95       	asr	r21
    1c3e:	47 95       	ror	r20
    1c40:	8a 95       	dec	r24
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <DIO_u8GetPinValue+0xf4>
    1c44:	ca 01       	movw	r24, r20
    1c46:	81 70       	andi	r24, 0x01	; 1
    1c48:	ec 81       	ldd	r30, Y+4	; 0x04
    1c4a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c4c:	80 83       	st	Z, r24
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5c:	27 96       	adiw	r28, 0x07	; 7
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <DIO_u8SetPortDirection+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <DIO_u8SetPortDirection+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1c80:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	3d 83       	std	Y+5, r19	; 0x05
    1c8a:	2c 83       	std	Y+4, r18	; 0x04
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	91 05       	cpc	r25, r1
    1c94:	d1 f0       	breq	.+52     	; 0x1cca <DIO_u8SetPortDirection+0x5c>
    1c96:	2c 81       	ldd	r18, Y+4	; 0x04
    1c98:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <DIO_u8SetPortDirection+0x3c>
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	61 f0       	breq	.+24     	; 0x1cc0 <DIO_u8SetPortDirection+0x52>
    1ca8:	1f c0       	rjmp	.+62     	; 0x1ce8 <DIO_u8SetPortDirection+0x7a>
    1caa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cac:	3d 81       	ldd	r19, Y+5	; 0x05
    1cae:	22 30       	cpi	r18, 0x02	; 2
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	81 f0       	breq	.+32     	; 0x1cd4 <DIO_u8SetPortDirection+0x66>
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	91 05       	cpc	r25, r1
    1cbc:	81 f0       	breq	.+32     	; 0x1cde <DIO_u8SetPortDirection+0x70>
    1cbe:	14 c0       	rjmp	.+40     	; 0x1ce8 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    1cc0:	ea e3       	ldi	r30, 0x3A	; 58
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	80 83       	st	Z, r24
    1cc8:	11 c0       	rjmp	.+34     	; 0x1cec <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    1cca:	e7 e3       	ldi	r30, 0x37	; 55
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	80 83       	st	Z, r24
    1cd2:	0c c0       	rjmp	.+24     	; 0x1cec <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    1cd4:	e4 e3       	ldi	r30, 0x34	; 52
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	80 83       	st	Z, r24
    1cdc:	07 c0       	rjmp	.+14     	; 0x1cec <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    1cde:	e1 e3       	ldi	r30, 0x31	; 49
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	80 83       	st	Z, r24
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <DIO_u8SetPortValue+0x6>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <DIO_u8SetPortValue+0x8>
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1d10:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	3d 83       	std	Y+5, r19	; 0x05
    1d1a:	2c 83       	std	Y+4, r18	; 0x04
    1d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	91 05       	cpc	r25, r1
    1d24:	d1 f0       	breq	.+52     	; 0x1d5a <DIO_u8SetPortValue+0x5c>
    1d26:	2c 81       	ldd	r18, Y+4	; 0x04
    1d28:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <DIO_u8SetPortValue+0x3c>
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	61 f0       	breq	.+24     	; 0x1d50 <DIO_u8SetPortValue+0x52>
    1d38:	1f c0       	rjmp	.+62     	; 0x1d78 <DIO_u8SetPortValue+0x7a>
    1d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	81 f0       	breq	.+32     	; 0x1d64 <DIO_u8SetPortValue+0x66>
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	9d 81       	ldd	r25, Y+5	; 0x05
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	81 f0       	breq	.+32     	; 0x1d6e <DIO_u8SetPortValue+0x70>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    1d50:	eb e3       	ldi	r30, 0x3B	; 59
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	80 83       	st	Z, r24
    1d58:	11 c0       	rjmp	.+34     	; 0x1d7c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    1d5a:	e8 e3       	ldi	r30, 0x38	; 56
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	80 83       	st	Z, r24
    1d62:	0c c0       	rjmp	.+24     	; 0x1d7c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    1d64:	e5 e3       	ldi	r30, 0x35	; 53
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	80 83       	st	Z, r24
    1d6c:	07 c0       	rjmp	.+14     	; 0x1d7c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    1d6e:	e2 e3       	ldi	r30, 0x32	; 50
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	80 83       	st	Z, r24
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
    1d96:	78 94       	sei
}
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
    1da6:	f8 94       	cli
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1db6:	ea e3       	ldi	r30, 0x3A	; 58
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1dbe:	e7 e3       	ldi	r30, 0x37	; 55
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1dc6:	e4 e3       	ldi	r30, 0x34	; 52
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1dce:	e1 e3       	ldi	r30, 0x31	; 49
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	8f eb       	ldi	r24, 0xBF	; 191
    1dd4:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
    1dd6:	eb e3       	ldi	r30, 0x3B	; 59
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    1ddc:	e8 e3       	ldi	r30, 0x38	; 56
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    1de2:	e5 e3       	ldi	r30, 0x35	; 53
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    1de8:	e2 e3       	ldi	r30, 0x32	; 50
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	10 82       	st	Z, r1
}
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <TIMER0_u8Init>:
static void (* TIMERS_pvCallBackFuncArr[8])(void);

static uint8 TIMERS_u8StateArr[3] = {IDLE};

uint8 TIMER0_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	27 97       	sbiw	r28, 0x07	; 7
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	9b 83       	std	Y+3, r25	; 0x03
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1e0c:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	9b 81       	ldd	r25, Y+3	; 0x03
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <TIMER0_u8Init+0x24>
    1e16:	de c0       	rjmp	.+444    	; 0x1fd4 <TIMER0_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER0] == IDLE)
    1e18:	80 91 7e 01 	lds	r24, 0x017E
    1e1c:	88 23       	and	r24, r24
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <TIMER0_u8Init+0x2e>
    1e20:	d6 c0       	rjmp	.+428    	; 0x1fce <TIMER0_u8Init+0x1da>
		{
			/*Inform others that timer 0 is busy*/
			TIMERS_u8StateArr[TIMER0] = BUSY;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	80 93 7e 01 	sts	0x017E, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    1e28:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2c:	81 81       	ldd	r24, Z+1	; 0x01
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	3f 83       	std	Y+7, r19	; 0x07
    1e34:	2e 83       	std	Y+6, r18	; 0x06
    1e36:	8e 81       	ldd	r24, Y+6	; 0x06
    1e38:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	21 f1       	breq	.+72     	; 0x1e88 <TIMER0_u8Init+0x94>
    1e40:	2e 81       	ldd	r18, Y+6	; 0x06
    1e42:	3f 81       	ldd	r19, Y+7	; 0x07
    1e44:	22 30       	cpi	r18, 0x02	; 2
    1e46:	31 05       	cpc	r19, r1
    1e48:	2c f4       	brge	.+10     	; 0x1e54 <TIMER0_u8Init+0x60>
    1e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	61 f0       	breq	.+24     	; 0x1e6a <TIMER0_u8Init+0x76>
    1e52:	46 c0       	rjmp	.+140    	; 0x1ee0 <TIMER0_u8Init+0xec>
    1e54:	2e 81       	ldd	r18, Y+6	; 0x06
    1e56:	3f 81       	ldd	r19, Y+7	; 0x07
    1e58:	22 30       	cpi	r18, 0x02	; 2
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	21 f1       	breq	.+72     	; 0x1ea6 <TIMER0_u8Init+0xb2>
    1e5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e60:	9f 81       	ldd	r25, Y+7	; 0x07
    1e62:	83 30       	cpi	r24, 0x03	; 3
    1e64:	91 05       	cpc	r25, r1
    1e66:	71 f1       	breq	.+92     	; 0x1ec4 <TIMER0_u8Init+0xd0>
    1e68:	3b c0       	rjmp	.+118    	; 0x1ee0 <TIMER0_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    1e6a:	a3 e5       	ldi	r26, 0x53	; 83
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e3 e5       	ldi	r30, 0x53	; 83
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	8f 7b       	andi	r24, 0xBF	; 191
    1e76:	8c 93       	st	X, r24
    1e78:	a3 e5       	ldi	r26, 0x53	; 83
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e3 e5       	ldi	r30, 0x53	; 83
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	87 7f       	andi	r24, 0xF7	; 247
    1e84:	8c 93       	st	X, r24
    1e86:	2c c0       	rjmp	.+88     	; 0x1ee0 <TIMER0_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    1e88:	a3 e5       	ldi	r26, 0x53	; 83
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e3 e5       	ldi	r30, 0x53	; 83
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	80 64       	ori	r24, 0x40	; 64
    1e94:	8c 93       	st	X, r24
    1e96:	a3 e5       	ldi	r26, 0x53	; 83
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e3 e5       	ldi	r30, 0x53	; 83
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	87 7f       	andi	r24, 0xF7	; 247
    1ea2:	8c 93       	st	X, r24
    1ea4:	1d c0       	rjmp	.+58     	; 0x1ee0 <TIMER0_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    1ea6:	a3 e5       	ldi	r26, 0x53	; 83
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e3 e5       	ldi	r30, 0x53	; 83
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	8f 7b       	andi	r24, 0xBF	; 191
    1eb2:	8c 93       	st	X, r24
    1eb4:	a3 e5       	ldi	r26, 0x53	; 83
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e3 e5       	ldi	r30, 0x53	; 83
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 60       	ori	r24, 0x08	; 8
    1ec0:	8c 93       	st	X, r24
    1ec2:	0e c0       	rjmp	.+28     	; 0x1ee0 <TIMER0_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    1ec4:	a3 e5       	ldi	r26, 0x53	; 83
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e3 e5       	ldi	r30, 0x53	; 83
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 64       	ori	r24, 0x40	; 64
    1ed0:	8c 93       	st	X, r24
    1ed2:	a3 e5       	ldi	r26, 0x53	; 83
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e3 e5       	ldi	r30, 0x53	; 83
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	88 60       	ori	r24, 0x08	; 8
    1ede:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR0 &= TIMER0_2_OCMATCH_MASK;
    1ee0:	a3 e5       	ldi	r26, 0x53	; 83
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e3 e5       	ldi	r30, 0x53	; 83
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8f 7c       	andi	r24, 0xCF	; 207
    1eec:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    1eee:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ef2:	81 81       	ldd	r24, Z+1	; 0x01
    1ef4:	88 23       	and	r24, r24
    1ef6:	29 f0       	breq	.+10     	; 0x1f02 <TIMER0_u8Init+0x10e>
    1ef8:	ea 81       	ldd	r30, Y+2	; 0x02
    1efa:	fb 81       	ldd	r31, Y+3	; 0x03
    1efc:	81 81       	ldd	r24, Z+1	; 0x01
    1efe:	82 30       	cpi	r24, 0x02	; 2
    1f00:	e1 f4       	brne	.+56     	; 0x1f3a <TIMER0_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    1f02:	ea 81       	ldd	r30, Y+2	; 0x02
    1f04:	fb 81       	ldd	r31, Y+3	; 0x03
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	a0 f4       	brcc	.+40     	; 0x1f34 <TIMER0_u8Init+0x140>
				{
					TCCR0 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    1f0c:	a3 e5       	ldi	r26, 0x53	; 83
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e3 e5       	ldi	r30, 0x53	; 83
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	28 2f       	mov	r18, r24
    1f18:	ea 81       	ldd	r30, Y+2	; 0x02
    1f1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	82 95       	swap	r24
    1f24:	92 95       	swap	r25
    1f26:	90 7f       	andi	r25, 0xF0	; 240
    1f28:	98 27       	eor	r25, r24
    1f2a:	80 7f       	andi	r24, 0xF0	; 240
    1f2c:	98 27       	eor	r25, r24
    1f2e:	82 2b       	or	r24, r18
    1f30:	8c 93       	st	X, r24
    1f32:	3b c0       	rjmp	.+118    	; 0x1faa <TIMER0_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	38 c0       	rjmp	.+112    	; 0x1faa <TIMER0_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    1f3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3e:	81 81       	ldd	r24, Z+1	; 0x01
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	29 f0       	breq	.+10     	; 0x1f4e <TIMER0_u8Init+0x15a>
    1f44:	ea 81       	ldd	r30, Y+2	; 0x02
    1f46:	fb 81       	ldd	r31, Y+3	; 0x03
    1f48:	81 81       	ldd	r24, Z+1	; 0x01
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	71 f5       	brne	.+92     	; 0x1faa <TIMER0_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    1f4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f50:	fb 81       	ldd	r31, Y+3	; 0x03
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	3d 83       	std	Y+5, r19	; 0x05
    1f5a:	2c 83       	std	Y+4, r18	; 0x04
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	84 30       	cpi	r24, 0x04	; 4
    1f62:	91 05       	cpc	r25, r1
    1f64:	81 f0       	breq	.+32     	; 0x1f86 <TIMER0_u8Init+0x192>
    1f66:	2c 81       	ldd	r18, Y+4	; 0x04
    1f68:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6a:	25 30       	cpi	r18, 0x05	; 5
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	99 f0       	breq	.+38     	; 0x1f96 <TIMER0_u8Init+0x1a2>
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	9d 81       	ldd	r25, Y+5	; 0x05
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	b9 f4       	brne	.+46     	; 0x1fa6 <TIMER0_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    1f78:	e3 e5       	ldi	r30, 0x53	; 83
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	a3 e5       	ldi	r26, 0x53	; 83
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	8c 91       	ld	r24, X
    1f82:	80 83       	st	Z, r24
    1f84:	12 c0       	rjmp	.+36     	; 0x1faa <TIMER0_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    1f86:	a3 e5       	ldi	r26, 0x53	; 83
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e3 e5       	ldi	r30, 0x53	; 83
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 62       	ori	r24, 0x20	; 32
    1f92:	8c 93       	st	X, r24
    1f94:	0a c0       	rjmp	.+20     	; 0x1faa <TIMER0_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    1f96:	a3 e5       	ldi	r26, 0x53	; 83
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e3 e5       	ldi	r30, 0x53	; 83
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 63       	ori	r24, 0x30	; 48
    1fa2:	8c 93       	st	X, r24
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <TIMER0_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR0 &= PRESCALER_MASK;
    1faa:	a3 e5       	ldi	r26, 0x53	; 83
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e3 e5       	ldi	r30, 0x53	; 83
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 7f       	andi	r24, 0xF8	; 248
    1fb6:	8c 93       	st	X, r24
			TCCR0 |= Copy_pstTimerConfig -> ClkSelect;
    1fb8:	a3 e5       	ldi	r26, 0x53	; 83
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e3 e5       	ldi	r30, 0x53	; 83
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	90 81       	ld	r25, Z
    1fc2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc6:	80 81       	ld	r24, Z
    1fc8:	89 2b       	or	r24, r25
    1fca:	8c 93       	st	X, r24
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <TIMER0_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    1fce:	84 e0       	ldi	r24, 0x04	; 4
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <TIMER0_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fda:	27 96       	adiw	r28, 0x07	; 7
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <TIMER1_u8Init>:
uint8 TIMER1_u8Init(const TIMER1_CFG_t *Copy_pstTimerConfig)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	29 97       	sbiw	r28, 0x09	; 9
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	9b 83       	std	Y+3, r25	; 0x03
    2002:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2004:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	9b 81       	ldd	r25, Y+3	; 0x03
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	09 f4       	brne	.+2      	; 0x2010 <TIMER1_u8Init+0x24>
    200e:	71 c1       	rjmp	.+738    	; 0x22f2 <TIMER1_u8Init+0x306>
	{
		if(TIMERS_u8StateArr[TIMER1] == IDLE)
    2010:	80 91 7f 01 	lds	r24, 0x017F
    2014:	88 23       	and	r24, r24
    2016:	09 f0       	breq	.+2      	; 0x201a <TIMER1_u8Init+0x2e>
    2018:	69 c1       	rjmp	.+722    	; 0x22ec <TIMER1_u8Init+0x300>
		{
			/*Inform others that timer 1 is busy from now*/
			TIMERS_u8StateArr[TIMER1] = BUSY;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	80 93 7f 01 	sts	0x017F, r24

			/*Select Wave Generation Mode*/
			TCCR1A &= TIMER1_WGM_MASK_A;
    2020:	af e4       	ldi	r26, 0x4F	; 79
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	ef e4       	ldi	r30, 0x4F	; 79
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8c 7f       	andi	r24, 0xFC	; 252
    202c:	8c 93       	st	X, r24
			TCCR1B &= TIMER1_WGM_MASK_B;
    202e:	ae e4       	ldi	r26, 0x4E	; 78
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ee e4       	ldi	r30, 0x4E	; 78
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	87 7e       	andi	r24, 0xE7	; 231
    203a:	8c 93       	st	X, r24
			TCCR1A |= ((Copy_pstTimerConfig -> WGM) & 3);
    203c:	af e4       	ldi	r26, 0x4F	; 79
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	ef e4       	ldi	r30, 0x4F	; 79
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	98 2f       	mov	r25, r24
    2048:	ea 81       	ldd	r30, Y+2	; 0x02
    204a:	fb 81       	ldd	r31, Y+3	; 0x03
    204c:	81 81       	ldd	r24, Z+1	; 0x01
    204e:	83 70       	andi	r24, 0x03	; 3
    2050:	89 2b       	or	r24, r25
    2052:	8c 93       	st	X, r24
			TCCR1B |= ((((Copy_pstTimerConfig -> WGM) >> 2) & 3) << 3);
    2054:	ae e4       	ldi	r26, 0x4E	; 78
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	ee e4       	ldi	r30, 0x4E	; 78
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	28 2f       	mov	r18, r24
    2060:	ea 81       	ldd	r30, Y+2	; 0x02
    2062:	fb 81       	ldd	r31, Y+3	; 0x03
    2064:	81 81       	ldd	r24, Z+1	; 0x01
    2066:	86 95       	lsr	r24
    2068:	86 95       	lsr	r24
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	83 70       	andi	r24, 0x03	; 3
    2070:	90 70       	andi	r25, 0x00	; 0
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	82 2b       	or	r24, r18
    2080:	8c 93       	st	X, r24

			/*Select Output Compare Match Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    2082:	ea 81       	ldd	r30, Y+2	; 0x02
    2084:	fb 81       	ldd	r31, Y+3	; 0x03
    2086:	81 81       	ldd	r24, Z+1	; 0x01
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	39 87       	std	Y+9, r19	; 0x09
    208e:	28 87       	std	Y+8, r18	; 0x08
    2090:	88 85       	ldd	r24, Y+8	; 0x08
    2092:	99 85       	ldd	r25, Y+9	; 0x09
    2094:	8c 30       	cpi	r24, 0x0C	; 12
    2096:	91 05       	cpc	r25, r1
    2098:	b4 f4       	brge	.+44     	; 0x20c6 <TIMER1_u8Init+0xda>
    209a:	28 85       	ldd	r18, Y+8	; 0x08
    209c:	39 85       	ldd	r19, Y+9	; 0x09
    209e:	25 30       	cpi	r18, 0x05	; 5
    20a0:	31 05       	cpc	r19, r1
    20a2:	0c f0       	brlt	.+2      	; 0x20a6 <TIMER1_u8Init+0xba>
    20a4:	70 c0       	rjmp	.+224    	; 0x2186 <TIMER1_u8Init+0x19a>
    20a6:	88 85       	ldd	r24, Y+8	; 0x08
    20a8:	99 85       	ldd	r25, Y+9	; 0x09
    20aa:	84 30       	cpi	r24, 0x04	; 4
    20ac:	91 05       	cpc	r25, r1
    20ae:	c4 f4       	brge	.+48     	; 0x20e0 <TIMER1_u8Init+0xf4>
    20b0:	28 85       	ldd	r18, Y+8	; 0x08
    20b2:	39 85       	ldd	r19, Y+9	; 0x09
    20b4:	21 30       	cpi	r18, 0x01	; 1
    20b6:	31 05       	cpc	r19, r1
    20b8:	0c f0       	brlt	.+2      	; 0x20bc <TIMER1_u8Init+0xd0>
    20ba:	65 c0       	rjmp	.+202    	; 0x2186 <TIMER1_u8Init+0x19a>
    20bc:	88 85       	ldd	r24, Y+8	; 0x08
    20be:	99 85       	ldd	r25, Y+9	; 0x09
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <TIMER1_u8Init+0xf4>
    20c4:	ff c0       	rjmp	.+510    	; 0x22c4 <TIMER1_u8Init+0x2d8>
    20c6:	28 85       	ldd	r18, Y+8	; 0x08
    20c8:	39 85       	ldd	r19, Y+9	; 0x09
    20ca:	2c 30       	cpi	r18, 0x0C	; 12
    20cc:	31 05       	cpc	r19, r1
    20ce:	41 f0       	breq	.+16     	; 0x20e0 <TIMER1_u8Init+0xf4>
    20d0:	88 85       	ldd	r24, Y+8	; 0x08
    20d2:	99 85       	ldd	r25, Y+9	; 0x09
    20d4:	0e 97       	sbiw	r24, 0x0e	; 14
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	91 05       	cpc	r25, r1
    20da:	08 f0       	brcs	.+2      	; 0x20de <TIMER1_u8Init+0xf2>
    20dc:	f3 c0       	rjmp	.+486    	; 0x22c4 <TIMER1_u8Init+0x2d8>
    20de:	53 c0       	rjmp	.+166    	; 0x2186 <TIMER1_u8Init+0x19a>
			{
			case NORMAL_16_BITS:
			case CTC_OCR1A:
			case CTC_ICR1:
				/*For Channel A*/
				if((Copy_pstTimerConfig -> OCAMode) < NON_INVERTED_PWM)
    20e0:	ea 81       	ldd	r30, Y+2	; 0x02
    20e2:	fb 81       	ldd	r31, Y+3	; 0x03
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	84 30       	cpi	r24, 0x04	; 4
    20e8:	f0 f4       	brcc	.+60     	; 0x2126 <TIMER1_u8Init+0x13a>
				{
					TCCR1A &= TIMER1_OCMATCH_A_MASK;
    20ea:	af e4       	ldi	r26, 0x4F	; 79
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	ef e4       	ldi	r30, 0x4F	; 79
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	8f 73       	andi	r24, 0x3F	; 63
    20f6:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCAMode) << 6);
    20f8:	af e4       	ldi	r26, 0x4F	; 79
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	ef e4       	ldi	r30, 0x4F	; 79
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	28 2f       	mov	r18, r24
    2104:	ea 81       	ldd	r30, Y+2	; 0x02
    2106:	fb 81       	ldd	r31, Y+3	; 0x03
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	00 24       	eor	r0, r0
    2110:	96 95       	lsr	r25
    2112:	87 95       	ror	r24
    2114:	07 94       	ror	r0
    2116:	96 95       	lsr	r25
    2118:	87 95       	ror	r24
    211a:	07 94       	ror	r0
    211c:	98 2f       	mov	r25, r24
    211e:	80 2d       	mov	r24, r0
    2120:	82 2b       	or	r24, r18
    2122:	8c 93       	st	X, r24
    2124:	07 c0       	rjmp	.+14     	; 0x2134 <TIMER1_u8Init+0x148>
				}
				else if((Copy_pstTimerConfig -> OCAMode) == DO_NOT_CHANGE)
    2126:	ea 81       	ldd	r30, Y+2	; 0x02
    2128:	fb 81       	ldd	r31, Y+3	; 0x03
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	86 30       	cpi	r24, 0x06	; 6
    212e:	11 f0       	breq	.+4      	; 0x2134 <TIMER1_u8Init+0x148>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				if((Copy_pstTimerConfig -> OCBMode) < NON_INVERTED_PWM)
    2134:	ea 81       	ldd	r30, Y+2	; 0x02
    2136:	fb 81       	ldd	r31, Y+3	; 0x03
    2138:	83 81       	ldd	r24, Z+3	; 0x03
    213a:	84 30       	cpi	r24, 0x04	; 4
    213c:	d8 f4       	brcc	.+54     	; 0x2174 <TIMER1_u8Init+0x188>
				{
					TCCR1A &= TIMER1_OCMATCH_B_MASK;
    213e:	af e4       	ldi	r26, 0x4F	; 79
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	ef e4       	ldi	r30, 0x4F	; 79
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 7c       	andi	r24, 0xCF	; 207
    214a:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCBMode) << 4);
    214c:	af e4       	ldi	r26, 0x4F	; 79
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ef e4       	ldi	r30, 0x4F	; 79
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	28 2f       	mov	r18, r24
    2158:	ea 81       	ldd	r30, Y+2	; 0x02
    215a:	fb 81       	ldd	r31, Y+3	; 0x03
    215c:	83 81       	ldd	r24, Z+3	; 0x03
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	82 95       	swap	r24
    2164:	92 95       	swap	r25
    2166:	90 7f       	andi	r25, 0xF0	; 240
    2168:	98 27       	eor	r25, r24
    216a:	80 7f       	andi	r24, 0xF0	; 240
    216c:	98 27       	eor	r25, r24
    216e:	82 2b       	or	r24, r18
    2170:	8c 93       	st	X, r24
    2172:	aa c0       	rjmp	.+340    	; 0x22c8 <TIMER1_u8Init+0x2dc>
				}
				else if((Copy_pstTimerConfig -> OCBMode) == DO_NOT_CHANGE)
    2174:	ea 81       	ldd	r30, Y+2	; 0x02
    2176:	fb 81       	ldd	r31, Y+3	; 0x03
    2178:	83 81       	ldd	r24, Z+3	; 0x03
    217a:	86 30       	cpi	r24, 0x06	; 6
    217c:	09 f4       	brne	.+2      	; 0x2180 <TIMER1_u8Init+0x194>
    217e:	a4 c0       	rjmp	.+328    	; 0x22c8 <TIMER1_u8Init+0x2dc>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	a1 c0       	rjmp	.+322    	; 0x22c8 <TIMER1_u8Init+0x2dc>
			case PHASE_FREQ_CORR_ICR1:
			case PHASE_FREQ_CORR_OCR1A:
			case PHASE_CORR_ICR1:
			case PHASE_CORR_OCR1A:
				/*For Channel A*/
				switch(Copy_pstTimerConfig -> OCAMode)
    2186:	ea 81       	ldd	r30, Y+2	; 0x02
    2188:	fb 81       	ldd	r31, Y+3	; 0x03
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	3f 83       	std	Y+7, r19	; 0x07
    2192:	2e 83       	std	Y+6, r18	; 0x06
    2194:	8e 81       	ldd	r24, Y+6	; 0x06
    2196:	9f 81       	ldd	r25, Y+7	; 0x07
    2198:	84 30       	cpi	r24, 0x04	; 4
    219a:	91 05       	cpc	r25, r1
    219c:	19 f1       	breq	.+70     	; 0x21e4 <TIMER1_u8Init+0x1f8>
    219e:	2e 81       	ldd	r18, Y+6	; 0x06
    21a0:	3f 81       	ldd	r19, Y+7	; 0x07
    21a2:	25 30       	cpi	r18, 0x05	; 5
    21a4:	31 05       	cpc	r19, r1
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <TIMER1_u8Init+0x1c6>
    21a8:	8e 81       	ldd	r24, Y+6	; 0x06
    21aa:	9f 81       	ldd	r25, Y+7	; 0x07
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	61 f0       	breq	.+24     	; 0x21c8 <TIMER1_u8Init+0x1dc>
    21b0:	37 c0       	rjmp	.+110    	; 0x2220 <TIMER1_u8Init+0x234>
    21b2:	2e 81       	ldd	r18, Y+6	; 0x06
    21b4:	3f 81       	ldd	r19, Y+7	; 0x07
    21b6:	25 30       	cpi	r18, 0x05	; 5
    21b8:	31 05       	cpc	r19, r1
    21ba:	19 f1       	breq	.+70     	; 0x2202 <TIMER1_u8Init+0x216>
    21bc:	8e 81       	ldd	r24, Y+6	; 0x06
    21be:	9f 81       	ldd	r25, Y+7	; 0x07
    21c0:	86 30       	cpi	r24, 0x06	; 6
    21c2:	91 05       	cpc	r25, r1
    21c4:	79 f1       	breq	.+94     	; 0x2224 <TIMER1_u8Init+0x238>
    21c6:	2c c0       	rjmp	.+88     	; 0x2220 <TIMER1_u8Init+0x234>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    21c8:	af e4       	ldi	r26, 0x4F	; 79
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	ef e4       	ldi	r30, 0x4F	; 79
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	8f 73       	andi	r24, 0x3F	; 63
    21d4:	8c 93       	st	X, r24
    21d6:	af e4       	ldi	r26, 0x4F	; 79
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	ef e4       	ldi	r30, 0x4F	; 79
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8c 93       	st	X, r24
    21e2:	20 c0       	rjmp	.+64     	; 0x2224 <TIMER1_u8Init+0x238>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    21e4:	af e4       	ldi	r26, 0x4F	; 79
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	ef e4       	ldi	r30, 0x4F	; 79
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	8f 73       	andi	r24, 0x3F	; 63
    21f0:	8c 93       	st	X, r24
    21f2:	af e4       	ldi	r26, 0x4F	; 79
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ef e4       	ldi	r30, 0x4F	; 79
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	80 68       	ori	r24, 0x80	; 128
    21fe:	8c 93       	st	X, r24
    2200:	11 c0       	rjmp	.+34     	; 0x2224 <TIMER1_u8Init+0x238>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    2202:	af e4       	ldi	r26, 0x4F	; 79
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	ef e4       	ldi	r30, 0x4F	; 79
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	8f 73       	andi	r24, 0x3F	; 63
    220e:	8c 93       	st	X, r24
    2210:	af e4       	ldi	r26, 0x4F	; 79
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	ef e4       	ldi	r30, 0x4F	; 79
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	80 6c       	ori	r24, 0xC0	; 192
    221c:	8c 93       	st	X, r24
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <TIMER1_u8Init+0x238>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				switch(Copy_pstTimerConfig -> OCBMode)
    2224:	ea 81       	ldd	r30, Y+2	; 0x02
    2226:	fb 81       	ldd	r31, Y+3	; 0x03
    2228:	83 81       	ldd	r24, Z+3	; 0x03
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	3d 83       	std	Y+5, r19	; 0x05
    2230:	2c 83       	std	Y+4, r18	; 0x04
    2232:	8c 81       	ldd	r24, Y+4	; 0x04
    2234:	9d 81       	ldd	r25, Y+5	; 0x05
    2236:	84 30       	cpi	r24, 0x04	; 4
    2238:	91 05       	cpc	r25, r1
    223a:	19 f1       	breq	.+70     	; 0x2282 <TIMER1_u8Init+0x296>
    223c:	2c 81       	ldd	r18, Y+4	; 0x04
    223e:	3d 81       	ldd	r19, Y+5	; 0x05
    2240:	25 30       	cpi	r18, 0x05	; 5
    2242:	31 05       	cpc	r19, r1
    2244:	2c f4       	brge	.+10     	; 0x2250 <TIMER1_u8Init+0x264>
    2246:	8c 81       	ldd	r24, Y+4	; 0x04
    2248:	9d 81       	ldd	r25, Y+5	; 0x05
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	61 f0       	breq	.+24     	; 0x2266 <TIMER1_u8Init+0x27a>
    224e:	37 c0       	rjmp	.+110    	; 0x22be <TIMER1_u8Init+0x2d2>
    2250:	2c 81       	ldd	r18, Y+4	; 0x04
    2252:	3d 81       	ldd	r19, Y+5	; 0x05
    2254:	25 30       	cpi	r18, 0x05	; 5
    2256:	31 05       	cpc	r19, r1
    2258:	19 f1       	breq	.+70     	; 0x22a0 <TIMER1_u8Init+0x2b4>
    225a:	8c 81       	ldd	r24, Y+4	; 0x04
    225c:	9d 81       	ldd	r25, Y+5	; 0x05
    225e:	86 30       	cpi	r24, 0x06	; 6
    2260:	91 05       	cpc	r25, r1
    2262:	91 f1       	breq	.+100    	; 0x22c8 <TIMER1_u8Init+0x2dc>
    2264:	2c c0       	rjmp	.+88     	; 0x22be <TIMER1_u8Init+0x2d2>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    2266:	af e4       	ldi	r26, 0x4F	; 79
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	ef e4       	ldi	r30, 0x4F	; 79
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8f 7c       	andi	r24, 0xCF	; 207
    2272:	8c 93       	st	X, r24
    2274:	af e4       	ldi	r26, 0x4F	; 79
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	ef e4       	ldi	r30, 0x4F	; 79
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	8c 93       	st	X, r24
    2280:	23 c0       	rjmp	.+70     	; 0x22c8 <TIMER1_u8Init+0x2dc>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    2282:	af e4       	ldi	r26, 0x4F	; 79
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	ef e4       	ldi	r30, 0x4F	; 79
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8f 7c       	andi	r24, 0xCF	; 207
    228e:	8c 93       	st	X, r24
    2290:	af e4       	ldi	r26, 0x4F	; 79
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	ef e4       	ldi	r30, 0x4F	; 79
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	80 62       	ori	r24, 0x20	; 32
    229c:	8c 93       	st	X, r24
    229e:	14 c0       	rjmp	.+40     	; 0x22c8 <TIMER1_u8Init+0x2dc>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    22a0:	af e4       	ldi	r26, 0x4F	; 79
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	ef e4       	ldi	r30, 0x4F	; 79
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 7c       	andi	r24, 0xCF	; 207
    22ac:	8c 93       	st	X, r24
    22ae:	af e4       	ldi	r26, 0x4F	; 79
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	ef e4       	ldi	r30, 0x4F	; 79
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	80 63       	ori	r24, 0x30	; 48
    22ba:	8c 93       	st	X, r24
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <TIMER1_u8Init+0x2dc>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <TIMER1_u8Init+0x2dc>
				}
				break;

			default:Local_u8ErrorState = NOK;	break;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	89 83       	std	Y+1, r24	; 0x01
			}

			/*Select the clock*/
			TCCR1B &= PRESCALER_MASK;
    22c8:	ae e4       	ldi	r26, 0x4E	; 78
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ee e4       	ldi	r30, 0x4E	; 78
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	88 7f       	andi	r24, 0xF8	; 248
    22d4:	8c 93       	st	X, r24
			TCCR1B |= Copy_pstTimerConfig -> ClkSelect;
    22d6:	ae e4       	ldi	r26, 0x4E	; 78
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	ee e4       	ldi	r30, 0x4E	; 78
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	90 81       	ld	r25, Z
    22e0:	ea 81       	ldd	r30, Y+2	; 0x02
    22e2:	fb 81       	ldd	r31, Y+3	; 0x03
    22e4:	80 81       	ld	r24, Z
    22e6:	89 2b       	or	r24, r25
    22e8:	8c 93       	st	X, r24
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <TIMER1_u8Init+0x30a>
//			OCR1A = 1000;
//			OCR1B = 2000;
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    22ec:	84 e0       	ldi	r24, 0x04	; 4
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <TIMER1_u8Init+0x30a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f8:	29 96       	adiw	r28, 0x09	; 9
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <TIMER2_u8Init>:
uint8 TIMER2_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	27 97       	sbiw	r28, 0x07	; 7
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	9b 83       	std	Y+3, r25	; 0x03
    2320:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2322:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	9b 81       	ldd	r25, Y+3	; 0x03
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	09 f4       	brne	.+2      	; 0x232e <TIMER2_u8Init+0x24>
    232c:	de c0       	rjmp	.+444    	; 0x24ea <TIMER2_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER2] == IDLE)
    232e:	80 91 80 01 	lds	r24, 0x0180
    2332:	88 23       	and	r24, r24
    2334:	09 f0       	breq	.+2      	; 0x2338 <TIMER2_u8Init+0x2e>
    2336:	d6 c0       	rjmp	.+428    	; 0x24e4 <TIMER2_u8Init+0x1da>
		{
			/*Inform others that timer 2 is busy from now*/
			TIMERS_u8StateArr[TIMER2] = BUSY;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	80 93 80 01 	sts	0x0180, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    233e:	ea 81       	ldd	r30, Y+2	; 0x02
    2340:	fb 81       	ldd	r31, Y+3	; 0x03
    2342:	81 81       	ldd	r24, Z+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3f 83       	std	Y+7, r19	; 0x07
    234a:	2e 83       	std	Y+6, r18	; 0x06
    234c:	8e 81       	ldd	r24, Y+6	; 0x06
    234e:	9f 81       	ldd	r25, Y+7	; 0x07
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	21 f1       	breq	.+72     	; 0x239e <TIMER2_u8Init+0x94>
    2356:	2e 81       	ldd	r18, Y+6	; 0x06
    2358:	3f 81       	ldd	r19, Y+7	; 0x07
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	2c f4       	brge	.+10     	; 0x236a <TIMER2_u8Init+0x60>
    2360:	8e 81       	ldd	r24, Y+6	; 0x06
    2362:	9f 81       	ldd	r25, Y+7	; 0x07
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	61 f0       	breq	.+24     	; 0x2380 <TIMER2_u8Init+0x76>
    2368:	46 c0       	rjmp	.+140    	; 0x23f6 <TIMER2_u8Init+0xec>
    236a:	2e 81       	ldd	r18, Y+6	; 0x06
    236c:	3f 81       	ldd	r19, Y+7	; 0x07
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	31 05       	cpc	r19, r1
    2372:	21 f1       	breq	.+72     	; 0x23bc <TIMER2_u8Init+0xb2>
    2374:	8e 81       	ldd	r24, Y+6	; 0x06
    2376:	9f 81       	ldd	r25, Y+7	; 0x07
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	91 05       	cpc	r25, r1
    237c:	71 f1       	breq	.+92     	; 0x23da <TIMER2_u8Init+0xd0>
    237e:	3b c0       	rjmp	.+118    	; 0x23f6 <TIMER2_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2380:	a5 e4       	ldi	r26, 0x45	; 69
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e5 e4       	ldi	r30, 0x45	; 69
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8f 7b       	andi	r24, 0xBF	; 191
    238c:	8c 93       	st	X, r24
    238e:	a5 e4       	ldi	r26, 0x45	; 69
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e5 e4       	ldi	r30, 0x45	; 69
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	87 7f       	andi	r24, 0xF7	; 247
    239a:	8c 93       	st	X, r24
    239c:	2c c0       	rjmp	.+88     	; 0x23f6 <TIMER2_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    239e:	a5 e4       	ldi	r26, 0x45	; 69
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e5 e4       	ldi	r30, 0x45	; 69
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	80 64       	ori	r24, 0x40	; 64
    23aa:	8c 93       	st	X, r24
    23ac:	a5 e4       	ldi	r26, 0x45	; 69
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e5 e4       	ldi	r30, 0x45	; 69
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	87 7f       	andi	r24, 0xF7	; 247
    23b8:	8c 93       	st	X, r24
    23ba:	1d c0       	rjmp	.+58     	; 0x23f6 <TIMER2_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    23bc:	a5 e4       	ldi	r26, 0x45	; 69
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e5 e4       	ldi	r30, 0x45	; 69
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8f 7b       	andi	r24, 0xBF	; 191
    23c8:	8c 93       	st	X, r24
    23ca:	a5 e4       	ldi	r26, 0x45	; 69
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e5 e4       	ldi	r30, 0x45	; 69
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	88 60       	ori	r24, 0x08	; 8
    23d6:	8c 93       	st	X, r24
    23d8:	0e c0       	rjmp	.+28     	; 0x23f6 <TIMER2_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    23da:	a5 e4       	ldi	r26, 0x45	; 69
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e5 e4       	ldi	r30, 0x45	; 69
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	80 64       	ori	r24, 0x40	; 64
    23e6:	8c 93       	st	X, r24
    23e8:	a5 e4       	ldi	r26, 0x45	; 69
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e5 e4       	ldi	r30, 0x45	; 69
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	88 60       	ori	r24, 0x08	; 8
    23f4:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR2 &= TIMER0_2_OCMATCH_MASK;
    23f6:	a5 e4       	ldi	r26, 0x45	; 69
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e5 e4       	ldi	r30, 0x45	; 69
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8f 7c       	andi	r24, 0xCF	; 207
    2402:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2404:	ea 81       	ldd	r30, Y+2	; 0x02
    2406:	fb 81       	ldd	r31, Y+3	; 0x03
    2408:	81 81       	ldd	r24, Z+1	; 0x01
    240a:	88 23       	and	r24, r24
    240c:	29 f0       	breq	.+10     	; 0x2418 <TIMER2_u8Init+0x10e>
    240e:	ea 81       	ldd	r30, Y+2	; 0x02
    2410:	fb 81       	ldd	r31, Y+3	; 0x03
    2412:	81 81       	ldd	r24, Z+1	; 0x01
    2414:	82 30       	cpi	r24, 0x02	; 2
    2416:	e1 f4       	brne	.+56     	; 0x2450 <TIMER2_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    2418:	ea 81       	ldd	r30, Y+2	; 0x02
    241a:	fb 81       	ldd	r31, Y+3	; 0x03
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	84 30       	cpi	r24, 0x04	; 4
    2420:	a0 f4       	brcc	.+40     	; 0x244a <TIMER2_u8Init+0x140>
				{
					TCCR2 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    2422:	a5 e4       	ldi	r26, 0x45	; 69
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e5 e4       	ldi	r30, 0x45	; 69
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	28 2f       	mov	r18, r24
    242e:	ea 81       	ldd	r30, Y+2	; 0x02
    2430:	fb 81       	ldd	r31, Y+3	; 0x03
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	82 95       	swap	r24
    243a:	92 95       	swap	r25
    243c:	90 7f       	andi	r25, 0xF0	; 240
    243e:	98 27       	eor	r25, r24
    2440:	80 7f       	andi	r24, 0xF0	; 240
    2442:	98 27       	eor	r25, r24
    2444:	82 2b       	or	r24, r18
    2446:	8c 93       	st	X, r24
    2448:	3b c0       	rjmp	.+118    	; 0x24c0 <TIMER2_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	38 c0       	rjmp	.+112    	; 0x24c0 <TIMER2_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    2450:	ea 81       	ldd	r30, Y+2	; 0x02
    2452:	fb 81       	ldd	r31, Y+3	; 0x03
    2454:	81 81       	ldd	r24, Z+1	; 0x01
    2456:	83 30       	cpi	r24, 0x03	; 3
    2458:	29 f0       	breq	.+10     	; 0x2464 <TIMER2_u8Init+0x15a>
    245a:	ea 81       	ldd	r30, Y+2	; 0x02
    245c:	fb 81       	ldd	r31, Y+3	; 0x03
    245e:	81 81       	ldd	r24, Z+1	; 0x01
    2460:	81 30       	cpi	r24, 0x01	; 1
    2462:	71 f5       	brne	.+92     	; 0x24c0 <TIMER2_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    2464:	ea 81       	ldd	r30, Y+2	; 0x02
    2466:	fb 81       	ldd	r31, Y+3	; 0x03
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	3d 83       	std	Y+5, r19	; 0x05
    2470:	2c 83       	std	Y+4, r18	; 0x04
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	9d 81       	ldd	r25, Y+5	; 0x05
    2476:	84 30       	cpi	r24, 0x04	; 4
    2478:	91 05       	cpc	r25, r1
    247a:	81 f0       	breq	.+32     	; 0x249c <TIMER2_u8Init+0x192>
    247c:	2c 81       	ldd	r18, Y+4	; 0x04
    247e:	3d 81       	ldd	r19, Y+5	; 0x05
    2480:	25 30       	cpi	r18, 0x05	; 5
    2482:	31 05       	cpc	r19, r1
    2484:	99 f0       	breq	.+38     	; 0x24ac <TIMER2_u8Init+0x1a2>
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	9d 81       	ldd	r25, Y+5	; 0x05
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	b9 f4       	brne	.+46     	; 0x24bc <TIMER2_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    248e:	e5 e4       	ldi	r30, 0x45	; 69
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	a5 e4       	ldi	r26, 0x45	; 69
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	8c 91       	ld	r24, X
    2498:	80 83       	st	Z, r24
    249a:	12 c0       	rjmp	.+36     	; 0x24c0 <TIMER2_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    249c:	a5 e4       	ldi	r26, 0x45	; 69
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e5 e4       	ldi	r30, 0x45	; 69
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	80 62       	ori	r24, 0x20	; 32
    24a8:	8c 93       	st	X, r24
    24aa:	0a c0       	rjmp	.+20     	; 0x24c0 <TIMER2_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    24ac:	a5 e4       	ldi	r26, 0x45	; 69
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e5 e4       	ldi	r30, 0x45	; 69
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	80 63       	ori	r24, 0x30	; 48
    24b8:	8c 93       	st	X, r24
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <TIMER2_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR2 &= PRESCALER_MASK;
    24c0:	a5 e4       	ldi	r26, 0x45	; 69
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e5 e4       	ldi	r30, 0x45	; 69
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	88 7f       	andi	r24, 0xF8	; 248
    24cc:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    24ce:	a5 e4       	ldi	r26, 0x45	; 69
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e5 e4       	ldi	r30, 0x45	; 69
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	90 81       	ld	r25, Z
    24d8:	ea 81       	ldd	r30, Y+2	; 0x02
    24da:	fb 81       	ldd	r31, Y+3	; 0x03
    24dc:	80 81       	ld	r24, Z
    24de:	89 2b       	or	r24, r25
    24e0:	8c 93       	st	X, r24
    24e2:	05 c0       	rjmp	.+10     	; 0x24ee <TIMER2_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    24e4:	84 e0       	ldi	r24, 0x04	; 4
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <TIMER2_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f0:	27 96       	adiw	r28, 0x07	; 7
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <TIMER0_u8SetCompOutMode>:



uint8 TIMER0_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	00 d0       	rcall	.+0      	; 0x2508 <TIMER0_u8SetCompOutMode+0x6>
    2508:	00 d0       	rcall	.+0      	; 0x250a <TIMER0_u8SetCompOutMode+0x8>
    250a:	00 d0       	rcall	.+0      	; 0x250c <TIMER0_u8SetCompOutMode+0xa>
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	9b 83       	std	Y+3, r25	; 0x03
    2512:	8a 83       	std	Y+2, r24	; 0x02
    2514:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2516:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	9b 81       	ldd	r25, Y+3	; 0x03
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	09 f4       	brne	.+2      	; 0x2522 <TIMER0_u8SetCompOutMode+0x20>
    2520:	60 c0       	rjmp	.+192    	; 0x25e2 <TIMER0_u8SetCompOutMode+0xe0>
	{
		TCCR0 &= TIMER0_2_OCMATCH_MASK;
    2522:	a3 e5       	ldi	r26, 0x53	; 83
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e3 e5       	ldi	r30, 0x53	; 83
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8f 7c       	andi	r24, 0xCF	; 207
    252e:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2530:	ea 81       	ldd	r30, Y+2	; 0x02
    2532:	fb 81       	ldd	r31, Y+3	; 0x03
    2534:	81 81       	ldd	r24, Z+1	; 0x01
    2536:	88 23       	and	r24, r24
    2538:	29 f0       	breq	.+10     	; 0x2544 <TIMER0_u8SetCompOutMode+0x42>
    253a:	ea 81       	ldd	r30, Y+2	; 0x02
    253c:	fb 81       	ldd	r31, Y+3	; 0x03
    253e:	81 81       	ldd	r24, Z+1	; 0x01
    2540:	82 30       	cpi	r24, 0x02	; 2
    2542:	c1 f4       	brne	.+48     	; 0x2574 <TIMER0_u8SetCompOutMode+0x72>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	84 30       	cpi	r24, 0x04	; 4
    2548:	90 f4       	brcc	.+36     	; 0x256e <TIMER0_u8SetCompOutMode+0x6c>
			{
				TCCR0 |= (Copy_u8Mode << 4);
    254a:	a3 e5       	ldi	r26, 0x53	; 83
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e3 e5       	ldi	r30, 0x53	; 83
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	28 2f       	mov	r18, r24
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	82 95       	swap	r24
    255e:	92 95       	swap	r25
    2560:	90 7f       	andi	r25, 0xF0	; 240
    2562:	98 27       	eor	r25, r24
    2564:	80 7f       	andi	r24, 0xF0	; 240
    2566:	98 27       	eor	r25, r24
    2568:	82 2b       	or	r24, r18
    256a:	8c 93       	st	X, r24
    256c:	3c c0       	rjmp	.+120    	; 0x25e6 <TIMER0_u8SetCompOutMode+0xe4>
			}
			else
			{
				Local_u8ErrorState = NOK;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	39 c0       	rjmp	.+114    	; 0x25e6 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    2574:	ea 81       	ldd	r30, Y+2	; 0x02
    2576:	fb 81       	ldd	r31, Y+3	; 0x03
    2578:	81 81       	ldd	r24, Z+1	; 0x01
    257a:	83 30       	cpi	r24, 0x03	; 3
    257c:	29 f0       	breq	.+10     	; 0x2588 <TIMER0_u8SetCompOutMode+0x86>
    257e:	ea 81       	ldd	r30, Y+2	; 0x02
    2580:	fb 81       	ldd	r31, Y+3	; 0x03
    2582:	81 81       	ldd	r24, Z+1	; 0x01
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	79 f5       	brne	.+94     	; 0x25e6 <TIMER0_u8SetCompOutMode+0xe4>
		{
			switch(Copy_u8Mode)
    2588:	8c 81       	ldd	r24, Y+4	; 0x04
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	3e 83       	std	Y+6, r19	; 0x06
    2590:	2d 83       	std	Y+5, r18	; 0x05
    2592:	8d 81       	ldd	r24, Y+5	; 0x05
    2594:	9e 81       	ldd	r25, Y+6	; 0x06
    2596:	84 30       	cpi	r24, 0x04	; 4
    2598:	91 05       	cpc	r25, r1
    259a:	81 f0       	breq	.+32     	; 0x25bc <TIMER0_u8SetCompOutMode+0xba>
    259c:	2d 81       	ldd	r18, Y+5	; 0x05
    259e:	3e 81       	ldd	r19, Y+6	; 0x06
    25a0:	25 30       	cpi	r18, 0x05	; 5
    25a2:	31 05       	cpc	r19, r1
    25a4:	99 f0       	breq	.+38     	; 0x25cc <TIMER0_u8SetCompOutMode+0xca>
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	b9 f4       	brne	.+46     	; 0x25dc <TIMER0_u8SetCompOutMode+0xda>
			{
			case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    25ae:	e3 e5       	ldi	r30, 0x53	; 83
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	a3 e5       	ldi	r26, 0x53	; 83
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	8c 91       	ld	r24, X
    25b8:	80 83       	st	Z, r24
    25ba:	15 c0       	rjmp	.+42     	; 0x25e6 <TIMER0_u8SetCompOutMode+0xe4>
			case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    25bc:	a3 e5       	ldi	r26, 0x53	; 83
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e3 e5       	ldi	r30, 0x53	; 83
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	80 62       	ori	r24, 0x20	; 32
    25c8:	8c 93       	st	X, r24
    25ca:	0d c0       	rjmp	.+26     	; 0x25e6 <TIMER0_u8SetCompOutMode+0xe4>
			case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    25cc:	a3 e5       	ldi	r26, 0x53	; 83
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e3 e5       	ldi	r30, 0x53	; 83
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	80 63       	ori	r24, 0x30	; 48
    25d8:	8c 93       	st	X, r24
    25da:	05 c0       	rjmp	.+10     	; 0x25e6 <TIMER0_u8SetCompOutMode+0xe4>
			default: Local_u8ErrorState = NOK;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25e8:	26 96       	adiw	r28, 0x06	; 6
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <TIMER1_u8SetCompOutModeChA>:
uint8 TIMER1_u8SetCompOutModeChA(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	28 97       	sbiw	r28, 0x08	; 8
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	9b 83       	std	Y+3, r25	; 0x03
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2614:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	9b 81       	ldd	r25, Y+3	; 0x03
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	09 f4       	brne	.+2      	; 0x2620 <TIMER1_u8SetCompOutModeChA+0x26>
    261e:	a5 c0       	rjmp	.+330    	; 0x276a <TIMER1_u8SetCompOutModeChA+0x170>
	{
		/*Select Output Compare Match Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    2620:	ea 81       	ldd	r30, Y+2	; 0x02
    2622:	fb 81       	ldd	r31, Y+3	; 0x03
    2624:	81 81       	ldd	r24, Z+1	; 0x01
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	38 87       	std	Y+8, r19	; 0x08
    262c:	2f 83       	std	Y+7, r18	; 0x07
    262e:	8f 81       	ldd	r24, Y+7	; 0x07
    2630:	98 85       	ldd	r25, Y+8	; 0x08
    2632:	8c 30       	cpi	r24, 0x0C	; 12
    2634:	91 05       	cpc	r25, r1
    2636:	ac f4       	brge	.+42     	; 0x2662 <TIMER1_u8SetCompOutModeChA+0x68>
    2638:	2f 81       	ldd	r18, Y+7	; 0x07
    263a:	38 85       	ldd	r19, Y+8	; 0x08
    263c:	25 30       	cpi	r18, 0x05	; 5
    263e:	31 05       	cpc	r19, r1
    2640:	0c f0       	brlt	.+2      	; 0x2644 <TIMER1_u8SetCompOutModeChA+0x4a>
    2642:	42 c0       	rjmp	.+132    	; 0x26c8 <TIMER1_u8SetCompOutModeChA+0xce>
    2644:	8f 81       	ldd	r24, Y+7	; 0x07
    2646:	98 85       	ldd	r25, Y+8	; 0x08
    2648:	84 30       	cpi	r24, 0x04	; 4
    264a:	91 05       	cpc	r25, r1
    264c:	bc f4       	brge	.+46     	; 0x267c <TIMER1_u8SetCompOutModeChA+0x82>
    264e:	2f 81       	ldd	r18, Y+7	; 0x07
    2650:	38 85       	ldd	r19, Y+8	; 0x08
    2652:	21 30       	cpi	r18, 0x01	; 1
    2654:	31 05       	cpc	r19, r1
    2656:	c4 f5       	brge	.+112    	; 0x26c8 <TIMER1_u8SetCompOutModeChA+0xce>
    2658:	8f 81       	ldd	r24, Y+7	; 0x07
    265a:	98 85       	ldd	r25, Y+8	; 0x08
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	71 f0       	breq	.+28     	; 0x267c <TIMER1_u8SetCompOutModeChA+0x82>
    2660:	81 c0       	rjmp	.+258    	; 0x2764 <TIMER1_u8SetCompOutModeChA+0x16a>
    2662:	2f 81       	ldd	r18, Y+7	; 0x07
    2664:	38 85       	ldd	r19, Y+8	; 0x08
    2666:	2c 30       	cpi	r18, 0x0C	; 12
    2668:	31 05       	cpc	r19, r1
    266a:	41 f0       	breq	.+16     	; 0x267c <TIMER1_u8SetCompOutModeChA+0x82>
    266c:	8f 81       	ldd	r24, Y+7	; 0x07
    266e:	98 85       	ldd	r25, Y+8	; 0x08
    2670:	0e 97       	sbiw	r24, 0x0e	; 14
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	91 05       	cpc	r25, r1
    2676:	08 f0       	brcs	.+2      	; 0x267a <TIMER1_u8SetCompOutModeChA+0x80>
    2678:	75 c0       	rjmp	.+234    	; 0x2764 <TIMER1_u8SetCompOutModeChA+0x16a>
    267a:	26 c0       	rjmp	.+76     	; 0x26c8 <TIMER1_u8SetCompOutModeChA+0xce>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel A*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	84 30       	cpi	r24, 0x04	; 4
    2680:	e0 f4       	brcc	.+56     	; 0x26ba <TIMER1_u8SetCompOutModeChA+0xc0>
			{
				TCCR1A &= TIMER1_OCMATCH_A_MASK;
    2682:	af e4       	ldi	r26, 0x4F	; 79
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ef e4       	ldi	r30, 0x4F	; 79
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	8f 73       	andi	r24, 0x3F	; 63
    268e:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 6);
    2690:	af e4       	ldi	r26, 0x4F	; 79
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ef e4       	ldi	r30, 0x4F	; 79
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	28 2f       	mov	r18, r24
    269c:	8c 81       	ldd	r24, Y+4	; 0x04
    269e:	88 2f       	mov	r24, r24
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	00 24       	eor	r0, r0
    26a4:	96 95       	lsr	r25
    26a6:	87 95       	ror	r24
    26a8:	07 94       	ror	r0
    26aa:	96 95       	lsr	r25
    26ac:	87 95       	ror	r24
    26ae:	07 94       	ror	r0
    26b0:	98 2f       	mov	r25, r24
    26b2:	80 2d       	mov	r24, r0
    26b4:	82 2b       	or	r24, r18
    26b6:	8c 93       	st	X, r24
    26b8:	5a c0       	rjmp	.+180    	; 0x276e <TIMER1_u8SetCompOutModeChA+0x174>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    26ba:	8c 81       	ldd	r24, Y+4	; 0x04
    26bc:	86 30       	cpi	r24, 0x06	; 6
    26be:	09 f4       	brne	.+2      	; 0x26c2 <TIMER1_u8SetCompOutModeChA+0xc8>
    26c0:	56 c0       	rjmp	.+172    	; 0x276e <TIMER1_u8SetCompOutModeChA+0x174>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	53 c0       	rjmp	.+166    	; 0x276e <TIMER1_u8SetCompOutModeChA+0x174>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel A*/
			switch(Copy_u8Mode)
    26c8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	3e 83       	std	Y+6, r19	; 0x06
    26d0:	2d 83       	std	Y+5, r18	; 0x05
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	84 30       	cpi	r24, 0x04	; 4
    26d8:	91 05       	cpc	r25, r1
    26da:	19 f1       	breq	.+70     	; 0x2722 <TIMER1_u8SetCompOutModeChA+0x128>
    26dc:	2d 81       	ldd	r18, Y+5	; 0x05
    26de:	3e 81       	ldd	r19, Y+6	; 0x06
    26e0:	25 30       	cpi	r18, 0x05	; 5
    26e2:	31 05       	cpc	r19, r1
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <TIMER1_u8SetCompOutModeChA+0xf6>
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	61 f0       	breq	.+24     	; 0x2706 <TIMER1_u8SetCompOutModeChA+0x10c>
    26ee:	37 c0       	rjmp	.+110    	; 0x275e <TIMER1_u8SetCompOutModeChA+0x164>
    26f0:	2d 81       	ldd	r18, Y+5	; 0x05
    26f2:	3e 81       	ldd	r19, Y+6	; 0x06
    26f4:	25 30       	cpi	r18, 0x05	; 5
    26f6:	31 05       	cpc	r19, r1
    26f8:	19 f1       	breq	.+70     	; 0x2740 <TIMER1_u8SetCompOutModeChA+0x146>
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	86 30       	cpi	r24, 0x06	; 6
    2700:	91 05       	cpc	r25, r1
    2702:	a9 f1       	breq	.+106    	; 0x276e <TIMER1_u8SetCompOutModeChA+0x174>
    2704:	2c c0       	rjmp	.+88     	; 0x275e <TIMER1_u8SetCompOutModeChA+0x164>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    2706:	af e4       	ldi	r26, 0x4F	; 79
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	ef e4       	ldi	r30, 0x4F	; 79
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	8f 73       	andi	r24, 0x3F	; 63
    2712:	8c 93       	st	X, r24
    2714:	af e4       	ldi	r26, 0x4F	; 79
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	ef e4       	ldi	r30, 0x4F	; 79
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	8c 93       	st	X, r24
    2720:	26 c0       	rjmp	.+76     	; 0x276e <TIMER1_u8SetCompOutModeChA+0x174>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    2722:	af e4       	ldi	r26, 0x4F	; 79
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	ef e4       	ldi	r30, 0x4F	; 79
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	8f 73       	andi	r24, 0x3F	; 63
    272e:	8c 93       	st	X, r24
    2730:	af e4       	ldi	r26, 0x4F	; 79
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	ef e4       	ldi	r30, 0x4F	; 79
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	80 68       	ori	r24, 0x80	; 128
    273c:	8c 93       	st	X, r24
    273e:	17 c0       	rjmp	.+46     	; 0x276e <TIMER1_u8SetCompOutModeChA+0x174>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    2740:	af e4       	ldi	r26, 0x4F	; 79
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	ef e4       	ldi	r30, 0x4F	; 79
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	8f 73       	andi	r24, 0x3F	; 63
    274c:	8c 93       	st	X, r24
    274e:	af e4       	ldi	r26, 0x4F	; 79
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	ef e4       	ldi	r30, 0x4F	; 79
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	80 6c       	ori	r24, 0xC0	; 192
    275a:	8c 93       	st	X, r24
    275c:	08 c0       	rjmp	.+16     	; 0x276e <TIMER1_u8SetCompOutModeChA+0x174>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	05 c0       	rjmp	.+10     	; 0x276e <TIMER1_u8SetCompOutModeChA+0x174>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	02 c0       	rjmp	.+4      	; 0x276e <TIMER1_u8SetCompOutModeChA+0x174>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    276a:	82 e0       	ldi	r24, 0x02	; 2
    276c:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    276e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2770:	28 96       	adiw	r28, 0x08	; 8
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <TIMER1_u8SetCompOutModeChB>:
uint8 TIMER1_u8SetCompOutModeChB(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	28 97       	sbiw	r28, 0x08	; 8
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	9b 83       	std	Y+3, r25	; 0x03
    2798:	8a 83       	std	Y+2, r24	; 0x02
    279a:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    279c:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	9b 81       	ldd	r25, Y+3	; 0x03
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <TIMER1_u8SetCompOutModeChB+0x26>
    27a6:	a2 c0       	rjmp	.+324    	; 0x28ec <TIMER1_u8SetCompOutModeChB+0x16a>
	{
		switch(Copy_pstTimerConfig -> WGM)
    27a8:	ea 81       	ldd	r30, Y+2	; 0x02
    27aa:	fb 81       	ldd	r31, Y+3	; 0x03
    27ac:	81 81       	ldd	r24, Z+1	; 0x01
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	38 87       	std	Y+8, r19	; 0x08
    27b4:	2f 83       	std	Y+7, r18	; 0x07
    27b6:	8f 81       	ldd	r24, Y+7	; 0x07
    27b8:	98 85       	ldd	r25, Y+8	; 0x08
    27ba:	8c 30       	cpi	r24, 0x0C	; 12
    27bc:	91 05       	cpc	r25, r1
    27be:	ac f4       	brge	.+42     	; 0x27ea <TIMER1_u8SetCompOutModeChB+0x68>
    27c0:	2f 81       	ldd	r18, Y+7	; 0x07
    27c2:	38 85       	ldd	r19, Y+8	; 0x08
    27c4:	25 30       	cpi	r18, 0x05	; 5
    27c6:	31 05       	cpc	r19, r1
    27c8:	0c f0       	brlt	.+2      	; 0x27cc <TIMER1_u8SetCompOutModeChB+0x4a>
    27ca:	3f c0       	rjmp	.+126    	; 0x284a <TIMER1_u8SetCompOutModeChB+0xc8>
    27cc:	8f 81       	ldd	r24, Y+7	; 0x07
    27ce:	98 85       	ldd	r25, Y+8	; 0x08
    27d0:	84 30       	cpi	r24, 0x04	; 4
    27d2:	91 05       	cpc	r25, r1
    27d4:	bc f4       	brge	.+46     	; 0x2804 <TIMER1_u8SetCompOutModeChB+0x82>
    27d6:	2f 81       	ldd	r18, Y+7	; 0x07
    27d8:	38 85       	ldd	r19, Y+8	; 0x08
    27da:	21 30       	cpi	r18, 0x01	; 1
    27dc:	31 05       	cpc	r19, r1
    27de:	ac f5       	brge	.+106    	; 0x284a <TIMER1_u8SetCompOutModeChB+0xc8>
    27e0:	8f 81       	ldd	r24, Y+7	; 0x07
    27e2:	98 85       	ldd	r25, Y+8	; 0x08
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	71 f0       	breq	.+28     	; 0x2804 <TIMER1_u8SetCompOutModeChB+0x82>
    27e8:	7e c0       	rjmp	.+252    	; 0x28e6 <TIMER1_u8SetCompOutModeChB+0x164>
    27ea:	2f 81       	ldd	r18, Y+7	; 0x07
    27ec:	38 85       	ldd	r19, Y+8	; 0x08
    27ee:	2c 30       	cpi	r18, 0x0C	; 12
    27f0:	31 05       	cpc	r19, r1
    27f2:	41 f0       	breq	.+16     	; 0x2804 <TIMER1_u8SetCompOutModeChB+0x82>
    27f4:	8f 81       	ldd	r24, Y+7	; 0x07
    27f6:	98 85       	ldd	r25, Y+8	; 0x08
    27f8:	0e 97       	sbiw	r24, 0x0e	; 14
    27fa:	82 30       	cpi	r24, 0x02	; 2
    27fc:	91 05       	cpc	r25, r1
    27fe:	08 f0       	brcs	.+2      	; 0x2802 <TIMER1_u8SetCompOutModeChB+0x80>
    2800:	72 c0       	rjmp	.+228    	; 0x28e6 <TIMER1_u8SetCompOutModeChB+0x164>
    2802:	23 c0       	rjmp	.+70     	; 0x284a <TIMER1_u8SetCompOutModeChB+0xc8>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel B*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2804:	8c 81       	ldd	r24, Y+4	; 0x04
    2806:	84 30       	cpi	r24, 0x04	; 4
    2808:	c8 f4       	brcc	.+50     	; 0x283c <TIMER1_u8SetCompOutModeChB+0xba>
			{
				TCCR1A &= TIMER1_OCMATCH_B_MASK;
    280a:	af e4       	ldi	r26, 0x4F	; 79
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	ef e4       	ldi	r30, 0x4F	; 79
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	8f 7c       	andi	r24, 0xCF	; 207
    2816:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 4);
    2818:	af e4       	ldi	r26, 0x4F	; 79
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	ef e4       	ldi	r30, 0x4F	; 79
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	28 2f       	mov	r18, r24
    2824:	8c 81       	ldd	r24, Y+4	; 0x04
    2826:	88 2f       	mov	r24, r24
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	82 95       	swap	r24
    282c:	92 95       	swap	r25
    282e:	90 7f       	andi	r25, 0xF0	; 240
    2830:	98 27       	eor	r25, r24
    2832:	80 7f       	andi	r24, 0xF0	; 240
    2834:	98 27       	eor	r25, r24
    2836:	82 2b       	or	r24, r18
    2838:	8c 93       	st	X, r24
    283a:	5a c0       	rjmp	.+180    	; 0x28f0 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    283c:	8c 81       	ldd	r24, Y+4	; 0x04
    283e:	86 30       	cpi	r24, 0x06	; 6
    2840:	09 f4       	brne	.+2      	; 0x2844 <TIMER1_u8SetCompOutModeChB+0xc2>
    2842:	56 c0       	rjmp	.+172    	; 0x28f0 <TIMER1_u8SetCompOutModeChB+0x16e>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	53 c0       	rjmp	.+166    	; 0x28f0 <TIMER1_u8SetCompOutModeChB+0x16e>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel B*/
			switch(Copy_u8Mode)
    284a:	8c 81       	ldd	r24, Y+4	; 0x04
    284c:	28 2f       	mov	r18, r24
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	3e 83       	std	Y+6, r19	; 0x06
    2852:	2d 83       	std	Y+5, r18	; 0x05
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	9e 81       	ldd	r25, Y+6	; 0x06
    2858:	84 30       	cpi	r24, 0x04	; 4
    285a:	91 05       	cpc	r25, r1
    285c:	19 f1       	breq	.+70     	; 0x28a4 <TIMER1_u8SetCompOutModeChB+0x122>
    285e:	2d 81       	ldd	r18, Y+5	; 0x05
    2860:	3e 81       	ldd	r19, Y+6	; 0x06
    2862:	25 30       	cpi	r18, 0x05	; 5
    2864:	31 05       	cpc	r19, r1
    2866:	2c f4       	brge	.+10     	; 0x2872 <TIMER1_u8SetCompOutModeChB+0xf0>
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	61 f0       	breq	.+24     	; 0x2888 <TIMER1_u8SetCompOutModeChB+0x106>
    2870:	37 c0       	rjmp	.+110    	; 0x28e0 <TIMER1_u8SetCompOutModeChB+0x15e>
    2872:	2d 81       	ldd	r18, Y+5	; 0x05
    2874:	3e 81       	ldd	r19, Y+6	; 0x06
    2876:	25 30       	cpi	r18, 0x05	; 5
    2878:	31 05       	cpc	r19, r1
    287a:	19 f1       	breq	.+70     	; 0x28c2 <TIMER1_u8SetCompOutModeChB+0x140>
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	9e 81       	ldd	r25, Y+6	; 0x06
    2880:	86 30       	cpi	r24, 0x06	; 6
    2882:	91 05       	cpc	r25, r1
    2884:	a9 f1       	breq	.+106    	; 0x28f0 <TIMER1_u8SetCompOutModeChB+0x16e>
    2886:	2c c0       	rjmp	.+88     	; 0x28e0 <TIMER1_u8SetCompOutModeChB+0x15e>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    2888:	af e4       	ldi	r26, 0x4F	; 79
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	ef e4       	ldi	r30, 0x4F	; 79
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	8f 7c       	andi	r24, 0xCF	; 207
    2894:	8c 93       	st	X, r24
    2896:	af e4       	ldi	r26, 0x4F	; 79
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	ef e4       	ldi	r30, 0x4F	; 79
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	8c 93       	st	X, r24
    28a2:	26 c0       	rjmp	.+76     	; 0x28f0 <TIMER1_u8SetCompOutModeChB+0x16e>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    28a4:	af e4       	ldi	r26, 0x4F	; 79
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	ef e4       	ldi	r30, 0x4F	; 79
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	8f 7c       	andi	r24, 0xCF	; 207
    28b0:	8c 93       	st	X, r24
    28b2:	af e4       	ldi	r26, 0x4F	; 79
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	ef e4       	ldi	r30, 0x4F	; 79
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	80 62       	ori	r24, 0x20	; 32
    28be:	8c 93       	st	X, r24
    28c0:	17 c0       	rjmp	.+46     	; 0x28f0 <TIMER1_u8SetCompOutModeChB+0x16e>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    28c2:	af e4       	ldi	r26, 0x4F	; 79
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	ef e4       	ldi	r30, 0x4F	; 79
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	8f 7c       	andi	r24, 0xCF	; 207
    28ce:	8c 93       	st	X, r24
    28d0:	af e4       	ldi	r26, 0x4F	; 79
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	ef e4       	ldi	r30, 0x4F	; 79
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	80 63       	ori	r24, 0x30	; 48
    28dc:	8c 93       	st	X, r24
    28de:	08 c0       	rjmp	.+16     	; 0x28f0 <TIMER1_u8SetCompOutModeChB+0x16e>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	05 c0       	rjmp	.+10     	; 0x28f0 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <TIMER1_u8SetCompOutModeChB+0x16e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    28f2:	28 96       	adiw	r28, 0x08	; 8
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <TIMER2_u8SetCompOutMode>:
uint8 TIMER2_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	28 97       	sbiw	r28, 0x08	; 8
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	9b 83       	std	Y+3, r25	; 0x03
    291a:	8a 83       	std	Y+2, r24	; 0x02
    291c:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    291e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	9b 81       	ldd	r25, Y+3	; 0x03
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	09 f4       	brne	.+2      	; 0x292a <TIMER2_u8SetCompOutMode+0x26>
    2928:	cd c0       	rjmp	.+410    	; 0x2ac4 <TIMER2_u8SetCompOutMode+0x1c0>
	{
		/*Select Wave Generation Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    292a:	ea 81       	ldd	r30, Y+2	; 0x02
    292c:	fb 81       	ldd	r31, Y+3	; 0x03
    292e:	81 81       	ldd	r24, Z+1	; 0x01
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	38 87       	std	Y+8, r19	; 0x08
    2936:	2f 83       	std	Y+7, r18	; 0x07
    2938:	8f 81       	ldd	r24, Y+7	; 0x07
    293a:	98 85       	ldd	r25, Y+8	; 0x08
    293c:	81 30       	cpi	r24, 0x01	; 1
    293e:	91 05       	cpc	r25, r1
    2940:	21 f1       	breq	.+72     	; 0x298a <TIMER2_u8SetCompOutMode+0x86>
    2942:	2f 81       	ldd	r18, Y+7	; 0x07
    2944:	38 85       	ldd	r19, Y+8	; 0x08
    2946:	22 30       	cpi	r18, 0x02	; 2
    2948:	31 05       	cpc	r19, r1
    294a:	2c f4       	brge	.+10     	; 0x2956 <TIMER2_u8SetCompOutMode+0x52>
    294c:	8f 81       	ldd	r24, Y+7	; 0x07
    294e:	98 85       	ldd	r25, Y+8	; 0x08
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	61 f0       	breq	.+24     	; 0x296c <TIMER2_u8SetCompOutMode+0x68>
    2954:	46 c0       	rjmp	.+140    	; 0x29e2 <TIMER2_u8SetCompOutMode+0xde>
    2956:	2f 81       	ldd	r18, Y+7	; 0x07
    2958:	38 85       	ldd	r19, Y+8	; 0x08
    295a:	22 30       	cpi	r18, 0x02	; 2
    295c:	31 05       	cpc	r19, r1
    295e:	21 f1       	breq	.+72     	; 0x29a8 <TIMER2_u8SetCompOutMode+0xa4>
    2960:	8f 81       	ldd	r24, Y+7	; 0x07
    2962:	98 85       	ldd	r25, Y+8	; 0x08
    2964:	83 30       	cpi	r24, 0x03	; 3
    2966:	91 05       	cpc	r25, r1
    2968:	71 f1       	breq	.+92     	; 0x29c6 <TIMER2_u8SetCompOutMode+0xc2>
    296a:	3b c0       	rjmp	.+118    	; 0x29e2 <TIMER2_u8SetCompOutMode+0xde>
		{
		case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    296c:	a5 e4       	ldi	r26, 0x45	; 69
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e5 e4       	ldi	r30, 0x45	; 69
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	8f 7b       	andi	r24, 0xBF	; 191
    2978:	8c 93       	st	X, r24
    297a:	a5 e4       	ldi	r26, 0x45	; 69
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e5 e4       	ldi	r30, 0x45	; 69
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	87 7f       	andi	r24, 0xF7	; 247
    2986:	8c 93       	st	X, r24
    2988:	2c c0       	rjmp	.+88     	; 0x29e2 <TIMER2_u8SetCompOutMode+0xde>
		case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    298a:	a5 e4       	ldi	r26, 0x45	; 69
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e5 e4       	ldi	r30, 0x45	; 69
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	80 64       	ori	r24, 0x40	; 64
    2996:	8c 93       	st	X, r24
    2998:	a5 e4       	ldi	r26, 0x45	; 69
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e5 e4       	ldi	r30, 0x45	; 69
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	87 7f       	andi	r24, 0xF7	; 247
    29a4:	8c 93       	st	X, r24
    29a6:	1d c0       	rjmp	.+58     	; 0x29e2 <TIMER2_u8SetCompOutMode+0xde>
		case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    29a8:	a5 e4       	ldi	r26, 0x45	; 69
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e5 e4       	ldi	r30, 0x45	; 69
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	8f 7b       	andi	r24, 0xBF	; 191
    29b4:	8c 93       	st	X, r24
    29b6:	a5 e4       	ldi	r26, 0x45	; 69
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e5 e4       	ldi	r30, 0x45	; 69
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	88 60       	ori	r24, 0x08	; 8
    29c2:	8c 93       	st	X, r24
    29c4:	0e c0       	rjmp	.+28     	; 0x29e2 <TIMER2_u8SetCompOutMode+0xde>
		case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    29c6:	a5 e4       	ldi	r26, 0x45	; 69
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e5 e4       	ldi	r30, 0x45	; 69
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	80 64       	ori	r24, 0x40	; 64
    29d2:	8c 93       	st	X, r24
    29d4:	a5 e4       	ldi	r26, 0x45	; 69
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e5 e4       	ldi	r30, 0x45	; 69
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	88 60       	ori	r24, 0x08	; 8
    29e0:	8c 93       	st	X, r24
		}

		/*Select Output Compare Match Mode*/
		TCCR2 &= TIMER0_2_OCMATCH_MASK;
    29e2:	a5 e4       	ldi	r26, 0x45	; 69
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	e5 e4       	ldi	r30, 0x45	; 69
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	8f 7c       	andi	r24, 0xCF	; 207
    29ee:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    29f0:	ea 81       	ldd	r30, Y+2	; 0x02
    29f2:	fb 81       	ldd	r31, Y+3	; 0x03
    29f4:	81 81       	ldd	r24, Z+1	; 0x01
    29f6:	88 23       	and	r24, r24
    29f8:	29 f0       	breq	.+10     	; 0x2a04 <TIMER2_u8SetCompOutMode+0x100>
    29fa:	ea 81       	ldd	r30, Y+2	; 0x02
    29fc:	fb 81       	ldd	r31, Y+3	; 0x03
    29fe:	81 81       	ldd	r24, Z+1	; 0x01
    2a00:	82 30       	cpi	r24, 0x02	; 2
    2a02:	c1 f4       	brne	.+48     	; 0x2a34 <TIMER2_u8SetCompOutMode+0x130>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2a04:	8c 81       	ldd	r24, Y+4	; 0x04
    2a06:	84 30       	cpi	r24, 0x04	; 4
    2a08:	90 f4       	brcc	.+36     	; 0x2a2e <TIMER2_u8SetCompOutMode+0x12a>
			{
				TCCR2 |= (Copy_u8Mode << 4);
    2a0a:	a5 e4       	ldi	r26, 0x45	; 69
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e5 e4       	ldi	r30, 0x45	; 69
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	28 2f       	mov	r18, r24
    2a16:	8c 81       	ldd	r24, Y+4	; 0x04
    2a18:	88 2f       	mov	r24, r24
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	82 95       	swap	r24
    2a1e:	92 95       	swap	r25
    2a20:	90 7f       	andi	r25, 0xF0	; 240
    2a22:	98 27       	eor	r25, r24
    2a24:	80 7f       	andi	r24, 0xF0	; 240
    2a26:	98 27       	eor	r25, r24
    2a28:	82 2b       	or	r24, r18
    2a2a:	8c 93       	st	X, r24
    2a2c:	39 c0       	rjmp	.+114    	; 0x2aa0 <TIMER2_u8SetCompOutMode+0x19c>
			}
			else
			{
				Local_u8ErrorState = NOK;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	36 c0       	rjmp	.+108    	; 0x2aa0 <TIMER2_u8SetCompOutMode+0x19c>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    2a34:	ea 81       	ldd	r30, Y+2	; 0x02
    2a36:	fb 81       	ldd	r31, Y+3	; 0x03
    2a38:	81 81       	ldd	r24, Z+1	; 0x01
    2a3a:	83 30       	cpi	r24, 0x03	; 3
    2a3c:	29 f0       	breq	.+10     	; 0x2a48 <TIMER2_u8SetCompOutMode+0x144>
    2a3e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a40:	fb 81       	ldd	r31, Y+3	; 0x03
    2a42:	81 81       	ldd	r24, Z+1	; 0x01
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	61 f5       	brne	.+88     	; 0x2aa0 <TIMER2_u8SetCompOutMode+0x19c>
		{
			switch(Copy_u8Mode)
    2a48:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	3e 83       	std	Y+6, r19	; 0x06
    2a50:	2d 83       	std	Y+5, r18	; 0x05
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	9e 81       	ldd	r25, Y+6	; 0x06
    2a56:	84 30       	cpi	r24, 0x04	; 4
    2a58:	91 05       	cpc	r25, r1
    2a5a:	81 f0       	breq	.+32     	; 0x2a7c <TIMER2_u8SetCompOutMode+0x178>
    2a5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a5e:	3e 81       	ldd	r19, Y+6	; 0x06
    2a60:	25 30       	cpi	r18, 0x05	; 5
    2a62:	31 05       	cpc	r19, r1
    2a64:	99 f0       	breq	.+38     	; 0x2a8c <TIMER2_u8SetCompOutMode+0x188>
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	b9 f4       	brne	.+46     	; 0x2a9c <TIMER2_u8SetCompOutMode+0x198>
			{
			case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    2a6e:	e5 e4       	ldi	r30, 0x45	; 69
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	a5 e4       	ldi	r26, 0x45	; 69
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	8c 91       	ld	r24, X
    2a78:	80 83       	st	Z, r24
    2a7a:	12 c0       	rjmp	.+36     	; 0x2aa0 <TIMER2_u8SetCompOutMode+0x19c>
			case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    2a7c:	a5 e4       	ldi	r26, 0x45	; 69
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e5 e4       	ldi	r30, 0x45	; 69
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	80 62       	ori	r24, 0x20	; 32
    2a88:	8c 93       	st	X, r24
    2a8a:	0a c0       	rjmp	.+20     	; 0x2aa0 <TIMER2_u8SetCompOutMode+0x19c>
			case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    2a8c:	a5 e4       	ldi	r26, 0x45	; 69
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e5 e4       	ldi	r30, 0x45	; 69
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	80 63       	ori	r24, 0x30	; 48
    2a98:	8c 93       	st	X, r24
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <TIMER2_u8SetCompOutMode+0x19c>
			default: Local_u8ErrorState = NOK;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		/*Select the clock*/
		TCCR2 &= PRESCALER_MASK;
    2aa0:	a5 e4       	ldi	r26, 0x45	; 69
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e5 e4       	ldi	r30, 0x45	; 69
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	88 7f       	andi	r24, 0xF8	; 248
    2aac:	8c 93       	st	X, r24
		TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    2aae:	a5 e4       	ldi	r26, 0x45	; 69
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	e5 e4       	ldi	r30, 0x45	; 69
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	90 81       	ld	r25, Z
    2ab8:	ea 81       	ldd	r30, Y+2	; 0x02
    2aba:	fb 81       	ldd	r31, Y+3	; 0x03
    2abc:	80 81       	ld	r24, Z
    2abe:	89 2b       	or	r24, r25
    2ac0:	8c 93       	st	X, r24
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <TIMER2_u8SetCompOutMode+0x1c4>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aca:	28 96       	adiw	r28, 0x08	; 8
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <TIMERS_u8IntEnable>:



uint8 TIMERS_u8IntEnable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <TIMERS_u8IntEnable+0x6>
    2ae2:	00 d0       	rcall	.+0      	; 0x2ae4 <TIMERS_u8IntEnable+0x8>
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    2aea:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	3c 83       	std	Y+4, r19	; 0x04
    2af4:	2b 83       	std	Y+3, r18	; 0x03
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	9c 81       	ldd	r25, Y+4	; 0x04
    2afa:	83 30       	cpi	r24, 0x03	; 3
    2afc:	91 05       	cpc	r25, r1
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <TIMERS_u8IntEnable+0x26>
    2b00:	42 c0       	rjmp	.+132    	; 0x2b86 <TIMERS_u8IntEnable+0xaa>
    2b02:	2b 81       	ldd	r18, Y+3	; 0x03
    2b04:	3c 81       	ldd	r19, Y+4	; 0x04
    2b06:	24 30       	cpi	r18, 0x04	; 4
    2b08:	31 05       	cpc	r19, r1
    2b0a:	7c f4       	brge	.+30     	; 0x2b2a <TIMERS_u8IntEnable+0x4e>
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	91 05       	cpc	r25, r1
    2b14:	41 f1       	breq	.+80     	; 0x2b66 <TIMERS_u8IntEnable+0x8a>
    2b16:	2b 81       	ldd	r18, Y+3	; 0x03
    2b18:	3c 81       	ldd	r19, Y+4	; 0x04
    2b1a:	22 30       	cpi	r18, 0x02	; 2
    2b1c:	31 05       	cpc	r19, r1
    2b1e:	5c f5       	brge	.+86     	; 0x2b76 <TIMERS_u8IntEnable+0x9a>
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	9c 81       	ldd	r25, Y+4	; 0x04
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	b9 f0       	breq	.+46     	; 0x2b56 <TIMERS_u8IntEnable+0x7a>
    2b28:	56 c0       	rjmp	.+172    	; 0x2bd6 <TIMERS_u8IntEnable+0xfa>
    2b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b2e:	25 30       	cpi	r18, 0x05	; 5
    2b30:	31 05       	cpc	r19, r1
    2b32:	c9 f1       	breq	.+114    	; 0x2ba6 <TIMERS_u8IntEnable+0xca>
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	85 30       	cpi	r24, 0x05	; 5
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	64 f1       	brlt	.+88     	; 0x2b96 <TIMERS_u8IntEnable+0xba>
    2b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b40:	3c 81       	ldd	r19, Y+4	; 0x04
    2b42:	26 30       	cpi	r18, 0x06	; 6
    2b44:	31 05       	cpc	r19, r1
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <TIMERS_u8IntEnable+0x6e>
    2b48:	3e c0       	rjmp	.+124    	; 0x2bc6 <TIMERS_u8IntEnable+0xea>
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4e:	87 30       	cpi	r24, 0x07	; 7
    2b50:	91 05       	cpc	r25, r1
    2b52:	89 f1       	breq	.+98     	; 0x2bb6 <TIMERS_u8IntEnable+0xda>
    2b54:	40 c0       	rjmp	.+128    	; 0x2bd6 <TIMERS_u8IntEnable+0xfa>
	{
	case TIMER0_OVF:	SET_BIT(TIMSK,TIMSK_TOIE0);	break;
    2b56:	a9 e5       	ldi	r26, 0x59	; 89
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e9 e5       	ldi	r30, 0x59	; 89
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	81 60       	ori	r24, 0x01	; 1
    2b62:	8c 93       	st	X, r24
    2b64:	3a c0       	rjmp	.+116    	; 0x2bda <TIMERS_u8IntEnable+0xfe>
	case TIMER0_COMP:	SET_BIT(TIMSK,TIMSK_OCIE0);	break;
    2b66:	a9 e5       	ldi	r26, 0x59	; 89
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e9 e5       	ldi	r30, 0x59	; 89
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	82 60       	ori	r24, 0x02	; 2
    2b72:	8c 93       	st	X, r24
    2b74:	32 c0       	rjmp	.+100    	; 0x2bda <TIMERS_u8IntEnable+0xfe>
	case TIMER1_OVF:	SET_BIT(TIMSK,TIMSK_TOIE1);	break;
    2b76:	a9 e5       	ldi	r26, 0x59	; 89
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e9 e5       	ldi	r30, 0x59	; 89
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	84 60       	ori	r24, 0x04	; 4
    2b82:	8c 93       	st	X, r24
    2b84:	2a c0       	rjmp	.+84     	; 0x2bda <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPA:	SET_BIT(TIMSK,TIMSK_OCIE1A);	break;
    2b86:	a9 e5       	ldi	r26, 0x59	; 89
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e9 e5       	ldi	r30, 0x59	; 89
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	80 61       	ori	r24, 0x10	; 16
    2b92:	8c 93       	st	X, r24
    2b94:	22 c0       	rjmp	.+68     	; 0x2bda <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPB:	SET_BIT(TIMSK,TIMSK_OCIE1B);	break;
    2b96:	a9 e5       	ldi	r26, 0x59	; 89
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e9 e5       	ldi	r30, 0x59	; 89
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 60       	ori	r24, 0x08	; 8
    2ba2:	8c 93       	st	X, r24
    2ba4:	1a c0       	rjmp	.+52     	; 0x2bda <TIMERS_u8IntEnable+0xfe>
	case TIMER1_CAPT:	SET_BIT(TIMSK,TIMSK_TICIE1);	break;
    2ba6:	a9 e5       	ldi	r26, 0x59	; 89
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e9 e5       	ldi	r30, 0x59	; 89
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	80 62       	ori	r24, 0x20	; 32
    2bb2:	8c 93       	st	X, r24
    2bb4:	12 c0       	rjmp	.+36     	; 0x2bda <TIMERS_u8IntEnable+0xfe>
	case TIMER2_COMP:	SET_BIT(TIMSK,TIMSK_OCIE2); break;
    2bb6:	a9 e5       	ldi	r26, 0x59	; 89
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	e9 e5       	ldi	r30, 0x59	; 89
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	80 68       	ori	r24, 0x80	; 128
    2bc2:	8c 93       	st	X, r24
    2bc4:	0a c0       	rjmp	.+20     	; 0x2bda <TIMERS_u8IntEnable+0xfe>
	case TIMER2_OVF:	SET_BIT(TIMSK,TIMSK_TOIE2);	break;
    2bc6:	a9 e5       	ldi	r26, 0x59	; 89
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	e9 e5       	ldi	r30, 0x59	; 89
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 64       	ori	r24, 0x40	; 64
    2bd2:	8c 93       	st	X, r24
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <TIMERS_u8IntEnable+0xfe>
	default:Local_u8ErrorState = NOK;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <TIMERS_u8IntDisable>:
uint8 TIMERS_u8IntDisable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <TIMERS_u8IntDisable+0x6>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <TIMERS_u8IntDisable+0x8>
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    2bf8:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	3c 83       	std	Y+4, r19	; 0x04
    2c02:	2b 83       	std	Y+3, r18	; 0x03
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	83 30       	cpi	r24, 0x03	; 3
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <TIMERS_u8IntDisable+0x26>
    2c0e:	42 c0       	rjmp	.+132    	; 0x2c94 <TIMERS_u8IntDisable+0xaa>
    2c10:	2b 81       	ldd	r18, Y+3	; 0x03
    2c12:	3c 81       	ldd	r19, Y+4	; 0x04
    2c14:	24 30       	cpi	r18, 0x04	; 4
    2c16:	31 05       	cpc	r19, r1
    2c18:	7c f4       	brge	.+30     	; 0x2c38 <TIMERS_u8IntDisable+0x4e>
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	91 05       	cpc	r25, r1
    2c22:	41 f1       	breq	.+80     	; 0x2c74 <TIMERS_u8IntDisable+0x8a>
    2c24:	2b 81       	ldd	r18, Y+3	; 0x03
    2c26:	3c 81       	ldd	r19, Y+4	; 0x04
    2c28:	22 30       	cpi	r18, 0x02	; 2
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	5c f5       	brge	.+86     	; 0x2c84 <TIMERS_u8IntDisable+0x9a>
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	9c 81       	ldd	r25, Y+4	; 0x04
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	b9 f0       	breq	.+46     	; 0x2c64 <TIMERS_u8IntDisable+0x7a>
    2c36:	56 c0       	rjmp	.+172    	; 0x2ce4 <TIMERS_u8IntDisable+0xfa>
    2c38:	2b 81       	ldd	r18, Y+3	; 0x03
    2c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c3c:	25 30       	cpi	r18, 0x05	; 5
    2c3e:	31 05       	cpc	r19, r1
    2c40:	c9 f1       	breq	.+114    	; 0x2cb4 <TIMERS_u8IntDisable+0xca>
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	85 30       	cpi	r24, 0x05	; 5
    2c48:	91 05       	cpc	r25, r1
    2c4a:	64 f1       	brlt	.+88     	; 0x2ca4 <TIMERS_u8IntDisable+0xba>
    2c4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c50:	26 30       	cpi	r18, 0x06	; 6
    2c52:	31 05       	cpc	r19, r1
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <TIMERS_u8IntDisable+0x6e>
    2c56:	3e c0       	rjmp	.+124    	; 0x2cd4 <TIMERS_u8IntDisable+0xea>
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	87 30       	cpi	r24, 0x07	; 7
    2c5e:	91 05       	cpc	r25, r1
    2c60:	89 f1       	breq	.+98     	; 0x2cc4 <TIMERS_u8IntDisable+0xda>
    2c62:	40 c0       	rjmp	.+128    	; 0x2ce4 <TIMERS_u8IntDisable+0xfa>
	{
	case TIMER0_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE0);	break;
    2c64:	a9 e5       	ldi	r26, 0x59	; 89
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e9 e5       	ldi	r30, 0x59	; 89
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	8e 7f       	andi	r24, 0xFE	; 254
    2c70:	8c 93       	st	X, r24
    2c72:	3a c0       	rjmp	.+116    	; 0x2ce8 <TIMERS_u8IntDisable+0xfe>
	case TIMER0_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE0);	break;
    2c74:	a9 e5       	ldi	r26, 0x59	; 89
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e9 e5       	ldi	r30, 0x59	; 89
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	8d 7f       	andi	r24, 0xFD	; 253
    2c80:	8c 93       	st	X, r24
    2c82:	32 c0       	rjmp	.+100    	; 0x2ce8 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE1);	break;
    2c84:	a9 e5       	ldi	r26, 0x59	; 89
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	e9 e5       	ldi	r30, 0x59	; 89
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	8b 7f       	andi	r24, 0xFB	; 251
    2c90:	8c 93       	st	X, r24
    2c92:	2a c0       	rjmp	.+84     	; 0x2ce8 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPA:	CLR_BIT(TIMSK,TIMSK_OCIE1A);	break;
    2c94:	a9 e5       	ldi	r26, 0x59	; 89
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	e9 e5       	ldi	r30, 0x59	; 89
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	8f 7e       	andi	r24, 0xEF	; 239
    2ca0:	8c 93       	st	X, r24
    2ca2:	22 c0       	rjmp	.+68     	; 0x2ce8 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPB:	CLR_BIT(TIMSK,TIMSK_OCIE1B);	break;
    2ca4:	a9 e5       	ldi	r26, 0x59	; 89
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e9 e5       	ldi	r30, 0x59	; 89
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	87 7f       	andi	r24, 0xF7	; 247
    2cb0:	8c 93       	st	X, r24
    2cb2:	1a c0       	rjmp	.+52     	; 0x2ce8 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_CAPT:	CLR_BIT(TIMSK,TIMSK_TICIE1);	break;
    2cb4:	a9 e5       	ldi	r26, 0x59	; 89
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e9 e5       	ldi	r30, 0x59	; 89
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8f 7d       	andi	r24, 0xDF	; 223
    2cc0:	8c 93       	st	X, r24
    2cc2:	12 c0       	rjmp	.+36     	; 0x2ce8 <TIMERS_u8IntDisable+0xfe>
	case TIMER2_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE2); break;
    2cc4:	a9 e5       	ldi	r26, 0x59	; 89
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	e9 e5       	ldi	r30, 0x59	; 89
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	8f 77       	andi	r24, 0x7F	; 127
    2cd0:	8c 93       	st	X, r24
    2cd2:	0a c0       	rjmp	.+20     	; 0x2ce8 <TIMERS_u8IntDisable+0xfe>
	case TIMER2_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE2);	break;
    2cd4:	a9 e5       	ldi	r26, 0x59	; 89
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e9 e5       	ldi	r30, 0x59	; 89
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	8f 7b       	andi	r24, 0xBF	; 191
    2ce0:	8c 93       	st	X, r24
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <TIMERS_u8IntDisable+0xfe>
	default:Local_u8ErrorState = NOK;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <TIMERS_u8Disable>:

uint8 TIMERS_u8Disable(TIMERS_NUM Copy_u8Timer)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <TIMERS_u8Disable+0x6>
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <TIMERS_u8Disable+0x8>
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2d06:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the timer*/
	switch(Copy_u8Timer)
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	3c 83       	std	Y+4, r19	; 0x04
    2d10:	2b 83       	std	Y+3, r18	; 0x03
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	9c 81       	ldd	r25, Y+4	; 0x04
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	91 05       	cpc	r25, r1
    2d1a:	99 f0       	breq	.+38     	; 0x2d42 <TIMERS_u8Disable+0x4a>
    2d1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d20:	22 30       	cpi	r18, 0x02	; 2
    2d22:	31 05       	cpc	r19, r1
    2d24:	c1 f0       	breq	.+48     	; 0x2d56 <TIMERS_u8Disable+0x5e>
    2d26:	8b 81       	ldd	r24, Y+3	; 0x03
    2d28:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	f1 f4       	brne	.+60     	; 0x2d6a <TIMERS_u8Disable+0x72>
	{
	case TIMER0: TIMERS_u8StateArr[TIMER0] = IDLE;	TCCR0 &= PRESCALER_MASK;	break;
    2d2e:	10 92 7e 01 	sts	0x017E, r1
    2d32:	a3 e5       	ldi	r26, 0x53	; 83
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	e3 e5       	ldi	r30, 0x53	; 83
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	88 7f       	andi	r24, 0xF8	; 248
    2d3e:	8c 93       	st	X, r24
    2d40:	16 c0       	rjmp	.+44     	; 0x2d6e <TIMERS_u8Disable+0x76>
	case TIMER1: TIMERS_u8StateArr[TIMER1] = IDLE;	TCCR1B &= PRESCALER_MASK;	break;
    2d42:	10 92 7f 01 	sts	0x017F, r1
    2d46:	ae e4       	ldi	r26, 0x4E	; 78
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	ee e4       	ldi	r30, 0x4E	; 78
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	88 7f       	andi	r24, 0xF8	; 248
    2d52:	8c 93       	st	X, r24
    2d54:	0c c0       	rjmp	.+24     	; 0x2d6e <TIMERS_u8Disable+0x76>
	case TIMER2: TIMERS_u8StateArr[TIMER2] = IDLE;	TCCR2 &= PRESCALER_MASK;	break;
    2d56:	10 92 80 01 	sts	0x0180, r1
    2d5a:	a5 e4       	ldi	r26, 0x45	; 69
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	e5 e4       	ldi	r30, 0x45	; 69
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	88 7f       	andi	r24, 0xF8	; 248
    2d66:	8c 93       	st	X, r24
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <TIMERS_u8Disable+0x76>
	default:	Local_u8ErrorState = NOK;	break;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <TIMERS_u8SetCallBack>:
uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_u8TimerIntSource, void (* Copy_pvCallBackFunc)(void))
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <TIMERS_u8SetCallBack+0x6>
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <TIMERS_u8SetCallBack+0x8>
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	8a 83       	std	Y+2, r24	; 0x02
    2d8c:	7c 83       	std	Y+4, r23	; 0x04
    2d8e:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2d90:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer of function*/
	if(Copy_pvCallBackFunc != NULL)
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	9c 81       	ldd	r25, Y+4	; 0x04
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	69 f0       	breq	.+26     	; 0x2db4 <TIMERS_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource] = Copy_pvCallBackFunc;
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	fc 01       	movw	r30, r24
    2da6:	ef 57       	subi	r30, 0x7F	; 127
    2da8:	fe 4f       	sbci	r31, 0xFE	; 254
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	9c 81       	ldd	r25, Y+4	; 0x04
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <TIMERS_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2db4:	82 e0       	ldi	r24, 0x02	; 2
    2db6:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <TIMER0_voidSetCompValue>:



void TIMER0_voidSetCompValue(uint8 Copy_u8Value)
{
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	0f 92       	push	r0
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 0*/
	OCR0 = Copy_u8Value;
    2dd4:	ec e5       	ldi	r30, 0x5C	; 92
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	80 83       	st	Z, r24
}
    2ddc:	0f 90       	pop	r0
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <TIMER0_voidSetOvfValue>:
void TIMER0_voidSetOvfValue(uint8 Copy_u8Value)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	0f 92       	push	r0
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 0*/
	TCNT0 = Copy_u8Value;
    2df0:	e2 e5       	ldi	r30, 0x52	; 82
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	80 83       	st	Z, r24
}
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <TIMER0_u8GetTimerValue>:
uint8 TIMER0_u8GetTimerValue(void)
{
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 0*/
	return TCNT0;
    2e08:	e2 e5       	ldi	r30, 0x52	; 82
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
}
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <TIMER2_voidSetCompValue>:



void TIMER2_voidSetCompValue(uint8 Copy_u8Value)
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	0f 92       	push	r0
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 2*/
	OCR2 = Copy_u8Value;
    2e20:	e3 e4       	ldi	r30, 0x43	; 67
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	80 83       	st	Z, r24
}
    2e28:	0f 90       	pop	r0
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <TIMER2_voidSetOvfValue>:
void TIMER2_voidSetOvfValue(uint8 Copy_u8Value)
{
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	0f 92       	push	r0
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 2*/
	TCNT2 = Copy_u8Value;
    2e3c:	e4 e4       	ldi	r30, 0x44	; 68
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	80 83       	st	Z, r24
}
    2e44:	0f 90       	pop	r0
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <TIMER2_u8GetTimerValue>:
uint8 TIMER2_u8GetTimerValue(void)
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 2*/
	return TCNT2;
    2e54:	e4 e4       	ldi	r30, 0x44	; 68
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
}
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <TIMER1_voidSetCompValueChA>:



void TIMER1_voidSetCompValueChA(uint16 Copy_u16Value)
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <TIMER1_voidSetCompValueChA+0x6>
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel A*/
	OCR1A = Copy_u16Value;
    2e6e:	ea e4       	ldi	r30, 0x4A	; 74
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	9a 81       	ldd	r25, Y+2	; 0x02
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	80 83       	st	Z, r24
}
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <TIMER1_voidSetCompValueChB>:
void TIMER1_voidSetCompValueChB(uint16 Copy_u16Value)
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <TIMER1_voidSetCompValueChB+0x6>
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	9a 83       	std	Y+2, r25	; 0x02
    2e90:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel B*/
	OCR1B = Copy_u16Value;
    2e92:	e8 e4       	ldi	r30, 0x48	; 72
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	80 83       	st	Z, r24
}
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <TIMER1_voidSetOvfValue>:
void TIMER1_voidSetOvfValue(uint16 Copy_u16Value)
{
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <TIMER1_voidSetOvfValue+0x6>
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	9a 83       	std	Y+2, r25	; 0x02
    2eb4:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 1*/
	TCNT1 = Copy_u16Value;
    2eb6:	ec e4       	ldi	r30, 0x4C	; 76
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	80 83       	st	Z, r24
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <TIMER1_voidSetInputCaptValue>:
void TIMER1_voidSetInputCaptValue(uint16 Copy_u16Value)
{
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <TIMER1_voidSetInputCaptValue+0x6>
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	9a 83       	std	Y+2, r25	; 0x02
    2ed8:	89 83       	std	Y+1, r24	; 0x01
	/*Set Input Capture Value of Timer 1*/
	ICR1 = Copy_u16Value;
    2eda:	e6 e4       	ldi	r30, 0x46	; 70
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
}
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <TIMER1_u16GetTimerValue>:
uint16 TIMER1_u16GetTimerValue(void)
{
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 1*/
	return TCNT1;
    2ef8:	ec e4       	ldi	r30, 0x4C	; 76
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	91 81       	ldd	r25, Z+1	; 0x01
}
    2f00:	cf 91       	pop	r28
    2f02:	df 91       	pop	r29
    2f04:	08 95       	ret

00002f06 <TIMER1_u16GetInputCaptValue>:
uint16 TIMER1_u16GetInputCaptValue(void)
{
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
	/*Return Input Capture Register Value*/
	return ICR1;
    2f0e:	e6 e4       	ldi	r30, 0x46	; 70
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	91 81       	ldd	r25, Z+1	; 0x01
}
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <TIMER1_u8SetInputCaptTriggerSrc>:
uint8 TIMER1_u8SetInputCaptTriggerSrc(uint8 Copy_u8TriggerSrc)
{
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <TIMER1_u8SetInputCaptTriggerSrc+0x6>
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <TIMER1_u8SetInputCaptTriggerSrc+0x8>
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2f2a:	19 82       	std	Y+1, r1	; 0x01

	/*Set the trigger source selected*/
	switch(Copy_u8TriggerSrc)
    2f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2e:	28 2f       	mov	r18, r24
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	3c 83       	std	Y+4, r19	; 0x04
    2f34:	2b 83       	std	Y+3, r18	; 0x03
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	31 f0       	breq	.+12     	; 0x2f4a <TIMER1_u8SetInputCaptTriggerSrc+0x2e>
    2f3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f40:	3c 81       	ldd	r19, Y+4	; 0x04
    2f42:	21 30       	cpi	r18, 0x01	; 1
    2f44:	31 05       	cpc	r19, r1
    2f46:	49 f0       	breq	.+18     	; 0x2f5a <TIMER1_u8SetInputCaptTriggerSrc+0x3e>
    2f48:	10 c0       	rjmp	.+32     	; 0x2f6a <TIMER1_u8SetInputCaptTriggerSrc+0x4e>
	{
	case TIMER1_u8ICU_RISING_EDGE:	SET_BIT(TCCR1B,TCCR1B_ICES1);	break;
    2f4a:	ae e4       	ldi	r26, 0x4E	; 78
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	ee e4       	ldi	r30, 0x4E	; 78
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	80 64       	ori	r24, 0x40	; 64
    2f56:	8c 93       	st	X, r24
    2f58:	0a c0       	rjmp	.+20     	; 0x2f6e <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	case TIMER1_u8ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1);	break;
    2f5a:	ae e4       	ldi	r26, 0x4E	; 78
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	ee e4       	ldi	r30, 0x4E	; 78
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	8f 7b       	andi	r24, 0xBF	; 191
    2f66:	8c 93       	st	X, r24
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	default: Local_u8ErrorState = NOK;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	0f 90       	pop	r0
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <WDT_voidEnable>:



void WDT_voidEnable(void)
{
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    2f86:	a1 e4       	ldi	r26, 0x41	; 65
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e1 e4       	ldi	r30, 0x41	; 65
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	88 60       	ori	r24, 0x08	; 8
    2f92:	8c 93       	st	X, r24
}
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <WDT_voidDisable>:
void WDT_voidDisable(void)
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
    2fa2:	a1 e4       	ldi	r26, 0x41	; 65
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e1 e4       	ldi	r30, 0x41	; 65
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	88 61       	ori	r24, 0x18	; 24
    2fae:	8c 93       	st	X, r24
	WDTCR &= 0b11110111;
    2fb0:	a1 e4       	ldi	r26, 0x41	; 65
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	e1 e4       	ldi	r30, 0x41	; 65
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	80 81       	ld	r24, Z
    2fba:	87 7f       	andi	r24, 0xF7	; 247
    2fbc:	8c 93       	st	X, r24
}
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <WDT_u8SetTime>:
uint8 WDT_u8SetTime(uint8 Copy_u8WatchDogTime)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <WDT_u8SetTime+0x6>
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	8a 83       	std	Y+2, r24	; 0x02
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    2fd0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8WatchDogTime < 8u)
    2fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd4:	88 30       	cpi	r24, 0x08	; 8
    2fd6:	80 f4       	brcc	.+32     	; 0x2ff8 <WDT_u8SetTime+0x34>
	{
		WDTCR &= WDT_PRESCALER_MASK;
    2fd8:	a1 e4       	ldi	r26, 0x41	; 65
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e1 e4       	ldi	r30, 0x41	; 65
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	88 7f       	andi	r24, 0xF8	; 248
    2fe4:	8c 93       	st	X, r24
		WDTCR |= Copy_u8WatchDogTime;
    2fe6:	a1 e4       	ldi	r26, 0x41	; 65
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e1 e4       	ldi	r30, 0x41	; 65
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	90 81       	ld	r25, Z
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	89 2b       	or	r24, r25
    2ff4:	8c 93       	st	X, r24
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <WDT_u8SetTime+0x38>
	}
	else
	{
		Local_u8ErrorState = NOK;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <__vector_11>:


/*Timer/Counter 0 OverFlow Event ISR*/
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
    3008:	1f 92       	push	r1
    300a:	0f 92       	push	r0
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	0f 92       	push	r0
    3010:	11 24       	eor	r1, r1
    3012:	2f 93       	push	r18
    3014:	3f 93       	push	r19
    3016:	4f 93       	push	r20
    3018:	5f 93       	push	r21
    301a:	6f 93       	push	r22
    301c:	7f 93       	push	r23
    301e:	8f 93       	push	r24
    3020:	9f 93       	push	r25
    3022:	af 93       	push	r26
    3024:	bf 93       	push	r27
    3026:	ef 93       	push	r30
    3028:	ff 93       	push	r31
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    3032:	80 91 81 01 	lds	r24, 0x0181
    3036:	90 91 82 01 	lds	r25, 0x0182
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	29 f0       	breq	.+10     	; 0x3048 <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_OVF]();
    303e:	e0 91 81 01 	lds	r30, 0x0181
    3042:	f0 91 82 01 	lds	r31, 0x0182
    3046:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	ff 91       	pop	r31
    304e:	ef 91       	pop	r30
    3050:	bf 91       	pop	r27
    3052:	af 91       	pop	r26
    3054:	9f 91       	pop	r25
    3056:	8f 91       	pop	r24
    3058:	7f 91       	pop	r23
    305a:	6f 91       	pop	r22
    305c:	5f 91       	pop	r21
    305e:	4f 91       	pop	r20
    3060:	3f 91       	pop	r19
    3062:	2f 91       	pop	r18
    3064:	0f 90       	pop	r0
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	0f 90       	pop	r0
    306a:	1f 90       	pop	r1
    306c:	18 95       	reti

0000306e <__vector_10>:

/*Timer/Counter 0 Compare Match Event ISR*/
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
    306e:	1f 92       	push	r1
    3070:	0f 92       	push	r0
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	0f 92       	push	r0
    3076:	11 24       	eor	r1, r1
    3078:	2f 93       	push	r18
    307a:	3f 93       	push	r19
    307c:	4f 93       	push	r20
    307e:	5f 93       	push	r21
    3080:	6f 93       	push	r22
    3082:	7f 93       	push	r23
    3084:	8f 93       	push	r24
    3086:	9f 93       	push	r25
    3088:	af 93       	push	r26
    308a:	bf 93       	push	r27
    308c:	ef 93       	push	r30
    308e:	ff 93       	push	r31
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    3098:	80 91 83 01 	lds	r24, 0x0183
    309c:	90 91 84 01 	lds	r25, 0x0184
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	29 f0       	breq	.+10     	; 0x30ae <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    30a4:	e0 91 83 01 	lds	r30, 0x0183
    30a8:	f0 91 84 01 	lds	r31, 0x0184
    30ac:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    30ae:	cf 91       	pop	r28
    30b0:	df 91       	pop	r29
    30b2:	ff 91       	pop	r31
    30b4:	ef 91       	pop	r30
    30b6:	bf 91       	pop	r27
    30b8:	af 91       	pop	r26
    30ba:	9f 91       	pop	r25
    30bc:	8f 91       	pop	r24
    30be:	7f 91       	pop	r23
    30c0:	6f 91       	pop	r22
    30c2:	5f 91       	pop	r21
    30c4:	4f 91       	pop	r20
    30c6:	3f 91       	pop	r19
    30c8:	2f 91       	pop	r18
    30ca:	0f 90       	pop	r0
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	0f 90       	pop	r0
    30d0:	1f 90       	pop	r1
    30d2:	18 95       	reti

000030d4 <__vector_9>:

/*Timer/Counter 1 OverFlow Event ISR*/
void __vector_9 (void) __attribute((signal));
void __vector_9 (void)
{
    30d4:	1f 92       	push	r1
    30d6:	0f 92       	push	r0
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	0f 92       	push	r0
    30dc:	11 24       	eor	r1, r1
    30de:	2f 93       	push	r18
    30e0:	3f 93       	push	r19
    30e2:	4f 93       	push	r20
    30e4:	5f 93       	push	r21
    30e6:	6f 93       	push	r22
    30e8:	7f 93       	push	r23
    30ea:	8f 93       	push	r24
    30ec:	9f 93       	push	r25
    30ee:	af 93       	push	r26
    30f0:	bf 93       	push	r27
    30f2:	ef 93       	push	r30
    30f4:	ff 93       	push	r31
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_OVF] != NULL)
    30fe:	80 91 85 01 	lds	r24, 0x0185
    3102:	90 91 86 01 	lds	r25, 0x0186
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	29 f0       	breq	.+10     	; 0x3114 <__vector_9+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_OVF]();
    310a:	e0 91 85 01 	lds	r30, 0x0185
    310e:	f0 91 86 01 	lds	r31, 0x0186
    3112:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3114:	cf 91       	pop	r28
    3116:	df 91       	pop	r29
    3118:	ff 91       	pop	r31
    311a:	ef 91       	pop	r30
    311c:	bf 91       	pop	r27
    311e:	af 91       	pop	r26
    3120:	9f 91       	pop	r25
    3122:	8f 91       	pop	r24
    3124:	7f 91       	pop	r23
    3126:	6f 91       	pop	r22
    3128:	5f 91       	pop	r21
    312a:	4f 91       	pop	r20
    312c:	3f 91       	pop	r19
    312e:	2f 91       	pop	r18
    3130:	0f 90       	pop	r0
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	0f 90       	pop	r0
    3136:	1f 90       	pop	r1
    3138:	18 95       	reti

0000313a <__vector_8>:

/*Timer/Counter 1 Channel B Compare Match Event ISR*/
void __vector_8 (void) __attribute((signal));
void __vector_8 (void)
{
    313a:	1f 92       	push	r1
    313c:	0f 92       	push	r0
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	0f 92       	push	r0
    3142:	11 24       	eor	r1, r1
    3144:	2f 93       	push	r18
    3146:	3f 93       	push	r19
    3148:	4f 93       	push	r20
    314a:	5f 93       	push	r21
    314c:	6f 93       	push	r22
    314e:	7f 93       	push	r23
    3150:	8f 93       	push	r24
    3152:	9f 93       	push	r25
    3154:	af 93       	push	r26
    3156:	bf 93       	push	r27
    3158:	ef 93       	push	r30
    315a:	ff 93       	push	r31
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPB] != NULL)
    3164:	80 91 89 01 	lds	r24, 0x0189
    3168:	90 91 8a 01 	lds	r25, 0x018A
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	29 f0       	breq	.+10     	; 0x317a <__vector_8+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPB]();
    3170:	e0 91 89 01 	lds	r30, 0x0189
    3174:	f0 91 8a 01 	lds	r31, 0x018A
    3178:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	ff 91       	pop	r31
    3180:	ef 91       	pop	r30
    3182:	bf 91       	pop	r27
    3184:	af 91       	pop	r26
    3186:	9f 91       	pop	r25
    3188:	8f 91       	pop	r24
    318a:	7f 91       	pop	r23
    318c:	6f 91       	pop	r22
    318e:	5f 91       	pop	r21
    3190:	4f 91       	pop	r20
    3192:	3f 91       	pop	r19
    3194:	2f 91       	pop	r18
    3196:	0f 90       	pop	r0
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	0f 90       	pop	r0
    319c:	1f 90       	pop	r1
    319e:	18 95       	reti

000031a0 <__vector_7>:

/*Timer/Counter 1 Channel A Compare Match Event ISR*/
void __vector_7 (void) __attribute((signal));
void __vector_7 (void)
{
    31a0:	1f 92       	push	r1
    31a2:	0f 92       	push	r0
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	0f 92       	push	r0
    31a8:	11 24       	eor	r1, r1
    31aa:	2f 93       	push	r18
    31ac:	3f 93       	push	r19
    31ae:	4f 93       	push	r20
    31b0:	5f 93       	push	r21
    31b2:	6f 93       	push	r22
    31b4:	7f 93       	push	r23
    31b6:	8f 93       	push	r24
    31b8:	9f 93       	push	r25
    31ba:	af 93       	push	r26
    31bc:	bf 93       	push	r27
    31be:	ef 93       	push	r30
    31c0:	ff 93       	push	r31
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPA] != NULL)
    31ca:	80 91 87 01 	lds	r24, 0x0187
    31ce:	90 91 88 01 	lds	r25, 0x0188
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	29 f0       	breq	.+10     	; 0x31e0 <__vector_7+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPA]();
    31d6:	e0 91 87 01 	lds	r30, 0x0187
    31da:	f0 91 88 01 	lds	r31, 0x0188
    31de:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	ff 91       	pop	r31
    31e6:	ef 91       	pop	r30
    31e8:	bf 91       	pop	r27
    31ea:	af 91       	pop	r26
    31ec:	9f 91       	pop	r25
    31ee:	8f 91       	pop	r24
    31f0:	7f 91       	pop	r23
    31f2:	6f 91       	pop	r22
    31f4:	5f 91       	pop	r21
    31f6:	4f 91       	pop	r20
    31f8:	3f 91       	pop	r19
    31fa:	2f 91       	pop	r18
    31fc:	0f 90       	pop	r0
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	0f 90       	pop	r0
    3202:	1f 90       	pop	r1
    3204:	18 95       	reti

00003206 <__vector_6>:

/*Timer/Counter 1 Input Capture Event ISR*/
void __vector_6 (void) __attribute((signal));
void __vector_6 (void)
{
    3206:	1f 92       	push	r1
    3208:	0f 92       	push	r0
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	0f 92       	push	r0
    320e:	11 24       	eor	r1, r1
    3210:	2f 93       	push	r18
    3212:	3f 93       	push	r19
    3214:	4f 93       	push	r20
    3216:	5f 93       	push	r21
    3218:	6f 93       	push	r22
    321a:	7f 93       	push	r23
    321c:	8f 93       	push	r24
    321e:	9f 93       	push	r25
    3220:	af 93       	push	r26
    3222:	bf 93       	push	r27
    3224:	ef 93       	push	r30
    3226:	ff 93       	push	r31
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_CAPT] != NULL)
    3230:	80 91 8b 01 	lds	r24, 0x018B
    3234:	90 91 8c 01 	lds	r25, 0x018C
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	29 f0       	breq	.+10     	; 0x3246 <__vector_6+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_CAPT]();
    323c:	e0 91 8b 01 	lds	r30, 0x018B
    3240:	f0 91 8c 01 	lds	r31, 0x018C
    3244:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	ff 91       	pop	r31
    324c:	ef 91       	pop	r30
    324e:	bf 91       	pop	r27
    3250:	af 91       	pop	r26
    3252:	9f 91       	pop	r25
    3254:	8f 91       	pop	r24
    3256:	7f 91       	pop	r23
    3258:	6f 91       	pop	r22
    325a:	5f 91       	pop	r21
    325c:	4f 91       	pop	r20
    325e:	3f 91       	pop	r19
    3260:	2f 91       	pop	r18
    3262:	0f 90       	pop	r0
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	0f 90       	pop	r0
    3268:	1f 90       	pop	r1
    326a:	18 95       	reti

0000326c <__vector_5>:

/*Timer/Counter 2 OverFlow Event ISR*/
void __vector_5 (void) __attribute((signal));
void __vector_5 (void)
{
    326c:	1f 92       	push	r1
    326e:	0f 92       	push	r0
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	0f 92       	push	r0
    3274:	11 24       	eor	r1, r1
    3276:	2f 93       	push	r18
    3278:	3f 93       	push	r19
    327a:	4f 93       	push	r20
    327c:	5f 93       	push	r21
    327e:	6f 93       	push	r22
    3280:	7f 93       	push	r23
    3282:	8f 93       	push	r24
    3284:	9f 93       	push	r25
    3286:	af 93       	push	r26
    3288:	bf 93       	push	r27
    328a:	ef 93       	push	r30
    328c:	ff 93       	push	r31
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_OVF] != NULL)
    3296:	80 91 8d 01 	lds	r24, 0x018D
    329a:	90 91 8e 01 	lds	r25, 0x018E
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	29 f0       	breq	.+10     	; 0x32ac <__vector_5+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_OVF]();
    32a2:	e0 91 8d 01 	lds	r30, 0x018D
    32a6:	f0 91 8e 01 	lds	r31, 0x018E
    32aa:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	ff 91       	pop	r31
    32b2:	ef 91       	pop	r30
    32b4:	bf 91       	pop	r27
    32b6:	af 91       	pop	r26
    32b8:	9f 91       	pop	r25
    32ba:	8f 91       	pop	r24
    32bc:	7f 91       	pop	r23
    32be:	6f 91       	pop	r22
    32c0:	5f 91       	pop	r21
    32c2:	4f 91       	pop	r20
    32c4:	3f 91       	pop	r19
    32c6:	2f 91       	pop	r18
    32c8:	0f 90       	pop	r0
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	0f 90       	pop	r0
    32ce:	1f 90       	pop	r1
    32d0:	18 95       	reti

000032d2 <__vector_4>:

/*Timer/Counter 2 Compare Match Event ISR*/
void __vector_4 (void) __attribute((signal));
void __vector_4 (void)
{
    32d2:	1f 92       	push	r1
    32d4:	0f 92       	push	r0
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	0f 92       	push	r0
    32da:	11 24       	eor	r1, r1
    32dc:	2f 93       	push	r18
    32de:	3f 93       	push	r19
    32e0:	4f 93       	push	r20
    32e2:	5f 93       	push	r21
    32e4:	6f 93       	push	r22
    32e6:	7f 93       	push	r23
    32e8:	8f 93       	push	r24
    32ea:	9f 93       	push	r25
    32ec:	af 93       	push	r26
    32ee:	bf 93       	push	r27
    32f0:	ef 93       	push	r30
    32f2:	ff 93       	push	r31
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_COMP] != NULL)
    32fc:	80 91 8f 01 	lds	r24, 0x018F
    3300:	90 91 90 01 	lds	r25, 0x0190
    3304:	00 97       	sbiw	r24, 0x00	; 0
    3306:	29 f0       	breq	.+10     	; 0x3312 <__vector_4+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_COMP]();
    3308:	e0 91 8f 01 	lds	r30, 0x018F
    330c:	f0 91 90 01 	lds	r31, 0x0190
    3310:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	ff 91       	pop	r31
    3318:	ef 91       	pop	r30
    331a:	bf 91       	pop	r27
    331c:	af 91       	pop	r26
    331e:	9f 91       	pop	r25
    3320:	8f 91       	pop	r24
    3322:	7f 91       	pop	r23
    3324:	6f 91       	pop	r22
    3326:	5f 91       	pop	r21
    3328:	4f 91       	pop	r20
    332a:	3f 91       	pop	r19
    332c:	2f 91       	pop	r18
    332e:	0f 90       	pop	r0
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	0f 90       	pop	r0
    3334:	1f 90       	pop	r1
    3336:	18 95       	reti

00003338 <ULTSONIC_u8MeasureDistance>:
 * @param Copy_stUltsonicData Pointer to struct that carry the ultrasonic data.
 * @param Copy_u16Distance Pointer to return the distance in cm.
 * @return Error State.
 */
uint8 ULTSONIC_u8MeasureDistance(const ULTSONIC_t *Copy_stUltsonicData, uint16 *Copy_u16Distance)
{
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	aa 97       	sbiw	r28, 0x2a	; 42
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	98 a7       	std	Y+40, r25	; 0x28
    334e:	8f a3       	std	Y+39, r24	; 0x27
    3350:	7a a7       	std	Y+42, r23	; 0x2a
    3352:	69 a7       	std	Y+41, r22	; 0x29
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3354:	1a a2       	std	Y+34, r1	; 0x22
	uint8 Local_u8ErrorFounder = OK;
    3356:	19 a2       	std	Y+33, r1	; 0x21
	uint32 Local_u32EchoTime = 0u;
    3358:	1d 8e       	std	Y+29, r1	; 0x1d
    335a:	1e 8e       	std	Y+30, r1	; 0x1e
    335c:	1f 8e       	std	Y+31, r1	; 0x1f
    335e:	18 a2       	std	Y+32, r1	; 0x20
	uint32 Local_u32TimeoutCounter = 0u;
    3360:	19 8e       	std	Y+25, r1	; 0x19
    3362:	1a 8e       	std	Y+26, r1	; 0x1a
    3364:	1b 8e       	std	Y+27, r1	; 0x1b
    3366:	1c 8e       	std	Y+28, r1	; 0x1c

	/*Initialize timer 1*/
	TIMER1_CFG_t Local_stTimer1Cfg;
	Local_stTimer1Cfg.ClkSelect = TIMER1_u8SYS_CLK_BY_8;
    3368:	82 e0       	ldi	r24, 0x02	; 2
    336a:	8b a3       	std	Y+35, r24	; 0x23
	Local_stTimer1Cfg.WGM = NORMAL_16_BITS;
    336c:	1c a2       	std	Y+36, r1	; 0x24
	Local_stTimer1Cfg.OCAMode = OC_DISCONNECTED;
    336e:	1d a2       	std	Y+37, r1	; 0x25
	Local_stTimer1Cfg.OCBMode = OC_DISCONNECTED;
    3370:	1e a2       	std	Y+38, r1	; 0x26
	Local_u8ErrorFounder = TIMER1_u8Init(&Local_stTimer1Cfg);
    3372:	ce 01       	movw	r24, r28
    3374:	83 96       	adiw	r24, 0x23	; 35
    3376:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <TIMER1_u8Init>
    337a:	89 a3       	std	Y+33, r24	; 0x21

	if(Local_u8ErrorFounder == OK)
    337c:	89 a1       	ldd	r24, Y+33	; 0x21
    337e:	88 23       	and	r24, r24
    3380:	09 f0       	breq	.+2      	; 0x3384 <ULTSONIC_u8MeasureDistance+0x4c>
    3382:	bb c1       	rjmp	.+886    	; 0x36fa <ULTSONIC_u8MeasureDistance+0x3c2>
	{
		/*Initialize and Enable Capture Unit and Overflow Interrupts of timer 1*/
		TIMERS_u8SetCallBack(TIMER1_OVF, ULTSONIC_voidOvfISR);
    3384:	2a eb       	ldi	r18, 0xBA	; 186
    3386:	3b e1       	ldi	r19, 0x1B	; 27
    3388:	82 e0       	ldi	r24, 0x02	; 2
    338a:	b9 01       	movw	r22, r18
    338c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TIMERS_u8SetCallBack>
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_RISING_EDGE);
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <TIMER1_u8SetInputCaptTriggerSrc>
		TIMERS_u8SetCallBack(TIMER1_CAPT, ULTSONIC_voidCaptureISR);
    3396:	29 e8       	ldi	r18, 0x89	; 137
    3398:	3b e1       	ldi	r19, 0x1B	; 27
    339a:	85 e0       	ldi	r24, 0x05	; 5
    339c:	b9 01       	movw	r22, r18
    339e:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TIMERS_u8SetCallBack>
		TIMERS_u8IntEnable(TIMER1_CAPT);
    33a2:	85 e0       	ldi	r24, 0x05	; 5
    33a4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TIMERS_u8IntEnable>

		/*Trigger the ultrasonic to return its echo*/
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_HIGH);
    33a8:	ef a1       	ldd	r30, Y+39	; 0x27
    33aa:	f8 a5       	ldd	r31, Y+40	; 0x28
    33ac:	80 81       	ld	r24, Z
    33ae:	ef a1       	ldd	r30, Y+39	; 0x27
    33b0:	f8 a5       	ldd	r31, Y+40	; 0x28
    33b2:	91 81       	ldd	r25, Z+1	; 0x01
    33b4:	69 2f       	mov	r22, r25
    33b6:	41 e0       	ldi	r20, 0x01	; 1
    33b8:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	a8 ec       	ldi	r26, 0xC8	; 200
    33c2:	b2 e4       	ldi	r27, 0x42	; 66
    33c4:	8d 8b       	std	Y+21, r24	; 0x15
    33c6:	9e 8b       	std	Y+22, r25	; 0x16
    33c8:	af 8b       	std	Y+23, r26	; 0x17
    33ca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33cc:	6d 89       	ldd	r22, Y+21	; 0x15
    33ce:	7e 89       	ldd	r23, Y+22	; 0x16
    33d0:	8f 89       	ldd	r24, Y+23	; 0x17
    33d2:	98 8d       	ldd	r25, Y+24	; 0x18
    33d4:	2b ea       	ldi	r18, 0xAB	; 171
    33d6:	3a ea       	ldi	r19, 0xAA	; 170
    33d8:	4a e2       	ldi	r20, 0x2A	; 42
    33da:	50 e4       	ldi	r21, 0x40	; 64
    33dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	89 8b       	std	Y+17, r24	; 0x11
    33e6:	9a 8b       	std	Y+18, r25	; 0x12
    33e8:	ab 8b       	std	Y+19, r26	; 0x13
    33ea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    33ec:	69 89       	ldd	r22, Y+17	; 0x11
    33ee:	7a 89       	ldd	r23, Y+18	; 0x12
    33f0:	8b 89       	ldd	r24, Y+19	; 0x13
    33f2:	9c 89       	ldd	r25, Y+20	; 0x14
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e8       	ldi	r20, 0x80	; 128
    33fa:	5f e3       	ldi	r21, 0x3F	; 63
    33fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3400:	88 23       	and	r24, r24
    3402:	1c f4       	brge	.+6      	; 0x340a <ULTSONIC_u8MeasureDistance+0xd2>
		__ticks = 1;
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	88 8b       	std	Y+16, r24	; 0x10
    3408:	91 c0       	rjmp	.+290    	; 0x352c <ULTSONIC_u8MeasureDistance+0x1f4>
	else if (__tmp > 255)
    340a:	69 89       	ldd	r22, Y+17	; 0x11
    340c:	7a 89       	ldd	r23, Y+18	; 0x12
    340e:	8b 89       	ldd	r24, Y+19	; 0x13
    3410:	9c 89       	ldd	r25, Y+20	; 0x14
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	4f e7       	ldi	r20, 0x7F	; 127
    3418:	53 e4       	ldi	r21, 0x43	; 67
    341a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    341e:	18 16       	cp	r1, r24
    3420:	0c f0       	brlt	.+2      	; 0x3424 <ULTSONIC_u8MeasureDistance+0xec>
    3422:	7b c0       	rjmp	.+246    	; 0x351a <ULTSONIC_u8MeasureDistance+0x1e2>
	{
		_delay_ms(__us / 1000.0);
    3424:	6d 89       	ldd	r22, Y+21	; 0x15
    3426:	7e 89       	ldd	r23, Y+22	; 0x16
    3428:	8f 89       	ldd	r24, Y+23	; 0x17
    342a:	98 8d       	ldd	r25, Y+24	; 0x18
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	4a e7       	ldi	r20, 0x7A	; 122
    3432:	54 e4       	ldi	r21, 0x44	; 68
    3434:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	8c 87       	std	Y+12, r24	; 0x0c
    343e:	9d 87       	std	Y+13, r25	; 0x0d
    3440:	ae 87       	std	Y+14, r26	; 0x0e
    3442:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3444:	6c 85       	ldd	r22, Y+12	; 0x0c
    3446:	7d 85       	ldd	r23, Y+13	; 0x0d
    3448:	8e 85       	ldd	r24, Y+14	; 0x0e
    344a:	9f 85       	ldd	r25, Y+15	; 0x0f
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	4a ef       	ldi	r20, 0xFA	; 250
    3452:	54 e4       	ldi	r21, 0x44	; 68
    3454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	88 87       	std	Y+8, r24	; 0x08
    345e:	99 87       	std	Y+9, r25	; 0x09
    3460:	aa 87       	std	Y+10, r26	; 0x0a
    3462:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3464:	68 85       	ldd	r22, Y+8	; 0x08
    3466:	79 85       	ldd	r23, Y+9	; 0x09
    3468:	8a 85       	ldd	r24, Y+10	; 0x0a
    346a:	9b 85       	ldd	r25, Y+11	; 0x0b
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e8       	ldi	r20, 0x80	; 128
    3472:	5f e3       	ldi	r21, 0x3F	; 63
    3474:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3478:	88 23       	and	r24, r24
    347a:	2c f4       	brge	.+10     	; 0x3486 <ULTSONIC_u8MeasureDistance+0x14e>
		__ticks = 1;
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	9f 83       	std	Y+7, r25	; 0x07
    3482:	8e 83       	std	Y+6, r24	; 0x06
    3484:	3f c0       	rjmp	.+126    	; 0x3504 <ULTSONIC_u8MeasureDistance+0x1cc>
	else if (__tmp > 65535)
    3486:	68 85       	ldd	r22, Y+8	; 0x08
    3488:	79 85       	ldd	r23, Y+9	; 0x09
    348a:	8a 85       	ldd	r24, Y+10	; 0x0a
    348c:	9b 85       	ldd	r25, Y+11	; 0x0b
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	3f ef       	ldi	r19, 0xFF	; 255
    3492:	4f e7       	ldi	r20, 0x7F	; 127
    3494:	57 e4       	ldi	r21, 0x47	; 71
    3496:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    349a:	18 16       	cp	r1, r24
    349c:	4c f5       	brge	.+82     	; 0x34f0 <ULTSONIC_u8MeasureDistance+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    349e:	6c 85       	ldd	r22, Y+12	; 0x0c
    34a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    34a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    34a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e2       	ldi	r20, 0x20	; 32
    34ac:	51 e4       	ldi	r21, 0x41	; 65
    34ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	bc 01       	movw	r22, r24
    34b8:	cd 01       	movw	r24, r26
    34ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	9f 83       	std	Y+7, r25	; 0x07
    34c4:	8e 83       	std	Y+6, r24	; 0x06
    34c6:	0f c0       	rjmp	.+30     	; 0x34e6 <ULTSONIC_u8MeasureDistance+0x1ae>
    34c8:	88 ec       	ldi	r24, 0xC8	; 200
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	9d 83       	std	Y+5, r25	; 0x05
    34ce:	8c 83       	std	Y+4, r24	; 0x04
    34d0:	8c 81       	ldd	r24, Y+4	; 0x04
    34d2:	9d 81       	ldd	r25, Y+5	; 0x05
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <ULTSONIC_u8MeasureDistance+0x19c>
    34d8:	9d 83       	std	Y+5, r25	; 0x05
    34da:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34dc:	8e 81       	ldd	r24, Y+6	; 0x06
    34de:	9f 81       	ldd	r25, Y+7	; 0x07
    34e0:	01 97       	sbiw	r24, 0x01	; 1
    34e2:	9f 83       	std	Y+7, r25	; 0x07
    34e4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e6:	8e 81       	ldd	r24, Y+6	; 0x06
    34e8:	9f 81       	ldd	r25, Y+7	; 0x07
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	69 f7       	brne	.-38     	; 0x34c8 <ULTSONIC_u8MeasureDistance+0x190>
    34ee:	24 c0       	rjmp	.+72     	; 0x3538 <ULTSONIC_u8MeasureDistance+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f0:	68 85       	ldd	r22, Y+8	; 0x08
    34f2:	79 85       	ldd	r23, Y+9	; 0x09
    34f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    34f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    34f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	9f 83       	std	Y+7, r25	; 0x07
    3502:	8e 83       	std	Y+6, r24	; 0x06
    3504:	8e 81       	ldd	r24, Y+6	; 0x06
    3506:	9f 81       	ldd	r25, Y+7	; 0x07
    3508:	9b 83       	std	Y+3, r25	; 0x03
    350a:	8a 83       	std	Y+2, r24	; 0x02
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	9b 81       	ldd	r25, Y+3	; 0x03
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	f1 f7       	brne	.-4      	; 0x3510 <ULTSONIC_u8MeasureDistance+0x1d8>
    3514:	9b 83       	std	Y+3, r25	; 0x03
    3516:	8a 83       	std	Y+2, r24	; 0x02
    3518:	0f c0       	rjmp	.+30     	; 0x3538 <ULTSONIC_u8MeasureDistance+0x200>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    351a:	69 89       	ldd	r22, Y+17	; 0x11
    351c:	7a 89       	ldd	r23, Y+18	; 0x12
    351e:	8b 89       	ldd	r24, Y+19	; 0x13
    3520:	9c 89       	ldd	r25, Y+20	; 0x14
    3522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	88 8b       	std	Y+16, r24	; 0x10
    352c:	88 89       	ldd	r24, Y+16	; 0x10
    352e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	8a 95       	dec	r24
    3534:	f1 f7       	brne	.-4      	; 0x3532 <ULTSONIC_u8MeasureDistance+0x1fa>
    3536:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_LOW);
    3538:	ef a1       	ldd	r30, Y+39	; 0x27
    353a:	f8 a5       	ldd	r31, Y+40	; 0x28
    353c:	80 81       	ld	r24, Z
    353e:	ef a1       	ldd	r30, Y+39	; 0x27
    3540:	f8 a5       	ldd	r31, Y+40	; 0x28
    3542:	91 81       	ldd	r25, Z+1	; 0x01
    3544:	69 2f       	mov	r22, r25
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    354c:	0b c0       	rjmp	.+22     	; 0x3564 <ULTSONIC_u8MeasureDistance+0x22c>


		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    354e:	89 8d       	ldd	r24, Y+25	; 0x19
    3550:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3552:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3554:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3556:	01 96       	adiw	r24, 0x01	; 1
    3558:	a1 1d       	adc	r26, r1
    355a:	b1 1d       	adc	r27, r1
    355c:	89 8f       	std	Y+25, r24	; 0x19
    355e:	9a 8f       	std	Y+26, r25	; 0x1a
    3560:	ab 8f       	std	Y+27, r26	; 0x1b
    3562:	bc 8f       	std	Y+28, r27	; 0x1c
		_delay_us(100);
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_LOW);


		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
    3564:	80 91 91 01 	lds	r24, 0x0191
    3568:	90 91 92 01 	lds	r25, 0x0192
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	31 f0       	breq	.+12     	; 0x357c <ULTSONIC_u8MeasureDistance+0x244>
    3570:	80 91 93 01 	lds	r24, 0x0193
    3574:	90 91 94 01 	lds	r25, 0x0194
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	61 f4       	brne	.+24     	; 0x3594 <ULTSONIC_u8MeasureDistance+0x25c>
    357c:	89 8d       	ldd	r24, Y+25	; 0x19
    357e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3580:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3582:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3584:	80 35       	cpi	r24, 0x50	; 80
    3586:	23 ec       	ldi	r18, 0xC3	; 195
    3588:	92 07       	cpc	r25, r18
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	a2 07       	cpc	r26, r18
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	b2 07       	cpc	r27, r18
    3592:	e8 f2       	brcs	.-70     	; 0x354e <ULTSONIC_u8MeasureDistance+0x216>
		{
			Local_u32TimeoutCounter++;
		}

		/*Disable timer 1 and overflow interrupt of it*/
		TIMERS_u8IntDisable(TIMER1_OVF);
    3594:	82 e0       	ldi	r24, 0x02	; 2
    3596:	0e 94 f5 15 	call	0x2bea	; 0x2bea <TIMERS_u8IntDisable>
		TIMERS_u8IntDisable(TIMER1_CAPT);
    359a:	85 e0       	ldi	r24, 0x05	; 5
    359c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <TIMERS_u8IntDisable>
		TIMERS_u8Disable(TIMER1);
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <TIMERS_u8Disable>

		/*Check if there was overflow interrupts or not*/
		if(ULTSONIC_u16EchoOvfCounter == 0u)
    35a6:	80 91 97 01 	lds	r24, 0x0197
    35aa:	90 91 98 01 	lds	r25, 0x0198
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	a1 f4       	brne	.+40     	; 0x35da <ULTSONIC_u8MeasureDistance+0x2a2>
		{
			/*Calculate Echo Time in microseconds*/
			Local_u32EchoTime = ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1;
    35b2:	20 91 93 01 	lds	r18, 0x0193
    35b6:	30 91 94 01 	lds	r19, 0x0194
    35ba:	80 91 91 01 	lds	r24, 0x0191
    35be:	90 91 92 01 	lds	r25, 0x0192
    35c2:	a9 01       	movw	r20, r18
    35c4:	48 1b       	sub	r20, r24
    35c6:	59 0b       	sbc	r21, r25
    35c8:	ca 01       	movw	r24, r20
    35ca:	cc 01       	movw	r24, r24
    35cc:	a0 e0       	ldi	r26, 0x00	; 0
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	8d 8f       	std	Y+29, r24	; 0x1d
    35d2:	9e 8f       	std	Y+30, r25	; 0x1e
    35d4:	af 8f       	std	Y+31, r26	; 0x1f
    35d6:	b8 a3       	std	Y+32, r27	; 0x20
    35d8:	59 c0       	rjmp	.+178    	; 0x368c <ULTSONIC_u8MeasureDistance+0x354>
		}
		else
		{
			/*Calculate Echo Time in microseconds*/
			if(ULTSONIC_u16Capture2 >= ULTSONIC_u16Capture1)
    35da:	20 91 93 01 	lds	r18, 0x0193
    35de:	30 91 94 01 	lds	r19, 0x0194
    35e2:	80 91 91 01 	lds	r24, 0x0191
    35e6:	90 91 92 01 	lds	r25, 0x0192
    35ea:	28 17       	cp	r18, r24
    35ec:	39 07       	cpc	r19, r25
    35ee:	10 f1       	brcs	.+68     	; 0x3634 <ULTSONIC_u8MeasureDistance+0x2fc>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    35f0:	20 91 93 01 	lds	r18, 0x0193
    35f4:	30 91 94 01 	lds	r19, 0x0194
    35f8:	80 91 91 01 	lds	r24, 0x0191
    35fc:	90 91 92 01 	lds	r25, 0x0192
    3600:	a9 01       	movw	r20, r18
    3602:	48 1b       	sub	r20, r24
    3604:	59 0b       	sbc	r21, r25
    3606:	ca 01       	movw	r24, r20
    3608:	9c 01       	movw	r18, r24
    360a:	40 e0       	ldi	r20, 0x00	; 0
    360c:	50 e0       	ldi	r21, 0x00	; 0
    360e:	80 91 97 01 	lds	r24, 0x0197
    3612:	90 91 98 01 	lds	r25, 0x0198
    3616:	cc 01       	movw	r24, r24
    3618:	a0 e0       	ldi	r26, 0x00	; 0
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	dc 01       	movw	r26, r24
    361e:	99 27       	eor	r25, r25
    3620:	88 27       	eor	r24, r24
    3622:	82 0f       	add	r24, r18
    3624:	93 1f       	adc	r25, r19
    3626:	a4 1f       	adc	r26, r20
    3628:	b5 1f       	adc	r27, r21
    362a:	8d 8f       	std	Y+29, r24	; 0x1d
    362c:	9e 8f       	std	Y+30, r25	; 0x1e
    362e:	af 8f       	std	Y+31, r26	; 0x1f
    3630:	b8 a3       	std	Y+32, r27	; 0x20
    3632:	2c c0       	rjmp	.+88     	; 0x368c <ULTSONIC_u8MeasureDistance+0x354>
			}
			else if(ULTSONIC_u16Capture2 < ULTSONIC_u16Capture1)
    3634:	20 91 93 01 	lds	r18, 0x0193
    3638:	30 91 94 01 	lds	r19, 0x0194
    363c:	80 91 91 01 	lds	r24, 0x0191
    3640:	90 91 92 01 	lds	r25, 0x0192
    3644:	28 17       	cp	r18, r24
    3646:	39 07       	cpc	r19, r25
    3648:	08 f5       	brcc	.+66     	; 0x368c <ULTSONIC_u8MeasureDistance+0x354>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture1 - ULTSONIC_u16Capture2) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    364a:	20 91 91 01 	lds	r18, 0x0191
    364e:	30 91 92 01 	lds	r19, 0x0192
    3652:	80 91 93 01 	lds	r24, 0x0193
    3656:	90 91 94 01 	lds	r25, 0x0194
    365a:	a9 01       	movw	r20, r18
    365c:	48 1b       	sub	r20, r24
    365e:	59 0b       	sbc	r21, r25
    3660:	ca 01       	movw	r24, r20
    3662:	9c 01       	movw	r18, r24
    3664:	40 e0       	ldi	r20, 0x00	; 0
    3666:	50 e0       	ldi	r21, 0x00	; 0
    3668:	80 91 97 01 	lds	r24, 0x0197
    366c:	90 91 98 01 	lds	r25, 0x0198
    3670:	cc 01       	movw	r24, r24
    3672:	a0 e0       	ldi	r26, 0x00	; 0
    3674:	b0 e0       	ldi	r27, 0x00	; 0
    3676:	dc 01       	movw	r26, r24
    3678:	99 27       	eor	r25, r25
    367a:	88 27       	eor	r24, r24
    367c:	82 0f       	add	r24, r18
    367e:	93 1f       	adc	r25, r19
    3680:	a4 1f       	adc	r26, r20
    3682:	b5 1f       	adc	r27, r21
    3684:	8d 8f       	std	Y+29, r24	; 0x1d
    3686:	9e 8f       	std	Y+30, r25	; 0x1e
    3688:	af 8f       	std	Y+31, r26	; 0x1f
    368a:	b8 a3       	std	Y+32, r27	; 0x20
			}
		}

		/*Measure Distance using Echo Time*/
		*Copy_u16Distance = (((f32) Local_u32EchoTime / 2.0) * (34.0 / 1000.0));
    368c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    368e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3690:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3692:	98 a1       	ldd	r25, Y+32	; 0x20
    3694:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	bc 01       	movw	r22, r24
    369e:	cd 01       	movw	r24, r26
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	40 e0       	ldi	r20, 0x00	; 0
    36a6:	50 e4       	ldi	r21, 0x40	; 64
    36a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	bc 01       	movw	r22, r24
    36b2:	cd 01       	movw	r24, r26
    36b4:	26 e9       	ldi	r18, 0x96	; 150
    36b6:	33 e4       	ldi	r19, 0x43	; 67
    36b8:	4b e0       	ldi	r20, 0x0B	; 11
    36ba:	5d e3       	ldi	r21, 0x3D	; 61
    36bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	bc 01       	movw	r22, r24
    36c6:	cd 01       	movw	r24, r26
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	e9 a5       	ldd	r30, Y+41	; 0x29
    36d2:	fa a5       	ldd	r31, Y+42	; 0x2a
    36d4:	91 83       	std	Z+1, r25	; 0x01
    36d6:	80 83       	st	Z, r24

		/*Reset the global variables*/
		ULTSONIC_u16Capture1 = 0u;
    36d8:	10 92 92 01 	sts	0x0192, r1
    36dc:	10 92 91 01 	sts	0x0191, r1
		ULTSONIC_u16Capture2 = 0u;
    36e0:	10 92 94 01 	sts	0x0194, r1
    36e4:	10 92 93 01 	sts	0x0193, r1
		ULTSONIC_u16OvfCounter = 0u;
    36e8:	10 92 96 01 	sts	0x0196, r1
    36ec:	10 92 95 01 	sts	0x0195, r1
		ULTSONIC_u16EchoOvfCounter = 0u;
    36f0:	10 92 98 01 	sts	0x0198, r1
    36f4:	10 92 97 01 	sts	0x0197, r1
    36f8:	02 c0       	rjmp	.+4      	; 0x36fe <ULTSONIC_u8MeasureDistance+0x3c6>
	}
	else
	{
		Local_u8ErrorState = NOK;
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	8a a3       	std	Y+34, r24	; 0x22
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    36fe:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3700:	aa 96       	adiw	r28, 0x2a	; 42
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	f8 94       	cli
    3706:	de bf       	out	0x3e, r29	; 62
    3708:	0f be       	out	0x3f, r0	; 63
    370a:	cd bf       	out	0x3d, r28	; 61
    370c:	cf 91       	pop	r28
    370e:	df 91       	pop	r29
    3710:	08 95       	ret

00003712 <ULTSONIC_voidCaptureISR>:

/*Input Capture ISR*/
static void ULTSONIC_voidCaptureISR(void)
{
    3712:	df 93       	push	r29
    3714:	cf 93       	push	r28
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;

	Local_u8Counter++;
    371a:	80 91 99 01 	lds	r24, 0x0199
    371e:	8f 5f       	subi	r24, 0xFF	; 255
    3720:	80 93 99 01 	sts	0x0199, r24

	if(Local_u8Counter == 1u)
    3724:	80 91 99 01 	lds	r24, 0x0199
    3728:	81 30       	cpi	r24, 0x01	; 1
    372a:	69 f4       	brne	.+26     	; 0x3746 <ULTSONIC_voidCaptureISR+0x34>
	{
		/*Enable Overflow interrupt of timer1*/
		TIMERS_u8IntEnable(TIMER1_OVF);
    372c:	82 e0       	ldi	r24, 0x02	; 2
    372e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TIMERS_u8IntEnable>
		ULTSONIC_u16Capture1 = TIMER1_u16GetInputCaptValue();
    3732:	0e 94 83 17 	call	0x2f06	; 0x2f06 <TIMER1_u16GetInputCaptValue>
    3736:	90 93 92 01 	sts	0x0192, r25
    373a:	80 93 91 01 	sts	0x0191, r24
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_FALLING_EDGE);
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <TIMER1_u8SetInputCaptTriggerSrc>
    3744:	14 c0       	rjmp	.+40     	; 0x376e <ULTSONIC_voidCaptureISR+0x5c>
	}
	else if(Local_u8Counter == 2u)
    3746:	80 91 99 01 	lds	r24, 0x0199
    374a:	82 30       	cpi	r24, 0x02	; 2
    374c:	81 f4       	brne	.+32     	; 0x376e <ULTSONIC_voidCaptureISR+0x5c>
	{
		ULTSONIC_u16Capture2 = TIMER1_u16GetInputCaptValue();
    374e:	0e 94 83 17 	call	0x2f06	; 0x2f06 <TIMER1_u16GetInputCaptValue>
    3752:	90 93 94 01 	sts	0x0194, r25
    3756:	80 93 93 01 	sts	0x0193, r24
		ULTSONIC_u16EchoOvfCounter = ULTSONIC_u16OvfCounter;
    375a:	80 91 95 01 	lds	r24, 0x0195
    375e:	90 91 96 01 	lds	r25, 0x0196
    3762:	90 93 98 01 	sts	0x0198, r25
    3766:	80 93 97 01 	sts	0x0197, r24
		Local_u8Counter = 0;
    376a:	10 92 99 01 	sts	0x0199, r1
	}
}
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <ULTSONIC_voidOvfISR>:

/*Overflow ISR*/
static void ULTSONIC_voidOvfISR(void)
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62

	ULTSONIC_u16OvfCounter++;
    377c:	80 91 95 01 	lds	r24, 0x0195
    3780:	90 91 96 01 	lds	r25, 0x0196
    3784:	01 96       	adiw	r24, 0x01	; 1
    3786:	90 93 96 01 	sts	0x0196, r25
    378a:	80 93 95 01 	sts	0x0195, r24
}
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <main>:

#include <util/delay.h>

/*It is the main*/
void main(void)
{
    3794:	0f 93       	push	r16
    3796:	1f 93       	push	r17
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	c6 56       	subi	r28, 0x66	; 102
    37a2:	d0 40       	sbci	r29, 0x00	; 0
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
	 * 				2- connect Echo of ultrasonic sensor with D6.
	 * 				3- connect Trig of ultrasonic sensor with C0.
	 */

	/*Peripherals Initialization*/
	PORT_voidInit();
    37ae:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <PORT_voidInit>
	GIE_voidEnable();
    37b2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GIE_voidEnable>

	uint16 Local_u16Distance = 0;
    37b6:	fe 01       	movw	r30, r28
    37b8:	ed 59       	subi	r30, 0x9D	; 157
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	11 82       	std	Z+1, r1	; 0x01
    37be:	10 82       	st	Z, r1
	ULTSONIC_t Local_stUltsonic;
	Local_stUltsonic.TrigPort = DIO_u8PORTC;
    37c0:	fe 01       	movw	r30, r28
    37c2:	eb 59       	subi	r30, 0x9B	; 155
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	82 e0       	ldi	r24, 0x02	; 2
    37c8:	80 83       	st	Z, r24
	Local_stUltsonic.TrigPin = DIO_u8PIN0;
    37ca:	fe 01       	movw	r30, r28
    37cc:	eb 59       	subi	r30, 0x9B	; 155
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	11 82       	std	Z+1, r1	; 0x01


	/*Super Loop*/
	while(1)
	{
		ULTSONIC_u8MeasureDistance(&Local_stUltsonic, &Local_u16Distance);
    37d2:	ce 01       	movw	r24, r28
    37d4:	8b 59       	subi	r24, 0x9B	; 155
    37d6:	9f 4f       	sbci	r25, 0xFF	; 255
    37d8:	9e 01       	movw	r18, r28
    37da:	2d 59       	subi	r18, 0x9D	; 157
    37dc:	3f 4f       	sbci	r19, 0xFF	; 255
    37de:	b9 01       	movw	r22, r18
    37e0:	0e 94 9c 19 	call	0x3338	; 0x3338 <ULTSONIC_u8MeasureDistance>
		DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_LOW);
    37e4:	82 e0       	ldi	r24, 0x02	; 2
    37e6:	62 e0       	ldi	r22, 0x02	; 2
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>

		if(Local_u16Distance > 30)
    37ee:	fe 01       	movw	r30, r28
    37f0:	ed 59       	subi	r30, 0x9D	; 157
    37f2:	ff 4f       	sbci	r31, 0xFF	; 255
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	8f 31       	cpi	r24, 0x1F	; 31
    37fa:	91 05       	cpc	r25, r1
    37fc:	50 f7       	brcc	.-44     	; 0x37d2 <main+0x3e>
		{
			/*Do nothing*/
		}
		else if(Local_u16Distance > 20)
    37fe:	fe 01       	movw	r30, r28
    3800:	ed 59       	subi	r30, 0x9D	; 157
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	80 81       	ld	r24, Z
    3806:	91 81       	ldd	r25, Z+1	; 0x01
    3808:	85 31       	cpi	r24, 0x15	; 21
    380a:	91 05       	cpc	r25, r1
    380c:	08 f4       	brcc	.+2      	; 0x3810 <main+0x7c>
    380e:	72 c1       	rjmp	.+740    	; 0x3af4 <main+0x360>
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_HIGH);
    3810:	82 e0       	ldi	r24, 0x02	; 2
    3812:	62 e0       	ldi	r22, 0x02	; 2
    3814:	41 e0       	ldi	r20, 0x01	; 1
    3816:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    381a:	fe 01       	movw	r30, r28
    381c:	e1 5a       	subi	r30, 0xA1	; 161
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	a0 ef       	ldi	r26, 0xF0	; 240
    3826:	b2 e4       	ldi	r27, 0x42	; 66
    3828:	80 83       	st	Z, r24
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	a2 83       	std	Z+2, r26	; 0x02
    382e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3830:	8e 01       	movw	r16, r28
    3832:	05 5a       	subi	r16, 0xA5	; 165
    3834:	1f 4f       	sbci	r17, 0xFF	; 255
    3836:	fe 01       	movw	r30, r28
    3838:	e1 5a       	subi	r30, 0xA1	; 161
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	60 81       	ld	r22, Z
    383e:	71 81       	ldd	r23, Z+1	; 0x01
    3840:	82 81       	ldd	r24, Z+2	; 0x02
    3842:	93 81       	ldd	r25, Z+3	; 0x03
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	4a ef       	ldi	r20, 0xFA	; 250
    384a:	54 e4       	ldi	r21, 0x44	; 68
    384c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	f8 01       	movw	r30, r16
    3856:	80 83       	st	Z, r24
    3858:	91 83       	std	Z+1, r25	; 0x01
    385a:	a2 83       	std	Z+2, r26	; 0x02
    385c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    385e:	fe 01       	movw	r30, r28
    3860:	e5 5a       	subi	r30, 0xA5	; 165
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	60 81       	ld	r22, Z
    3866:	71 81       	ldd	r23, Z+1	; 0x01
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	93 81       	ldd	r25, Z+3	; 0x03
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e8       	ldi	r20, 0x80	; 128
    3872:	5f e3       	ldi	r21, 0x3F	; 63
    3874:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3878:	88 23       	and	r24, r24
    387a:	44 f4       	brge	.+16     	; 0x388c <main+0xf8>
		__ticks = 1;
    387c:	fe 01       	movw	r30, r28
    387e:	e7 5a       	subi	r30, 0xA7	; 167
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	91 83       	std	Z+1, r25	; 0x01
    3888:	80 83       	st	Z, r24
    388a:	64 c0       	rjmp	.+200    	; 0x3954 <main+0x1c0>
	else if (__tmp > 65535)
    388c:	fe 01       	movw	r30, r28
    388e:	e5 5a       	subi	r30, 0xA5	; 165
    3890:	ff 4f       	sbci	r31, 0xFF	; 255
    3892:	60 81       	ld	r22, Z
    3894:	71 81       	ldd	r23, Z+1	; 0x01
    3896:	82 81       	ldd	r24, Z+2	; 0x02
    3898:	93 81       	ldd	r25, Z+3	; 0x03
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	3f ef       	ldi	r19, 0xFF	; 255
    389e:	4f e7       	ldi	r20, 0x7F	; 127
    38a0:	57 e4       	ldi	r21, 0x47	; 71
    38a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a6:	18 16       	cp	r1, r24
    38a8:	0c f0       	brlt	.+2      	; 0x38ac <main+0x118>
    38aa:	43 c0       	rjmp	.+134    	; 0x3932 <main+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ac:	fe 01       	movw	r30, r28
    38ae:	e1 5a       	subi	r30, 0xA1	; 161
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	60 81       	ld	r22, Z
    38b4:	71 81       	ldd	r23, Z+1	; 0x01
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	40 e2       	ldi	r20, 0x20	; 32
    38c0:	51 e4       	ldi	r21, 0x41	; 65
    38c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	8e 01       	movw	r16, r28
    38cc:	07 5a       	subi	r16, 0xA7	; 167
    38ce:	1f 4f       	sbci	r17, 0xFF	; 255
    38d0:	bc 01       	movw	r22, r24
    38d2:	cd 01       	movw	r24, r26
    38d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	f8 01       	movw	r30, r16
    38de:	91 83       	std	Z+1, r25	; 0x01
    38e0:	80 83       	st	Z, r24
    38e2:	1f c0       	rjmp	.+62     	; 0x3922 <main+0x18e>
    38e4:	fe 01       	movw	r30, r28
    38e6:	e9 5a       	subi	r30, 0xA9	; 169
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	88 ec       	ldi	r24, 0xC8	; 200
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	91 83       	std	Z+1, r25	; 0x01
    38f0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38f2:	fe 01       	movw	r30, r28
    38f4:	e9 5a       	subi	r30, 0xA9	; 169
    38f6:	ff 4f       	sbci	r31, 0xFF	; 255
    38f8:	80 81       	ld	r24, Z
    38fa:	91 81       	ldd	r25, Z+1	; 0x01
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <main+0x168>
    3900:	fe 01       	movw	r30, r28
    3902:	e9 5a       	subi	r30, 0xA9	; 169
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	91 83       	std	Z+1, r25	; 0x01
    3908:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    390a:	de 01       	movw	r26, r28
    390c:	a7 5a       	subi	r26, 0xA7	; 167
    390e:	bf 4f       	sbci	r27, 0xFF	; 255
    3910:	fe 01       	movw	r30, r28
    3912:	e7 5a       	subi	r30, 0xA7	; 167
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01
    391a:	01 97       	sbiw	r24, 0x01	; 1
    391c:	11 96       	adiw	r26, 0x01	; 1
    391e:	9c 93       	st	X, r25
    3920:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3922:	fe 01       	movw	r30, r28
    3924:	e7 5a       	subi	r30, 0xA7	; 167
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	80 81       	ld	r24, Z
    392a:	91 81       	ldd	r25, Z+1	; 0x01
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	d1 f6       	brne	.-76     	; 0x38e4 <main+0x150>
    3930:	27 c0       	rjmp	.+78     	; 0x3980 <main+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3932:	8e 01       	movw	r16, r28
    3934:	07 5a       	subi	r16, 0xA7	; 167
    3936:	1f 4f       	sbci	r17, 0xFF	; 255
    3938:	fe 01       	movw	r30, r28
    393a:	e5 5a       	subi	r30, 0xA5	; 165
    393c:	ff 4f       	sbci	r31, 0xFF	; 255
    393e:	60 81       	ld	r22, Z
    3940:	71 81       	ldd	r23, Z+1	; 0x01
    3942:	82 81       	ldd	r24, Z+2	; 0x02
    3944:	93 81       	ldd	r25, Z+3	; 0x03
    3946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	f8 01       	movw	r30, r16
    3950:	91 83       	std	Z+1, r25	; 0x01
    3952:	80 83       	st	Z, r24
    3954:	de 01       	movw	r26, r28
    3956:	ab 5a       	subi	r26, 0xAB	; 171
    3958:	bf 4f       	sbci	r27, 0xFF	; 255
    395a:	fe 01       	movw	r30, r28
    395c:	e7 5a       	subi	r30, 0xA7	; 167
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	80 81       	ld	r24, Z
    3962:	91 81       	ldd	r25, Z+1	; 0x01
    3964:	8d 93       	st	X+, r24
    3966:	9c 93       	st	X, r25
    3968:	fe 01       	movw	r30, r28
    396a:	eb 5a       	subi	r30, 0xAB	; 171
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	80 81       	ld	r24, Z
    3970:	91 81       	ldd	r25, Z+1	; 0x01
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <main+0x1de>
    3976:	fe 01       	movw	r30, r28
    3978:	eb 5a       	subi	r30, 0xAB	; 171
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	91 83       	std	Z+1, r25	; 0x01
    397e:	80 83       	st	Z, r24
			_delay_ms(120);
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_LOW);
    3980:	82 e0       	ldi	r24, 0x02	; 2
    3982:	62 e0       	ldi	r22, 0x02	; 2
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    398a:	fe 01       	movw	r30, r28
    398c:	ef 5a       	subi	r30, 0xAF	; 175
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	ae ee       	ldi	r26, 0xEE	; 238
    3996:	b2 e4       	ldi	r27, 0x42	; 66
    3998:	80 83       	st	Z, r24
    399a:	91 83       	std	Z+1, r25	; 0x01
    399c:	a2 83       	std	Z+2, r26	; 0x02
    399e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a0:	8e 01       	movw	r16, r28
    39a2:	03 5b       	subi	r16, 0xB3	; 179
    39a4:	1f 4f       	sbci	r17, 0xFF	; 255
    39a6:	fe 01       	movw	r30, r28
    39a8:	ef 5a       	subi	r30, 0xAF	; 175
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	60 81       	ld	r22, Z
    39ae:	71 81       	ldd	r23, Z+1	; 0x01
    39b0:	82 81       	ldd	r24, Z+2	; 0x02
    39b2:	93 81       	ldd	r25, Z+3	; 0x03
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	4a ef       	ldi	r20, 0xFA	; 250
    39ba:	54 e4       	ldi	r21, 0x44	; 68
    39bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	f8 01       	movw	r30, r16
    39c6:	80 83       	st	Z, r24
    39c8:	91 83       	std	Z+1, r25	; 0x01
    39ca:	a2 83       	std	Z+2, r26	; 0x02
    39cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39ce:	fe 01       	movw	r30, r28
    39d0:	e3 5b       	subi	r30, 0xB3	; 179
    39d2:	ff 4f       	sbci	r31, 0xFF	; 255
    39d4:	60 81       	ld	r22, Z
    39d6:	71 81       	ldd	r23, Z+1	; 0x01
    39d8:	82 81       	ldd	r24, Z+2	; 0x02
    39da:	93 81       	ldd	r25, Z+3	; 0x03
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	40 e8       	ldi	r20, 0x80	; 128
    39e2:	5f e3       	ldi	r21, 0x3F	; 63
    39e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e8:	88 23       	and	r24, r24
    39ea:	44 f4       	brge	.+16     	; 0x39fc <main+0x268>
		__ticks = 1;
    39ec:	fe 01       	movw	r30, r28
    39ee:	e5 5b       	subi	r30, 0xB5	; 181
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	91 83       	std	Z+1, r25	; 0x01
    39f8:	80 83       	st	Z, r24
    39fa:	64 c0       	rjmp	.+200    	; 0x3ac4 <main+0x330>
	else if (__tmp > 65535)
    39fc:	fe 01       	movw	r30, r28
    39fe:	e3 5b       	subi	r30, 0xB3	; 179
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	60 81       	ld	r22, Z
    3a04:	71 81       	ldd	r23, Z+1	; 0x01
    3a06:	82 81       	ldd	r24, Z+2	; 0x02
    3a08:	93 81       	ldd	r25, Z+3	; 0x03
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	3f ef       	ldi	r19, 0xFF	; 255
    3a0e:	4f e7       	ldi	r20, 0x7F	; 127
    3a10:	57 e4       	ldi	r21, 0x47	; 71
    3a12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a16:	18 16       	cp	r1, r24
    3a18:	0c f0       	brlt	.+2      	; 0x3a1c <main+0x288>
    3a1a:	43 c0       	rjmp	.+134    	; 0x3aa2 <main+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	ef 5a       	subi	r30, 0xAF	; 175
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	60 81       	ld	r22, Z
    3a24:	71 81       	ldd	r23, Z+1	; 0x01
    3a26:	82 81       	ldd	r24, Z+2	; 0x02
    3a28:	93 81       	ldd	r25, Z+3	; 0x03
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	40 e2       	ldi	r20, 0x20	; 32
    3a30:	51 e4       	ldi	r21, 0x41	; 65
    3a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	8e 01       	movw	r16, r28
    3a3c:	05 5b       	subi	r16, 0xB5	; 181
    3a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a40:	bc 01       	movw	r22, r24
    3a42:	cd 01       	movw	r24, r26
    3a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	91 83       	std	Z+1, r25	; 0x01
    3a50:	80 83       	st	Z, r24
    3a52:	1f c0       	rjmp	.+62     	; 0x3a92 <main+0x2fe>
    3a54:	fe 01       	movw	r30, r28
    3a56:	e7 5b       	subi	r30, 0xB7	; 183
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	88 ec       	ldi	r24, 0xC8	; 200
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	91 83       	std	Z+1, r25	; 0x01
    3a60:	80 83       	st	Z, r24
    3a62:	fe 01       	movw	r30, r28
    3a64:	e7 5b       	subi	r30, 0xB7	; 183
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	80 81       	ld	r24, Z
    3a6a:	91 81       	ldd	r25, Z+1	; 0x01
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	f1 f7       	brne	.-4      	; 0x3a6c <main+0x2d8>
    3a70:	fe 01       	movw	r30, r28
    3a72:	e7 5b       	subi	r30, 0xB7	; 183
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	91 83       	std	Z+1, r25	; 0x01
    3a78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a7a:	de 01       	movw	r26, r28
    3a7c:	a5 5b       	subi	r26, 0xB5	; 181
    3a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a80:	fe 01       	movw	r30, r28
    3a82:	e5 5b       	subi	r30, 0xB5	; 181
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	80 81       	ld	r24, Z
    3a88:	91 81       	ldd	r25, Z+1	; 0x01
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	11 96       	adiw	r26, 0x01	; 1
    3a8e:	9c 93       	st	X, r25
    3a90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a92:	fe 01       	movw	r30, r28
    3a94:	e5 5b       	subi	r30, 0xB5	; 181
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	80 81       	ld	r24, Z
    3a9a:	91 81       	ldd	r25, Z+1	; 0x01
    3a9c:	00 97       	sbiw	r24, 0x00	; 0
    3a9e:	d1 f6       	brne	.-76     	; 0x3a54 <main+0x2c0>
    3aa0:	98 ce       	rjmp	.-720    	; 0x37d2 <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa2:	8e 01       	movw	r16, r28
    3aa4:	05 5b       	subi	r16, 0xB5	; 181
    3aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	e3 5b       	subi	r30, 0xB3	; 179
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	60 81       	ld	r22, Z
    3ab0:	71 81       	ldd	r23, Z+1	; 0x01
    3ab2:	82 81       	ldd	r24, Z+2	; 0x02
    3ab4:	93 81       	ldd	r25, Z+3	; 0x03
    3ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	f8 01       	movw	r30, r16
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
    3ac4:	de 01       	movw	r26, r28
    3ac6:	a9 5b       	subi	r26, 0xB9	; 185
    3ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aca:	fe 01       	movw	r30, r28
    3acc:	e5 5b       	subi	r30, 0xB5	; 181
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	80 81       	ld	r24, Z
    3ad2:	91 81       	ldd	r25, Z+1	; 0x01
    3ad4:	11 96       	adiw	r26, 0x01	; 1
    3ad6:	9c 93       	st	X, r25
    3ad8:	8e 93       	st	-X, r24
    3ada:	fe 01       	movw	r30, r28
    3adc:	e9 5b       	subi	r30, 0xB9	; 185
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	80 81       	ld	r24, Z
    3ae2:	91 81       	ldd	r25, Z+1	; 0x01
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <main+0x350>
    3ae8:	fe 01       	movw	r30, r28
    3aea:	e9 5b       	subi	r30, 0xB9	; 185
    3aec:	ff 4f       	sbci	r31, 0xFF	; 255
    3aee:	91 83       	std	Z+1, r25	; 0x01
    3af0:	80 83       	st	Z, r24
    3af2:	6f ce       	rjmp	.-802    	; 0x37d2 <main+0x3e>
			_delay_ms(119);

		}
		else if(Local_u16Distance > 10)
    3af4:	fe 01       	movw	r30, r28
    3af6:	ed 59       	subi	r30, 0x9D	; 157
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	80 81       	ld	r24, Z
    3afc:	91 81       	ldd	r25, Z+1	; 0x01
    3afe:	8b 30       	cpi	r24, 0x0B	; 11
    3b00:	91 05       	cpc	r25, r1
    3b02:	08 f4       	brcc	.+2      	; 0x3b06 <main+0x372>
    3b04:	02 c1       	rjmp	.+516    	; 0x3d0a <main+0x576>
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_HIGH);
    3b06:	82 e0       	ldi	r24, 0x02	; 2
    3b08:	62 e0       	ldi	r22, 0x02	; 2
    3b0a:	41 e0       	ldi	r20, 0x01	; 1
    3b0c:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    3b10:	fe 01       	movw	r30, r28
    3b12:	ed 5b       	subi	r30, 0xBD	; 189
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	a4 eb       	ldi	r26, 0xB4	; 180
    3b1c:	b2 e4       	ldi	r27, 0x42	; 66
    3b1e:	80 83       	st	Z, r24
    3b20:	91 83       	std	Z+1, r25	; 0x01
    3b22:	a2 83       	std	Z+2, r26	; 0x02
    3b24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b26:	8e 01       	movw	r16, r28
    3b28:	01 5c       	subi	r16, 0xC1	; 193
    3b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	ed 5b       	subi	r30, 0xBD	; 189
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	60 81       	ld	r22, Z
    3b34:	71 81       	ldd	r23, Z+1	; 0x01
    3b36:	82 81       	ldd	r24, Z+2	; 0x02
    3b38:	93 81       	ldd	r25, Z+3	; 0x03
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	4a ef       	ldi	r20, 0xFA	; 250
    3b40:	54 e4       	ldi	r21, 0x44	; 68
    3b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	f8 01       	movw	r30, r16
    3b4c:	80 83       	st	Z, r24
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	a2 83       	std	Z+2, r26	; 0x02
    3b52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b54:	fe 01       	movw	r30, r28
    3b56:	ff 96       	adiw	r30, 0x3f	; 63
    3b58:	60 81       	ld	r22, Z
    3b5a:	71 81       	ldd	r23, Z+1	; 0x01
    3b5c:	82 81       	ldd	r24, Z+2	; 0x02
    3b5e:	93 81       	ldd	r25, Z+3	; 0x03
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	40 e8       	ldi	r20, 0x80	; 128
    3b66:	5f e3       	ldi	r21, 0x3F	; 63
    3b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b6c:	88 23       	and	r24, r24
    3b6e:	2c f4       	brge	.+10     	; 0x3b7a <main+0x3e6>
		__ticks = 1;
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	9e af       	std	Y+62, r25	; 0x3e
    3b76:	8d af       	std	Y+61, r24	; 0x3d
    3b78:	46 c0       	rjmp	.+140    	; 0x3c06 <main+0x472>
	else if (__tmp > 65535)
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	ff 96       	adiw	r30, 0x3f	; 63
    3b7e:	60 81       	ld	r22, Z
    3b80:	71 81       	ldd	r23, Z+1	; 0x01
    3b82:	82 81       	ldd	r24, Z+2	; 0x02
    3b84:	93 81       	ldd	r25, Z+3	; 0x03
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	3f ef       	ldi	r19, 0xFF	; 255
    3b8a:	4f e7       	ldi	r20, 0x7F	; 127
    3b8c:	57 e4       	ldi	r21, 0x47	; 71
    3b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b92:	18 16       	cp	r1, r24
    3b94:	64 f5       	brge	.+88     	; 0x3bee <main+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b96:	fe 01       	movw	r30, r28
    3b98:	ed 5b       	subi	r30, 0xBD	; 189
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	60 81       	ld	r22, Z
    3b9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ba0:	82 81       	ldd	r24, Z+2	; 0x02
    3ba2:	93 81       	ldd	r25, Z+3	; 0x03
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	40 e2       	ldi	r20, 0x20	; 32
    3baa:	51 e4       	ldi	r21, 0x41	; 65
    3bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	9e af       	std	Y+62, r25	; 0x3e
    3bc2:	8d af       	std	Y+61, r24	; 0x3d
    3bc4:	0f c0       	rjmp	.+30     	; 0x3be4 <main+0x450>
    3bc6:	88 ec       	ldi	r24, 0xC8	; 200
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	9c af       	std	Y+60, r25	; 0x3c
    3bcc:	8b af       	std	Y+59, r24	; 0x3b
    3bce:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bd0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	f1 f7       	brne	.-4      	; 0x3bd2 <main+0x43e>
    3bd6:	9c af       	std	Y+60, r25	; 0x3c
    3bd8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bda:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	9e af       	std	Y+62, r25	; 0x3e
    3be2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3be6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3be8:	00 97       	sbiw	r24, 0x00	; 0
    3bea:	69 f7       	brne	.-38     	; 0x3bc6 <main+0x432>
    3bec:	16 c0       	rjmp	.+44     	; 0x3c1a <main+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bee:	fe 01       	movw	r30, r28
    3bf0:	ff 96       	adiw	r30, 0x3f	; 63
    3bf2:	60 81       	ld	r22, Z
    3bf4:	71 81       	ldd	r23, Z+1	; 0x01
    3bf6:	82 81       	ldd	r24, Z+2	; 0x02
    3bf8:	93 81       	ldd	r25, Z+3	; 0x03
    3bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	9e af       	std	Y+62, r25	; 0x3e
    3c04:	8d af       	std	Y+61, r24	; 0x3d
    3c06:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c08:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c0a:	9a af       	std	Y+58, r25	; 0x3a
    3c0c:	89 af       	std	Y+57, r24	; 0x39
    3c0e:	89 ad       	ldd	r24, Y+57	; 0x39
    3c10:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	f1 f7       	brne	.-4      	; 0x3c12 <main+0x47e>
    3c16:	9a af       	std	Y+58, r25	; 0x3a
    3c18:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(90);
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_LOW);
    3c1a:	82 e0       	ldi	r24, 0x02	; 2
    3c1c:	62 e0       	ldi	r22, 0x02	; 2
    3c1e:	40 e0       	ldi	r20, 0x00	; 0
    3c20:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	a2 eb       	ldi	r26, 0xB2	; 178
    3c2a:	b2 e4       	ldi	r27, 0x42	; 66
    3c2c:	8d ab       	std	Y+53, r24	; 0x35
    3c2e:	9e ab       	std	Y+54, r25	; 0x36
    3c30:	af ab       	std	Y+55, r26	; 0x37
    3c32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c34:	6d a9       	ldd	r22, Y+53	; 0x35
    3c36:	7e a9       	ldd	r23, Y+54	; 0x36
    3c38:	8f a9       	ldd	r24, Y+55	; 0x37
    3c3a:	98 ad       	ldd	r25, Y+56	; 0x38
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	4a ef       	ldi	r20, 0xFA	; 250
    3c42:	54 e4       	ldi	r21, 0x44	; 68
    3c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	89 ab       	std	Y+49, r24	; 0x31
    3c4e:	9a ab       	std	Y+50, r25	; 0x32
    3c50:	ab ab       	std	Y+51, r26	; 0x33
    3c52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c54:	69 a9       	ldd	r22, Y+49	; 0x31
    3c56:	7a a9       	ldd	r23, Y+50	; 0x32
    3c58:	8b a9       	ldd	r24, Y+51	; 0x33
    3c5a:	9c a9       	ldd	r25, Y+52	; 0x34
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e8       	ldi	r20, 0x80	; 128
    3c62:	5f e3       	ldi	r21, 0x3F	; 63
    3c64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c68:	88 23       	and	r24, r24
    3c6a:	2c f4       	brge	.+10     	; 0x3c76 <main+0x4e2>
		__ticks = 1;
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	98 ab       	std	Y+48, r25	; 0x30
    3c72:	8f a7       	std	Y+47, r24	; 0x2f
    3c74:	3f c0       	rjmp	.+126    	; 0x3cf4 <main+0x560>
	else if (__tmp > 65535)
    3c76:	69 a9       	ldd	r22, Y+49	; 0x31
    3c78:	7a a9       	ldd	r23, Y+50	; 0x32
    3c7a:	8b a9       	ldd	r24, Y+51	; 0x33
    3c7c:	9c a9       	ldd	r25, Y+52	; 0x34
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	3f ef       	ldi	r19, 0xFF	; 255
    3c82:	4f e7       	ldi	r20, 0x7F	; 127
    3c84:	57 e4       	ldi	r21, 0x47	; 71
    3c86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c8a:	18 16       	cp	r1, r24
    3c8c:	4c f5       	brge	.+82     	; 0x3ce0 <main+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    3c90:	7e a9       	ldd	r23, Y+54	; 0x36
    3c92:	8f a9       	ldd	r24, Y+55	; 0x37
    3c94:	98 ad       	ldd	r25, Y+56	; 0x38
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	40 e2       	ldi	r20, 0x20	; 32
    3c9c:	51 e4       	ldi	r21, 0x41	; 65
    3c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	bc 01       	movw	r22, r24
    3ca8:	cd 01       	movw	r24, r26
    3caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	98 ab       	std	Y+48, r25	; 0x30
    3cb4:	8f a7       	std	Y+47, r24	; 0x2f
    3cb6:	0f c0       	rjmp	.+30     	; 0x3cd6 <main+0x542>
    3cb8:	88 ec       	ldi	r24, 0xC8	; 200
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	9e a7       	std	Y+46, r25	; 0x2e
    3cbe:	8d a7       	std	Y+45, r24	; 0x2d
    3cc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <main+0x530>
    3cc8:	9e a7       	std	Y+46, r25	; 0x2e
    3cca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ccc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cce:	98 a9       	ldd	r25, Y+48	; 0x30
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	98 ab       	std	Y+48, r25	; 0x30
    3cd4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	69 f7       	brne	.-38     	; 0x3cb8 <main+0x524>
    3cde:	79 cd       	rjmp	.-1294   	; 0x37d2 <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    3ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    3ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    3ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	98 ab       	std	Y+48, r25	; 0x30
    3cf2:	8f a7       	std	Y+47, r24	; 0x2f
    3cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    3cf8:	9c a7       	std	Y+44, r25	; 0x2c
    3cfa:	8b a7       	std	Y+43, r24	; 0x2b
    3cfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cfe:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d00:	01 97       	sbiw	r24, 0x01	; 1
    3d02:	f1 f7       	brne	.-4      	; 0x3d00 <main+0x56c>
    3d04:	9c a7       	std	Y+44, r25	; 0x2c
    3d06:	8b a7       	std	Y+43, r24	; 0x2b
    3d08:	64 cd       	rjmp	.-1336   	; 0x37d2 <main+0x3e>
			_delay_ms(89);
		}
		else if(Local_u16Distance > 5)
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	ed 59       	subi	r30, 0x9D	; 157
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	80 81       	ld	r24, Z
    3d12:	91 81       	ldd	r25, Z+1	; 0x01
    3d14:	86 30       	cpi	r24, 0x06	; 6
    3d16:	91 05       	cpc	r25, r1
    3d18:	08 f4       	brcc	.+2      	; 0x3d1c <main+0x588>
    3d1a:	ef c0       	rjmp	.+478    	; 0x3efa <main+0x766>
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_HIGH);
    3d1c:	82 e0       	ldi	r24, 0x02	; 2
    3d1e:	62 e0       	ldi	r22, 0x02	; 2
    3d20:	41 e0       	ldi	r20, 0x01	; 1
    3d22:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    3d26:	80 e0       	ldi	r24, 0x00	; 0
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	a8 e4       	ldi	r26, 0x48	; 72
    3d2c:	b2 e4       	ldi	r27, 0x42	; 66
    3d2e:	8f a3       	std	Y+39, r24	; 0x27
    3d30:	98 a7       	std	Y+40, r25	; 0x28
    3d32:	a9 a7       	std	Y+41, r26	; 0x29
    3d34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d36:	6f a1       	ldd	r22, Y+39	; 0x27
    3d38:	78 a5       	ldd	r23, Y+40	; 0x28
    3d3a:	89 a5       	ldd	r24, Y+41	; 0x29
    3d3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	4a ef       	ldi	r20, 0xFA	; 250
    3d44:	54 e4       	ldi	r21, 0x44	; 68
    3d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	8b a3       	std	Y+35, r24	; 0x23
    3d50:	9c a3       	std	Y+36, r25	; 0x24
    3d52:	ad a3       	std	Y+37, r26	; 0x25
    3d54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d56:	6b a1       	ldd	r22, Y+35	; 0x23
    3d58:	7c a1       	ldd	r23, Y+36	; 0x24
    3d5a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d5c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e8       	ldi	r20, 0x80	; 128
    3d64:	5f e3       	ldi	r21, 0x3F	; 63
    3d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d6a:	88 23       	and	r24, r24
    3d6c:	2c f4       	brge	.+10     	; 0x3d78 <main+0x5e4>
		__ticks = 1;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	9a a3       	std	Y+34, r25	; 0x22
    3d74:	89 a3       	std	Y+33, r24	; 0x21
    3d76:	3f c0       	rjmp	.+126    	; 0x3df6 <main+0x662>
	else if (__tmp > 65535)
    3d78:	6b a1       	ldd	r22, Y+35	; 0x23
    3d7a:	7c a1       	ldd	r23, Y+36	; 0x24
    3d7c:	8d a1       	ldd	r24, Y+37	; 0x25
    3d7e:	9e a1       	ldd	r25, Y+38	; 0x26
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	3f ef       	ldi	r19, 0xFF	; 255
    3d84:	4f e7       	ldi	r20, 0x7F	; 127
    3d86:	57 e4       	ldi	r21, 0x47	; 71
    3d88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d8c:	18 16       	cp	r1, r24
    3d8e:	4c f5       	brge	.+82     	; 0x3de2 <main+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d90:	6f a1       	ldd	r22, Y+39	; 0x27
    3d92:	78 a5       	ldd	r23, Y+40	; 0x28
    3d94:	89 a5       	ldd	r24, Y+41	; 0x29
    3d96:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e2       	ldi	r20, 0x20	; 32
    3d9e:	51 e4       	ldi	r21, 0x41	; 65
    3da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	bc 01       	movw	r22, r24
    3daa:	cd 01       	movw	r24, r26
    3dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	9a a3       	std	Y+34, r25	; 0x22
    3db6:	89 a3       	std	Y+33, r24	; 0x21
    3db8:	0f c0       	rjmp	.+30     	; 0x3dd8 <main+0x644>
    3dba:	88 ec       	ldi	r24, 0xC8	; 200
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	98 a3       	std	Y+32, r25	; 0x20
    3dc0:	8f 8f       	std	Y+31, r24	; 0x1f
    3dc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dc4:	98 a1       	ldd	r25, Y+32	; 0x20
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	f1 f7       	brne	.-4      	; 0x3dc6 <main+0x632>
    3dca:	98 a3       	std	Y+32, r25	; 0x20
    3dcc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dce:	89 a1       	ldd	r24, Y+33	; 0x21
    3dd0:	9a a1       	ldd	r25, Y+34	; 0x22
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	9a a3       	std	Y+34, r25	; 0x22
    3dd6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd8:	89 a1       	ldd	r24, Y+33	; 0x21
    3dda:	9a a1       	ldd	r25, Y+34	; 0x22
    3ddc:	00 97       	sbiw	r24, 0x00	; 0
    3dde:	69 f7       	brne	.-38     	; 0x3dba <main+0x626>
    3de0:	14 c0       	rjmp	.+40     	; 0x3e0a <main+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de2:	6b a1       	ldd	r22, Y+35	; 0x23
    3de4:	7c a1       	ldd	r23, Y+36	; 0x24
    3de6:	8d a1       	ldd	r24, Y+37	; 0x25
    3de8:	9e a1       	ldd	r25, Y+38	; 0x26
    3dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	9a a3       	std	Y+34, r25	; 0x22
    3df4:	89 a3       	std	Y+33, r24	; 0x21
    3df6:	89 a1       	ldd	r24, Y+33	; 0x21
    3df8:	9a a1       	ldd	r25, Y+34	; 0x22
    3dfa:	9e 8f       	std	Y+30, r25	; 0x1e
    3dfc:	8d 8f       	std	Y+29, r24	; 0x1d
    3dfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <main+0x66e>
    3e06:	9e 8f       	std	Y+30, r25	; 0x1e
    3e08:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_LOW);
    3e0a:	82 e0       	ldi	r24, 0x02	; 2
    3e0c:	62 e0       	ldi	r22, 0x02	; 2
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	a4 e4       	ldi	r26, 0x44	; 68
    3e1a:	b2 e4       	ldi	r27, 0x42	; 66
    3e1c:	89 8f       	std	Y+25, r24	; 0x19
    3e1e:	9a 8f       	std	Y+26, r25	; 0x1a
    3e20:	ab 8f       	std	Y+27, r26	; 0x1b
    3e22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e24:	69 8d       	ldd	r22, Y+25	; 0x19
    3e26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	4a ef       	ldi	r20, 0xFA	; 250
    3e32:	54 e4       	ldi	r21, 0x44	; 68
    3e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	8d 8b       	std	Y+21, r24	; 0x15
    3e3e:	9e 8b       	std	Y+22, r25	; 0x16
    3e40:	af 8b       	std	Y+23, r26	; 0x17
    3e42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e44:	6d 89       	ldd	r22, Y+21	; 0x15
    3e46:	7e 89       	ldd	r23, Y+22	; 0x16
    3e48:	8f 89       	ldd	r24, Y+23	; 0x17
    3e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e8       	ldi	r20, 0x80	; 128
    3e52:	5f e3       	ldi	r21, 0x3F	; 63
    3e54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e58:	88 23       	and	r24, r24
    3e5a:	2c f4       	brge	.+10     	; 0x3e66 <main+0x6d2>
		__ticks = 1;
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	9c 8b       	std	Y+20, r25	; 0x14
    3e62:	8b 8b       	std	Y+19, r24	; 0x13
    3e64:	3f c0       	rjmp	.+126    	; 0x3ee4 <main+0x750>
	else if (__tmp > 65535)
    3e66:	6d 89       	ldd	r22, Y+21	; 0x15
    3e68:	7e 89       	ldd	r23, Y+22	; 0x16
    3e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	3f ef       	ldi	r19, 0xFF	; 255
    3e72:	4f e7       	ldi	r20, 0x7F	; 127
    3e74:	57 e4       	ldi	r21, 0x47	; 71
    3e76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e7a:	18 16       	cp	r1, r24
    3e7c:	4c f5       	brge	.+82     	; 0x3ed0 <main+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7e:	69 8d       	ldd	r22, Y+25	; 0x19
    3e80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	40 e2       	ldi	r20, 0x20	; 32
    3e8c:	51 e4       	ldi	r21, 0x41	; 65
    3e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	bc 01       	movw	r22, r24
    3e98:	cd 01       	movw	r24, r26
    3e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	9c 8b       	std	Y+20, r25	; 0x14
    3ea4:	8b 8b       	std	Y+19, r24	; 0x13
    3ea6:	0f c0       	rjmp	.+30     	; 0x3ec6 <main+0x732>
    3ea8:	88 ec       	ldi	r24, 0xC8	; 200
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	9a 8b       	std	Y+18, r25	; 0x12
    3eae:	89 8b       	std	Y+17, r24	; 0x11
    3eb0:	89 89       	ldd	r24, Y+17	; 0x11
    3eb2:	9a 89       	ldd	r25, Y+18	; 0x12
    3eb4:	01 97       	sbiw	r24, 0x01	; 1
    3eb6:	f1 f7       	brne	.-4      	; 0x3eb4 <main+0x720>
    3eb8:	9a 8b       	std	Y+18, r25	; 0x12
    3eba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	9c 8b       	std	Y+20, r25	; 0x14
    3ec4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    3eca:	00 97       	sbiw	r24, 0x00	; 0
    3ecc:	69 f7       	brne	.-38     	; 0x3ea8 <main+0x714>
    3ece:	81 cc       	rjmp	.-1790   	; 0x37d2 <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	9c 8b       	std	Y+20, r25	; 0x14
    3ee2:	8b 8b       	std	Y+19, r24	; 0x13
    3ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ee8:	98 8b       	std	Y+16, r25	; 0x10
    3eea:	8f 87       	std	Y+15, r24	; 0x0f
    3eec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eee:	98 89       	ldd	r25, Y+16	; 0x10
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	f1 f7       	brne	.-4      	; 0x3ef0 <main+0x75c>
    3ef4:	98 8b       	std	Y+16, r25	; 0x10
    3ef6:	8f 87       	std	Y+15, r24	; 0x0f
    3ef8:	6c cc       	rjmp	.-1832   	; 0x37d2 <main+0x3e>
			_delay_ms(49);
		}
		else
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN2, DIO_u8PIN_HIGH);
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	62 e0       	ldi	r22, 0x02	; 2
    3efe:	41 e0       	ldi	r20, 0x01	; 1
    3f00:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	a0 ef       	ldi	r26, 0xF0	; 240
    3f0a:	b1 e4       	ldi	r27, 0x41	; 65
    3f0c:	8b 87       	std	Y+11, r24	; 0x0b
    3f0e:	9c 87       	std	Y+12, r25	; 0x0c
    3f10:	ad 87       	std	Y+13, r26	; 0x0d
    3f12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	4a ef       	ldi	r20, 0xFA	; 250
    3f22:	54 e4       	ldi	r21, 0x44	; 68
    3f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	8f 83       	std	Y+7, r24	; 0x07
    3f2e:	98 87       	std	Y+8, r25	; 0x08
    3f30:	a9 87       	std	Y+9, r26	; 0x09
    3f32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f34:	6f 81       	ldd	r22, Y+7	; 0x07
    3f36:	78 85       	ldd	r23, Y+8	; 0x08
    3f38:	89 85       	ldd	r24, Y+9	; 0x09
    3f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	40 e8       	ldi	r20, 0x80	; 128
    3f42:	5f e3       	ldi	r21, 0x3F	; 63
    3f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f48:	88 23       	and	r24, r24
    3f4a:	2c f4       	brge	.+10     	; 0x3f56 <main+0x7c2>
		__ticks = 1;
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	9e 83       	std	Y+6, r25	; 0x06
    3f52:	8d 83       	std	Y+5, r24	; 0x05
    3f54:	3f c0       	rjmp	.+126    	; 0x3fd4 <main+0x840>
	else if (__tmp > 65535)
    3f56:	6f 81       	ldd	r22, Y+7	; 0x07
    3f58:	78 85       	ldd	r23, Y+8	; 0x08
    3f5a:	89 85       	ldd	r24, Y+9	; 0x09
    3f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	3f ef       	ldi	r19, 0xFF	; 255
    3f62:	4f e7       	ldi	r20, 0x7F	; 127
    3f64:	57 e4       	ldi	r21, 0x47	; 71
    3f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f6a:	18 16       	cp	r1, r24
    3f6c:	4c f5       	brge	.+82     	; 0x3fc0 <main+0x82c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e2       	ldi	r20, 0x20	; 32
    3f7c:	51 e4       	ldi	r21, 0x41	; 65
    3f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	bc 01       	movw	r22, r24
    3f88:	cd 01       	movw	r24, r26
    3f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	9e 83       	std	Y+6, r25	; 0x06
    3f94:	8d 83       	std	Y+5, r24	; 0x05
    3f96:	0f c0       	rjmp	.+30     	; 0x3fb6 <main+0x822>
    3f98:	88 ec       	ldi	r24, 0xC8	; 200
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	9c 83       	std	Y+4, r25	; 0x04
    3f9e:	8b 83       	std	Y+3, r24	; 0x03
    3fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	f1 f7       	brne	.-4      	; 0x3fa4 <main+0x810>
    3fa8:	9c 83       	std	Y+4, r25	; 0x04
    3faa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fac:	8d 81       	ldd	r24, Y+5	; 0x05
    3fae:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	9e 83       	std	Y+6, r25	; 0x06
    3fb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	69 f7       	brne	.-38     	; 0x3f98 <main+0x804>
    3fbe:	09 cc       	rjmp	.-2030   	; 0x37d2 <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc2:	78 85       	ldd	r23, Y+8	; 0x08
    3fc4:	89 85       	ldd	r24, Y+9	; 0x09
    3fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fcc:	dc 01       	movw	r26, r24
    3fce:	cb 01       	movw	r24, r22
    3fd0:	9e 83       	std	Y+6, r25	; 0x06
    3fd2:	8d 83       	std	Y+5, r24	; 0x05
    3fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd8:	9a 83       	std	Y+2, r25	; 0x02
    3fda:	89 83       	std	Y+1, r24	; 0x01
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	f1 f7       	brne	.-4      	; 0x3fe0 <main+0x84c>
    3fe4:	9a 83       	std	Y+2, r25	; 0x02
    3fe6:	89 83       	std	Y+1, r24	; 0x01
    3fe8:	f4 cb       	rjmp	.-2072   	; 0x37d2 <main+0x3e>

00003fea <__divmodsi4>:
    3fea:	97 fb       	bst	r25, 7
    3fec:	09 2e       	mov	r0, r25
    3fee:	05 26       	eor	r0, r21
    3ff0:	0e d0       	rcall	.+28     	; 0x400e <__divmodsi4_neg1>
    3ff2:	57 fd       	sbrc	r21, 7
    3ff4:	04 d0       	rcall	.+8      	; 0x3ffe <__divmodsi4_neg2>
    3ff6:	14 d0       	rcall	.+40     	; 0x4020 <__udivmodsi4>
    3ff8:	0a d0       	rcall	.+20     	; 0x400e <__divmodsi4_neg1>
    3ffa:	00 1c       	adc	r0, r0
    3ffc:	38 f4       	brcc	.+14     	; 0x400c <__divmodsi4_exit>

00003ffe <__divmodsi4_neg2>:
    3ffe:	50 95       	com	r21
    4000:	40 95       	com	r20
    4002:	30 95       	com	r19
    4004:	21 95       	neg	r18
    4006:	3f 4f       	sbci	r19, 0xFF	; 255
    4008:	4f 4f       	sbci	r20, 0xFF	; 255
    400a:	5f 4f       	sbci	r21, 0xFF	; 255

0000400c <__divmodsi4_exit>:
    400c:	08 95       	ret

0000400e <__divmodsi4_neg1>:
    400e:	f6 f7       	brtc	.-4      	; 0x400c <__divmodsi4_exit>
    4010:	90 95       	com	r25
    4012:	80 95       	com	r24
    4014:	70 95       	com	r23
    4016:	61 95       	neg	r22
    4018:	7f 4f       	sbci	r23, 0xFF	; 255
    401a:	8f 4f       	sbci	r24, 0xFF	; 255
    401c:	9f 4f       	sbci	r25, 0xFF	; 255
    401e:	08 95       	ret

00004020 <__udivmodsi4>:
    4020:	a1 e2       	ldi	r26, 0x21	; 33
    4022:	1a 2e       	mov	r1, r26
    4024:	aa 1b       	sub	r26, r26
    4026:	bb 1b       	sub	r27, r27
    4028:	fd 01       	movw	r30, r26
    402a:	0d c0       	rjmp	.+26     	; 0x4046 <__udivmodsi4_ep>

0000402c <__udivmodsi4_loop>:
    402c:	aa 1f       	adc	r26, r26
    402e:	bb 1f       	adc	r27, r27
    4030:	ee 1f       	adc	r30, r30
    4032:	ff 1f       	adc	r31, r31
    4034:	a2 17       	cp	r26, r18
    4036:	b3 07       	cpc	r27, r19
    4038:	e4 07       	cpc	r30, r20
    403a:	f5 07       	cpc	r31, r21
    403c:	20 f0       	brcs	.+8      	; 0x4046 <__udivmodsi4_ep>
    403e:	a2 1b       	sub	r26, r18
    4040:	b3 0b       	sbc	r27, r19
    4042:	e4 0b       	sbc	r30, r20
    4044:	f5 0b       	sbc	r31, r21

00004046 <__udivmodsi4_ep>:
    4046:	66 1f       	adc	r22, r22
    4048:	77 1f       	adc	r23, r23
    404a:	88 1f       	adc	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	1a 94       	dec	r1
    4050:	69 f7       	brne	.-38     	; 0x402c <__udivmodsi4_loop>
    4052:	60 95       	com	r22
    4054:	70 95       	com	r23
    4056:	80 95       	com	r24
    4058:	90 95       	com	r25
    405a:	9b 01       	movw	r18, r22
    405c:	ac 01       	movw	r20, r24
    405e:	bd 01       	movw	r22, r26
    4060:	cf 01       	movw	r24, r30
    4062:	08 95       	ret

00004064 <__prologue_saves__>:
    4064:	2f 92       	push	r2
    4066:	3f 92       	push	r3
    4068:	4f 92       	push	r4
    406a:	5f 92       	push	r5
    406c:	6f 92       	push	r6
    406e:	7f 92       	push	r7
    4070:	8f 92       	push	r8
    4072:	9f 92       	push	r9
    4074:	af 92       	push	r10
    4076:	bf 92       	push	r11
    4078:	cf 92       	push	r12
    407a:	df 92       	push	r13
    407c:	ef 92       	push	r14
    407e:	ff 92       	push	r15
    4080:	0f 93       	push	r16
    4082:	1f 93       	push	r17
    4084:	cf 93       	push	r28
    4086:	df 93       	push	r29
    4088:	cd b7       	in	r28, 0x3d	; 61
    408a:	de b7       	in	r29, 0x3e	; 62
    408c:	ca 1b       	sub	r28, r26
    408e:	db 0b       	sbc	r29, r27
    4090:	0f b6       	in	r0, 0x3f	; 63
    4092:	f8 94       	cli
    4094:	de bf       	out	0x3e, r29	; 62
    4096:	0f be       	out	0x3f, r0	; 63
    4098:	cd bf       	out	0x3d, r28	; 61
    409a:	09 94       	ijmp

0000409c <__epilogue_restores__>:
    409c:	2a 88       	ldd	r2, Y+18	; 0x12
    409e:	39 88       	ldd	r3, Y+17	; 0x11
    40a0:	48 88       	ldd	r4, Y+16	; 0x10
    40a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    40a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    40a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    40a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    40aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    40ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    40ae:	b9 84       	ldd	r11, Y+9	; 0x09
    40b0:	c8 84       	ldd	r12, Y+8	; 0x08
    40b2:	df 80       	ldd	r13, Y+7	; 0x07
    40b4:	ee 80       	ldd	r14, Y+6	; 0x06
    40b6:	fd 80       	ldd	r15, Y+5	; 0x05
    40b8:	0c 81       	ldd	r16, Y+4	; 0x04
    40ba:	1b 81       	ldd	r17, Y+3	; 0x03
    40bc:	aa 81       	ldd	r26, Y+2	; 0x02
    40be:	b9 81       	ldd	r27, Y+1	; 0x01
    40c0:	ce 0f       	add	r28, r30
    40c2:	d1 1d       	adc	r29, r1
    40c4:	0f b6       	in	r0, 0x3f	; 63
    40c6:	f8 94       	cli
    40c8:	de bf       	out	0x3e, r29	; 62
    40ca:	0f be       	out	0x3f, r0	; 63
    40cc:	cd bf       	out	0x3d, r28	; 61
    40ce:	ed 01       	movw	r28, r26
    40d0:	08 95       	ret

000040d2 <_exit>:
    40d2:	f8 94       	cli

000040d4 <__stop_program>:
    40d4:	ff cf       	rjmp	.-2      	; 0x40d4 <__stop_program>
