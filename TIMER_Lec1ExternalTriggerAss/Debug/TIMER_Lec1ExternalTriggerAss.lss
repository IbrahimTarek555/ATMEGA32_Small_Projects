
TIMER_Lec1ExternalTriggerAss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001f1a  00001fae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080008c  0080008c  00001fda  2**0
                  ALLOC
  3 .stab         00001d94  00000000  00000000  00001fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f9d  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000088a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000945b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__vector_10>
      2c:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <main>
      8a:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <voidSendEnablePulse>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

static void voidSendEnablePulse(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	66 e0       	ldi	r22, 0x06	; 6
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e4       	ldi	r27, 0x40	; 64
     b6c:	8b 87       	std	Y+11, r24	; 0x0b
     b6e:	9c 87       	std	Y+12, r25	; 0x0c
     b70:	ad 87       	std	Y+13, r26	; 0x0d
     b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b74:	6b 85       	ldd	r22, Y+11	; 0x0b
     b76:	7c 85       	ldd	r23, Y+12	; 0x0c
     b78:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a ef       	ldi	r20, 0xFA	; 250
     b82:	54 e4       	ldi	r21, 0x44	; 68
     b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	8f 83       	std	Y+7, r24	; 0x07
     b8e:	98 87       	std	Y+8, r25	; 0x08
     b90:	a9 87       	std	Y+9, r26	; 0x09
     b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b94:	6f 81       	ldd	r22, Y+7	; 0x07
     b96:	78 85       	ldd	r23, Y+8	; 0x08
     b98:	89 85       	ldd	r24, Y+9	; 0x09
     b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ba8:	88 23       	and	r24, r24
     baa:	2c f4       	brge	.+10     	; 0xbb6 <voidSendEnablePulse+0x70>
		__ticks = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9e 83       	std	Y+6, r25	; 0x06
     bb2:	8d 83       	std	Y+5, r24	; 0x05
     bb4:	3f c0       	rjmp	.+126    	; 0xc34 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     bb6:	6f 81       	ldd	r22, Y+7	; 0x07
     bb8:	78 85       	ldd	r23, Y+8	; 0x08
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	57 e4       	ldi	r21, 0x47	; 71
     bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bca:	18 16       	cp	r1, r24
     bcc:	4c f5       	brge	.+82     	; 0xc20 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e2       	ldi	r20, 0x20	; 32
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	bc 01       	movw	r22, r24
     be8:	cd 01       	movw	r24, r26
     bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	9e 83       	std	Y+6, r25	; 0x06
     bf4:	8d 83       	std	Y+5, r24	; 0x05
     bf6:	0f c0       	rjmp	.+30     	; 0xc16 <voidSendEnablePulse+0xd0>
     bf8:	88 ec       	ldi	r24, 0xC8	; 200
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <voidSendEnablePulse+0xbe>
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	9e 83       	std	Y+6, r25	; 0x06
     c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c16:	8d 81       	ldd	r24, Y+5	; 0x05
     c18:	9e 81       	ldd	r25, Y+6	; 0x06
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	69 f7       	brne	.-38     	; 0xbf8 <voidSendEnablePulse+0xb2>
     c1e:	14 c0       	rjmp	.+40     	; 0xc48 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c20:	6f 81       	ldd	r22, Y+7	; 0x07
     c22:	78 85       	ldd	r23, Y+8	; 0x08
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	9a 85       	ldd	r25, Y+10	; 0x0a
     c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <voidSendEnablePulse+0xfa>
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	66 e0       	ldi	r22, 0x06	; 6
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>
}
     c52:	2e 96       	adiw	r28, 0x0e	; 14
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	0f 92       	push	r0
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple, 0));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	98 2f       	mov	r25, r24
     c74:	91 70       	andi	r25, 0x01	; 1
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	49 2f       	mov	r20, r25
     c7c:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple, 1));
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	86 95       	lsr	r24
     c84:	98 2f       	mov	r25, r24
     c86:	91 70       	andi	r25, 0x01	; 1
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	49 2f       	mov	r20, r25
     c8e:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple, 2));
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	86 95       	lsr	r24
     c96:	86 95       	lsr	r24
     c98:	98 2f       	mov	r25, r24
     c9a:	91 70       	andi	r25, 0x01	; 1
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	62 e0       	ldi	r22, 0x02	; 2
     ca0:	49 2f       	mov	r20, r25
     ca2:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple, 3));
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	86 95       	lsr	r24
     caa:	86 95       	lsr	r24
     cac:	86 95       	lsr	r24
     cae:	98 2f       	mov	r25, r24
     cb0:	91 70       	andi	r25, 0x01	; 1
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	63 e0       	ldi	r22, 0x03	; 3
     cb6:	49 2f       	mov	r20, r25
     cb8:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>
}
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	64 e0       	ldi	r22, 0x04	; 4
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	65 e0       	ldi	r22, 0x05	; 5
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4);
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	82 95       	swap	r24
     ce8:	8f 70       	andi	r24, 0x0F	; 15
     cea:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     cee:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     cf8:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>

#endif

}
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <CLCD_voidSendData>:

void CLCD_voidSendData(char Copy_c8Data)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	64 e0       	ldi	r22, 0x04	; 4
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	65 e0       	ldi	r22, 0x05	; 5
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data >> 4);
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	82 95       	swap	r24
     d28:	8f 70       	andi	r24, 0x0F	; 15
     d2a:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     d2e:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data);
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     d38:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>

#endif

}
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	2e 97       	sbiw	r28, 0x0e	; 14
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	a0 e2       	ldi	r26, 0x20	; 32
     d5e:	b2 e4       	ldi	r27, 0x42	; 66
     d60:	8b 87       	std	Y+11, r24	; 0x0b
     d62:	9c 87       	std	Y+12, r25	; 0x0c
     d64:	ad 87       	std	Y+13, r26	; 0x0d
     d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d68:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a ef       	ldi	r20, 0xFA	; 250
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	98 87       	std	Y+8, r25	; 0x08
     d84:	a9 87       	std	Y+9, r26	; 0x09
     d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <CLCD_voidInit+0x66>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <CLCD_voidInit+0xc6>
     dec:	88 ec       	ldi	r24, 0xC8	; 200
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <CLCD_voidInit+0xb4>
     dfc:	9c 83       	std	Y+4, r25	; 0x04
     dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	69 f7       	brne	.-38     	; 0xdec <CLCD_voidInit+0xa8>
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <CLCD_voidInit+0xf0>
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	64 e0       	ldi	r22, 0x04	; 4
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	65 e0       	ldi	r22, 0x05	; 5
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	0e 94 93 0a 	call	0x1526	; 0x1526 <DIO_u8SetPinValue>

	/*Set Commands to lcd*/
	voidSetLCDHalfDataPort(0b0010);
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e56:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e60:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
     e64:	88 e0       	ldi	r24, 0x08	; 8
     e66:	0e 94 32 06 	call	0xc64	; 0xc64 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     e6a:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
     e6e:	8c e0       	ldi	r24, 0x0C	; 12
     e70:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

	/*Display Clear cmd*/
	CLCD_voidSendCmd(0b00000001);
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
}
     e7a:	2e 96       	adiw	r28, 0x0e	; 14
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <CLCD_u8SendString+0x6>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <CLCD_u8SendString+0x8>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	9c 83       	std	Y+4, r25	; 0x04
     eae:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
     eb0:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0;
     eb2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ch8String != NULL)
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	d9 f0       	breq	.+54     	; 0xef2 <CLCD_u8SendString+0x52>
     ebc:	0e c0       	rjmp	.+28     	; 0xeda <CLCD_u8SendString+0x3a>
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	fc 01       	movw	r30, r24
     eca:	e2 0f       	add	r30, r18
     ecc:	f3 1f       	adc	r31, r19
     ece:	80 81       	ld	r24, Z
     ed0:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
			Local_u8Counter++;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	fc 01       	movw	r30, r24
     ee6:	e2 0f       	add	r30, r18
     ee8:	f3 1f       	adc	r31, r19
     eea:	80 81       	ld	r24, Z
     eec:	88 23       	and	r24, r24
     eee:	39 f7       	brne	.-50     	; 0xebe <CLCD_u8SendString+0x1e>
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <CLCD_voidSendDecimalNumber>:


void CLCD_voidSendDecimalNumber(sint32 Copy_s32Number)
{
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	60 97       	sbiw	r28, 0x10	; 16
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	6d 87       	std	Y+13, r22	; 0x0d
     f20:	7e 87       	std	Y+14, r23	; 0x0e
     f22:	8f 87       	std	Y+15, r24	; 0x0f
     f24:	98 8b       	std	Y+16, r25	; 0x10
	char Local_ch8Digit[10] = {0};
     f26:	8a e0       	ldi	r24, 0x0A	; 10
     f28:	fe 01       	movw	r30, r28
     f2a:	33 96       	adiw	r30, 0x03	; 3
     f2c:	df 01       	movw	r26, r30
     f2e:	98 2f       	mov	r25, r24
     f30:	1d 92       	st	X+, r1
     f32:	9a 95       	dec	r25
     f34:	e9 f7       	brne	.-6      	; 0xf30 <CLCD_voidSendDecimalNumber+0x2a>

	uint8 Local_u8ReverseCounter = 0u;
     f36:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	if(Copy_s32Number == 0)
     f38:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3c:	af 85       	ldd	r26, Y+15	; 0x0f
     f3e:	b8 89       	ldd	r27, Y+16	; 0x10
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	a1 05       	cpc	r26, r1
     f44:	b1 05       	cpc	r27, r1
     f46:	21 f4       	brne	.+8      	; 0xf50 <CLCD_voidSendDecimalNumber+0x4a>
	{
		CLCD_voidSendData('0');
     f48:	80 e3       	ldi	r24, 0x30	; 48
     f4a:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
     f4e:	7b c0       	rjmp	.+246    	; 0x1046 <CLCD_voidSendDecimalNumber+0x140>
	}
	else
	{
		/*Check for the negative sign*/
		if(Copy_s32Number < 0)
     f50:	8d 85       	ldd	r24, Y+13	; 0x0d
     f52:	9e 85       	ldd	r25, Y+14	; 0x0e
     f54:	af 85       	ldd	r26, Y+15	; 0x0f
     f56:	b8 89       	ldd	r27, Y+16	; 0x10
     f58:	bb 23       	and	r27, r27
     f5a:	0c f0       	brlt	.+2      	; 0xf5e <CLCD_voidSendDecimalNumber+0x58>
     f5c:	54 c0       	rjmp	.+168    	; 0x1006 <CLCD_voidSendDecimalNumber+0x100>
		{
			/*Print the negative sign to the lcd*/
			CLCD_voidSendData('-');
     f5e:	8d e2       	ldi	r24, 0x2D	; 45
     f60:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>

			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
     f64:	8d 85       	ldd	r24, Y+13	; 0x0d
     f66:	9e 85       	ldd	r25, Y+14	; 0x0e
     f68:	af 85       	ldd	r26, Y+15	; 0x0f
     f6a:	b8 89       	ldd	r27, Y+16	; 0x10
     f6c:	b0 95       	com	r27
     f6e:	a0 95       	com	r26
     f70:	90 95       	com	r25
     f72:	81 95       	neg	r24
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	af 4f       	sbci	r26, 0xFF	; 255
     f78:	bf 4f       	sbci	r27, 0xFF	; 255
     f7a:	8d 87       	std	Y+13, r24	; 0x0d
     f7c:	9e 87       	std	Y+14, r25	; 0x0e
     f7e:	af 87       	std	Y+15, r26	; 0x0f
     f80:	b8 8b       	std	Y+16, r27	; 0x10
     f82:	41 c0       	rjmp	.+130    	; 0x1006 <CLCD_voidSendDecimalNumber+0x100>
		{
			/*
			 * Extract every digit number to the array of characters,
			 * then translate it into ascii value through adding '0'
			 */
			Local_ch8Digit[Local_u8ReverseCounter] = (char) (Copy_s32Number % 10);
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	08 2f       	mov	r16, r24
     f88:	10 e0       	ldi	r17, 0x00	; 0
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	af 85       	ldd	r26, Y+15	; 0x0f
     f90:	b8 89       	ldd	r27, Y+16	; 0x10
     f92:	2a e0       	ldi	r18, 0x0A	; 10
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__divmodsi4>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	28 2f       	mov	r18, r24
     fa8:	ce 01       	movw	r24, r28
     faa:	03 96       	adiw	r24, 0x03	; 3
     fac:	fc 01       	movw	r30, r24
     fae:	e0 0f       	add	r30, r16
     fb0:	f1 1f       	adc	r31, r17
     fb2:	20 83       	st	Z, r18
			Local_ch8Digit[Local_u8ReverseCounter] = Local_ch8Digit[Local_u8ReverseCounter] + '0';
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	48 2f       	mov	r20, r24
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	ce 01       	movw	r24, r28
     fc2:	03 96       	adiw	r24, 0x03	; 3
     fc4:	fc 01       	movw	r30, r24
     fc6:	e2 0f       	add	r30, r18
     fc8:	f3 1f       	adc	r31, r19
     fca:	80 81       	ld	r24, Z
     fcc:	28 2f       	mov	r18, r24
     fce:	20 5d       	subi	r18, 0xD0	; 208
     fd0:	ce 01       	movw	r24, r28
     fd2:	03 96       	adiw	r24, 0x03	; 3
     fd4:	fc 01       	movw	r30, r24
     fd6:	e4 0f       	add	r30, r20
     fd8:	f5 1f       	adc	r31, r21
     fda:	20 83       	st	Z, r18

			Copy_s32Number = Copy_s32Number / 10;
     fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fde:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe0:	af 85       	ldd	r26, Y+15	; 0x0f
     fe2:	b8 89       	ldd	r27, Y+16	; 0x10
     fe4:	2a e0       	ldi	r18, 0x0A	; 10
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	bc 01       	movw	r22, r24
     fee:	cd 01       	movw	r24, r26
     ff0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__divmodsi4>
     ff4:	da 01       	movw	r26, r20
     ff6:	c9 01       	movw	r24, r18
     ff8:	8d 87       	std	Y+13, r24	; 0x0d
     ffa:	9e 87       	std	Y+14, r25	; 0x0e
     ffc:	af 87       	std	Y+15, r26	; 0x0f
     ffe:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8ReverseCounter++;
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	8a 83       	std	Y+2, r24	; 0x02
			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
		}

		/*Extracting the number digits into array of characters*/
		while(Copy_s32Number > 0)
    1006:	8d 85       	ldd	r24, Y+13	; 0x0d
    1008:	9e 85       	ldd	r25, Y+14	; 0x0e
    100a:	af 85       	ldd	r26, Y+15	; 0x0f
    100c:	b8 89       	ldd	r27, Y+16	; 0x10
    100e:	18 16       	cp	r1, r24
    1010:	19 06       	cpc	r1, r25
    1012:	1a 06       	cpc	r1, r26
    1014:	1b 06       	cpc	r1, r27
    1016:	0c f4       	brge	.+2      	; 0x101a <CLCD_voidSendDecimalNumber+0x114>
    1018:	b5 cf       	rjmp	.-150    	; 0xf84 <CLCD_voidSendDecimalNumber+0x7e>
			Copy_s32Number = Copy_s32Number / 10;
			Local_u8ReverseCounter++;
		}

		/*Printing every character in the array until the end of the number*/
		Local_u8PrintCounter = Local_u8ReverseCounter;
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			CLCD_voidSendData(Local_ch8Digit[Local_u8PrintCounter - 1u]);
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 01       	movw	r18, r24
    1026:	21 50       	subi	r18, 0x01	; 1
    1028:	30 40       	sbci	r19, 0x00	; 0
    102a:	ce 01       	movw	r24, r28
    102c:	03 96       	adiw	r24, 0x03	; 3
    102e:	fc 01       	movw	r30, r24
    1030:	e2 0f       	add	r30, r18
    1032:	f3 1f       	adc	r31, r19
    1034:	80 81       	ld	r24, Z
    1036:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
			Local_u8PrintCounter--;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	81 50       	subi	r24, 0x01	; 1
    103e:	89 83       	std	Y+1, r24	; 0x01
		}
		while(Local_u8PrintCounter > 0u);
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	88 23       	and	r24, r24
    1044:	61 f7       	brne	.-40     	; 0x101e <CLCD_voidSendDecimalNumber+0x118>
	}
}
    1046:	60 96       	adiw	r28, 0x10	; 16
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	08 95       	ret

0000105c <CLCD_voidSendBinaryNumber>:


void CLCD_voidSendBinaryNumber(sint16 Copy_s16Number)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	a4 97       	sbiw	r28, 0x24	; 36
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	9c a3       	std	Y+36, r25	; 0x24
    1072:	8b a3       	std	Y+35, r24	; 0x23
	uint8 Local_u8BinaryDigits[32] = {0u};
    1074:	80 e2       	ldi	r24, 0x20	; 32
    1076:	fe 01       	movw	r30, r28
    1078:	33 96       	adiw	r30, 0x03	; 3
    107a:	df 01       	movw	r26, r30
    107c:	98 2f       	mov	r25, r24
    107e:	1d 92       	st	X+, r1
    1080:	9a 95       	dec	r25
    1082:	e9 f7       	brne	.-6      	; 0x107e <CLCD_voidSendBinaryNumber+0x22>

	uint8 Local_u8ReverseCounter = 0u;
    1084:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");
    1086:	80 e6       	ldi	r24, 0x60	; 96
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 50 07 	call	0xea0	; 0xea0 <CLCD_u8SendString>

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    108e:	1a 82       	std	Y+2, r1	; 0x02
    1090:	23 c0       	rjmp	.+70     	; 0x10d8 <CLCD_voidSendBinaryNumber+0x7c>
	{
		if((Copy_s16Number & 1) == 1)
    1092:	8b a1       	ldd	r24, Y+35	; 0x23
    1094:	9c a1       	ldd	r25, Y+36	; 0x24
    1096:	81 70       	andi	r24, 0x01	; 1
    1098:	90 70       	andi	r25, 0x00	; 0
    109a:	88 23       	and	r24, r24
    109c:	59 f0       	breq	.+22     	; 0x10b4 <CLCD_voidSendBinaryNumber+0x58>
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 1u;
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	ce 01       	movw	r24, r28
    10a6:	03 96       	adiw	r24, 0x03	; 3
    10a8:	fc 01       	movw	r30, r24
    10aa:	e2 0f       	add	r30, r18
    10ac:	f3 1f       	adc	r31, r19
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 83       	st	Z, r24
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <CLCD_voidSendBinaryNumber+0x6a>
		}
		else
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 0u;
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	ce 01       	movw	r24, r28
    10bc:	03 96       	adiw	r24, 0x03	; 3
    10be:	fc 01       	movw	r30, r24
    10c0:	e2 0f       	add	r30, r18
    10c2:	f3 1f       	adc	r31, r19
    10c4:	10 82       	st	Z, r1
		}
		Copy_s16Number = Copy_s16Number >> 1;
    10c6:	8b a1       	ldd	r24, Y+35	; 0x23
    10c8:	9c a1       	ldd	r25, Y+36	; 0x24
    10ca:	95 95       	asr	r25
    10cc:	87 95       	ror	r24
    10ce:	9c a3       	std	Y+36, r25	; 0x24
    10d0:	8b a3       	std	Y+35, r24	; 0x23

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
    10d6:	8a 83       	std	Y+2, r24	; 0x02
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	80 31       	cpi	r24, 0x10	; 16
    10dc:	d0 f2       	brcs	.-76     	; 0x1092 <CLCD_voidSendBinaryNumber+0x36>
		}
		Copy_s16Number = Copy_s16Number >> 1;
	}

	/*Go to the next line in the lcd*/
	CLCD_u8GoToXY(0,1);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <CLCD_u8GoToXY>

	/*Printing every character in the array until the end of the number*/
	Local_u8PrintCounter = 16;
    10e6:	80 e1       	ldi	r24, 0x10	; 16
    10e8:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		if(Local_u8BinaryDigits[Local_u8PrintCounter - 1] == 0)
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9c 01       	movw	r18, r24
    10f2:	21 50       	subi	r18, 0x01	; 1
    10f4:	30 40       	sbci	r19, 0x00	; 0
    10f6:	ce 01       	movw	r24, r28
    10f8:	03 96       	adiw	r24, 0x03	; 3
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 0f       	add	r30, r18
    10fe:	f3 1f       	adc	r31, r19
    1100:	80 81       	ld	r24, Z
    1102:	88 23       	and	r24, r24
    1104:	21 f4       	brne	.+8      	; 0x110e <CLCD_voidSendBinaryNumber+0xb2>
		{
			CLCD_voidSendData('0');
    1106:	80 e3       	ldi	r24, 0x30	; 48
    1108:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <CLCD_voidSendBinaryNumber+0xb8>
		}
		else
		{
			CLCD_voidSendData('1');
    110e:	81 e3       	ldi	r24, 0x31	; 49
    1110:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
		}

		Local_u8PrintCounter--;
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
	}
	while(Local_u8PrintCounter > 0);
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	88 23       	and	r24, r24
    111e:	29 f7       	brne	.-54     	; 0x10ea <CLCD_voidSendBinaryNumber+0x8e>
}
    1120:	a4 96       	adiw	r28, 0x24	; 36
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <CLCD_voidSendHexaNumber>:
//	/*Returnning the MaxZeros counter*/
//	return MaxZeros;
//}

void CLCD_voidSendHexaNumber(sint32 Copy_s32Number)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	a5 97       	sbiw	r28, 0x25	; 37
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	6d 8f       	std	Y+29, r22	; 0x1d
    1148:	7e 8f       	std	Y+30, r23	; 0x1e
    114a:	8f 8f       	std	Y+31, r24	; 0x1f
    114c:	98 a3       	std	Y+32, r25	; 0x20
	/*Define Variables*/
	char Local_ch8HexaTable[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
									'A', 'B', 'C', 'D', 'E', 'F'};
    114e:	ce 01       	movw	r24, r28
    1150:	05 96       	adiw	r24, 0x05	; 5
    1152:	9a a3       	std	Y+34, r25	; 0x22
    1154:	89 a3       	std	Y+33, r24	; 0x21
    1156:	ec e7       	ldi	r30, 0x7C	; 124
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	fc a3       	std	Y+36, r31	; 0x24
    115c:	eb a3       	std	Y+35, r30	; 0x23
    115e:	f0 e1       	ldi	r31, 0x10	; 16
    1160:	fd a3       	std	Y+37, r31	; 0x25
    1162:	eb a1       	ldd	r30, Y+35	; 0x23
    1164:	fc a1       	ldd	r31, Y+36	; 0x24
    1166:	00 80       	ld	r0, Z
    1168:	8b a1       	ldd	r24, Y+35	; 0x23
    116a:	9c a1       	ldd	r25, Y+36	; 0x24
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	9c a3       	std	Y+36, r25	; 0x24
    1170:	8b a3       	std	Y+35, r24	; 0x23
    1172:	e9 a1       	ldd	r30, Y+33	; 0x21
    1174:	fa a1       	ldd	r31, Y+34	; 0x22
    1176:	00 82       	st	Z, r0
    1178:	89 a1       	ldd	r24, Y+33	; 0x21
    117a:	9a a1       	ldd	r25, Y+34	; 0x22
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	9a a3       	std	Y+34, r25	; 0x22
    1180:	89 a3       	std	Y+33, r24	; 0x21
    1182:	9d a1       	ldd	r25, Y+37	; 0x25
    1184:	91 50       	subi	r25, 0x01	; 1
    1186:	9d a3       	std	Y+37, r25	; 0x25
    1188:	ed a1       	ldd	r30, Y+37	; 0x25
    118a:	ee 23       	and	r30, r30
    118c:	51 f7       	brne	.-44     	; 0x1162 <CLCD_voidSendHexaNumber+0x30>
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    118e:	1b 82       	std	Y+3, r1	; 0x03
    1190:	20 c0       	rjmp	.+64     	; 0x11d2 <CLCD_voidSendHexaNumber+0xa0>
	{
		/*Get the least for bits of the number*/
		Local_u8LeastFourBits = Copy_s32Number & 0x0f;
    1192:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1194:	8f 70       	andi	r24, 0x0F	; 15
    1196:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number = Copy_s32Number >> 4;
    1198:	8d 8d       	ldd	r24, Y+29	; 0x1d
    119a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    119c:	af 8d       	ldd	r26, Y+31	; 0x1f
    119e:	b8 a1       	ldd	r27, Y+32	; 0x20
    11a0:	68 94       	set
    11a2:	13 f8       	bld	r1, 3
    11a4:	b5 95       	asr	r27
    11a6:	a7 95       	ror	r26
    11a8:	97 95       	ror	r25
    11aa:	87 95       	ror	r24
    11ac:	16 94       	lsr	r1
    11ae:	d1 f7       	brne	.-12     	; 0x11a4 <CLCD_voidSendHexaNumber+0x72>
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
    11b2:	9e 8f       	std	Y+30, r25	; 0x1e
    11b4:	af 8f       	std	Y+31, r26	; 0x1f
    11b6:	b8 a3       	std	Y+32, r27	; 0x20

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	ce 01       	movw	r24, r28
    11c0:	45 96       	adiw	r24, 0x15	; 21
    11c2:	fc 01       	movw	r30, r24
    11c4:	e2 0f       	add	r30, r18
    11c6:	f3 1f       	adc	r31, r19
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	80 83       	st	Z, r24
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	8f 5f       	subi	r24, 0xFF	; 255
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	88 30       	cpi	r24, 0x08	; 8
    11d6:	e8 f2       	brcs	.-70     	; 0x1192 <CLCD_voidSendHexaNumber+0x60>

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
	}

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");
    11d8:	83 e6       	ldi	r24, 0x63	; 99
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 50 07 	call	0xea0	; 0xea0 <CLCD_u8SendString>

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    11e0:	87 e0       	ldi	r24, 0x07	; 7
    11e2:	8c 83       	std	Y+4, r24	; 0x04
    11e4:	1a c0       	rjmp	.+52     	; 0x121a <CLCD_voidSendHexaNumber+0xe8>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	28 2f       	mov	r18, r24
    11ea:	33 27       	eor	r19, r19
    11ec:	27 fd       	sbrc	r18, 7
    11ee:	30 95       	com	r19
    11f0:	ce 01       	movw	r24, r28
    11f2:	45 96       	adiw	r24, 0x15	; 21
    11f4:	fc 01       	movw	r30, r24
    11f6:	e2 0f       	add	r30, r18
    11f8:	f3 1f       	adc	r31, r19
    11fa:	80 81       	ld	r24, Z
    11fc:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	ce 01       	movw	r24, r28
    1206:	05 96       	adiw	r24, 0x05	; 5
    1208:	fc 01       	movw	r30, r24
    120a:	e2 0f       	add	r30, r18
    120c:	f3 1f       	adc	r31, r19
    120e:	80 81       	ld	r24, Z
    1210:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	81 50       	subi	r24, 0x01	; 1
    1218:	8c 83       	std	Y+4, r24	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	88 23       	and	r24, r24
    121e:	1c f7       	brge	.-58     	; 0x11e6 <CLCD_voidSendHexaNumber+0xb4>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
	}
}
    1220:	a5 96       	adiw	r28, 0x25	; 37
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	27 97       	sbiw	r28, 0x07	; 7
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	9c 83       	std	Y+4, r25	; 0x04
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	6d 83       	std	Y+5, r22	; 0x05
    124c:	4e 83       	std	Y+6, r20	; 0x06
    124e:	2f 83       	std	Y+7, r18	; 0x07
	/*Define Variables*/
	uint8 Local_u8CGRAMAdd = Copy_u8PatternNum * 8u;
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter;

	/*Set bit 6 in CGRAMAdd for CGRAM Address command standard*/
	SET_BIT(Local_u8CGRAMAdd, 6);
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	80 64       	ori	r24, 0x40	; 64
    1268:	8a 83       	std	Y+2, r24	; 0x02

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    1270:	19 82       	std	Y+1, r1	; 0x01
    1272:	0e c0       	rjmp	.+28     	; 0x1290 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	fc 01       	movw	r30, r24
    1280:	e2 0f       	add	r30, r18
    1282:	f3 1f       	adc	r31, r19
    1284:	80 81       	ld	r24, Z
    1286:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	88 30       	cpi	r24, 0x08	; 8
    1294:	78 f3       	brcs	.-34     	; 0x1274 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}

	/*Go to DDRAM Address to display the pattern*/
	CLCD_u8GoToXY(Copy_u8XPos, Copy_u8YPos);
    1296:	8e 81       	ldd	r24, Y+6	; 0x06
    1298:	6f 81       	ldd	r22, Y+7	; 0x07
    129a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <CLCD_u8GoToXY>

	/*Display the pattern from CGRAM to DDRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	0e 94 82 06 	call	0xd04	; 0xd04 <CLCD_voidSendData>
}
    12a4:	27 96       	adiw	r28, 0x07	; 7
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <CLCD_u8GoToXY>:

uint8 CLCD_u8GoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <CLCD_u8GoToXY+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <CLCD_u8GoToXY+0x8>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    12c6:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8DDRamAdd;

	/*Configure the address of DDRam*/
	if(Copy_u8YPos == 0u)
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	88 23       	and	r24, r24
    12cc:	19 f4       	brne	.+6      	; 0x12d4 <CLCD_u8GoToXY+0x1e>
	{
		Local_u8DDRamAdd = Copy_u8XPos;
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <CLCD_u8GoToXY+0x30>
	}
	else if(Copy_u8YPos == 1u)
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <CLCD_u8GoToXY+0x2c>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	80 5c       	subi	r24, 0xC0	; 192
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <CLCD_u8GoToXY+0x30>
	}
	else
	{
		Local_u8ErrorState = NOK;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Send DDRam Set Address command to lcd*/
	SET_BIT(Local_u8DDRamAdd,7);
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

	return Local_u8ErrorState;
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	28 97       	sbiw	r28, 0x08	; 8
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	8a 83       	std	Y+2, r24	; 0x02
    1318:	6b 83       	std	Y+3, r22	; 0x03
    131a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
    131c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 30       	cpi	r24, 0x08	; 8
    1322:	08 f0       	brcs	.+2      	; 0x1326 <DIO_u8SetPinDirection+0x24>
    1324:	f4 c0       	rjmp	.+488    	; 0x150e <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	09 f0       	breq	.+2      	; 0x132e <DIO_u8SetPinDirection+0x2c>
    132c:	72 c0       	rjmp	.+228    	; 0x1412 <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	38 87       	std	Y+8, r19	; 0x08
    1336:	2f 83       	std	Y+7, r18	; 0x07
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	49 f1       	breq	.+82     	; 0x1394 <DIO_u8SetPinDirection+0x92>
    1342:	2f 81       	ldd	r18, Y+7	; 0x07
    1344:	38 85       	ldd	r19, Y+8	; 0x08
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	2c f4       	brge	.+10     	; 0x1356 <DIO_u8SetPinDirection+0x54>
    134c:	8f 81       	ldd	r24, Y+7	; 0x07
    134e:	98 85       	ldd	r25, Y+8	; 0x08
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	61 f0       	breq	.+24     	; 0x136c <DIO_u8SetPinDirection+0x6a>
    1354:	5b c0       	rjmp	.+182    	; 0x140c <DIO_u8SetPinDirection+0x10a>
    1356:	2f 81       	ldd	r18, Y+7	; 0x07
    1358:	38 85       	ldd	r19, Y+8	; 0x08
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	71 f1       	breq	.+92     	; 0x13bc <DIO_u8SetPinDirection+0xba>
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	98 85       	ldd	r25, Y+8	; 0x08
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	e9 f1       	breq	.+122    	; 0x13e4 <DIO_u8SetPinDirection+0xe2>
    136a:	50 c0       	rjmp	.+160    	; 0x140c <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
    136c:	aa e3       	ldi	r26, 0x3A	; 58
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	ea e3       	ldi	r30, 0x3A	; 58
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_u8SetPinDirection+0x88>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_u8SetPinDirection+0x84>
    138e:	84 2b       	or	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	bf c0       	rjmp	.+382    	; 0x1512 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
    1394:	a7 e3       	ldi	r26, 0x37	; 55
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e7 e3       	ldi	r30, 0x37	; 55
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_u8SetPinDirection+0xb0>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_u8SetPinDirection+0xac>
    13b6:	84 2b       	or	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	ab c0       	rjmp	.+342    	; 0x1512 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
    13bc:	a4 e3       	ldi	r26, 0x34	; 52
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e4 e3       	ldi	r30, 0x34	; 52
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_u8SetPinDirection+0xd8>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_u8SetPinDirection+0xd4>
    13de:	84 2b       	or	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	97 c0       	rjmp	.+302    	; 0x1512 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
    13e4:	a1 e3       	ldi	r26, 0x31	; 49
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e1 e3       	ldi	r30, 0x31	; 49
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_u8SetPinDirection+0x100>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_u8SetPinDirection+0xfc>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	83 c0       	rjmp	.+262    	; 0x1512 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	80 c0       	rjmp	.+256    	; 0x1512 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	88 23       	and	r24, r24
    1416:	09 f0       	breq	.+2      	; 0x141a <DIO_u8SetPinDirection+0x118>
    1418:	77 c0       	rjmp	.+238    	; 0x1508 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	3e 83       	std	Y+6, r19	; 0x06
    1422:	2d 83       	std	Y+5, r18	; 0x05
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	9e 81       	ldd	r25, Y+6	; 0x06
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	59 f1       	breq	.+86     	; 0x1484 <DIO_u8SetPinDirection+0x182>
    142e:	2d 81       	ldd	r18, Y+5	; 0x05
    1430:	3e 81       	ldd	r19, Y+6	; 0x06
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	2c f4       	brge	.+10     	; 0x1442 <DIO_u8SetPinDirection+0x140>
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	69 f0       	breq	.+26     	; 0x145a <DIO_u8SetPinDirection+0x158>
    1440:	60 c0       	rjmp	.+192    	; 0x1502 <DIO_u8SetPinDirection+0x200>
    1442:	2d 81       	ldd	r18, Y+5	; 0x05
    1444:	3e 81       	ldd	r19, Y+6	; 0x06
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	89 f1       	breq	.+98     	; 0x14ae <DIO_u8SetPinDirection+0x1ac>
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	91 05       	cpc	r25, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <DIO_u8SetPinDirection+0x156>
    1456:	40 c0       	rjmp	.+128    	; 0x14d8 <DIO_u8SetPinDirection+0x1d6>
    1458:	54 c0       	rjmp	.+168    	; 0x1502 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
    145a:	aa e3       	ldi	r26, 0x3A	; 58
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ea e3       	ldi	r30, 0x3A	; 58
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_u8SetPinDirection+0x176>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_u8SetPinDirection+0x172>
    147c:	80 95       	com	r24
    147e:	84 23       	and	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	47 c0       	rjmp	.+142    	; 0x1512 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
    1484:	a7 e3       	ldi	r26, 0x37	; 55
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e3       	ldi	r30, 0x37	; 55
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_u8SetPinDirection+0x1a0>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_u8SetPinDirection+0x19c>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	32 c0       	rjmp	.+100    	; 0x1512 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
    14ae:	a4 e3       	ldi	r26, 0x34	; 52
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e4 e3       	ldi	r30, 0x34	; 52
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_u8SetPinDirection+0x1ca>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_u8SetPinDirection+0x1c6>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	1d c0       	rjmp	.+58     	; 0x1512 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    14d8:	a1 e3       	ldi	r26, 0x31	; 49
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e1 e3       	ldi	r30, 0x31	; 49
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_u8SetPinDirection+0x1f4>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_u8SetPinDirection+0x1f0>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	08 c0       	rjmp	.+16     	; 0x1512 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    1512:	89 81       	ldd	r24, Y+1	; 0x01
}
    1514:	28 96       	adiw	r28, 0x08	; 8
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	28 97       	sbiw	r28, 0x08	; 8
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	8a 83       	std	Y+2, r24	; 0x02
    153c:	6b 83       	std	Y+3, r22	; 0x03
    153e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1540:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 30       	cpi	r24, 0x08	; 8
    1546:	08 f0       	brcs	.+2      	; 0x154a <DIO_u8SetPinValue+0x24>
    1548:	f4 c0       	rjmp	.+488    	; 0x1732 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	09 f0       	breq	.+2      	; 0x1552 <DIO_u8SetPinValue+0x2c>
    1550:	72 c0       	rjmp	.+228    	; 0x1636 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	38 87       	std	Y+8, r19	; 0x08
    155a:	2f 83       	std	Y+7, r18	; 0x07
    155c:	8f 81       	ldd	r24, Y+7	; 0x07
    155e:	98 85       	ldd	r25, Y+8	; 0x08
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	91 05       	cpc	r25, r1
    1564:	49 f1       	breq	.+82     	; 0x15b8 <DIO_u8SetPinValue+0x92>
    1566:	2f 81       	ldd	r18, Y+7	; 0x07
    1568:	38 85       	ldd	r19, Y+8	; 0x08
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	2c f4       	brge	.+10     	; 0x157a <DIO_u8SetPinValue+0x54>
    1570:	8f 81       	ldd	r24, Y+7	; 0x07
    1572:	98 85       	ldd	r25, Y+8	; 0x08
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	61 f0       	breq	.+24     	; 0x1590 <DIO_u8SetPinValue+0x6a>
    1578:	5b c0       	rjmp	.+182    	; 0x1630 <DIO_u8SetPinValue+0x10a>
    157a:	2f 81       	ldd	r18, Y+7	; 0x07
    157c:	38 85       	ldd	r19, Y+8	; 0x08
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	71 f1       	breq	.+92     	; 0x15e0 <DIO_u8SetPinValue+0xba>
    1584:	8f 81       	ldd	r24, Y+7	; 0x07
    1586:	98 85       	ldd	r25, Y+8	; 0x08
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	e9 f1       	breq	.+122    	; 0x1608 <DIO_u8SetPinValue+0xe2>
    158e:	50 c0       	rjmp	.+160    	; 0x1630 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    1590:	ab e3       	ldi	r26, 0x3B	; 59
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	eb e3       	ldi	r30, 0x3B	; 59
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_u8SetPinValue+0x88>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_u8SetPinValue+0x84>
    15b2:	84 2b       	or	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	bf c0       	rjmp	.+382    	; 0x1736 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    15b8:	a8 e3       	ldi	r26, 0x38	; 56
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e8 e3       	ldi	r30, 0x38	; 56
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_u8SetPinValue+0xb0>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_u8SetPinValue+0xac>
    15da:	84 2b       	or	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	ab c0       	rjmp	.+342    	; 0x1736 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    15e0:	a5 e3       	ldi	r26, 0x35	; 53
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e3       	ldi	r30, 0x35	; 53
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_u8SetPinValue+0xd8>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_u8SetPinValue+0xd4>
    1602:	84 2b       	or	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	97 c0       	rjmp	.+302    	; 0x1736 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    1608:	a2 e3       	ldi	r26, 0x32	; 50
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e2 e3       	ldi	r30, 0x32	; 50
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_u8SetPinValue+0x100>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_u8SetPinValue+0xfc>
    162a:	84 2b       	or	r24, r20
    162c:	8c 93       	st	X, r24
    162e:	83 c0       	rjmp	.+262    	; 0x1736 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	80 c0       	rjmp	.+256    	; 0x1736 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	88 23       	and	r24, r24
    163a:	09 f0       	breq	.+2      	; 0x163e <DIO_u8SetPinValue+0x118>
    163c:	77 c0       	rjmp	.+238    	; 0x172c <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3e 83       	std	Y+6, r19	; 0x06
    1646:	2d 83       	std	Y+5, r18	; 0x05
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	59 f1       	breq	.+86     	; 0x16a8 <DIO_u8SetPinValue+0x182>
    1652:	2d 81       	ldd	r18, Y+5	; 0x05
    1654:	3e 81       	ldd	r19, Y+6	; 0x06
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <DIO_u8SetPinValue+0x140>
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	69 f0       	breq	.+26     	; 0x167e <DIO_u8SetPinValue+0x158>
    1664:	60 c0       	rjmp	.+192    	; 0x1726 <DIO_u8SetPinValue+0x200>
    1666:	2d 81       	ldd	r18, Y+5	; 0x05
    1668:	3e 81       	ldd	r19, Y+6	; 0x06
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	89 f1       	breq	.+98     	; 0x16d2 <DIO_u8SetPinValue+0x1ac>
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <DIO_u8SetPinValue+0x156>
    167a:	40 c0       	rjmp	.+128    	; 0x16fc <DIO_u8SetPinValue+0x1d6>
    167c:	54 c0       	rjmp	.+168    	; 0x1726 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    167e:	ab e3       	ldi	r26, 0x3B	; 59
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	eb e3       	ldi	r30, 0x3B	; 59
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <DIO_u8SetPinValue+0x176>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <DIO_u8SetPinValue+0x172>
    16a0:	80 95       	com	r24
    16a2:	84 23       	and	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	47 c0       	rjmp	.+142    	; 0x1736 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    16a8:	a8 e3       	ldi	r26, 0x38	; 56
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e8 e3       	ldi	r30, 0x38	; 56
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <DIO_u8SetPinValue+0x1a0>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <DIO_u8SetPinValue+0x19c>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	32 c0       	rjmp	.+100    	; 0x1736 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    16d2:	a5 e3       	ldi	r26, 0x35	; 53
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e3       	ldi	r30, 0x35	; 53
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_u8SetPinValue+0x1ca>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_u8SetPinValue+0x1c6>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	1d c0       	rjmp	.+58     	; 0x1736 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    16fc:	a2 e3       	ldi	r26, 0x32	; 50
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e2 e3       	ldi	r30, 0x32	; 50
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_u8SetPinValue+0x1f4>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_u8SetPinValue+0x1f0>
    171e:	80 95       	com	r24
    1720:	84 23       	and	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	08 c0       	rjmp	.+16     	; 0x1736 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1736:	89 81       	ldd	r24, Y+1	; 0x01
}
    1738:	28 96       	adiw	r28, 0x08	; 8
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	00 d0       	rcall	.+0      	; 0x1750 <DIO_u8TogglePinValue+0x6>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <DIO_u8TogglePinValue+0x8>
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	8a 83       	std	Y+2, r24	; 0x02
    175a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    175c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	88 30       	cpi	r24, 0x08	; 8
    1762:	08 f0       	brcs	.+2      	; 0x1766 <DIO_u8TogglePinValue+0x1c>
    1764:	72 c0       	rjmp	.+228    	; 0x184a <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3d 83       	std	Y+5, r19	; 0x05
    176e:	2c 83       	std	Y+4, r18	; 0x04
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	91 05       	cpc	r25, r1
    1778:	49 f1       	breq	.+82     	; 0x17cc <DIO_u8TogglePinValue+0x82>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	2c f4       	brge	.+10     	; 0x178e <DIO_u8TogglePinValue+0x44>
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	61 f0       	breq	.+24     	; 0x17a4 <DIO_u8TogglePinValue+0x5a>
    178c:	5b c0       	rjmp	.+182    	; 0x1844 <DIO_u8TogglePinValue+0xfa>
    178e:	2c 81       	ldd	r18, Y+4	; 0x04
    1790:	3d 81       	ldd	r19, Y+5	; 0x05
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	71 f1       	breq	.+92     	; 0x17f4 <DIO_u8TogglePinValue+0xaa>
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9d 81       	ldd	r25, Y+5	; 0x05
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	91 05       	cpc	r25, r1
    17a0:	e9 f1       	breq	.+122    	; 0x181c <DIO_u8TogglePinValue+0xd2>
    17a2:	50 c0       	rjmp	.+160    	; 0x1844 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    17a4:	ab e3       	ldi	r26, 0x3B	; 59
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	eb e3       	ldi	r30, 0x3B	; 59
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_u8TogglePinValue+0x78>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <DIO_u8TogglePinValue+0x74>
    17c6:	84 27       	eor	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	41 c0       	rjmp	.+130    	; 0x184e <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    17cc:	a8 e3       	ldi	r26, 0x38	; 56
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e8 e3       	ldi	r30, 0x38	; 56
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_u8TogglePinValue+0xa0>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <DIO_u8TogglePinValue+0x9c>
    17ee:	84 27       	eor	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	2d c0       	rjmp	.+90     	; 0x184e <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    17f4:	a5 e3       	ldi	r26, 0x35	; 53
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e5 e3       	ldi	r30, 0x35	; 53
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_u8TogglePinValue+0xc8>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_u8TogglePinValue+0xc4>
    1816:	84 27       	eor	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	19 c0       	rjmp	.+50     	; 0x184e <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    181c:	a2 e3       	ldi	r26, 0x32	; 50
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e2 e3       	ldi	r30, 0x32	; 50
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_u8TogglePinValue+0xf0>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_u8TogglePinValue+0xec>
    183e:	84 27       	eor	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	05 c0       	rjmp	.+10     	; 0x184e <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    184e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	27 97       	sbiw	r28, 0x07	; 7
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	8a 83       	std	Y+2, r24	; 0x02
    1876:	6b 83       	std	Y+3, r22	; 0x03
    1878:	5d 83       	std	Y+5, r21	; 0x05
    187a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    187c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 30       	cpi	r24, 0x08	; 8
    1882:	08 f0       	brcs	.+2      	; 0x1886 <DIO_u8GetPinValue+0x26>
    1884:	74 c0       	rjmp	.+232    	; 0x196e <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	3f 83       	std	Y+7, r19	; 0x07
    188e:	2e 83       	std	Y+6, r18	; 0x06
    1890:	4e 81       	ldd	r20, Y+6	; 0x06
    1892:	5f 81       	ldd	r21, Y+7	; 0x07
    1894:	41 30       	cpi	r20, 0x01	; 1
    1896:	51 05       	cpc	r21, r1
    1898:	59 f1       	breq	.+86     	; 0x18f0 <DIO_u8GetPinValue+0x90>
    189a:	8e 81       	ldd	r24, Y+6	; 0x06
    189c:	9f 81       	ldd	r25, Y+7	; 0x07
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	91 05       	cpc	r25, r1
    18a2:	34 f4       	brge	.+12     	; 0x18b0 <DIO_u8GetPinValue+0x50>
    18a4:	2e 81       	ldd	r18, Y+6	; 0x06
    18a6:	3f 81       	ldd	r19, Y+7	; 0x07
    18a8:	21 15       	cp	r18, r1
    18aa:	31 05       	cpc	r19, r1
    18ac:	69 f0       	breq	.+26     	; 0x18c8 <DIO_u8GetPinValue+0x68>
    18ae:	5c c0       	rjmp	.+184    	; 0x1968 <DIO_u8GetPinValue+0x108>
    18b0:	4e 81       	ldd	r20, Y+6	; 0x06
    18b2:	5f 81       	ldd	r21, Y+7	; 0x07
    18b4:	42 30       	cpi	r20, 0x02	; 2
    18b6:	51 05       	cpc	r21, r1
    18b8:	79 f1       	breq	.+94     	; 0x1918 <DIO_u8GetPinValue+0xb8>
    18ba:	8e 81       	ldd	r24, Y+6	; 0x06
    18bc:	9f 81       	ldd	r25, Y+7	; 0x07
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <DIO_u8GetPinValue+0x66>
    18c4:	3d c0       	rjmp	.+122    	; 0x1940 <DIO_u8GetPinValue+0xe0>
    18c6:	50 c0       	rjmp	.+160    	; 0x1968 <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    18c8:	e9 e3       	ldi	r30, 0x39	; 57
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a9 01       	movw	r20, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_u8GetPinValue+0x80>
    18dc:	55 95       	asr	r21
    18de:	47 95       	ror	r20
    18e0:	8a 95       	dec	r24
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_u8GetPinValue+0x7c>
    18e4:	ca 01       	movw	r24, r20
    18e6:	81 70       	andi	r24, 0x01	; 1
    18e8:	ec 81       	ldd	r30, Y+4	; 0x04
    18ea:	fd 81       	ldd	r31, Y+5	; 0x05
    18ec:	80 83       	st	Z, r24
    18ee:	41 c0       	rjmp	.+130    	; 0x1972 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    18f0:	e6 e3       	ldi	r30, 0x36	; 54
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a9 01       	movw	r20, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_u8GetPinValue+0xa8>
    1904:	55 95       	asr	r21
    1906:	47 95       	ror	r20
    1908:	8a 95       	dec	r24
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_u8GetPinValue+0xa4>
    190c:	ca 01       	movw	r24, r20
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	ec 81       	ldd	r30, Y+4	; 0x04
    1912:	fd 81       	ldd	r31, Y+5	; 0x05
    1914:	80 83       	st	Z, r24
    1916:	2d c0       	rjmp	.+90     	; 0x1972 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    1918:	e3 e3       	ldi	r30, 0x33	; 51
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a9 01       	movw	r20, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_u8GetPinValue+0xd0>
    192c:	55 95       	asr	r21
    192e:	47 95       	ror	r20
    1930:	8a 95       	dec	r24
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_u8GetPinValue+0xcc>
    1934:	ca 01       	movw	r24, r20
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	ec 81       	ldd	r30, Y+4	; 0x04
    193a:	fd 81       	ldd	r31, Y+5	; 0x05
    193c:	80 83       	st	Z, r24
    193e:	19 c0       	rjmp	.+50     	; 0x1972 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    1940:	e0 e3       	ldi	r30, 0x30	; 48
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a9 01       	movw	r20, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_u8GetPinValue+0xf8>
    1954:	55 95       	asr	r21
    1956:	47 95       	ror	r20
    1958:	8a 95       	dec	r24
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_u8GetPinValue+0xf4>
    195c:	ca 01       	movw	r24, r20
    195e:	81 70       	andi	r24, 0x01	; 1
    1960:	ec 81       	ldd	r30, Y+4	; 0x04
    1962:	fd 81       	ldd	r31, Y+5	; 0x05
    1964:	80 83       	st	Z, r24
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1972:	89 81       	ldd	r24, Y+1	; 0x01
}
    1974:	27 96       	adiw	r28, 0x07	; 7
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	00 d0       	rcall	.+0      	; 0x198c <DIO_u8SetPortDirection+0x6>
    198c:	00 d0       	rcall	.+0      	; 0x198e <DIO_u8SetPortDirection+0x8>
    198e:	0f 92       	push	r0
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	8a 83       	std	Y+2, r24	; 0x02
    1996:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1998:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3d 83       	std	Y+5, r19	; 0x05
    19a2:	2c 83       	std	Y+4, r18	; 0x04
    19a4:	8c 81       	ldd	r24, Y+4	; 0x04
    19a6:	9d 81       	ldd	r25, Y+5	; 0x05
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	91 05       	cpc	r25, r1
    19ac:	d1 f0       	breq	.+52     	; 0x19e2 <DIO_u8SetPortDirection+0x5c>
    19ae:	2c 81       	ldd	r18, Y+4	; 0x04
    19b0:	3d 81       	ldd	r19, Y+5	; 0x05
    19b2:	22 30       	cpi	r18, 0x02	; 2
    19b4:	31 05       	cpc	r19, r1
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <DIO_u8SetPortDirection+0x3c>
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	61 f0       	breq	.+24     	; 0x19d8 <DIO_u8SetPortDirection+0x52>
    19c0:	1f c0       	rjmp	.+62     	; 0x1a00 <DIO_u8SetPortDirection+0x7a>
    19c2:	2c 81       	ldd	r18, Y+4	; 0x04
    19c4:	3d 81       	ldd	r19, Y+5	; 0x05
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	81 f0       	breq	.+32     	; 0x19ec <DIO_u8SetPortDirection+0x66>
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	9d 81       	ldd	r25, Y+5	; 0x05
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	91 05       	cpc	r25, r1
    19d4:	81 f0       	breq	.+32     	; 0x19f6 <DIO_u8SetPortDirection+0x70>
    19d6:	14 c0       	rjmp	.+40     	; 0x1a00 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    19d8:	ea e3       	ldi	r30, 0x3A	; 58
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	80 83       	st	Z, r24
    19e0:	11 c0       	rjmp	.+34     	; 0x1a04 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    19e2:	e7 e3       	ldi	r30, 0x37	; 55
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	80 83       	st	Z, r24
    19ea:	0c c0       	rjmp	.+24     	; 0x1a04 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    19ec:	e4 e3       	ldi	r30, 0x34	; 52
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	80 83       	st	Z, r24
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    19f6:	e1 e3       	ldi	r30, 0x31	; 49
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	80 83       	st	Z, r24
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <DIO_u8SetPortValue+0x6>
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <DIO_u8SetPortValue+0x8>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	8a 83       	std	Y+2, r24	; 0x02
    1a26:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1a28:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	3d 83       	std	Y+5, r19	; 0x05
    1a32:	2c 83       	std	Y+4, r18	; 0x04
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	9d 81       	ldd	r25, Y+5	; 0x05
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	d1 f0       	breq	.+52     	; 0x1a72 <DIO_u8SetPortValue+0x5c>
    1a3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a40:	3d 81       	ldd	r19, Y+5	; 0x05
    1a42:	22 30       	cpi	r18, 0x02	; 2
    1a44:	31 05       	cpc	r19, r1
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <DIO_u8SetPortValue+0x3c>
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <DIO_u8SetPortValue+0x52>
    1a50:	1f c0       	rjmp	.+62     	; 0x1a90 <DIO_u8SetPortValue+0x7a>
    1a52:	2c 81       	ldd	r18, Y+4	; 0x04
    1a54:	3d 81       	ldd	r19, Y+5	; 0x05
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	81 f0       	breq	.+32     	; 0x1a7c <DIO_u8SetPortValue+0x66>
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a60:	83 30       	cpi	r24, 0x03	; 3
    1a62:	91 05       	cpc	r25, r1
    1a64:	81 f0       	breq	.+32     	; 0x1a86 <DIO_u8SetPortValue+0x70>
    1a66:	14 c0       	rjmp	.+40     	; 0x1a90 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    1a68:	eb e3       	ldi	r30, 0x3B	; 59
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	80 83       	st	Z, r24
    1a70:	11 c0       	rjmp	.+34     	; 0x1a94 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    1a72:	e8 e3       	ldi	r30, 0x38	; 56
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	80 83       	st	Z, r24
    1a7a:	0c c0       	rjmp	.+24     	; 0x1a94 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    1a7c:	e5 e3       	ldi	r30, 0x35	; 53
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	80 83       	st	Z, r24
    1a84:	07 c0       	rjmp	.+14     	; 0x1a94 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    1a86:	e2 e3       	ldi	r30, 0x32	; 50
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	80 83       	st	Z, r24
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
    1aae:	78 94       	sei
}
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
    1abe:	f8 94       	cli
}
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1ace:	ea e3       	ldi	r30, 0x3A	; 58
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1ad6:	e7 e3       	ldi	r30, 0x37	; 55
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8e ef       	ldi	r24, 0xFE	; 254
    1adc:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1ade:	e4 e3       	ldi	r30, 0x34	; 52
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	8e ef       	ldi	r24, 0xFE	; 254
    1ae4:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1ae6:	e1 e3       	ldi	r30, 0x31	; 49
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
    1aee:	eb e3       	ldi	r30, 0x3B	; 59
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    1af4:	e8 e3       	ldi	r30, 0x38	; 56
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    1afc:	e5 e3       	ldi	r30, 0x35	; 53
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	80 83       	st	Z, r24
	PORTD = PORTD_INITIAL_VALUE;
    1b04:	e2 e3       	ldi	r30, 0x32	; 50
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	10 82       	st	Z, r1
}
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <SWITCH_u8GetState>:
#include "SWITCH_config.h"
#include "SWITCH_private.h"
#include "SWITCH_interface.h"

uint8 SWITCH_u8GetState(const SWITCH_t *Copy_pswitchtSwitchInformation, uint8 *Copy_pu8State)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	2a 97       	sbiw	r28, 0x0a	; 10
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
    1b28:	7e 83       	std	Y+6, r23	; 0x06
    1b2a:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_u8ErrorState = OK;
    1b2c:	19 82       	std	Y+1, r1	; 0x01
	uint8 Local_u8SwitchState;

	/*Validate the pointer address*/
	if((Copy_pswitchtSwitchInformation != NULL) && (Copy_pu8State != NULL))
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <SWITCH_u8GetState+0x28>
    1b36:	55 c0       	rjmp	.+170    	; 0x1be2 <SWITCH_u8GetState+0xd2>
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <SWITCH_u8GetState+0x32>
    1b40:	50 c0       	rjmp	.+160    	; 0x1be2 <SWITCH_u8GetState+0xd2>
	{
		DIO_u8GetPinValue(Copy_pswitchtSwitchInformation -> Port, Copy_pswitchtSwitchInformation -> Pin, &Local_u8SwitchState);
    1b42:	eb 81       	ldd	r30, Y+3	; 0x03
    1b44:	fc 81       	ldd	r31, Y+4	; 0x04
    1b46:	81 81       	ldd	r24, Z+1	; 0x01
    1b48:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4c:	92 81       	ldd	r25, Z+2	; 0x02
    1b4e:	9e 01       	movw	r18, r28
    1b50:	2e 5f       	subi	r18, 0xFE	; 254
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
    1b54:	69 2f       	mov	r22, r25
    1b56:	a9 01       	movw	r20, r18
    1b58:	0e 94 30 0c 	call	0x1860	; 0x1860 <DIO_u8GetPinValue>


		if(Copy_pswitchtSwitchInformation -> Type == SWITCH_u8PULL_UP)
    1b5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b60:	80 81       	ld	r24, Z
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	d9 f4       	brne	.+54     	; 0x1b9c <SWITCH_u8GetState+0x8c>
		{
			switch(Local_u8SwitchState)
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3a 87       	std	Y+10, r19	; 0x0a
    1b6e:	29 87       	std	Y+9, r18	; 0x09
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	51 f0       	breq	.+20     	; 0x1b8c <SWITCH_u8GetState+0x7c>
    1b78:	29 85       	ldd	r18, Y+9	; 0x09
    1b7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b7c:	21 30       	cpi	r18, 0x01	; 1
    1b7e:	31 05       	cpc	r19, r1
    1b80:	51 f4       	brne	.+20     	; 0x1b96 <SWITCH_u8GetState+0x86>
			{
				case DIO_u8PIN_HIGH: *Copy_pu8State = SWITCH_u8RELEASED;	break;
    1b82:	ed 81       	ldd	r30, Y+5	; 0x05
    1b84:	fe 81       	ldd	r31, Y+6	; 0x06
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	80 83       	st	Z, r24
    1b8a:	2d c0       	rjmp	.+90     	; 0x1be6 <SWITCH_u8GetState+0xd6>
				case DIO_u8PIN_LOW: *Copy_pu8State = SWITCH_u8PRESSED;		break;
    1b8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1b8e:	fe 81       	ldd	r31, Y+6	; 0x06
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	80 83       	st	Z, r24
    1b94:	28 c0       	rjmp	.+80     	; 0x1be6 <SWITCH_u8GetState+0xd6>
				default: Local_u8ErrorState = NOK;	break;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	25 c0       	rjmp	.+74     	; 0x1be6 <SWITCH_u8GetState+0xd6>
			}
		}
		else if(Copy_pswitchtSwitchInformation -> Type == SWITCH_u8PULL_DOWN)
    1b9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba0:	80 81       	ld	r24, Z
    1ba2:	82 30       	cpi	r24, 0x02	; 2
    1ba4:	d9 f4       	brne	.+54     	; 0x1bdc <SWITCH_u8GetState+0xcc>
		{
			switch(Local_u8SwitchState)
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	38 87       	std	Y+8, r19	; 0x08
    1bae:	2f 83       	std	Y+7, r18	; 0x07
    1bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb2:	98 85       	ldd	r25, Y+8	; 0x08
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	51 f0       	breq	.+20     	; 0x1bcc <SWITCH_u8GetState+0xbc>
    1bb8:	2f 81       	ldd	r18, Y+7	; 0x07
    1bba:	38 85       	ldd	r19, Y+8	; 0x08
    1bbc:	21 30       	cpi	r18, 0x01	; 1
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	51 f4       	brne	.+20     	; 0x1bd6 <SWITCH_u8GetState+0xc6>
			{
				case DIO_u8PIN_HIGH: *Copy_pu8State = SWITCH_u8PRESSED;		break;
    1bc2:	ed 81       	ldd	r30, Y+5	; 0x05
    1bc4:	fe 81       	ldd	r31, Y+6	; 0x06
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	80 83       	st	Z, r24
    1bca:	0d c0       	rjmp	.+26     	; 0x1be6 <SWITCH_u8GetState+0xd6>
				case DIO_u8PIN_LOW: *Copy_pu8State = SWITCH_u8RELEASED;		break;
    1bcc:	ed 81       	ldd	r30, Y+5	; 0x05
    1bce:	fe 81       	ldd	r31, Y+6	; 0x06
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	80 83       	st	Z, r24
    1bd4:	08 c0       	rjmp	.+16     	; 0x1be6 <SWITCH_u8GetState+0xd6>
				default: Local_u8ErrorState = NOK;	break;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	05 c0       	rjmp	.+10     	; 0x1be6 <SWITCH_u8GetState+0xd6>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <SWITCH_u8GetState+0xd6>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be8:	2a 96       	adiw	r28, 0x0a	; 10
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <TIMER_voidInit>:

static void (* TIMER_pvCTCNotificationFunc)(void) = NULL;
static void (* TIMER_pvOverflowNotificationFunc)(void) = NULL;

void TIMER_voidInit(void)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
	/*Select Wave Generation Mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
    1c02:	a3 e5       	ldi	r26, 0x53	; 83
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e3 e5       	ldi	r30, 0x53	; 83
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	8f 7b       	andi	r24, 0xBF	; 191
    1c0e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1c10:	a3 e5       	ldi	r26, 0x53	; 83
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e3 e5       	ldi	r30, 0x53	; 83
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	88 60       	ori	r24, 0x08	; 8
    1c1c:	8c 93       	st	X, r24

	/*Select Compare Match Output Mode*/
	CLR_BIT(TCCR0,TCCR0_COM00);
    1c1e:	a3 e5       	ldi	r26, 0x53	; 83
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e3 e5       	ldi	r30, 0x53	; 83
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	8f 7e       	andi	r24, 0xEF	; 239
    1c2a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM01);
    1c2c:	a3 e5       	ldi	r26, 0x53	; 83
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e3 e5       	ldi	r30, 0x53	; 83
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	8f 7d       	andi	r24, 0xDF	; 223
    1c38:	8c 93       	st	X, r24

	/*Select Prescaler*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    1c3a:	a3 e5       	ldi	r26, 0x53	; 83
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e3 e5       	ldi	r30, 0x53	; 83
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8e 7f       	andi	r24, 0xFE	; 254
    1c46:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1c48:	a3 e5       	ldi	r26, 0x53	; 83
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e3 e5       	ldi	r30, 0x53	; 83
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	82 60       	ori	r24, 0x02	; 2
    1c54:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS02);
    1c56:	a3 e5       	ldi	r26, 0x53	; 83
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e3 e5       	ldi	r30, 0x53	; 83
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	84 60       	ori	r24, 0x04	; 4
    1c62:	8c 93       	st	X, r24

	/*Enable The Timer Interrupt*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
    1c64:	a9 e5       	ldi	r26, 0x59	; 89
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e9 e5       	ldi	r30, 0x59	; 89
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	82 60       	ori	r24, 0x02	; 2
    1c70:	8c 93       	st	X, r24

	/*Set the Compare Match Value*/
	OCR0 = 1;
    1c72:	ec e5       	ldi	r30, 0x5C	; 92
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	80 83       	st	Z, r24
}
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <TIMER_u8SetCallBackCompareMatch>:

uint8 TIMER_u8SetCallBackCompareMatch(void (* Copy_pvNotificationFunc)(void))
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <TIMER_u8SetCallBackCompareMatch+0x6>
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9b 83       	std	Y+3, r25	; 0x03
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1c90:	19 82       	std	Y+1, r1	; 0x01

	/*Validating the pointer to the function*/
	if(Copy_pvNotificationFunc != NULL)
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	39 f0       	breq	.+14     	; 0x1ca8 <TIMER_u8SetCallBackCompareMatch+0x28>
	{
		/*Convert the local pointer to global to be sent to ISR*/
		TIMER_pvCTCNotificationFunc = Copy_pvNotificationFunc;
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9e:	90 93 8d 00 	sts	0x008D, r25
    1ca2:	80 93 8c 00 	sts	0x008C, r24
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <TIMER_u8SetCallBackCompareMatch+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <TIMER_u8SetCallBackOverflow>:


uint8 TIMER_u8SetCallBackOverflow(void (* Copy_pvNotificationFunc)(void))
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <TIMER_u8SetCallBackOverflow+0x6>
    1cc0:	0f 92       	push	r0
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	9b 83       	std	Y+3, r25	; 0x03
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1cca:	19 82       	std	Y+1, r1	; 0x01

	/*Validating the pointer to the function*/
	if(Copy_pvNotificationFunc != NULL)
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	39 f0       	breq	.+14     	; 0x1ce2 <TIMER_u8SetCallBackOverflow+0x28>
	{
		/*Convert the local pointer to global to be sent to ISR*/
		TIMER_pvOverflowNotificationFunc = Copy_pvNotificationFunc;
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	90 93 8f 00 	sts	0x008F, r25
    1cdc:	80 93 8e 00 	sts	0x008E, r24
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <TIMER_u8SetCallBackOverflow+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <__vector_11>:


/*OverFlow Event ISR*/
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
    1cf4:	1f 92       	push	r1
    1cf6:	0f 92       	push	r0
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	0f 92       	push	r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	2f 93       	push	r18
    1d00:	3f 93       	push	r19
    1d02:	4f 93       	push	r20
    1d04:	5f 93       	push	r21
    1d06:	6f 93       	push	r22
    1d08:	7f 93       	push	r23
    1d0a:	8f 93       	push	r24
    1d0c:	9f 93       	push	r25
    1d0e:	af 93       	push	r26
    1d10:	bf 93       	push	r27
    1d12:	ef 93       	push	r30
    1d14:	ff 93       	push	r31
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMER_pvOverflowNotificationFunc != NULL)
    1d1e:	80 91 8e 00 	lds	r24, 0x008E
    1d22:	90 91 8f 00 	lds	r25, 0x008F
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	29 f0       	breq	.+10     	; 0x1d34 <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMER_pvOverflowNotificationFunc();
    1d2a:	e0 91 8e 00 	lds	r30, 0x008E
    1d2e:	f0 91 8f 00 	lds	r31, 0x008F
    1d32:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	ff 91       	pop	r31
    1d3a:	ef 91       	pop	r30
    1d3c:	bf 91       	pop	r27
    1d3e:	af 91       	pop	r26
    1d40:	9f 91       	pop	r25
    1d42:	8f 91       	pop	r24
    1d44:	7f 91       	pop	r23
    1d46:	6f 91       	pop	r22
    1d48:	5f 91       	pop	r21
    1d4a:	4f 91       	pop	r20
    1d4c:	3f 91       	pop	r19
    1d4e:	2f 91       	pop	r18
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	0f 90       	pop	r0
    1d56:	1f 90       	pop	r1
    1d58:	18 95       	reti

00001d5a <__vector_10>:


/*Compare Match Event ISR*/
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
    1d5a:	1f 92       	push	r1
    1d5c:	0f 92       	push	r0
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	0f 92       	push	r0
    1d62:	11 24       	eor	r1, r1
    1d64:	2f 93       	push	r18
    1d66:	3f 93       	push	r19
    1d68:	4f 93       	push	r20
    1d6a:	5f 93       	push	r21
    1d6c:	6f 93       	push	r22
    1d6e:	7f 93       	push	r23
    1d70:	8f 93       	push	r24
    1d72:	9f 93       	push	r25
    1d74:	af 93       	push	r26
    1d76:	bf 93       	push	r27
    1d78:	ef 93       	push	r30
    1d7a:	ff 93       	push	r31
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMER_pvCTCNotificationFunc != NULL)
    1d84:	80 91 8c 00 	lds	r24, 0x008C
    1d88:	90 91 8d 00 	lds	r25, 0x008D
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	29 f0       	breq	.+10     	; 0x1d9a <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMER_pvCTCNotificationFunc();
    1d90:	e0 91 8c 00 	lds	r30, 0x008C
    1d94:	f0 91 8d 00 	lds	r31, 0x008D
    1d98:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	0f 90       	pop	r0
    1dbc:	1f 90       	pop	r1
    1dbe:	18 95       	reti

00001dc0 <main>:

void MAIN_voidExternalTriggerHandler(void);

/*It is the main*/
void main(void)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
	 *
	 * This application count the external triggers on pin B0 and display this counter on the lcd.
	 * */

	/*Peripherals Initialization*/
	PORT_voidInit();
    1dc8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <PORT_voidInit>
	GIE_voidEnable();
    1dcc:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <GIE_voidEnable>
	TIMER_voidInit();
    1dd0:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TIMER_voidInit>
	TIMER_u8SetCallBackCompareMatch(MAIN_voidExternalTriggerHandler);
    1dd4:	85 ef       	ldi	r24, 0xF5	; 245
    1dd6:	9e e0       	ldi	r25, 0x0E	; 14
    1dd8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <TIMER_u8SetCallBackCompareMatch>

	/*Initialize LCD*/
	CLCD_voidInit();
    1ddc:	0e 94 a2 06 	call	0xd44	; 0xd44 <CLCD_voidInit>
	CLCD_u8SendString("Counts: ");
    1de0:	86 e6       	ldi	r24, 0x66	; 102
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 94 50 07 	call	0xea0	; 0xea0 <CLCD_u8SendString>
    1de8:	ff cf       	rjmp	.-2      	; 0x1de8 <main+0x28>

00001dea <MAIN_voidExternalTriggerHandler>:
	{
	}
}

void MAIN_voidExternalTriggerHandler(void)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	/*Define Counter*/
	static uint8 Local_u8Counter = 0;
	Local_u8Counter++;
    1df2:	80 91 90 00 	lds	r24, 0x0090
    1df6:	8f 5f       	subi	r24, 0xFF	; 255
    1df8:	80 93 90 00 	sts	0x0090, r24

	/*Print the counter to the lcd*/
	CLCD_u8GoToXY(8, 0);
    1dfc:	88 e0       	ldi	r24, 0x08	; 8
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <CLCD_u8GoToXY>
	CLCD_u8SendString("    ");
    1e04:	8f e6       	ldi	r24, 0x6F	; 111
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 50 07 	call	0xea0	; 0xea0 <CLCD_u8SendString>
	CLCD_u8GoToXY(8, 0);
    1e0c:	88 e0       	ldi	r24, 0x08	; 8
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <CLCD_u8GoToXY>
	CLCD_voidSendDecimalNumber(Local_u8Counter);
    1e14:	80 91 90 00 	lds	r24, 0x0090
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a0 e0       	ldi	r26, 0x00	; 0
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 83 07 	call	0xf06	; 0xf06 <CLCD_voidSendDecimalNumber>
}
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <__divmodsi4>:
    1e2e:	97 fb       	bst	r25, 7
    1e30:	09 2e       	mov	r0, r25
    1e32:	05 26       	eor	r0, r21
    1e34:	0e d0       	rcall	.+28     	; 0x1e52 <__divmodsi4_neg1>
    1e36:	57 fd       	sbrc	r21, 7
    1e38:	04 d0       	rcall	.+8      	; 0x1e42 <__divmodsi4_neg2>
    1e3a:	14 d0       	rcall	.+40     	; 0x1e64 <__udivmodsi4>
    1e3c:	0a d0       	rcall	.+20     	; 0x1e52 <__divmodsi4_neg1>
    1e3e:	00 1c       	adc	r0, r0
    1e40:	38 f4       	brcc	.+14     	; 0x1e50 <__divmodsi4_exit>

00001e42 <__divmodsi4_neg2>:
    1e42:	50 95       	com	r21
    1e44:	40 95       	com	r20
    1e46:	30 95       	com	r19
    1e48:	21 95       	neg	r18
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e4e:	5f 4f       	sbci	r21, 0xFF	; 255

00001e50 <__divmodsi4_exit>:
    1e50:	08 95       	ret

00001e52 <__divmodsi4_neg1>:
    1e52:	f6 f7       	brtc	.-4      	; 0x1e50 <__divmodsi4_exit>
    1e54:	90 95       	com	r25
    1e56:	80 95       	com	r24
    1e58:	70 95       	com	r23
    1e5a:	61 95       	neg	r22
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e60:	9f 4f       	sbci	r25, 0xFF	; 255
    1e62:	08 95       	ret

00001e64 <__udivmodsi4>:
    1e64:	a1 e2       	ldi	r26, 0x21	; 33
    1e66:	1a 2e       	mov	r1, r26
    1e68:	aa 1b       	sub	r26, r26
    1e6a:	bb 1b       	sub	r27, r27
    1e6c:	fd 01       	movw	r30, r26
    1e6e:	0d c0       	rjmp	.+26     	; 0x1e8a <__udivmodsi4_ep>

00001e70 <__udivmodsi4_loop>:
    1e70:	aa 1f       	adc	r26, r26
    1e72:	bb 1f       	adc	r27, r27
    1e74:	ee 1f       	adc	r30, r30
    1e76:	ff 1f       	adc	r31, r31
    1e78:	a2 17       	cp	r26, r18
    1e7a:	b3 07       	cpc	r27, r19
    1e7c:	e4 07       	cpc	r30, r20
    1e7e:	f5 07       	cpc	r31, r21
    1e80:	20 f0       	brcs	.+8      	; 0x1e8a <__udivmodsi4_ep>
    1e82:	a2 1b       	sub	r26, r18
    1e84:	b3 0b       	sbc	r27, r19
    1e86:	e4 0b       	sbc	r30, r20
    1e88:	f5 0b       	sbc	r31, r21

00001e8a <__udivmodsi4_ep>:
    1e8a:	66 1f       	adc	r22, r22
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	88 1f       	adc	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	1a 94       	dec	r1
    1e94:	69 f7       	brne	.-38     	; 0x1e70 <__udivmodsi4_loop>
    1e96:	60 95       	com	r22
    1e98:	70 95       	com	r23
    1e9a:	80 95       	com	r24
    1e9c:	90 95       	com	r25
    1e9e:	9b 01       	movw	r18, r22
    1ea0:	ac 01       	movw	r20, r24
    1ea2:	bd 01       	movw	r22, r26
    1ea4:	cf 01       	movw	r24, r30
    1ea6:	08 95       	ret

00001ea8 <__prologue_saves__>:
    1ea8:	2f 92       	push	r2
    1eaa:	3f 92       	push	r3
    1eac:	4f 92       	push	r4
    1eae:	5f 92       	push	r5
    1eb0:	6f 92       	push	r6
    1eb2:	7f 92       	push	r7
    1eb4:	8f 92       	push	r8
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	ca 1b       	sub	r28, r26
    1ed2:	db 0b       	sbc	r29, r27
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	09 94       	ijmp

00001ee0 <__epilogue_restores__>:
    1ee0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ee2:	39 88       	ldd	r3, Y+17	; 0x11
    1ee4:	48 88       	ldd	r4, Y+16	; 0x10
    1ee6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ee8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ef0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ef2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ef4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ef6:	df 80       	ldd	r13, Y+7	; 0x07
    1ef8:	ee 80       	ldd	r14, Y+6	; 0x06
    1efa:	fd 80       	ldd	r15, Y+5	; 0x05
    1efc:	0c 81       	ldd	r16, Y+4	; 0x04
    1efe:	1b 81       	ldd	r17, Y+3	; 0x03
    1f00:	aa 81       	ldd	r26, Y+2	; 0x02
    1f02:	b9 81       	ldd	r27, Y+1	; 0x01
    1f04:	ce 0f       	add	r28, r30
    1f06:	d1 1d       	adc	r29, r1
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	ed 01       	movw	r28, r26
    1f14:	08 95       	ret

00001f16 <_exit>:
    1f16:	f8 94       	cli

00001f18 <__stop_program>:
    1f18:	ff cf       	rjmp	.-2      	; 0x1f18 <__stop_program>
