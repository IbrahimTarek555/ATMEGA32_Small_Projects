
ADC_Lec3BuzzerApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e9e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00001e9e  00001f12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001374  00000000  00000000  00002034  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a9f  00000000  00000000  000033a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00003e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f5  00000000  00000000  00003fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002216  00000000  00000000  000041dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b8  00000000  00000000  000063f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001136  00000000  00000000  000076aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000087e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d2  00000000  00000000  000089a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095a  00000000  00000000  00008c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000095cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3b 0b 	call	0x1676	; 0x1676 <main>
      7a:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 cc 04 	call	0x998	; 0x998 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__epilogue_restores__+0x20>

000008a6 <__floatunsisf>:
     8a6:	a8 e0       	ldi	r26, 0x08	; 8
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__prologue_saves__+0x10>
     8b2:	7b 01       	movw	r14, r22
     8b4:	8c 01       	movw	r16, r24
     8b6:	61 15       	cp	r22, r1
     8b8:	71 05       	cpc	r23, r1
     8ba:	81 05       	cpc	r24, r1
     8bc:	91 05       	cpc	r25, r1
     8be:	19 f4       	brne	.+6      	; 0x8c6 <__floatunsisf+0x20>
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	60 c0       	rjmp	.+192    	; 0x986 <__floatunsisf+0xe0>
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	8e e1       	ldi	r24, 0x1E	; 30
     8cc:	c8 2e       	mov	r12, r24
     8ce:	d1 2c       	mov	r13, r1
     8d0:	dc 82       	std	Y+4, r13	; 0x04
     8d2:	cb 82       	std	Y+3, r12	; 0x03
     8d4:	ed 82       	std	Y+5, r14	; 0x05
     8d6:	fe 82       	std	Y+6, r15	; 0x06
     8d8:	0f 83       	std	Y+7, r16	; 0x07
     8da:	18 87       	std	Y+8, r17	; 0x08
     8dc:	c8 01       	movw	r24, r16
     8de:	b7 01       	movw	r22, r14
     8e0:	0e 94 cc 04 	call	0x998	; 0x998 <__clzsi2>
     8e4:	fc 01       	movw	r30, r24
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	f7 ff       	sbrs	r31, 7
     8ea:	3b c0       	rjmp	.+118    	; 0x962 <__floatunsisf+0xbc>
     8ec:	22 27       	eor	r18, r18
     8ee:	33 27       	eor	r19, r19
     8f0:	2e 1b       	sub	r18, r30
     8f2:	3f 0b       	sbc	r19, r31
     8f4:	57 01       	movw	r10, r14
     8f6:	68 01       	movw	r12, r16
     8f8:	02 2e       	mov	r0, r18
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <__floatunsisf+0x5e>
     8fc:	d6 94       	lsr	r13
     8fe:	c7 94       	ror	r12
     900:	b7 94       	ror	r11
     902:	a7 94       	ror	r10
     904:	0a 94       	dec	r0
     906:	d2 f7       	brpl	.-12     	; 0x8fc <__floatunsisf+0x56>
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	04 c0       	rjmp	.+8      	; 0x922 <__floatunsisf+0x7c>
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	aa 1f       	adc	r26, r26
     920:	bb 1f       	adc	r27, r27
     922:	2a 95       	dec	r18
     924:	d2 f7       	brpl	.-12     	; 0x91a <__floatunsisf+0x74>
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	a1 09       	sbc	r26, r1
     92a:	b1 09       	sbc	r27, r1
     92c:	8e 21       	and	r24, r14
     92e:	9f 21       	and	r25, r15
     930:	a0 23       	and	r26, r16
     932:	b1 23       	and	r27, r17
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	a1 05       	cpc	r26, r1
     938:	b1 05       	cpc	r27, r1
     93a:	21 f0       	breq	.+8      	; 0x944 <__floatunsisf+0x9e>
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	4a 29       	or	r20, r10
     946:	5b 29       	or	r21, r11
     948:	6c 29       	or	r22, r12
     94a:	7d 29       	or	r23, r13
     94c:	4d 83       	std	Y+5, r20	; 0x05
     94e:	5e 83       	std	Y+6, r21	; 0x06
     950:	6f 83       	std	Y+7, r22	; 0x07
     952:	78 87       	std	Y+8, r23	; 0x08
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	8e 1b       	sub	r24, r30
     95a:	9f 0b       	sbc	r25, r31
     95c:	9c 83       	std	Y+4, r25	; 0x04
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	12 c0       	rjmp	.+36     	; 0x986 <__floatunsisf+0xe0>
     962:	30 97       	sbiw	r30, 0x00	; 0
     964:	81 f0       	breq	.+32     	; 0x986 <__floatunsisf+0xe0>
     966:	0e 2e       	mov	r0, r30
     968:	04 c0       	rjmp	.+8      	; 0x972 <__floatunsisf+0xcc>
     96a:	ee 0c       	add	r14, r14
     96c:	ff 1c       	adc	r15, r15
     96e:	00 1f       	adc	r16, r16
     970:	11 1f       	adc	r17, r17
     972:	0a 94       	dec	r0
     974:	d2 f7       	brpl	.-12     	; 0x96a <__floatunsisf+0xc4>
     976:	ed 82       	std	Y+5, r14	; 0x05
     978:	fe 82       	std	Y+6, r15	; 0x06
     97a:	0f 83       	std	Y+7, r16	; 0x07
     97c:	18 87       	std	Y+8, r17	; 0x08
     97e:	ce 1a       	sub	r12, r30
     980:	df 0a       	sbc	r13, r31
     982:	dc 82       	std	Y+4, r13	; 0x04
     984:	cb 82       	std	Y+3, r12	; 0x03
     986:	1a 82       	std	Y+2, r1	; 0x02
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	0e 94 1b 05 	call	0xa36	; 0xa36 <__pack_f>
     990:	28 96       	adiw	r28, 0x08	; 8
     992:	ea e0       	ldi	r30, 0x0A	; 10
     994:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__epilogue_restores__+0x10>

00000998 <__clzsi2>:
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	7b 01       	movw	r14, r22
     9a2:	8c 01       	movw	r16, r24
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	e8 16       	cp	r14, r24
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	f8 06       	cpc	r15, r24
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	08 07       	cpc	r16, r24
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	18 07       	cpc	r17, r24
     9b4:	88 f4       	brcc	.+34     	; 0x9d8 <__clzsi2+0x40>
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	e8 16       	cp	r14, r24
     9ba:	f1 04       	cpc	r15, r1
     9bc:	01 05       	cpc	r16, r1
     9be:	11 05       	cpc	r17, r1
     9c0:	31 f0       	breq	.+12     	; 0x9ce <__clzsi2+0x36>
     9c2:	28 f0       	brcs	.+10     	; 0x9ce <__clzsi2+0x36>
     9c4:	88 e0       	ldi	r24, 0x08	; 8
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	17 c0       	rjmp	.+46     	; 0x9fc <__clzsi2+0x64>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	12 c0       	rjmp	.+36     	; 0x9fc <__clzsi2+0x64>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	e8 16       	cp	r14, r24
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	f8 06       	cpc	r15, r24
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	08 07       	cpc	r16, r24
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	18 07       	cpc	r17, r24
     9e8:	28 f0       	brcs	.+10     	; 0x9f4 <__clzsi2+0x5c>
     9ea:	88 e1       	ldi	r24, 0x18	; 24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <__clzsi2+0x64>
     9f4:	80 e1       	ldi	r24, 0x10	; 16
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	20 e2       	ldi	r18, 0x20	; 32
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	28 1b       	sub	r18, r24
     a06:	39 0b       	sbc	r19, r25
     a08:	4a 0b       	sbc	r20, r26
     a0a:	5b 0b       	sbc	r21, r27
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__clzsi2+0x7e>
     a0e:	16 95       	lsr	r17
     a10:	07 95       	ror	r16
     a12:	f7 94       	ror	r15
     a14:	e7 94       	ror	r14
     a16:	8a 95       	dec	r24
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__clzsi2+0x76>
     a1a:	f7 01       	movw	r30, r14
     a1c:	e8 59       	subi	r30, 0x98	; 152
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	80 81       	ld	r24, Z
     a22:	28 1b       	sub	r18, r24
     a24:	31 09       	sbc	r19, r1
     a26:	41 09       	sbc	r20, r1
     a28:	51 09       	sbc	r21, r1
     a2a:	c9 01       	movw	r24, r18
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	08 95       	ret

00000a36 <__pack_f>:
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	fc 01       	movw	r30, r24
     a42:	e4 80       	ldd	r14, Z+4	; 0x04
     a44:	f5 80       	ldd	r15, Z+5	; 0x05
     a46:	06 81       	ldd	r16, Z+6	; 0x06
     a48:	17 81       	ldd	r17, Z+7	; 0x07
     a4a:	d1 80       	ldd	r13, Z+1	; 0x01
     a4c:	80 81       	ld	r24, Z
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	48 f4       	brcc	.+18     	; 0xa64 <__pack_f+0x2e>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e1       	ldi	r26, 0x10	; 16
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e8 2a       	or	r14, r24
     a5c:	f9 2a       	or	r15, r25
     a5e:	0a 2b       	or	r16, r26
     a60:	1b 2b       	or	r17, r27
     a62:	a5 c0       	rjmp	.+330    	; 0xbae <__pack_f+0x178>
     a64:	84 30       	cpi	r24, 0x04	; 4
     a66:	09 f4       	brne	.+2      	; 0xa6a <__pack_f+0x34>
     a68:	9f c0       	rjmp	.+318    	; 0xba8 <__pack_f+0x172>
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	21 f4       	brne	.+8      	; 0xa76 <__pack_f+0x40>
     a6e:	ee 24       	eor	r14, r14
     a70:	ff 24       	eor	r15, r15
     a72:	87 01       	movw	r16, r14
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <__pack_f+0x4a>
     a76:	e1 14       	cp	r14, r1
     a78:	f1 04       	cpc	r15, r1
     a7a:	01 05       	cpc	r16, r1
     a7c:	11 05       	cpc	r17, r1
     a7e:	19 f4       	brne	.+6      	; 0xa86 <__pack_f+0x50>
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	96 c0       	rjmp	.+300    	; 0xbb2 <__pack_f+0x17c>
     a86:	62 81       	ldd	r22, Z+2	; 0x02
     a88:	73 81       	ldd	r23, Z+3	; 0x03
     a8a:	9f ef       	ldi	r25, 0xFF	; 255
     a8c:	62 38       	cpi	r22, 0x82	; 130
     a8e:	79 07       	cpc	r23, r25
     a90:	0c f0       	brlt	.+2      	; 0xa94 <__pack_f+0x5e>
     a92:	5b c0       	rjmp	.+182    	; 0xb4a <__pack_f+0x114>
     a94:	22 e8       	ldi	r18, 0x82	; 130
     a96:	3f ef       	ldi	r19, 0xFF	; 255
     a98:	26 1b       	sub	r18, r22
     a9a:	37 0b       	sbc	r19, r23
     a9c:	2a 31       	cpi	r18, 0x1A	; 26
     a9e:	31 05       	cpc	r19, r1
     aa0:	2c f0       	brlt	.+10     	; 0xaac <__pack_f+0x76>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	2a c0       	rjmp	.+84     	; 0xb00 <__pack_f+0xca>
     aac:	b8 01       	movw	r22, r16
     aae:	a7 01       	movw	r20, r14
     ab0:	02 2e       	mov	r0, r18
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <__pack_f+0x86>
     ab4:	76 95       	lsr	r23
     ab6:	67 95       	ror	r22
     ab8:	57 95       	ror	r21
     aba:	47 95       	ror	r20
     abc:	0a 94       	dec	r0
     abe:	d2 f7       	brpl	.-12     	; 0xab4 <__pack_f+0x7e>
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__pack_f+0x9c>
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	aa 1f       	adc	r26, r26
     ad0:	bb 1f       	adc	r27, r27
     ad2:	2a 95       	dec	r18
     ad4:	d2 f7       	brpl	.-12     	; 0xaca <__pack_f+0x94>
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	a1 09       	sbc	r26, r1
     ada:	b1 09       	sbc	r27, r1
     adc:	8e 21       	and	r24, r14
     ade:	9f 21       	and	r25, r15
     ae0:	a0 23       	and	r26, r16
     ae2:	b1 23       	and	r27, r17
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	a1 05       	cpc	r26, r1
     ae8:	b1 05       	cpc	r27, r1
     aea:	21 f0       	breq	.+8      	; 0xaf4 <__pack_f+0xbe>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	9a 01       	movw	r18, r20
     af6:	ab 01       	movw	r20, r22
     af8:	28 2b       	or	r18, r24
     afa:	39 2b       	or	r19, r25
     afc:	4a 2b       	or	r20, r26
     afe:	5b 2b       	or	r21, r27
     b00:	da 01       	movw	r26, r20
     b02:	c9 01       	movw	r24, r18
     b04:	8f 77       	andi	r24, 0x7F	; 127
     b06:	90 70       	andi	r25, 0x00	; 0
     b08:	a0 70       	andi	r26, 0x00	; 0
     b0a:	b0 70       	andi	r27, 0x00	; 0
     b0c:	80 34       	cpi	r24, 0x40	; 64
     b0e:	91 05       	cpc	r25, r1
     b10:	a1 05       	cpc	r26, r1
     b12:	b1 05       	cpc	r27, r1
     b14:	39 f4       	brne	.+14     	; 0xb24 <__pack_f+0xee>
     b16:	27 ff       	sbrs	r18, 7
     b18:	09 c0       	rjmp	.+18     	; 0xb2c <__pack_f+0xf6>
     b1a:	20 5c       	subi	r18, 0xC0	; 192
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	4f 4f       	sbci	r20, 0xFF	; 255
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__pack_f+0xf6>
     b24:	21 5c       	subi	r18, 0xC1	; 193
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	4f 4f       	sbci	r20, 0xFF	; 255
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	20 30       	cpi	r18, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	3a 07       	cpc	r19, r26
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	4a 07       	cpc	r20, r26
     b3a:	a0 e4       	ldi	r26, 0x40	; 64
     b3c:	5a 07       	cpc	r21, r26
     b3e:	10 f0       	brcs	.+4      	; 0xb44 <__pack_f+0x10e>
     b40:	e1 e0       	ldi	r30, 0x01	; 1
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	79 01       	movw	r14, r18
     b46:	8a 01       	movw	r16, r20
     b48:	27 c0       	rjmp	.+78     	; 0xb98 <__pack_f+0x162>
     b4a:	60 38       	cpi	r22, 0x80	; 128
     b4c:	71 05       	cpc	r23, r1
     b4e:	64 f5       	brge	.+88     	; 0xba8 <__pack_f+0x172>
     b50:	fb 01       	movw	r30, r22
     b52:	e1 58       	subi	r30, 0x81	; 129
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	d8 01       	movw	r26, r16
     b58:	c7 01       	movw	r24, r14
     b5a:	8f 77       	andi	r24, 0x7F	; 127
     b5c:	90 70       	andi	r25, 0x00	; 0
     b5e:	a0 70       	andi	r26, 0x00	; 0
     b60:	b0 70       	andi	r27, 0x00	; 0
     b62:	80 34       	cpi	r24, 0x40	; 64
     b64:	91 05       	cpc	r25, r1
     b66:	a1 05       	cpc	r26, r1
     b68:	b1 05       	cpc	r27, r1
     b6a:	39 f4       	brne	.+14     	; 0xb7a <__pack_f+0x144>
     b6c:	e7 fe       	sbrs	r14, 7
     b6e:	0d c0       	rjmp	.+26     	; 0xb8a <__pack_f+0x154>
     b70:	80 e4       	ldi	r24, 0x40	; 64
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__pack_f+0x14c>
     b7a:	8f e3       	ldi	r24, 0x3F	; 63
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e8 0e       	add	r14, r24
     b84:	f9 1e       	adc	r15, r25
     b86:	0a 1f       	adc	r16, r26
     b88:	1b 1f       	adc	r17, r27
     b8a:	17 ff       	sbrs	r17, 7
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <__pack_f+0x162>
     b8e:	16 95       	lsr	r17
     b90:	07 95       	ror	r16
     b92:	f7 94       	ror	r15
     b94:	e7 94       	ror	r14
     b96:	31 96       	adiw	r30, 0x01	; 1
     b98:	87 e0       	ldi	r24, 0x07	; 7
     b9a:	16 95       	lsr	r17
     b9c:	07 95       	ror	r16
     b9e:	f7 94       	ror	r15
     ba0:	e7 94       	ror	r14
     ba2:	8a 95       	dec	r24
     ba4:	d1 f7       	brne	.-12     	; 0xb9a <__pack_f+0x164>
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <__pack_f+0x17c>
     ba8:	ee 24       	eor	r14, r14
     baa:	ff 24       	eor	r15, r15
     bac:	87 01       	movw	r16, r14
     bae:	ef ef       	ldi	r30, 0xFF	; 255
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	6e 2f       	mov	r22, r30
     bb4:	67 95       	ror	r22
     bb6:	66 27       	eor	r22, r22
     bb8:	67 95       	ror	r22
     bba:	90 2f       	mov	r25, r16
     bbc:	9f 77       	andi	r25, 0x7F	; 127
     bbe:	d7 94       	ror	r13
     bc0:	dd 24       	eor	r13, r13
     bc2:	d7 94       	ror	r13
     bc4:	8e 2f       	mov	r24, r30
     bc6:	86 95       	lsr	r24
     bc8:	49 2f       	mov	r20, r25
     bca:	46 2b       	or	r20, r22
     bcc:	58 2f       	mov	r21, r24
     bce:	5d 29       	or	r21, r13
     bd0:	b7 01       	movw	r22, r14
     bd2:	ca 01       	movw	r24, r20
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	08 95       	ret

00000be0 <__unpack_f>:
     be0:	fc 01       	movw	r30, r24
     be2:	db 01       	movw	r26, r22
     be4:	40 81       	ld	r20, Z
     be6:	51 81       	ldd	r21, Z+1	; 0x01
     be8:	22 81       	ldd	r18, Z+2	; 0x02
     bea:	62 2f       	mov	r22, r18
     bec:	6f 77       	andi	r22, 0x7F	; 127
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	22 1f       	adc	r18, r18
     bf2:	22 27       	eor	r18, r18
     bf4:	22 1f       	adc	r18, r18
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	89 2f       	mov	r24, r25
     bfa:	88 0f       	add	r24, r24
     bfc:	82 2b       	or	r24, r18
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	99 1f       	adc	r25, r25
     c04:	99 27       	eor	r25, r25
     c06:	99 1f       	adc	r25, r25
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	9c 93       	st	X, r25
     c0c:	11 97       	sbiw	r26, 0x01	; 1
     c0e:	21 15       	cp	r18, r1
     c10:	31 05       	cpc	r19, r1
     c12:	a9 f5       	brne	.+106    	; 0xc7e <__unpack_f+0x9e>
     c14:	41 15       	cp	r20, r1
     c16:	51 05       	cpc	r21, r1
     c18:	61 05       	cpc	r22, r1
     c1a:	71 05       	cpc	r23, r1
     c1c:	11 f4       	brne	.+4      	; 0xc22 <__unpack_f+0x42>
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	37 c0       	rjmp	.+110    	; 0xc90 <__unpack_f+0xb0>
     c22:	82 e8       	ldi	r24, 0x82	; 130
     c24:	9f ef       	ldi	r25, 0xFF	; 255
     c26:	13 96       	adiw	r26, 0x03	; 3
     c28:	9c 93       	st	X, r25
     c2a:	8e 93       	st	-X, r24
     c2c:	12 97       	sbiw	r26, 0x02	; 2
     c2e:	9a 01       	movw	r18, r20
     c30:	ab 01       	movw	r20, r22
     c32:	67 e0       	ldi	r22, 0x07	; 7
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	44 1f       	adc	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	6a 95       	dec	r22
     c3e:	d1 f7       	brne	.-12     	; 0xc34 <__unpack_f+0x54>
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	8c 93       	st	X, r24
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__unpack_f+0x80>
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	44 1f       	adc	r20, r20
     c4c:	55 1f       	adc	r21, r21
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	8d 91       	ld	r24, X+
     c52:	9c 91       	ld	r25, X
     c54:	13 97       	sbiw	r26, 0x03	; 3
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	13 96       	adiw	r26, 0x03	; 3
     c5a:	9c 93       	st	X, r25
     c5c:	8e 93       	st	-X, r24
     c5e:	12 97       	sbiw	r26, 0x02	; 2
     c60:	20 30       	cpi	r18, 0x00	; 0
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	38 07       	cpc	r19, r24
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	48 07       	cpc	r20, r24
     c6a:	80 e4       	ldi	r24, 0x40	; 64
     c6c:	58 07       	cpc	r21, r24
     c6e:	58 f3       	brcs	.-42     	; 0xc46 <__unpack_f+0x66>
     c70:	14 96       	adiw	r26, 0x04	; 4
     c72:	2d 93       	st	X+, r18
     c74:	3d 93       	st	X+, r19
     c76:	4d 93       	st	X+, r20
     c78:	5c 93       	st	X, r21
     c7a:	17 97       	sbiw	r26, 0x07	; 7
     c7c:	08 95       	ret
     c7e:	2f 3f       	cpi	r18, 0xFF	; 255
     c80:	31 05       	cpc	r19, r1
     c82:	79 f4       	brne	.+30     	; 0xca2 <__unpack_f+0xc2>
     c84:	41 15       	cp	r20, r1
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	19 f4       	brne	.+6      	; 0xc94 <__unpack_f+0xb4>
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	8c 93       	st	X, r24
     c92:	08 95       	ret
     c94:	64 ff       	sbrs	r22, 4
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <__unpack_f+0xbe>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	8c 93       	st	X, r24
     c9c:	12 c0       	rjmp	.+36     	; 0xcc2 <__unpack_f+0xe2>
     c9e:	1c 92       	st	X, r1
     ca0:	10 c0       	rjmp	.+32     	; 0xcc2 <__unpack_f+0xe2>
     ca2:	2f 57       	subi	r18, 0x7F	; 127
     ca4:	30 40       	sbci	r19, 0x00	; 0
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	3c 93       	st	X, r19
     caa:	2e 93       	st	-X, r18
     cac:	12 97       	sbiw	r26, 0x02	; 2
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	8c 93       	st	X, r24
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	44 0f       	add	r20, r20
     cb6:	55 1f       	adc	r21, r21
     cb8:	66 1f       	adc	r22, r22
     cba:	77 1f       	adc	r23, r23
     cbc:	8a 95       	dec	r24
     cbe:	d1 f7       	brne	.-12     	; 0xcb4 <__unpack_f+0xd4>
     cc0:	70 64       	ori	r23, 0x40	; 64
     cc2:	14 96       	adiw	r26, 0x04	; 4
     cc4:	4d 93       	st	X+, r20
     cc6:	5d 93       	st	X+, r21
     cc8:	6d 93       	st	X+, r22
     cca:	7c 93       	st	X, r23
     ccc:	17 97       	sbiw	r26, 0x07	; 7
     cce:	08 95       	ret

00000cd0 <__fpcmp_parts_f>:
     cd0:	1f 93       	push	r17
     cd2:	dc 01       	movw	r26, r24
     cd4:	fb 01       	movw	r30, r22
     cd6:	9c 91       	ld	r25, X
     cd8:	92 30       	cpi	r25, 0x02	; 2
     cda:	08 f4       	brcc	.+2      	; 0xcde <__fpcmp_parts_f+0xe>
     cdc:	47 c0       	rjmp	.+142    	; 0xd6c <__fpcmp_parts_f+0x9c>
     cde:	80 81       	ld	r24, Z
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <__fpcmp_parts_f+0x16>
     ce4:	43 c0       	rjmp	.+134    	; 0xd6c <__fpcmp_parts_f+0x9c>
     ce6:	94 30       	cpi	r25, 0x04	; 4
     ce8:	51 f4       	brne	.+20     	; 0xcfe <__fpcmp_parts_f+0x2e>
     cea:	11 96       	adiw	r26, 0x01	; 1
     cec:	1c 91       	ld	r17, X
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	99 f5       	brne	.+102    	; 0xd58 <__fpcmp_parts_f+0x88>
     cf2:	81 81       	ldd	r24, Z+1	; 0x01
     cf4:	68 2f       	mov	r22, r24
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	61 1b       	sub	r22, r17
     cfa:	71 09       	sbc	r23, r1
     cfc:	3f c0       	rjmp	.+126    	; 0xd7c <__fpcmp_parts_f+0xac>
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	21 f0       	breq	.+8      	; 0xd0a <__fpcmp_parts_f+0x3a>
     d02:	92 30       	cpi	r25, 0x02	; 2
     d04:	31 f4       	brne	.+12     	; 0xd12 <__fpcmp_parts_f+0x42>
     d06:	82 30       	cpi	r24, 0x02	; 2
     d08:	b9 f1       	breq	.+110    	; 0xd78 <__fpcmp_parts_f+0xa8>
     d0a:	81 81       	ldd	r24, Z+1	; 0x01
     d0c:	88 23       	and	r24, r24
     d0e:	89 f1       	breq	.+98     	; 0xd72 <__fpcmp_parts_f+0xa2>
     d10:	2d c0       	rjmp	.+90     	; 0xd6c <__fpcmp_parts_f+0x9c>
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	1c 91       	ld	r17, X
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	f1 f0       	breq	.+60     	; 0xd58 <__fpcmp_parts_f+0x88>
     d1c:	81 81       	ldd	r24, Z+1	; 0x01
     d1e:	18 17       	cp	r17, r24
     d20:	d9 f4       	brne	.+54     	; 0xd58 <__fpcmp_parts_f+0x88>
     d22:	12 96       	adiw	r26, 0x02	; 2
     d24:	2d 91       	ld	r18, X+
     d26:	3c 91       	ld	r19, X
     d28:	13 97       	sbiw	r26, 0x03	; 3
     d2a:	82 81       	ldd	r24, Z+2	; 0x02
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	82 17       	cp	r24, r18
     d30:	93 07       	cpc	r25, r19
     d32:	94 f0       	brlt	.+36     	; 0xd58 <__fpcmp_parts_f+0x88>
     d34:	28 17       	cp	r18, r24
     d36:	39 07       	cpc	r19, r25
     d38:	bc f0       	brlt	.+46     	; 0xd68 <__fpcmp_parts_f+0x98>
     d3a:	14 96       	adiw	r26, 0x04	; 4
     d3c:	8d 91       	ld	r24, X+
     d3e:	9d 91       	ld	r25, X+
     d40:	0d 90       	ld	r0, X+
     d42:	bc 91       	ld	r27, X
     d44:	a0 2d       	mov	r26, r0
     d46:	24 81       	ldd	r18, Z+4	; 0x04
     d48:	35 81       	ldd	r19, Z+5	; 0x05
     d4a:	46 81       	ldd	r20, Z+6	; 0x06
     d4c:	57 81       	ldd	r21, Z+7	; 0x07
     d4e:	28 17       	cp	r18, r24
     d50:	39 07       	cpc	r19, r25
     d52:	4a 07       	cpc	r20, r26
     d54:	5b 07       	cpc	r21, r27
     d56:	18 f4       	brcc	.+6      	; 0xd5e <__fpcmp_parts_f+0x8e>
     d58:	11 23       	and	r17, r17
     d5a:	41 f0       	breq	.+16     	; 0xd6c <__fpcmp_parts_f+0x9c>
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <__fpcmp_parts_f+0xa2>
     d5e:	82 17       	cp	r24, r18
     d60:	93 07       	cpc	r25, r19
     d62:	a4 07       	cpc	r26, r20
     d64:	b5 07       	cpc	r27, r21
     d66:	40 f4       	brcc	.+16     	; 0xd78 <__fpcmp_parts_f+0xa8>
     d68:	11 23       	and	r17, r17
     d6a:	19 f0       	breq	.+6      	; 0xd72 <__fpcmp_parts_f+0xa2>
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <__fpcmp_parts_f+0xac>
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	7f ef       	ldi	r23, 0xFF	; 255
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <__fpcmp_parts_f+0xac>
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	cb 01       	movw	r24, r22
     d7e:	1f 91       	pop	r17
     d80:	08 95       	ret

00000d82 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	28 97       	sbiw	r28, 0x08	; 8
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	8a 83       	std	Y+2, r24	; 0x02
     d98:	6b 83       	std	Y+3, r22	; 0x03
     d9a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
     d9c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	88 30       	cpi	r24, 0x08	; 8
     da2:	08 f0       	brcs	.+2      	; 0xda6 <DIO_u8SetPinDirection+0x24>
     da4:	f4 c0       	rjmp	.+488    	; 0xf8e <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	09 f0       	breq	.+2      	; 0xdae <DIO_u8SetPinDirection+0x2c>
     dac:	72 c0       	rjmp	.+228    	; 0xe92 <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	38 87       	std	Y+8, r19	; 0x08
     db6:	2f 83       	std	Y+7, r18	; 0x07
     db8:	8f 81       	ldd	r24, Y+7	; 0x07
     dba:	98 85       	ldd	r25, Y+8	; 0x08
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	49 f1       	breq	.+82     	; 0xe14 <DIO_u8SetPinDirection+0x92>
     dc2:	2f 81       	ldd	r18, Y+7	; 0x07
     dc4:	38 85       	ldd	r19, Y+8	; 0x08
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	2c f4       	brge	.+10     	; 0xdd6 <DIO_u8SetPinDirection+0x54>
     dcc:	8f 81       	ldd	r24, Y+7	; 0x07
     dce:	98 85       	ldd	r25, Y+8	; 0x08
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	61 f0       	breq	.+24     	; 0xdec <DIO_u8SetPinDirection+0x6a>
     dd4:	5b c0       	rjmp	.+182    	; 0xe8c <DIO_u8SetPinDirection+0x10a>
     dd6:	2f 81       	ldd	r18, Y+7	; 0x07
     dd8:	38 85       	ldd	r19, Y+8	; 0x08
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	71 f1       	breq	.+92     	; 0xe3c <DIO_u8SetPinDirection+0xba>
     de0:	8f 81       	ldd	r24, Y+7	; 0x07
     de2:	98 85       	ldd	r25, Y+8	; 0x08
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	91 05       	cpc	r25, r1
     de8:	e9 f1       	breq	.+122    	; 0xe64 <DIO_u8SetPinDirection+0xe2>
     dea:	50 c0       	rjmp	.+160    	; 0xe8c <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
     dec:	aa e3       	ldi	r26, 0x3A	; 58
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	ea e3       	ldi	r30, 0x3A	; 58
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_u8SetPinDirection+0x88>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_u8SetPinDirection+0x84>
     e0e:	84 2b       	or	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	bf c0       	rjmp	.+382    	; 0xf92 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
     e14:	a7 e3       	ldi	r26, 0x37	; 55
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e3       	ldi	r30, 0x37	; 55
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_u8SetPinDirection+0xb0>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_u8SetPinDirection+0xac>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	ab c0       	rjmp	.+342    	; 0xf92 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
     e3c:	a4 e3       	ldi	r26, 0x34	; 52
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e4 e3       	ldi	r30, 0x34	; 52
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_u8SetPinDirection+0xd8>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_u8SetPinDirection+0xd4>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	97 c0       	rjmp	.+302    	; 0xf92 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinDirection+0x100>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinDirection+0xfc>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	83 c0       	rjmp	.+262    	; 0xf92 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	80 c0       	rjmp	.+256    	; 0xf92 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	88 23       	and	r24, r24
     e96:	09 f0       	breq	.+2      	; 0xe9a <DIO_u8SetPinDirection+0x118>
     e98:	77 c0       	rjmp	.+238    	; 0xf88 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3e 83       	std	Y+6, r19	; 0x06
     ea2:	2d 83       	std	Y+5, r18	; 0x05
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	59 f1       	breq	.+86     	; 0xf04 <DIO_u8SetPinDirection+0x182>
     eae:	2d 81       	ldd	r18, Y+5	; 0x05
     eb0:	3e 81       	ldd	r19, Y+6	; 0x06
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <DIO_u8SetPinDirection+0x140>
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	69 f0       	breq	.+26     	; 0xeda <DIO_u8SetPinDirection+0x158>
     ec0:	60 c0       	rjmp	.+192    	; 0xf82 <DIO_u8SetPinDirection+0x200>
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	89 f1       	breq	.+98     	; 0xf2e <DIO_u8SetPinDirection+0x1ac>
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <DIO_u8SetPinDirection+0x156>
     ed6:	40 c0       	rjmp	.+128    	; 0xf58 <DIO_u8SetPinDirection+0x1d6>
     ed8:	54 c0       	rjmp	.+168    	; 0xf82 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
     eda:	aa e3       	ldi	r26, 0x3A	; 58
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	ea e3       	ldi	r30, 0x3A	; 58
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_u8SetPinDirection+0x176>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_u8SetPinDirection+0x172>
     efc:	80 95       	com	r24
     efe:	84 23       	and	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	47 c0       	rjmp	.+142    	; 0xf92 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
     f04:	a7 e3       	ldi	r26, 0x37	; 55
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e7 e3       	ldi	r30, 0x37	; 55
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_u8SetPinDirection+0x1a0>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_u8SetPinDirection+0x19c>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	32 c0       	rjmp	.+100    	; 0xf92 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
     f2e:	a4 e3       	ldi	r26, 0x34	; 52
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e4 e3       	ldi	r30, 0x34	; 52
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_u8SetPinDirection+0x1ca>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_u8SetPinDirection+0x1c6>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	1d c0       	rjmp	.+58     	; 0xf92 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
     f58:	a1 e3       	ldi	r26, 0x31	; 49
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e1 e3       	ldi	r30, 0x31	; 49
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_u8SetPinDirection+0x1f4>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_u8SetPinDirection+0x1f0>
     f7a:	80 95       	com	r24
     f7c:	84 23       	and	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	08 c0       	rjmp	.+16     	; 0xf92 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
     f92:	89 81       	ldd	r24, Y+1	; 0x01
}
     f94:	28 96       	adiw	r28, 0x08	; 8
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	28 97       	sbiw	r28, 0x08	; 8
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	8a 83       	std	Y+2, r24	; 0x02
     fbc:	6b 83       	std	Y+3, r22	; 0x03
     fbe:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
     fc0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 30       	cpi	r24, 0x08	; 8
     fc6:	08 f0       	brcs	.+2      	; 0xfca <DIO_u8SetPinValue+0x24>
     fc8:	f4 c0       	rjmp	.+488    	; 0x11b2 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	09 f0       	breq	.+2      	; 0xfd2 <DIO_u8SetPinValue+0x2c>
     fd0:	72 c0       	rjmp	.+228    	; 0x10b6 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	38 87       	std	Y+8, r19	; 0x08
     fda:	2f 83       	std	Y+7, r18	; 0x07
     fdc:	8f 81       	ldd	r24, Y+7	; 0x07
     fde:	98 85       	ldd	r25, Y+8	; 0x08
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	49 f1       	breq	.+82     	; 0x1038 <DIO_u8SetPinValue+0x92>
     fe6:	2f 81       	ldd	r18, Y+7	; 0x07
     fe8:	38 85       	ldd	r19, Y+8	; 0x08
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	31 05       	cpc	r19, r1
     fee:	2c f4       	brge	.+10     	; 0xffa <DIO_u8SetPinValue+0x54>
     ff0:	8f 81       	ldd	r24, Y+7	; 0x07
     ff2:	98 85       	ldd	r25, Y+8	; 0x08
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	61 f0       	breq	.+24     	; 0x1010 <DIO_u8SetPinValue+0x6a>
     ff8:	5b c0       	rjmp	.+182    	; 0x10b0 <DIO_u8SetPinValue+0x10a>
     ffa:	2f 81       	ldd	r18, Y+7	; 0x07
     ffc:	38 85       	ldd	r19, Y+8	; 0x08
     ffe:	22 30       	cpi	r18, 0x02	; 2
    1000:	31 05       	cpc	r19, r1
    1002:	71 f1       	breq	.+92     	; 0x1060 <DIO_u8SetPinValue+0xba>
    1004:	8f 81       	ldd	r24, Y+7	; 0x07
    1006:	98 85       	ldd	r25, Y+8	; 0x08
    1008:	83 30       	cpi	r24, 0x03	; 3
    100a:	91 05       	cpc	r25, r1
    100c:	e9 f1       	breq	.+122    	; 0x1088 <DIO_u8SetPinValue+0xe2>
    100e:	50 c0       	rjmp	.+160    	; 0x10b0 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    1010:	ab e3       	ldi	r26, 0x3B	; 59
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	eb e3       	ldi	r30, 0x3B	; 59
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_u8SetPinValue+0x88>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_u8SetPinValue+0x84>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	bf c0       	rjmp	.+382    	; 0x11b6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_u8SetPinValue+0xb0>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_u8SetPinValue+0xac>
    105a:	84 2b       	or	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	ab c0       	rjmp	.+342    	; 0x11b6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    1060:	a5 e3       	ldi	r26, 0x35	; 53
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e3       	ldi	r30, 0x35	; 53
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_u8SetPinValue+0xd8>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_u8SetPinValue+0xd4>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	97 c0       	rjmp	.+302    	; 0x11b6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    1088:	a2 e3       	ldi	r26, 0x32	; 50
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e2 e3       	ldi	r30, 0x32	; 50
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_u8SetPinValue+0x100>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_u8SetPinValue+0xfc>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	83 c0       	rjmp	.+262    	; 0x11b6 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	80 c0       	rjmp	.+256    	; 0x11b6 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	88 23       	and	r24, r24
    10ba:	09 f0       	breq	.+2      	; 0x10be <DIO_u8SetPinValue+0x118>
    10bc:	77 c0       	rjmp	.+238    	; 0x11ac <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3e 83       	std	Y+6, r19	; 0x06
    10c6:	2d 83       	std	Y+5, r18	; 0x05
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	59 f1       	breq	.+86     	; 0x1128 <DIO_u8SetPinValue+0x182>
    10d2:	2d 81       	ldd	r18, Y+5	; 0x05
    10d4:	3e 81       	ldd	r19, Y+6	; 0x06
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <DIO_u8SetPinValue+0x140>
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	69 f0       	breq	.+26     	; 0x10fe <DIO_u8SetPinValue+0x158>
    10e4:	60 c0       	rjmp	.+192    	; 0x11a6 <DIO_u8SetPinValue+0x200>
    10e6:	2d 81       	ldd	r18, Y+5	; 0x05
    10e8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	89 f1       	breq	.+98     	; 0x1152 <DIO_u8SetPinValue+0x1ac>
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <DIO_u8SetPinValue+0x156>
    10fa:	40 c0       	rjmp	.+128    	; 0x117c <DIO_u8SetPinValue+0x1d6>
    10fc:	54 c0       	rjmp	.+168    	; 0x11a6 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    10fe:	ab e3       	ldi	r26, 0x3B	; 59
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	eb e3       	ldi	r30, 0x3B	; 59
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_u8SetPinValue+0x176>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_u8SetPinValue+0x172>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	47 c0       	rjmp	.+142    	; 0x11b6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_u8SetPinValue+0x1a0>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_u8SetPinValue+0x19c>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	32 c0       	rjmp	.+100    	; 0x11b6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    1152:	a5 e3       	ldi	r26, 0x35	; 53
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e5 e3       	ldi	r30, 0x35	; 53
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_u8SetPinValue+0x1ca>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_u8SetPinValue+0x1c6>
    1174:	80 95       	com	r24
    1176:	84 23       	and	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	1d c0       	rjmp	.+58     	; 0x11b6 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    117c:	a2 e3       	ldi	r26, 0x32	; 50
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e2 e3       	ldi	r30, 0x32	; 50
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_u8SetPinValue+0x1f4>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_u8SetPinValue+0x1f0>
    119e:	80 95       	com	r24
    11a0:	84 23       	and	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	08 c0       	rjmp	.+16     	; 0x11b6 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b8:	28 96       	adiw	r28, 0x08	; 8
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_u8TogglePinValue+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_u8TogglePinValue+0x8>
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	8a 83       	std	Y+2, r24	; 0x02
    11da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    11dc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <DIO_u8TogglePinValue+0x1c>
    11e4:	72 c0       	rjmp	.+228    	; 0x12ca <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3d 83       	std	Y+5, r19	; 0x05
    11ee:	2c 83       	std	Y+4, r18	; 0x04
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	49 f1       	breq	.+82     	; 0x124c <DIO_u8TogglePinValue+0x82>
    11fa:	2c 81       	ldd	r18, Y+4	; 0x04
    11fc:	3d 81       	ldd	r19, Y+5	; 0x05
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	2c f4       	brge	.+10     	; 0x120e <DIO_u8TogglePinValue+0x44>
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	61 f0       	breq	.+24     	; 0x1224 <DIO_u8TogglePinValue+0x5a>
    120c:	5b c0       	rjmp	.+182    	; 0x12c4 <DIO_u8TogglePinValue+0xfa>
    120e:	2c 81       	ldd	r18, Y+4	; 0x04
    1210:	3d 81       	ldd	r19, Y+5	; 0x05
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	71 f1       	breq	.+92     	; 0x1274 <DIO_u8TogglePinValue+0xaa>
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	e9 f1       	breq	.+122    	; 0x129c <DIO_u8TogglePinValue+0xd2>
    1222:	50 c0       	rjmp	.+160    	; 0x12c4 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    1224:	ab e3       	ldi	r26, 0x3B	; 59
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	eb e3       	ldi	r30, 0x3B	; 59
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_u8TogglePinValue+0x78>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_u8TogglePinValue+0x74>
    1246:	84 27       	eor	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	41 c0       	rjmp	.+130    	; 0x12ce <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    124c:	a8 e3       	ldi	r26, 0x38	; 56
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_u8TogglePinValue+0xa0>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_u8TogglePinValue+0x9c>
    126e:	84 27       	eor	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	2d c0       	rjmp	.+90     	; 0x12ce <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    1274:	a5 e3       	ldi	r26, 0x35	; 53
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e3       	ldi	r30, 0x35	; 53
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_u8TogglePinValue+0xc8>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_u8TogglePinValue+0xc4>
    1296:	84 27       	eor	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	19 c0       	rjmp	.+50     	; 0x12ce <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    129c:	a2 e3       	ldi	r26, 0x32	; 50
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e2 e3       	ldi	r30, 0x32	; 50
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_u8TogglePinValue+0xf0>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_u8TogglePinValue+0xec>
    12be:	84 27       	eor	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	27 97       	sbiw	r28, 0x07	; 7
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	6b 83       	std	Y+3, r22	; 0x03
    12f8:	5d 83       	std	Y+5, r21	; 0x05
    12fa:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    12fc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	88 30       	cpi	r24, 0x08	; 8
    1302:	08 f0       	brcs	.+2      	; 0x1306 <DIO_u8GetPinValue+0x26>
    1304:	74 c0       	rjmp	.+232    	; 0x13ee <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	3f 83       	std	Y+7, r19	; 0x07
    130e:	2e 83       	std	Y+6, r18	; 0x06
    1310:	4e 81       	ldd	r20, Y+6	; 0x06
    1312:	5f 81       	ldd	r21, Y+7	; 0x07
    1314:	41 30       	cpi	r20, 0x01	; 1
    1316:	51 05       	cpc	r21, r1
    1318:	59 f1       	breq	.+86     	; 0x1370 <DIO_u8GetPinValue+0x90>
    131a:	8e 81       	ldd	r24, Y+6	; 0x06
    131c:	9f 81       	ldd	r25, Y+7	; 0x07
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	91 05       	cpc	r25, r1
    1322:	34 f4       	brge	.+12     	; 0x1330 <DIO_u8GetPinValue+0x50>
    1324:	2e 81       	ldd	r18, Y+6	; 0x06
    1326:	3f 81       	ldd	r19, Y+7	; 0x07
    1328:	21 15       	cp	r18, r1
    132a:	31 05       	cpc	r19, r1
    132c:	69 f0       	breq	.+26     	; 0x1348 <DIO_u8GetPinValue+0x68>
    132e:	5c c0       	rjmp	.+184    	; 0x13e8 <DIO_u8GetPinValue+0x108>
    1330:	4e 81       	ldd	r20, Y+6	; 0x06
    1332:	5f 81       	ldd	r21, Y+7	; 0x07
    1334:	42 30       	cpi	r20, 0x02	; 2
    1336:	51 05       	cpc	r21, r1
    1338:	79 f1       	breq	.+94     	; 0x1398 <DIO_u8GetPinValue+0xb8>
    133a:	8e 81       	ldd	r24, Y+6	; 0x06
    133c:	9f 81       	ldd	r25, Y+7	; 0x07
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	91 05       	cpc	r25, r1
    1342:	09 f4       	brne	.+2      	; 0x1346 <DIO_u8GetPinValue+0x66>
    1344:	3d c0       	rjmp	.+122    	; 0x13c0 <DIO_u8GetPinValue+0xe0>
    1346:	50 c0       	rjmp	.+160    	; 0x13e8 <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    1348:	e9 e3       	ldi	r30, 0x39	; 57
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_u8GetPinValue+0x80>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_u8GetPinValue+0x7c>
    1364:	ca 01       	movw	r24, r20
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	ec 81       	ldd	r30, Y+4	; 0x04
    136a:	fd 81       	ldd	r31, Y+5	; 0x05
    136c:	80 83       	st	Z, r24
    136e:	41 c0       	rjmp	.+130    	; 0x13f2 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    1370:	e6 e3       	ldi	r30, 0x36	; 54
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_u8GetPinValue+0xa8>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_u8GetPinValue+0xa4>
    138c:	ca 01       	movw	r24, r20
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	ec 81       	ldd	r30, Y+4	; 0x04
    1392:	fd 81       	ldd	r31, Y+5	; 0x05
    1394:	80 83       	st	Z, r24
    1396:	2d c0       	rjmp	.+90     	; 0x13f2 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    1398:	e3 e3       	ldi	r30, 0x33	; 51
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a9 01       	movw	r20, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_u8GetPinValue+0xd0>
    13ac:	55 95       	asr	r21
    13ae:	47 95       	ror	r20
    13b0:	8a 95       	dec	r24
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_u8GetPinValue+0xcc>
    13b4:	ca 01       	movw	r24, r20
    13b6:	81 70       	andi	r24, 0x01	; 1
    13b8:	ec 81       	ldd	r30, Y+4	; 0x04
    13ba:	fd 81       	ldd	r31, Y+5	; 0x05
    13bc:	80 83       	st	Z, r24
    13be:	19 c0       	rjmp	.+50     	; 0x13f2 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    13c0:	e0 e3       	ldi	r30, 0x30	; 48
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a9 01       	movw	r20, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_u8GetPinValue+0xf8>
    13d4:	55 95       	asr	r21
    13d6:	47 95       	ror	r20
    13d8:	8a 95       	dec	r24
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_u8GetPinValue+0xf4>
    13dc:	ca 01       	movw	r24, r20
    13de:	81 70       	andi	r24, 0x01	; 1
    13e0:	ec 81       	ldd	r30, Y+4	; 0x04
    13e2:	fd 81       	ldd	r31, Y+5	; 0x05
    13e4:	80 83       	st	Z, r24
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f4:	27 96       	adiw	r28, 0x07	; 7
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <DIO_u8SetPortDirection+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <DIO_u8SetPortDirection+0x8>
    140e:	0f 92       	push	r0
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	8a 83       	std	Y+2, r24	; 0x02
    1416:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1418:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	3d 83       	std	Y+5, r19	; 0x05
    1422:	2c 83       	std	Y+4, r18	; 0x04
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	d1 f0       	breq	.+52     	; 0x1462 <DIO_u8SetPortDirection+0x5c>
    142e:	2c 81       	ldd	r18, Y+4	; 0x04
    1430:	3d 81       	ldd	r19, Y+5	; 0x05
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	2c f4       	brge	.+10     	; 0x1442 <DIO_u8SetPortDirection+0x3c>
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	61 f0       	breq	.+24     	; 0x1458 <DIO_u8SetPortDirection+0x52>
    1440:	1f c0       	rjmp	.+62     	; 0x1480 <DIO_u8SetPortDirection+0x7a>
    1442:	2c 81       	ldd	r18, Y+4	; 0x04
    1444:	3d 81       	ldd	r19, Y+5	; 0x05
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	81 f0       	breq	.+32     	; 0x146c <DIO_u8SetPortDirection+0x66>
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	91 05       	cpc	r25, r1
    1454:	81 f0       	breq	.+32     	; 0x1476 <DIO_u8SetPortDirection+0x70>
    1456:	14 c0       	rjmp	.+40     	; 0x1480 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    1458:	ea e3       	ldi	r30, 0x3A	; 58
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	80 83       	st	Z, r24
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    1462:	e7 e3       	ldi	r30, 0x37	; 55
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	80 83       	st	Z, r24
    146a:	0c c0       	rjmp	.+24     	; 0x1484 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    146c:	e4 e3       	ldi	r30, 0x34	; 52
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	80 83       	st	Z, r24
    1474:	07 c0       	rjmp	.+14     	; 0x1484 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    1476:	e1 e3       	ldi	r30, 0x31	; 49
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	80 83       	st	Z, r24
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <DIO_u8SetPortValue+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <DIO_u8SetPortValue+0x8>
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	8a 83       	std	Y+2, r24	; 0x02
    14a6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    14a8:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3d 83       	std	Y+5, r19	; 0x05
    14b2:	2c 83       	std	Y+4, r18	; 0x04
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <DIO_u8SetPortValue+0x5c>
    14be:	2c 81       	ldd	r18, Y+4	; 0x04
    14c0:	3d 81       	ldd	r19, Y+5	; 0x05
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <DIO_u8SetPortValue+0x3c>
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	61 f0       	breq	.+24     	; 0x14e8 <DIO_u8SetPortValue+0x52>
    14d0:	1f c0       	rjmp	.+62     	; 0x1510 <DIO_u8SetPortValue+0x7a>
    14d2:	2c 81       	ldd	r18, Y+4	; 0x04
    14d4:	3d 81       	ldd	r19, Y+5	; 0x05
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	81 f0       	breq	.+32     	; 0x14fc <DIO_u8SetPortValue+0x66>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <DIO_u8SetPortValue+0x70>
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	80 83       	st	Z, r24
    14f0:	11 c0       	rjmp	.+34     	; 0x1514 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    14f2:	e8 e3       	ldi	r30, 0x38	; 56
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	80 83       	st	Z, r24
    14fa:	0c c0       	rjmp	.+24     	; 0x1514 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	80 83       	st	Z, r24
    1504:	07 c0       	rjmp	.+14     	; 0x1514 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	80 83       	st	Z, r24
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1514:	89 81       	ldd	r24, Y+1	; 0x01
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"


uint8 KEYPAD_u8GetPressedKey(void)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <KEYPAD_u8GetPressedKey+0x6>
    152c:	00 d0       	rcall	.+0      	; 0x152e <KEYPAD_u8GetPressedKey+0x8>
    152e:	0f 92       	push	r0
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8ColumnCounter;
	uint8 Local_u8RowCounter;
	uint8 Local_u8KeyState;
	uint8 Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	89 83       	std	Y+1, r24	; 0x01
	static uint8 Local_u8ColumnArr[KEYPAD_u8COLUMN_NUM] = {KEYPAD_u8COLUMN1_PIN, KEYPAD_u8COLUMN2_PIN, KEYPAD_u8COLUMN3_PIN, KEYPAD_u8COLUMN4_PIN};
	static uint8 Local_u8RowArr[KEYPAD_u8ROW_NUM] = {KEYPAD_u8ROW1_PIN, KEYPAD_u8ROW2_PIN, KEYPAD_u8ROW3_PIN, KEYPAD_u8ROW4_PIN};
	static uint8 Local_u8KeypadArr[KEYPAD_u8ROW_NUM][KEYPAD_u8COLUMN_NUM] = KEYPAD_u8BUTTON_ARR;

	/*Activate column pins and read the rows*/
	for(Local_u8ColumnCounter = 0; Local_u8ColumnCounter < KEYPAD_u8COLUMN_NUM; Local_u8ColumnCounter++)
    1538:	1b 82       	std	Y+3, r1	; 0x03
    153a:	6a c0       	rjmp	.+212    	; 0x1610 <KEYPAD_u8GetPressedKey+0xea>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_LOW);
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	fc 01       	movw	r30, r24
    1544:	e4 58       	subi	r30, 0x84	; 132
    1546:	fe 4f       	sbci	r31, 0xFE	; 254
    1548:	90 81       	ld	r25, Z
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	69 2f       	mov	r22, r25
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_u8SetPinValue>

		/*Get values of rows and check for signals from them*/
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KEYPAD_u8ROW_NUM; Local_u8RowCounter++)
    1554:	1a 82       	std	Y+2, r1	; 0x02
    1556:	49 c0       	rjmp	.+146    	; 0x15ea <KEYPAD_u8GetPressedKey+0xc4>
		{
			/*Get the value of the current row*/
			DIO_u8GetPinValue(KEYPAD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	fc 01       	movw	r30, r24
    1560:	e8 58       	subi	r30, 0x88	; 136
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	90 81       	ld	r25, Z
    1566:	9e 01       	movw	r18, r28
    1568:	2c 5f       	subi	r18, 0xFC	; 252
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	69 2f       	mov	r22, r25
    1570:	a9 01       	movw	r20, r18
    1572:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_u8GetPinValue>

			/*If the current row is low, then button is pressed*/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	88 23       	and	r24, r24
    157a:	a1 f5       	brne	.+104    	; 0x15e4 <KEYPAD_u8GetPressedKey+0xbe>
    157c:	0f c0       	rjmp	.+30     	; 0x159c <KEYPAD_u8GetPressedKey+0x76>
			{
				/*Wait until the key is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KEYPAD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	e8 58       	subi	r30, 0x88	; 136
    1588:	fe 4f       	sbci	r31, 0xFE	; 254
    158a:	90 81       	ld	r25, Z
    158c:	9e 01       	movw	r18, r28
    158e:	2c 5f       	subi	r18, 0xFC	; 252
    1590:	3f 4f       	sbci	r19, 0xFF	; 255
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	69 2f       	mov	r22, r25
    1596:	a9 01       	movw	r20, r18
    1598:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_u8GetPinValue>

			/*If the current row is low, then button is pressed*/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
			{
				/*Wait until the key is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	88 23       	and	r24, r24
    15a0:	71 f3       	breq	.-36     	; 0x157e <KEYPAD_u8GetPressedKey+0x58>
				{
					DIO_u8GetPinValue(KEYPAD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
				}

				/*Return the corresponding value of the key from the buttons array*/
				Local_u8PressedKey = Local_u8KeypadArr[Local_u8RowCounter][Local_u8ColumnCounter];
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	48 2f       	mov	r20, r24
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	ca 01       	movw	r24, r20
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	82 0f       	add	r24, r18
    15ba:	93 1f       	adc	r25, r19
    15bc:	fc 01       	movw	r30, r24
    15be:	e8 59       	subi	r30, 0x98	; 152
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
    15c2:	80 81       	ld	r24, Z
    15c4:	89 83       	std	Y+1, r24	; 0x01

				/*Deactivate the current column*/
				DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_HIGH);
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	88 2f       	mov	r24, r24
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	fc 01       	movw	r30, r24
    15ce:	e4 58       	subi	r30, 0x84	; 132
    15d0:	fe 4f       	sbci	r31, 0xFE	; 254
    15d2:	90 81       	ld	r25, Z
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	69 2f       	mov	r22, r25
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_u8SetPinValue>

				/*Return the pressed key*/
				return Local_u8PressedKey;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	8d 83       	std	Y+5, r24	; 0x05
    15e2:	1c c0       	rjmp	.+56     	; 0x161c <KEYPAD_u8GetPressedKey+0xf6>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_LOW);

		/*Get values of rows and check for signals from them*/
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KEYPAD_u8ROW_NUM; Local_u8RowCounter++)
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	8f 5f       	subi	r24, 0xFF	; 255
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	84 30       	cpi	r24, 0x04	; 4
    15ee:	08 f4       	brcc	.+2      	; 0x15f2 <KEYPAD_u8GetPressedKey+0xcc>
    15f0:	b3 cf       	rjmp	.-154    	; 0x1558 <KEYPAD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_HIGH);
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	fc 01       	movw	r30, r24
    15fa:	e4 58       	subi	r30, 0x84	; 132
    15fc:	fe 4f       	sbci	r31, 0xFE	; 254
    15fe:	90 81       	ld	r25, Z
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	69 2f       	mov	r22, r25
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_u8SetPinValue>
	static uint8 Local_u8ColumnArr[KEYPAD_u8COLUMN_NUM] = {KEYPAD_u8COLUMN1_PIN, KEYPAD_u8COLUMN2_PIN, KEYPAD_u8COLUMN3_PIN, KEYPAD_u8COLUMN4_PIN};
	static uint8 Local_u8RowArr[KEYPAD_u8ROW_NUM] = {KEYPAD_u8ROW1_PIN, KEYPAD_u8ROW2_PIN, KEYPAD_u8ROW3_PIN, KEYPAD_u8ROW4_PIN};
	static uint8 Local_u8KeypadArr[KEYPAD_u8ROW_NUM][KEYPAD_u8COLUMN_NUM] = KEYPAD_u8BUTTON_ARR;

	/*Activate column pins and read the rows*/
	for(Local_u8ColumnCounter = 0; Local_u8ColumnCounter < KEYPAD_u8COLUMN_NUM; Local_u8ColumnCounter++)
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	8f 5f       	subi	r24, 0xFF	; 255
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	08 f4       	brcc	.+2      	; 0x1618 <KEYPAD_u8GetPressedKey+0xf2>
    1616:	92 cf       	rjmp	.-220    	; 0x153c <KEYPAD_u8GetPressedKey+0x16>
		/*Deactivate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_HIGH);
	}

	/*Return that is no pressed key*/
	return Local_u8PressedKey;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	8d 83       	std	Y+5, r24	; 0x05
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1636:	ea e3       	ldi	r30, 0x3A	; 58
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 ef       	ldi	r24, 0xF0	; 240
    163c:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    163e:	e7 e3       	ldi	r30, 0x37	; 55
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1646:	e4 e3       	ldi	r30, 0x34	; 52
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    164e:	e1 e3       	ldi	r30, 0x31	; 49
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
    1656:	eb e3       	ldi	r30, 0x3B	; 59
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8f e0       	ldi	r24, 0x0F	; 15
    165c:	80 83       	st	Z, r24
	PORTB = PORTB_INITIAL_VALUE;
    165e:	e8 e3       	ldi	r30, 0x38	; 56
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    1664:	e5 e3       	ldi	r30, 0x35	; 53
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    166a:	e2 e3       	ldi	r30, 0x32	; 50
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1
}
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <main>:
 */
static void Local_voidSendTone(uint8 Copy_u8PressedKey);

/*It is the main*/
void main(void)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	/*Peripherals Initialization*/
	PORT_voidInit();
    1680:	0e 94 17 0b 	call	0x162e	; 0x162e <PORT_voidInit>


	/*Define variables*/
	uint8 Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	89 83       	std	Y+1, r24	; 0x01

	/*Super Loop*/
	while(1)
	{
		Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    1688:	0e 94 93 0a 	call	0x1526	; 0x1526 <KEYPAD_u8GetPressedKey>
    168c:	89 83       	std	Y+1, r24	; 0x01

		if(Local_u8PressedKey != KEYPAD_u8NO_PRESSED_KEY)
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	d1 f3       	breq	.-12     	; 0x1688 <main+0x12>
		{
			Local_voidSendTone(Local_u8PressedKey);
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	0e 94 4e 0b 	call	0x169c	; 0x169c <Local_voidSendTone>
    169a:	f6 cf       	rjmp	.-20     	; 0x1688 <main+0x12>

0000169c <Local_voidSendTone>:
		}
	}
}

static void Local_voidSendTone(uint8 Copy_u8PressedKey)
{
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	c6 55       	subi	r28, 0x56	; 86
    16aa:	d0 40       	sbci	r29, 0x00	; 0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	fe 01       	movw	r30, r28
    16b8:	ea 5a       	subi	r30, 0xAA	; 170
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	80 83       	st	Z, r24
	/*Define Variables*/
	uint8 Local_u8Iterator = 0;
    16be:	fe 01       	movw	r30, r28
    16c0:	eb 5a       	subi	r30, 0xAB	; 171
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	10 82       	st	Z, r1

	/*Sending tone*/
	for(Local_u8Iterator = 0; Local_u8Iterator < 20; Local_u8Iterator++)
    16c6:	fe 01       	movw	r30, r28
    16c8:	eb 5a       	subi	r30, 0xAB	; 171
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	10 82       	st	Z, r1
    16ce:	5f c1       	rjmp	.+702    	; 0x198e <Local_voidSendTone+0x2f2>
	{
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_HIGH);
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_u8SetPinValue>
		_delay_ms(Copy_u8PressedKey);
    16da:	fe 01       	movw	r30, r28
    16dc:	ea 5a       	subi	r30, 0xAA	; 170
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e0       	ldi	r26, 0x00	; 0
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__floatunsisf>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	fe 01       	movw	r30, r28
    16f8:	ef 5a       	subi	r30, 0xAF	; 175
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 83       	st	Z, r24
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	a2 83       	std	Z+2, r26	; 0x02
    1702:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1704:	8e 01       	movw	r16, r28
    1706:	03 5b       	subi	r16, 0xB3	; 179
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	fe 01       	movw	r30, r28
    170c:	ef 5a       	subi	r30, 0xAF	; 175
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4a ef       	ldi	r20, 0xFA	; 250
    171e:	54 e4       	ldi	r21, 0x44	; 68
    1720:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	f8 01       	movw	r30, r16
    172a:	80 83       	st	Z, r24
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	a2 83       	std	Z+2, r26	; 0x02
    1730:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1732:	fe 01       	movw	r30, r28
    1734:	e3 5b       	subi	r30, 0xB3	; 179
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e8       	ldi	r20, 0x80	; 128
    1746:	5f e3       	ldi	r21, 0x3F	; 63
    1748:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    174c:	88 23       	and	r24, r24
    174e:	44 f4       	brge	.+16     	; 0x1760 <Local_voidSendTone+0xc4>
		__ticks = 1;
    1750:	fe 01       	movw	r30, r28
    1752:	e5 5b       	subi	r30, 0xB5	; 181
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
    175e:	64 c0       	rjmp	.+200    	; 0x1828 <Local_voidSendTone+0x18c>
	else if (__tmp > 65535)
    1760:	fe 01       	movw	r30, r28
    1762:	e3 5b       	subi	r30, 0xB3	; 179
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	0c f0       	brlt	.+2      	; 0x1780 <Local_voidSendTone+0xe4>
    177e:	43 c0       	rjmp	.+134    	; 0x1806 <Local_voidSendTone+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1780:	fe 01       	movw	r30, r28
    1782:	ef 5a       	subi	r30, 0xAF	; 175
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	60 81       	ld	r22, Z
    1788:	71 81       	ldd	r23, Z+1	; 0x01
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	93 81       	ldd	r25, Z+3	; 0x03
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	8e 01       	movw	r16, r28
    17a0:	05 5b       	subi	r16, 0xB5	; 181
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	f8 01       	movw	r30, r16
    17b2:	91 83       	std	Z+1, r25	; 0x01
    17b4:	80 83       	st	Z, r24
    17b6:	1f c0       	rjmp	.+62     	; 0x17f6 <Local_voidSendTone+0x15a>
    17b8:	fe 01       	movw	r30, r28
    17ba:	e7 5b       	subi	r30, 0xB7	; 183
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	88 ec       	ldi	r24, 0xC8	; 200
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c6:	fe 01       	movw	r30, r28
    17c8:	e7 5b       	subi	r30, 0xB7	; 183
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <Local_voidSendTone+0x134>
    17d4:	fe 01       	movw	r30, r28
    17d6:	e7 5b       	subi	r30, 0xB7	; 183
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17de:	de 01       	movw	r26, r28
    17e0:	a5 5b       	subi	r26, 0xB5	; 181
    17e2:	bf 4f       	sbci	r27, 0xFF	; 255
    17e4:	fe 01       	movw	r30, r28
    17e6:	e5 5b       	subi	r30, 0xB5	; 181
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	11 96       	adiw	r26, 0x01	; 1
    17f2:	9c 93       	st	X, r25
    17f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f6:	fe 01       	movw	r30, r28
    17f8:	e5 5b       	subi	r30, 0xB5	; 181
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	80 81       	ld	r24, Z
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	d1 f6       	brne	.-76     	; 0x17b8 <Local_voidSendTone+0x11c>
    1804:	27 c0       	rjmp	.+78     	; 0x1854 <Local_voidSendTone+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1806:	8e 01       	movw	r16, r28
    1808:	05 5b       	subi	r16, 0xB5	; 181
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	fe 01       	movw	r30, r28
    180e:	e3 5b       	subi	r30, 0xB3	; 179
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	f8 01       	movw	r30, r16
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	80 83       	st	Z, r24
    1828:	de 01       	movw	r26, r28
    182a:	a9 5b       	subi	r26, 0xB9	; 185
    182c:	bf 4f       	sbci	r27, 0xFF	; 255
    182e:	fe 01       	movw	r30, r28
    1830:	e5 5b       	subi	r30, 0xB5	; 181
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	8d 93       	st	X+, r24
    183a:	9c 93       	st	X, r25
    183c:	fe 01       	movw	r30, r28
    183e:	e9 5b       	subi	r30, 0xB9	; 185
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 81       	ld	r24, Z
    1844:	91 81       	ldd	r25, Z+1	; 0x01
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <Local_voidSendTone+0x1aa>
    184a:	fe 01       	movw	r30, r28
    184c:	e9 5b       	subi	r30, 0xB9	; 185
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_LOW);
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_u8SetPinValue>
		_delay_ms(Copy_u8PressedKey);
    185e:	fe 01       	movw	r30, r28
    1860:	ea 5a       	subi	r30, 0xAA	; 170
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 e0       	ldi	r26, 0x00	; 0
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__floatunsisf>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	fe 01       	movw	r30, r28
    187c:	ed 5b       	subi	r30, 0xBD	; 189
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 83       	st	Z, r24
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	a2 83       	std	Z+2, r26	; 0x02
    1886:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1888:	8e 01       	movw	r16, r28
    188a:	01 5c       	subi	r16, 0xC1	; 193
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
    188e:	fe 01       	movw	r30, r28
    1890:	ed 5b       	subi	r30, 0xBD	; 189
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4a ef       	ldi	r20, 0xFA	; 250
    18a2:	54 e4       	ldi	r21, 0x44	; 68
    18a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	f8 01       	movw	r30, r16
    18ae:	80 83       	st	Z, r24
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	a2 83       	std	Z+2, r26	; 0x02
    18b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b6:	fe 01       	movw	r30, r28
    18b8:	ff 96       	adiw	r30, 0x3f	; 63
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <Local_voidSendTone+0x240>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9e af       	std	Y+62, r25	; 0x3e
    18d8:	8d af       	std	Y+61, r24	; 0x3d
    18da:	46 c0       	rjmp	.+140    	; 0x1968 <Local_voidSendTone+0x2cc>
	else if (__tmp > 65535)
    18dc:	fe 01       	movw	r30, r28
    18de:	ff 96       	adiw	r30, 0x3f	; 63
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	64 f5       	brge	.+88     	; 0x1950 <Local_voidSendTone+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	fe 01       	movw	r30, r28
    18fa:	ed 5b       	subi	r30, 0xBD	; 189
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e af       	std	Y+62, r25	; 0x3e
    1924:	8d af       	std	Y+61, r24	; 0x3d
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <Local_voidSendTone+0x2aa>
    1928:	88 ec       	ldi	r24, 0xC8	; 200
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c af       	std	Y+60, r25	; 0x3c
    192e:	8b af       	std	Y+59, r24	; 0x3b
    1930:	8b ad       	ldd	r24, Y+59	; 0x3b
    1932:	9c ad       	ldd	r25, Y+60	; 0x3c
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <Local_voidSendTone+0x298>
    1938:	9c af       	std	Y+60, r25	; 0x3c
    193a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8d ad       	ldd	r24, Y+61	; 0x3d
    193e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9e af       	std	Y+62, r25	; 0x3e
    1944:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8d ad       	ldd	r24, Y+61	; 0x3d
    1948:	9e ad       	ldd	r25, Y+62	; 0x3e
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <Local_voidSendTone+0x28c>
    194e:	16 c0       	rjmp	.+44     	; 0x197c <Local_voidSendTone+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	fe 01       	movw	r30, r28
    1952:	ff 96       	adiw	r30, 0x3f	; 63
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9e af       	std	Y+62, r25	; 0x3e
    1966:	8d af       	std	Y+61, r24	; 0x3d
    1968:	8d ad       	ldd	r24, Y+61	; 0x3d
    196a:	9e ad       	ldd	r25, Y+62	; 0x3e
    196c:	9a af       	std	Y+58, r25	; 0x3a
    196e:	89 af       	std	Y+57, r24	; 0x39
    1970:	89 ad       	ldd	r24, Y+57	; 0x39
    1972:	9a ad       	ldd	r25, Y+58	; 0x3a
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <Local_voidSendTone+0x2d8>
    1978:	9a af       	std	Y+58, r25	; 0x3a
    197a:	89 af       	std	Y+57, r24	; 0x39
{
	/*Define Variables*/
	uint8 Local_u8Iterator = 0;

	/*Sending tone*/
	for(Local_u8Iterator = 0; Local_u8Iterator < 20; Local_u8Iterator++)
    197c:	de 01       	movw	r26, r28
    197e:	ab 5a       	subi	r26, 0xAB	; 171
    1980:	bf 4f       	sbci	r27, 0xFF	; 255
    1982:	fe 01       	movw	r30, r28
    1984:	eb 5a       	subi	r30, 0xAB	; 171
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	8f 5f       	subi	r24, 0xFF	; 255
    198c:	8c 93       	st	X, r24
    198e:	fe 01       	movw	r30, r28
    1990:	eb 5a       	subi	r30, 0xAB	; 171
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	80 81       	ld	r24, Z
    1996:	84 31       	cpi	r24, 0x14	; 20
    1998:	08 f4       	brcc	.+2      	; 0x199c <Local_voidSendTone+0x300>
    199a:	9a ce       	rjmp	.-716    	; 0x16d0 <Local_voidSendTone+0x34>
		_delay_ms(Copy_u8PressedKey);
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_LOW);
		_delay_ms(Copy_u8PressedKey);
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 20; Local_u8Iterator++)
    199c:	fe 01       	movw	r30, r28
    199e:	eb 5a       	subi	r30, 0xAB	; 171
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	10 82       	st	Z, r1
    19a4:	13 c1       	rjmp	.+550    	; 0x1bcc <Local_voidSendTone+0x530>
	{
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_HIGH);
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_u8SetPinValue>
		_delay_ms(2 * Copy_u8PressedKey);
    19b0:	fe 01       	movw	r30, r28
    19b2:	ea 5a       	subi	r30, 0xAA	; 170
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	aa 27       	eor	r26, r26
    19c2:	97 fd       	sbrc	r25, 7
    19c4:	a0 95       	com	r26
    19c6:	ba 2f       	mov	r27, r26
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	8d ab       	std	Y+53, r24	; 0x35
    19d6:	9e ab       	std	Y+54, r25	; 0x36
    19d8:	af ab       	std	Y+55, r26	; 0x37
    19da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19dc:	6d a9       	ldd	r22, Y+53	; 0x35
    19de:	7e a9       	ldd	r23, Y+54	; 0x36
    19e0:	8f a9       	ldd	r24, Y+55	; 0x37
    19e2:	98 ad       	ldd	r25, Y+56	; 0x38
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	4a ef       	ldi	r20, 0xFA	; 250
    19ea:	54 e4       	ldi	r21, 0x44	; 68
    19ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	89 ab       	std	Y+49, r24	; 0x31
    19f6:	9a ab       	std	Y+50, r25	; 0x32
    19f8:	ab ab       	std	Y+51, r26	; 0x33
    19fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19fc:	69 a9       	ldd	r22, Y+49	; 0x31
    19fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1a00:	8b a9       	ldd	r24, Y+51	; 0x33
    1a02:	9c a9       	ldd	r25, Y+52	; 0x34
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	5f e3       	ldi	r21, 0x3F	; 63
    1a0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a10:	88 23       	and	r24, r24
    1a12:	2c f4       	brge	.+10     	; 0x1a1e <Local_voidSendTone+0x382>
		__ticks = 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	98 ab       	std	Y+48, r25	; 0x30
    1a1a:	8f a7       	std	Y+47, r24	; 0x2f
    1a1c:	3f c0       	rjmp	.+126    	; 0x1a9c <Local_voidSendTone+0x400>
	else if (__tmp > 65535)
    1a1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a20:	7a a9       	ldd	r23, Y+50	; 0x32
    1a22:	8b a9       	ldd	r24, Y+51	; 0x33
    1a24:	9c a9       	ldd	r25, Y+52	; 0x34
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	3f ef       	ldi	r19, 0xFF	; 255
    1a2a:	4f e7       	ldi	r20, 0x7F	; 127
    1a2c:	57 e4       	ldi	r21, 0x47	; 71
    1a2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a32:	18 16       	cp	r1, r24
    1a34:	4c f5       	brge	.+82     	; 0x1a88 <Local_voidSendTone+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a36:	6d a9       	ldd	r22, Y+53	; 0x35
    1a38:	7e a9       	ldd	r23, Y+54	; 0x36
    1a3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e2       	ldi	r20, 0x20	; 32
    1a44:	51 e4       	ldi	r21, 0x41	; 65
    1a46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	98 ab       	std	Y+48, r25	; 0x30
    1a5c:	8f a7       	std	Y+47, r24	; 0x2f
    1a5e:	0f c0       	rjmp	.+30     	; 0x1a7e <Local_voidSendTone+0x3e2>
    1a60:	88 ec       	ldi	r24, 0xC8	; 200
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9e a7       	std	Y+46, r25	; 0x2e
    1a66:	8d a7       	std	Y+45, r24	; 0x2d
    1a68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <Local_voidSendTone+0x3d0>
    1a70:	9e a7       	std	Y+46, r25	; 0x2e
    1a72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a76:	98 a9       	ldd	r25, Y+48	; 0x30
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	98 ab       	std	Y+48, r25	; 0x30
    1a7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a80:	98 a9       	ldd	r25, Y+48	; 0x30
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	69 f7       	brne	.-38     	; 0x1a60 <Local_voidSendTone+0x3c4>
    1a86:	14 c0       	rjmp	.+40     	; 0x1ab0 <Local_voidSendTone+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a88:	69 a9       	ldd	r22, Y+49	; 0x31
    1a8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	98 ab       	std	Y+48, r25	; 0x30
    1a9a:	8f a7       	std	Y+47, r24	; 0x2f
    1a9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa0:	9c a7       	std	Y+44, r25	; 0x2c
    1aa2:	8b a7       	std	Y+43, r24	; 0x2b
    1aa4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aa6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <Local_voidSendTone+0x40c>
    1aac:	9c a7       	std	Y+44, r25	; 0x2c
    1aae:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_LOW);
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_u8SetPinValue>
		_delay_ms(2 * Copy_u8PressedKey);
    1aba:	fe 01       	movw	r30, r28
    1abc:	ea 5a       	subi	r30, 0xAA	; 170
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 81       	ld	r24, Z
    1ac2:	88 2f       	mov	r24, r24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	aa 27       	eor	r26, r26
    1acc:	97 fd       	sbrc	r25, 7
    1ace:	a0 95       	com	r26
    1ad0:	ba 2f       	mov	r27, r26
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8f a3       	std	Y+39, r24	; 0x27
    1ae0:	98 a7       	std	Y+40, r25	; 0x28
    1ae2:	a9 a7       	std	Y+41, r26	; 0x29
    1ae4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae8:	78 a5       	ldd	r23, Y+40	; 0x28
    1aea:	89 a5       	ldd	r24, Y+41	; 0x29
    1aec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4a ef       	ldi	r20, 0xFA	; 250
    1af4:	54 e4       	ldi	r21, 0x44	; 68
    1af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8b a3       	std	Y+35, r24	; 0x23
    1b00:	9c a3       	std	Y+36, r25	; 0x24
    1b02:	ad a3       	std	Y+37, r26	; 0x25
    1b04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b06:	6b a1       	ldd	r22, Y+35	; 0x23
    1b08:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <Local_voidSendTone+0x48c>
		__ticks = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9a a3       	std	Y+34, r25	; 0x22
    1b24:	89 a3       	std	Y+33, r24	; 0x21
    1b26:	3f c0       	rjmp	.+126    	; 0x1ba6 <Local_voidSendTone+0x50a>
	else if (__tmp > 65535)
    1b28:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	3f ef       	ldi	r19, 0xFF	; 255
    1b34:	4f e7       	ldi	r20, 0x7F	; 127
    1b36:	57 e4       	ldi	r21, 0x47	; 71
    1b38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b3c:	18 16       	cp	r1, r24
    1b3e:	4c f5       	brge	.+82     	; 0x1b92 <Local_voidSendTone+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b40:	6f a1       	ldd	r22, Y+39	; 0x27
    1b42:	78 a5       	ldd	r23, Y+40	; 0x28
    1b44:	89 a5       	ldd	r24, Y+41	; 0x29
    1b46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e2       	ldi	r20, 0x20	; 32
    1b4e:	51 e4       	ldi	r21, 0x41	; 65
    1b50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9a a3       	std	Y+34, r25	; 0x22
    1b66:	89 a3       	std	Y+33, r24	; 0x21
    1b68:	0f c0       	rjmp	.+30     	; 0x1b88 <Local_voidSendTone+0x4ec>
    1b6a:	88 ec       	ldi	r24, 0xC8	; 200
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	98 a3       	std	Y+32, r25	; 0x20
    1b70:	8f 8f       	std	Y+31, r24	; 0x1f
    1b72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b74:	98 a1       	ldd	r25, Y+32	; 0x20
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <Local_voidSendTone+0x4da>
    1b7a:	98 a3       	std	Y+32, r25	; 0x20
    1b7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b80:	9a a1       	ldd	r25, Y+34	; 0x22
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	9a a3       	std	Y+34, r25	; 0x22
    1b86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b88:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	69 f7       	brne	.-38     	; 0x1b6a <Local_voidSendTone+0x4ce>
    1b90:	14 c0       	rjmp	.+40     	; 0x1bba <Local_voidSendTone+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b92:	6b a1       	ldd	r22, Y+35	; 0x23
    1b94:	7c a1       	ldd	r23, Y+36	; 0x24
    1b96:	8d a1       	ldd	r24, Y+37	; 0x25
    1b98:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9a a3       	std	Y+34, r25	; 0x22
    1ba4:	89 a3       	std	Y+33, r24	; 0x21
    1ba6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba8:	9a a1       	ldd	r25, Y+34	; 0x22
    1baa:	9e 8f       	std	Y+30, r25	; 0x1e
    1bac:	8d 8f       	std	Y+29, r24	; 0x1d
    1bae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <Local_voidSendTone+0x516>
    1bb6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(Copy_u8PressedKey);
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_LOW);
		_delay_ms(Copy_u8PressedKey);
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 20; Local_u8Iterator++)
    1bba:	de 01       	movw	r26, r28
    1bbc:	ab 5a       	subi	r26, 0xAB	; 171
    1bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	eb 5a       	subi	r30, 0xAB	; 171
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8f 5f       	subi	r24, 0xFF	; 255
    1bca:	8c 93       	st	X, r24
    1bcc:	fe 01       	movw	r30, r28
    1bce:	eb 5a       	subi	r30, 0xAB	; 171
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	84 31       	cpi	r24, 0x14	; 20
    1bd6:	08 f4       	brcc	.+2      	; 0x1bda <Local_voidSendTone+0x53e>
    1bd8:	e6 ce       	rjmp	.-564    	; 0x19a6 <Local_voidSendTone+0x30a>
		_delay_ms(2 * Copy_u8PressedKey);
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_LOW);
		_delay_ms(2 * Copy_u8PressedKey);
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 20; Local_u8Iterator++)
    1bda:	fe 01       	movw	r30, r28
    1bdc:	eb 5a       	subi	r30, 0xAB	; 171
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	10 82       	st	Z, r1
    1be2:	11 c1       	rjmp	.+546    	; 0x1e06 <Local_voidSendTone+0x76a>
	{
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_HIGH);
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_u8SetPinValue>
		_delay_ms(Copy_u8PressedKey / 2);
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ea 5a       	subi	r30, 0xAA	; 170
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 81       	ld	r24, Z
    1bf6:	86 95       	lsr	r24
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	aa 27       	eor	r26, r26
    1bfe:	97 fd       	sbrc	r25, 7
    1c00:	a0 95       	com	r26
    1c02:	ba 2f       	mov	r27, r26
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	89 8f       	std	Y+25, r24	; 0x19
    1c12:	9a 8f       	std	Y+26, r25	; 0x1a
    1c14:	ab 8f       	std	Y+27, r26	; 0x1b
    1c16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c18:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a ef       	ldi	r20, 0xFA	; 250
    1c26:	54 e4       	ldi	r21, 0x44	; 68
    1c28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8d 8b       	std	Y+21, r24	; 0x15
    1c32:	9e 8b       	std	Y+22, r25	; 0x16
    1c34:	af 8b       	std	Y+23, r26	; 0x17
    1c36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c38:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <Local_voidSendTone+0x5be>
		__ticks = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9c 8b       	std	Y+20, r25	; 0x14
    1c56:	8b 8b       	std	Y+19, r24	; 0x13
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <Local_voidSendTone+0x63c>
	else if (__tmp > 65535)
    1c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c60:	98 8d       	ldd	r25, Y+24	; 0x18
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	4c f5       	brge	.+82     	; 0x1cc4 <Local_voidSendTone+0x628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	69 8d       	ldd	r22, Y+25	; 0x19
    1c74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e2       	ldi	r20, 0x20	; 32
    1c80:	51 e4       	ldi	r21, 0x41	; 65
    1c82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9c 8b       	std	Y+20, r25	; 0x14
    1c98:	8b 8b       	std	Y+19, r24	; 0x13
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <Local_voidSendTone+0x61e>
    1c9c:	88 ec       	ldi	r24, 0xC8	; 200
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9a 8b       	std	Y+18, r25	; 0x12
    1ca2:	89 8b       	std	Y+17, r24	; 0x11
    1ca4:	89 89       	ldd	r24, Y+17	; 0x11
    1ca6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <Local_voidSendTone+0x60c>
    1cac:	9a 8b       	std	Y+18, r25	; 0x12
    1cae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	9c 8b       	std	Y+20, r25	; 0x14
    1cb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <Local_voidSendTone+0x600>
    1cc2:	14 c0       	rjmp	.+40     	; 0x1cec <Local_voidSendTone+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9c 8b       	std	Y+20, r25	; 0x14
    1cd6:	8b 8b       	std	Y+19, r24	; 0x13
    1cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cda:	9c 89       	ldd	r25, Y+20	; 0x14
    1cdc:	98 8b       	std	Y+16, r25	; 0x10
    1cde:	8f 87       	std	Y+15, r24	; 0x0f
    1ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce2:	98 89       	ldd	r25, Y+16	; 0x10
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <Local_voidSendTone+0x648>
    1ce8:	98 8b       	std	Y+16, r25	; 0x10
    1cea:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_LOW);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_u8SetPinValue>
		_delay_ms(Copy_u8PressedKey / 2);
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ea 5a       	subi	r30, 0xAA	; 170
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	86 95       	lsr	r24
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	aa 27       	eor	r26, r26
    1d06:	97 fd       	sbrc	r25, 7
    1d08:	a0 95       	com	r26
    1d0a:	ba 2f       	mov	r27, r26
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	8b 87       	std	Y+11, r24	; 0x0b
    1d1a:	9c 87       	std	Y+12, r25	; 0x0c
    1d1c:	ad 87       	std	Y+13, r26	; 0x0d
    1d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a ef       	ldi	r20, 0xFA	; 250
    1d2e:	54 e4       	ldi	r21, 0x44	; 68
    1d30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8f 83       	std	Y+7, r24	; 0x07
    1d3a:	98 87       	std	Y+8, r25	; 0x08
    1d3c:	a9 87       	std	Y+9, r26	; 0x09
    1d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e8       	ldi	r20, 0x80	; 128
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d54:	88 23       	and	r24, r24
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <Local_voidSendTone+0x6c6>
		__ticks = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9e 83       	std	Y+6, r25	; 0x06
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <Local_voidSendTone+0x744>
	else if (__tmp > 65535)
    1d62:	6f 81       	ldd	r22, Y+7	; 0x07
    1d64:	78 85       	ldd	r23, Y+8	; 0x08
    1d66:	89 85       	ldd	r24, Y+9	; 0x09
    1d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	4c f5       	brge	.+82     	; 0x1dcc <Local_voidSendTone+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <Local_voidSendTone+0x726>
    1da4:	88 ec       	ldi	r24, 0xC8	; 200
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <Local_voidSendTone+0x714>
    1db4:	9c 83       	std	Y+4, r25	; 0x04
    1db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <Local_voidSendTone+0x708>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <Local_voidSendTone+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dce:	78 85       	ldd	r23, Y+8	; 0x08
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	9e 81       	ldd	r25, Y+6	; 0x06
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <Local_voidSendTone+0x750>
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2 * Copy_u8PressedKey);
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_LOW);
		_delay_ms(2 * Copy_u8PressedKey);
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 20; Local_u8Iterator++)
    1df4:	de 01       	movw	r26, r28
    1df6:	ab 5a       	subi	r26, 0xAB	; 171
    1df8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	eb 5a       	subi	r30, 0xAB	; 171
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	8c 93       	st	X, r24
    1e06:	fe 01       	movw	r30, r28
    1e08:	eb 5a       	subi	r30, 0xAB	; 171
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	84 31       	cpi	r24, 0x14	; 20
    1e10:	08 f4       	brcc	.+2      	; 0x1e14 <Local_voidSendTone+0x778>
    1e12:	e8 ce       	rjmp	.-560    	; 0x1be4 <Local_voidSendTone+0x548>
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_HIGH);
		_delay_ms(Copy_u8PressedKey / 2);
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_LOW);
		_delay_ms(Copy_u8PressedKey / 2);
	}
}
    1e14:	ca 5a       	subi	r28, 0xAA	; 170
    1e16:	df 4f       	sbci	r29, 0xFF	; 255
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	08 95       	ret

00001e2c <__prologue_saves__>:
    1e2c:	2f 92       	push	r2
    1e2e:	3f 92       	push	r3
    1e30:	4f 92       	push	r4
    1e32:	5f 92       	push	r5
    1e34:	6f 92       	push	r6
    1e36:	7f 92       	push	r7
    1e38:	8f 92       	push	r8
    1e3a:	9f 92       	push	r9
    1e3c:	af 92       	push	r10
    1e3e:	bf 92       	push	r11
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	ca 1b       	sub	r28, r26
    1e56:	db 0b       	sbc	r29, r27
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	09 94       	ijmp

00001e64 <__epilogue_restores__>:
    1e64:	2a 88       	ldd	r2, Y+18	; 0x12
    1e66:	39 88       	ldd	r3, Y+17	; 0x11
    1e68:	48 88       	ldd	r4, Y+16	; 0x10
    1e6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e70:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e72:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e74:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e76:	b9 84       	ldd	r11, Y+9	; 0x09
    1e78:	c8 84       	ldd	r12, Y+8	; 0x08
    1e7a:	df 80       	ldd	r13, Y+7	; 0x07
    1e7c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e7e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e80:	0c 81       	ldd	r16, Y+4	; 0x04
    1e82:	1b 81       	ldd	r17, Y+3	; 0x03
    1e84:	aa 81       	ldd	r26, Y+2	; 0x02
    1e86:	b9 81       	ldd	r27, Y+1	; 0x01
    1e88:	ce 0f       	add	r28, r30
    1e8a:	d1 1d       	adc	r29, r1
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	ed 01       	movw	r28, r26
    1e98:	08 95       	ret

00001e9a <_exit>:
    1e9a:	f8 94       	cli

00001e9c <__stop_program>:
    1e9c:	ff cf       	rjmp	.-2      	; 0x1e9c <__stop_program>
