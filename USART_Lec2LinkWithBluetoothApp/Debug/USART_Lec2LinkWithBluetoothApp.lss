
USART_Lec2LinkWithBluetoothApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00800060  000051fe  00005292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  008001e4  008001e4  00005416  2**0
                  ALLOC
  3 .stab         000053f4  00000000  00000000  00005418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024e3  00000000  00000000  0000a80c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ccef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ce8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000d081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f48c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00010812  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000119e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001280c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__vector_4>
      14:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__vector_5>
      18:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__vector_6>
      1c:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__vector_7>
      20:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__vector_8>
      24:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__vector_9>
      28:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__vector_10>
      2c:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 bf 21 	jmp	0x437e	; 0x437e <__vector_13>
      38:	0c 94 16 22 	jmp	0x442c	; 0x442c <__vector_14>
      3c:	0c 94 6d 22 	jmp	0x44da	; 0x44da <__vector_15>
      40:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ee       	ldi	r26, 0xE4	; 228
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 24 	call	0x4956	; 0x4956 <main>
      8a:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 28 	jmp	0x518c	; 0x518c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ec       	ldi	r26, 0xC8	; 200
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 28 	jmp	0x518c	; 0x518c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ec       	ldi	r24, 0xC8	; 200
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ec       	ldi	r22, 0xC8	; 200
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ea 28 	jmp	0x51d4	; 0x51d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d2 28 	jmp	0x51a4	; 0x51a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d6 28 	jmp	0x51ac	; 0x51ac <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f2 28 	jmp	0x51e4	; 0x51e4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ce 28 	jmp	0x519c	; 0x519c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ea 28 	jmp	0x51d4	; 0x51d4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 53       	subi	r30, 0x30	; 48
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:

/**
 * @brief Function to initialize ADC with prebuild configuration.
 */
void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if	ADC_u8REF_VOLT == AREF_REF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_u8REF_VOLT == AVCC_REF
	SET_BIT(ADMUX,ADMUX_REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24

#endif

	/*Left Adjust Result Selection*/
#if	ADC_u8RESOLUTION == EIGHT_BITS
	SET_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
#error Wrong ADC_u8RESOLUTION configuration option

#endif

	/*Prescaler Selection*/
	ADCSRA = ADCSRA & PRESCALER_MASK;
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	8c 93       	st	X, r24
	ADCSRA = ADCSRA | ADC_u8PRESCALER_VALUE;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	87 60       	ori	r24, 0x07	; 7
     e7a:	8c 93       	st	X, r24

	/*Enable the ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <ADC_u8StartConversionSynch>:
 * @param Copy_u8Channel The number of channel you want to read.
 * @param Copy_pu16Result This pointer return the reading of the channel selected.
 * @return Error State of the function.
 */
uint8 ADC_u8StartConversionSynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <ADC_u8StartConversionSynch+0x6>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <ADC_u8StartConversionSynch+0x8>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ADC_u8StartConversionSynch+0xa>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	8c 83       	std	Y+4, r24	; 0x04
     ea0:	7e 83       	std	Y+6, r23	; 0x06
     ea2:	6d 83       	std	Y+5, r22	; 0x05
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
     ea4:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u32TimeoutCounter = 0u;
     ea6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8IntInitialState = 0u;
     ea8:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Copy_pu16Rsult*/
	if(Copy_pu16Result != NULL)
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <ADC_u8StartConversionSynch+0x24>
     eb2:	42 c0       	rjmp	.+132    	; 0xf38 <ADC_u8StartConversionSynch+0xa8>
	{
		if(ADC_u8BusyFlag == IDLE)
     eb4:	80 91 e8 01 	lds	r24, 0x01E8
     eb8:	88 23       	and	r24, r24
     eba:	d9 f5       	brne	.+118    	; 0xf32 <ADC_u8StartConversionSynch+0xa2>
		{
			/*Inform others that adc is busy*/
			ADC_u8BusyFlag = BUSY;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 e8 01 	sts	0x01E8, r24

			/*Set the required channel*/
			ADMUX = ADMUX & CHANNEL_MASK;
     ec2:	a7 e2       	ldi	r26, 0x27	; 39
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e2       	ldi	r30, 0x27	; 39
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 7e       	andi	r24, 0xE0	; 224
     ece:	8c 93       	st	X, r24
			ADMUX = ADMUX | Copy_u8Channel;
     ed0:	a7 e2       	ldi	r26, 0x27	; 39
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e7 e2       	ldi	r30, 0x27	; 39
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	90 81       	ld	r25, Z
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	89 2b       	or	r24, r25
     ede:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     ee0:	a6 e2       	ldi	r26, 0x26	; 38
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e6 e2       	ldi	r30, 0x26	; 38
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	8c 93       	st	X, r24

			/*Polling until the interrupt flag rise*/
			while((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter < ADC_u32TIMEOUT))
     eee:	e6 e2       	ldi	r30, 0x26	; 38
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	82 95       	swap	r24
     ef6:	8f 70       	andi	r24, 0x0F	; 15
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	81 70       	andi	r24, 0x01	; 1
     efe:	90 70       	andi	r25, 0x00	; 0
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	21 f4       	brne	.+8      	; 0xf0c <ADC_u8StartConversionSynch+0x7c>
			{
				Local_u32TimeoutCounter++;
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	8a 83       	std	Y+2, r24	; 0x02
     f0a:	f1 cf       	rjmp	.-30     	; 0xeee <ADC_u8StartConversionSynch+0x5e>
			else
			{
				/*Loop is broken because the conversion has been done*/

				/*Clear the conversion complete flag flag*/
				SET_BIT(ADCSRA,ADCSRA_ADIF);
     f0c:	a6 e2       	ldi	r26, 0x26	; 38
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e6 e2       	ldi	r30, 0x26	; 38
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 61       	ori	r24, 0x10	; 16
     f18:	8c 93       	st	X, r24

				/*Return the data*/
#if ADC_u8RESOLUTION == EIGHT_BITS
				*Copy_pu16Result = ADCH;
     f1a:	e5 e2       	ldi	r30, 0x25	; 37
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	ed 81       	ldd	r30, Y+5	; 0x05
     f26:	fe 81       	ldd	r31, Y+6	; 0x06
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	80 83       	st	Z, r24
				*Copy_pu16Result = ADC;
#endif
			}

			/*Inform others that ADC is idle now*/
			ADC_u8BusyFlag = IDLE;
     f2c:	10 92 e8 01 	sts	0x01E8, r1
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <ADC_u8StartConversionSynch+0xac>
		}
		else
		{
			/*ADC is busy now*/
			Local_u8ErrorState = BUSY_STATE_ERR;
     f32:	84 e0       	ldi	r24, 0x04	; 4
     f34:	8b 83       	std	Y+3, r24	; 0x03
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <ADC_u8StartConversionSynch+0xac>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return the error state*/
	return Local_u8ErrorState;
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f3e:	26 96       	adiw	r28, 0x06	; 6
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <ADC_u8StartConversionAsynch>:
 * @param Copy_pu16Result This pointer return the reading of the channel selected.
 * @param Copy_pvNotificationFunc This pointer set call back the notification function from the application layer.
 * @return Error State of the function.
 */
uint8 ADC_u8StartConversionAsynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <ADC_u8StartConversionAsynch+0x6>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <ADC_u8StartConversionAsynch+0x8>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <ADC_u8StartConversionAsynch+0xa>
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	8a 83       	std	Y+2, r24	; 0x02
     f60:	7c 83       	std	Y+4, r23	; 0x04
     f62:	6b 83       	std	Y+3, r22	; 0x03
     f64:	5e 83       	std	Y+6, r21	; 0x06
     f66:	4d 83       	std	Y+5, r20	; 0x05

	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
     f68:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Copy_pu16Rsult*/
	if((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	d1 f1       	breq	.+116    	; 0xfe6 <ADC_u8StartConversionAsynch+0x96>
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	b1 f1       	breq	.+108    	; 0xfe6 <ADC_u8StartConversionAsynch+0x96>
	{
		/*Check if ADC is busy or idle*/
		if(ADC_u8BusyFlag == IDLE)
     f7a:	80 91 e8 01 	lds	r24, 0x01E8
     f7e:	88 23       	and	r24, r24
     f80:	79 f5       	brne	.+94     	; 0xfe0 <ADC_u8StartConversionAsynch+0x90>
		{
			/*Inform others that ADC is busy now*/
			ADC_u8BusyFlag = BUSY;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	80 93 e8 01 	sts	0x01E8, r24

			/*Inform ISR the interrupt source*/
			ADC_u8IntSource = SINGLE_CONV_ASYNCH;
     f88:	10 92 ec 01 	sts	0x01EC, r1

			/*Initialize the result pointer globally*/
			ADC_pu16ConversionResult = Copy_pu16Result;
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	90 93 e7 01 	sts	0x01E7, r25
     f94:	80 93 e6 01 	sts	0x01E6, r24

			/*Initialize the notification function globally*/
			ADC_pvNotificationFunc = Copy_pvNotificationFunc;
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	90 93 e5 01 	sts	0x01E5, r25
     fa0:	80 93 e4 01 	sts	0x01E4, r24

			/*Set the required channel*/
			ADMUX = ADMUX & CHANNEL_MASK;
     fa4:	a7 e2       	ldi	r26, 0x27	; 39
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e7 e2       	ldi	r30, 0x27	; 39
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 7e       	andi	r24, 0xE0	; 224
     fb0:	8c 93       	st	X, r24
			ADMUX = ADMUX | Copy_u8Channel;
     fb2:	a7 e2       	ldi	r26, 0x27	; 39
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e2       	ldi	r30, 0x27	; 39
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	90 81       	ld	r25, Z
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	89 2b       	or	r24, r25
     fc0:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     fc2:	a6 e2       	ldi	r26, 0x26	; 38
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e6 e2       	ldi	r30, 0x26	; 38
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 64       	ori	r24, 0x40	; 64
     fce:	8c 93       	st	X, r24

			/*Enable ADC Conversion Complete Interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     fd0:	a6 e2       	ldi	r26, 0x26	; 38
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e6 e2       	ldi	r30, 0x26	; 38
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	88 60       	ori	r24, 0x08	; 8
     fdc:	8c 93       	st	X, r24
     fde:	05 c0       	rjmp	.+10     	; 0xfea <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			/*ADC is busy now*/
			Local_u8ErrorState = BUSY_STATE_ERR;
     fe0:	84 e0       	ldi	r24, 0x04	; 4
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
}
     fec:	26 96       	adiw	r28, 0x06	; 6
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <ADC_u8StartChainConversionAsynch>:
 *
 * @param Copy_pstChain Pointer to struct which carry the chain data.
 * @return Error State of the function.
 */
uint8 ADC_u8StartChainConversionAsynch(ADC_ChainConv_t *Copy_pstChain)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <ADC_u8StartChainConversionAsynch+0x6>
    1004:	0f 92       	push	r0
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	9b 83       	std	Y+3, r25	; 0x03
    100c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    100e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers*/
	if((Copy_pstChain != NULL) && (Copy_pstChain -> ChainArr != NULL) && (Copy_pstChain -> NotificationFunc != NULL) && (Copy_pstChain -> ResultArr != NULL))
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	09 f4       	brne	.+2      	; 0x101a <ADC_u8StartChainConversionAsynch+0x1c>
    1018:	54 c0       	rjmp	.+168    	; 0x10c2 <ADC_u8StartChainConversionAsynch+0xc4>
    101a:	ea 81       	ldd	r30, Y+2	; 0x02
    101c:	fb 81       	ldd	r31, Y+3	; 0x03
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	09 f4       	brne	.+2      	; 0x1028 <ADC_u8StartChainConversionAsynch+0x2a>
    1026:	4d c0       	rjmp	.+154    	; 0x10c2 <ADC_u8StartChainConversionAsynch+0xc4>
    1028:	ea 81       	ldd	r30, Y+2	; 0x02
    102a:	fb 81       	ldd	r31, Y+3	; 0x03
    102c:	84 81       	ldd	r24, Z+4	; 0x04
    102e:	95 81       	ldd	r25, Z+5	; 0x05
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	09 f4       	brne	.+2      	; 0x1036 <ADC_u8StartChainConversionAsynch+0x38>
    1034:	46 c0       	rjmp	.+140    	; 0x10c2 <ADC_u8StartChainConversionAsynch+0xc4>
    1036:	ea 81       	ldd	r30, Y+2	; 0x02
    1038:	fb 81       	ldd	r31, Y+3	; 0x03
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	09 f4       	brne	.+2      	; 0x1044 <ADC_u8StartChainConversionAsynch+0x46>
    1042:	3f c0       	rjmp	.+126    	; 0x10c2 <ADC_u8StartChainConversionAsynch+0xc4>
	{
		/*Check if ADC is busy or not*/
		if(ADC_u8BusyFlag == IDLE)
    1044:	80 91 e8 01 	lds	r24, 0x01E8
    1048:	88 23       	and	r24, r24
    104a:	c9 f5       	brne	.+114    	; 0x10be <ADC_u8StartChainConversionAsynch+0xc0>
		{
			/*Inform others that ADC is busy now*/
			ADC_u8BusyFlag = BUSY;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 e8 01 	sts	0x01E8, r24

			/*Inform the ISR the interrupt source*/
			ADC_u8IntSource = CHAIN_CONV_ASYNCH;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 ec 01 	sts	0x01EC, r24

			/*Initialize the global chain data*/
			ADC_pstChainData = Copy_pstChain;
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	90 93 ea 01 	sts	0x01EA, r25
    1060:	80 93 e9 01 	sts	0x01E9, r24
			ADC_u8ChainChannelCounter = 0u;
    1064:	10 92 eb 01 	sts	0x01EB, r1

			/*Set the first channel*/
			ADMUX &= CHANNEL_MASK;
    1068:	a7 e2       	ldi	r26, 0x27	; 39
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e7 e2       	ldi	r30, 0x27	; 39
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 7e       	andi	r24, 0xE0	; 224
    1074:	8c 93       	st	X, r24
			ADMUX |= ADC_pstChainData -> ChainArr[ADC_u8ChainChannelCounter];
    1076:	a7 e2       	ldi	r26, 0x27	; 39
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e2       	ldi	r30, 0x27	; 39
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	40 81       	ld	r20, Z
    1080:	e0 91 e9 01 	lds	r30, 0x01E9
    1084:	f0 91 ea 01 	lds	r31, 0x01EA
    1088:	20 81       	ld	r18, Z
    108a:	31 81       	ldd	r19, Z+1	; 0x01
    108c:	80 91 eb 01 	lds	r24, 0x01EB
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	f9 01       	movw	r30, r18
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	80 81       	ld	r24, Z
    109c:	84 2b       	or	r24, r20
    109e:	8c 93       	st	X, r24

			/*Start the conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    10a0:	a6 e2       	ldi	r26, 0x26	; 38
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e6 e2       	ldi	r30, 0x26	; 38
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	8c 93       	st	X, r24

			/*Enable the ADC conversion complete interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    10ae:	a6 e2       	ldi	r26, 0x26	; 38
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e6 e2       	ldi	r30, 0x26	; 38
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	88 60       	ori	r24, 0x08	; 8
    10ba:	8c 93       	st	X, r24
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <ADC_u8StartChainConversionAsynch+0xc4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <__vector_16>:
/**
 * @brief ADC Conversion Complete ISR.
 */
void __vector_16 (void) __attribute((signal));
void __vector_16 (void)
{
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8IntSource == SINGLE_CONV_ASYNCH)
    10fa:	80 91 ec 01 	lds	r24, 0x01EC
    10fe:	88 23       	and	r24, r24
    1100:	41 f5       	brne	.+80     	; 0x1152 <__vector_16+0x82>
	{
		if(ADC_pu16ConversionResult != NULL)
    1102:	80 91 e6 01 	lds	r24, 0x01E6
    1106:	90 91 e7 01 	lds	r25, 0x01E7
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	09 f4       	brne	.+2      	; 0x1110 <__vector_16+0x40>
    110e:	9c c0       	rjmp	.+312    	; 0x1248 <__vector_16+0x178>
		{
			/*Return the data*/
#if ADC_u8RESOLUTION == EIGHT_BITS
			*ADC_pu16ConversionResult = ADCH;
    1110:	a0 91 e6 01 	lds	r26, 0x01E6
    1114:	b0 91 e7 01 	lds	r27, 0x01E7
    1118:	e5 e2       	ldi	r30, 0x25	; 37
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	8d 93       	st	X+, r24
    1124:	9c 93       	st	X, r25
#elif ADC_u8RESOLUTION == TEN_BITS
			*ADC_pu16ConversionResult = ADC;
#endif

			/*Disable ADC Conversion Complete Interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1126:	a6 e2       	ldi	r26, 0x26	; 38
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e6 e2       	ldi	r30, 0x26	; 38
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	87 7f       	andi	r24, 0xF7	; 247
    1132:	8c 93       	st	X, r24

			/*Inform others that ADC is idle now*/
			ADC_u8BusyFlag = IDLE;
    1134:	10 92 e8 01 	sts	0x01E8, r1

			/*Invoke the application notification function*/
			if(ADC_pvNotificationFunc != NULL)
    1138:	80 91 e4 01 	lds	r24, 0x01E4
    113c:	90 91 e5 01 	lds	r25, 0x01E5
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	09 f4       	brne	.+2      	; 0x1146 <__vector_16+0x76>
    1144:	81 c0       	rjmp	.+258    	; 0x1248 <__vector_16+0x178>
			{
				ADC_pvNotificationFunc();
    1146:	e0 91 e4 01 	lds	r30, 0x01E4
    114a:	f0 91 e5 01 	lds	r31, 0x01E5
    114e:	09 95       	icall
    1150:	7b c0       	rjmp	.+246    	; 0x1248 <__vector_16+0x178>
		else
		{
			/*Result pointer is assigned to NULL*/
		}
	}
	else if(ADC_u8IntSource == CHAIN_CONV_ASYNCH)
    1152:	80 91 ec 01 	lds	r24, 0x01EC
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	09 f0       	breq	.+2      	; 0x115c <__vector_16+0x8c>
    115a:	76 c0       	rjmp	.+236    	; 0x1248 <__vector_16+0x178>
	{
		if(ADC_pstChainData -> ResultArr[ADC_u8ChainChannelCounter] != NULL)
    115c:	e0 91 e9 01 	lds	r30, 0x01E9
    1160:	f0 91 ea 01 	lds	r31, 0x01EA
    1164:	22 81       	ldd	r18, Z+2	; 0x02
    1166:	33 81       	ldd	r19, Z+3	; 0x03
    1168:	80 91 eb 01 	lds	r24, 0x01EB
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	f9 01       	movw	r30, r18
    1176:	e8 0f       	add	r30, r24
    1178:	f9 1f       	adc	r31, r25
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	09 f4       	brne	.+2      	; 0x1184 <__vector_16+0xb4>
    1182:	62 c0       	rjmp	.+196    	; 0x1248 <__vector_16+0x178>
		{
			/*Return the channel result*/
#if ADC_u8RESOLUTION == EIGHT_BITS
			ADC_pstChainData -> ResultArr[ADC_u8ChainChannelCounter] = ADCH;
    1184:	e0 91 e9 01 	lds	r30, 0x01E9
    1188:	f0 91 ea 01 	lds	r31, 0x01EA
    118c:	22 81       	ldd	r18, Z+2	; 0x02
    118e:	33 81       	ldd	r19, Z+3	; 0x03
    1190:	80 91 eb 01 	lds	r24, 0x01EB
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	d9 01       	movw	r26, r18
    119e:	a8 0f       	add	r26, r24
    11a0:	b9 1f       	adc	r27, r25
    11a2:	e5 e2       	ldi	r30, 0x25	; 37
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	11 96       	adiw	r26, 0x01	; 1
    11ae:	9c 93       	st	X, r25
    11b0:	8e 93       	st	-X, r24
#elif ADC_u8RESOLUTION == TEN_BITS
			ADC_pstChainData -> ResultArr[ADC_u8ChainChannelCounter] = ADC;
#endif

			/*Increment the counter*/
			ADC_u8ChainChannelCounter++;
    11b2:	80 91 eb 01 	lds	r24, 0x01EB
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	80 93 eb 01 	sts	0x01EB, r24

			if(ADC_u8ChainChannelCounter < ADC_pstChainData -> ChainSize)	//Chain is not finished yet.
    11bc:	e0 91 e9 01 	lds	r30, 0x01E9
    11c0:	f0 91 ea 01 	lds	r31, 0x01EA
    11c4:	96 81       	ldd	r25, Z+6	; 0x06
    11c6:	80 91 eb 01 	lds	r24, 0x01EB
    11ca:	89 17       	cp	r24, r25
    11cc:	20 f5       	brcc	.+72     	; 0x1216 <__vector_16+0x146>
			{
				/*Set the next channel*/
				ADMUX &= CHANNEL_MASK;
    11ce:	a7 e2       	ldi	r26, 0x27	; 39
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e7 e2       	ldi	r30, 0x27	; 39
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 7e       	andi	r24, 0xE0	; 224
    11da:	8c 93       	st	X, r24
				ADMUX |= ADC_pstChainData -> ChainArr[ADC_u8ChainChannelCounter];
    11dc:	a7 e2       	ldi	r26, 0x27	; 39
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e7 e2       	ldi	r30, 0x27	; 39
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	40 81       	ld	r20, Z
    11e6:	e0 91 e9 01 	lds	r30, 0x01E9
    11ea:	f0 91 ea 01 	lds	r31, 0x01EA
    11ee:	20 81       	ld	r18, Z
    11f0:	31 81       	ldd	r19, Z+1	; 0x01
    11f2:	80 91 eb 01 	lds	r24, 0x01EB
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	f9 01       	movw	r30, r18
    11fc:	e8 0f       	add	r30, r24
    11fe:	f9 1f       	adc	r31, r25
    1200:	80 81       	ld	r24, Z
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24

				/*Start the next Conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADSC);
    1206:	a6 e2       	ldi	r26, 0x26	; 38
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e6 e2       	ldi	r30, 0x26	; 38
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	8c 93       	st	X, r24
    1214:	19 c0       	rjmp	.+50     	; 0x1248 <__vector_16+0x178>
			}
			else 															//Chain is finished.
			{
				/*Disable ADC Conversion Complete Interrupt*/
				CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1216:	a6 e2       	ldi	r26, 0x26	; 38
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e6 e2       	ldi	r30, 0x26	; 38
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	87 7f       	andi	r24, 0xF7	; 247
    1222:	8c 93       	st	X, r24

				/*Inform others that ADC is idle now*/
				ADC_u8BusyFlag = IDLE;
    1224:	10 92 e8 01 	sts	0x01E8, r1

				/*Invoke the application notification function*/
				if(ADC_pstChainData -> NotificationFunc != NULL)
    1228:	e0 91 e9 01 	lds	r30, 0x01E9
    122c:	f0 91 ea 01 	lds	r31, 0x01EA
    1230:	84 81       	ldd	r24, Z+4	; 0x04
    1232:	95 81       	ldd	r25, Z+5	; 0x05
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	41 f0       	breq	.+16     	; 0x1248 <__vector_16+0x178>
				{
					ADC_pstChainData -> NotificationFunc();
    1238:	e0 91 e9 01 	lds	r30, 0x01E9
    123c:	f0 91 ea 01 	lds	r31, 0x01EA
    1240:	04 80       	ldd	r0, Z+4	; 0x04
    1242:	f5 81       	ldd	r31, Z+5	; 0x05
    1244:	e0 2d       	mov	r30, r0
    1246:	09 95       	icall
					/*Notification pointer is assigned to NULL*/
				}
			}
		}
	}
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <voidSendEnablePulse>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

static void voidSendEnablePulse(void)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	2e 97       	sbiw	r28, 0x0e	; 14
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	62 e0       	ldi	r22, 0x02	; 2
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a0 e0       	ldi	r26, 0x00	; 0
    1292:	b0 e4       	ldi	r27, 0x40	; 64
    1294:	8b 87       	std	Y+11, r24	; 0x0b
    1296:	9c 87       	std	Y+12, r25	; 0x0c
    1298:	ad 87       	std	Y+13, r26	; 0x0d
    129a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129c:	6b 85       	ldd	r22, Y+11	; 0x0b
    129e:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	4a ef       	ldi	r20, 0xFA	; 250
    12aa:	54 e4       	ldi	r21, 0x44	; 68
    12ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	8f 83       	std	Y+7, r24	; 0x07
    12b6:	98 87       	std	Y+8, r25	; 0x08
    12b8:	a9 87       	std	Y+9, r26	; 0x09
    12ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12bc:	6f 81       	ldd	r22, Y+7	; 0x07
    12be:	78 85       	ldd	r23, Y+8	; 0x08
    12c0:	89 85       	ldd	r24, Y+9	; 0x09
    12c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e8       	ldi	r20, 0x80	; 128
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12d0:	88 23       	and	r24, r24
    12d2:	2c f4       	brge	.+10     	; 0x12de <voidSendEnablePulse+0x70>
		__ticks = 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
    12dc:	3f c0       	rjmp	.+126    	; 0x135c <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    12de:	6f 81       	ldd	r22, Y+7	; 0x07
    12e0:	78 85       	ldd	r23, Y+8	; 0x08
    12e2:	89 85       	ldd	r24, Y+9	; 0x09
    12e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	3f ef       	ldi	r19, 0xFF	; 255
    12ea:	4f e7       	ldi	r20, 0x7F	; 127
    12ec:	57 e4       	ldi	r21, 0x47	; 71
    12ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12f2:	18 16       	cp	r1, r24
    12f4:	4c f5       	brge	.+82     	; 0x1348 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e2       	ldi	r20, 0x20	; 32
    1304:	51 e4       	ldi	r21, 0x41	; 65
    1306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	bc 01       	movw	r22, r24
    1310:	cd 01       	movw	r24, r26
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	0f c0       	rjmp	.+30     	; 0x133e <voidSendEnablePulse+0xd0>
    1320:	88 ec       	ldi	r24, 0xC8	; 200
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <voidSendEnablePulse+0xbe>
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	9e 83       	std	Y+6, r25	; 0x06
    133c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	69 f7       	brne	.-38     	; 0x1320 <voidSendEnablePulse+0xb2>
    1346:	14 c0       	rjmp	.+40     	; 0x1370 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1348:	6f 81       	ldd	r22, Y+7	; 0x07
    134a:	78 85       	ldd	r23, Y+8	; 0x08
    134c:	89 85       	ldd	r24, Y+9	; 0x09
    134e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <voidSendEnablePulse+0xfa>
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	62 e0       	ldi	r22, 0x02	; 2
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
}
    137a:	2e 96       	adiw	r28, 0x0e	; 14
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple, 0));
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	98 2f       	mov	r25, r24
    139c:	91 70       	andi	r25, 0x01	; 1
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	63 e0       	ldi	r22, 0x03	; 3
    13a2:	49 2f       	mov	r20, r25
    13a4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple, 1));
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	86 95       	lsr	r24
    13ac:	98 2f       	mov	r25, r24
    13ae:	91 70       	andi	r25, 0x01	; 1
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	64 e0       	ldi	r22, 0x04	; 4
    13b4:	49 2f       	mov	r20, r25
    13b6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple, 2));
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	86 95       	lsr	r24
    13be:	86 95       	lsr	r24
    13c0:	98 2f       	mov	r25, r24
    13c2:	91 70       	andi	r25, 0x01	; 1
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	65 e0       	ldi	r22, 0x05	; 5
    13c8:	49 2f       	mov	r20, r25
    13ca:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple, 3));
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	86 95       	lsr	r24
    13d2:	86 95       	lsr	r24
    13d4:	86 95       	lsr	r24
    13d6:	98 2f       	mov	r25, r24
    13d8:	91 70       	andi	r25, 0x01	; 1
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	66 e0       	ldi	r22, 0x06	; 6
    13de:	49 2f       	mov	r20, r25
    13e0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
}
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	0f 92       	push	r0
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	61 e0       	ldi	r22, 0x01	; 1
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4);
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	82 95       	swap	r24
    1410:	8f 70       	andi	r24, 0x0F	; 15
    1412:	0e 94 c6 09 	call	0x138c	; 0x138c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1416:	0e 94 37 09 	call	0x126e	; 0x126e <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	0e 94 c6 09 	call	0x138c	; 0x138c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1420:	0e 94 37 09 	call	0x126e	; 0x126e <voidSendEnablePulse>

#endif

}
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <CLCD_voidSendData>:

void CLCD_voidSendData(char Copy_c8Data)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data >> 4);
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	82 95       	swap	r24
    1450:	8f 70       	andi	r24, 0x0F	; 15
    1452:	0e 94 c6 09 	call	0x138c	; 0x138c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1456:	0e 94 37 09 	call	0x126e	; 0x126e <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data);
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	0e 94 c6 09 	call	0x138c	; 0x138c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1460:	0e 94 37 09 	call	0x126e	; 0x126e <voidSendEnablePulse>

#endif

}
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	2e 97       	sbiw	r28, 0x0e	; 14
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a0 e2       	ldi	r26, 0x20	; 32
    1486:	b2 e4       	ldi	r27, 0x42	; 66
    1488:	8b 87       	std	Y+11, r24	; 0x0b
    148a:	9c 87       	std	Y+12, r25	; 0x0c
    148c:	ad 87       	std	Y+13, r26	; 0x0d
    148e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1490:	6b 85       	ldd	r22, Y+11	; 0x0b
    1492:	7c 85       	ldd	r23, Y+12	; 0x0c
    1494:	8d 85       	ldd	r24, Y+13	; 0x0d
    1496:	9e 85       	ldd	r25, Y+14	; 0x0e
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	4a ef       	ldi	r20, 0xFA	; 250
    149e:	54 e4       	ldi	r21, 0x44	; 68
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	8f 83       	std	Y+7, r24	; 0x07
    14aa:	98 87       	std	Y+8, r25	; 0x08
    14ac:	a9 87       	std	Y+9, r26	; 0x09
    14ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14b0:	6f 81       	ldd	r22, Y+7	; 0x07
    14b2:	78 85       	ldd	r23, Y+8	; 0x08
    14b4:	89 85       	ldd	r24, Y+9	; 0x09
    14b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e8       	ldi	r20, 0x80	; 128
    14be:	5f e3       	ldi	r21, 0x3F	; 63
    14c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14c4:	88 23       	and	r24, r24
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <CLCD_voidInit+0x66>
		__ticks = 1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9e 83       	std	Y+6, r25	; 0x06
    14ce:	8d 83       	std	Y+5, r24	; 0x05
    14d0:	3f c0       	rjmp	.+126    	; 0x1550 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    14d2:	6f 81       	ldd	r22, Y+7	; 0x07
    14d4:	78 85       	ldd	r23, Y+8	; 0x08
    14d6:	89 85       	ldd	r24, Y+9	; 0x09
    14d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	3f ef       	ldi	r19, 0xFF	; 255
    14de:	4f e7       	ldi	r20, 0x7F	; 127
    14e0:	57 e4       	ldi	r21, 0x47	; 71
    14e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14e6:	18 16       	cp	r1, r24
    14e8:	4c f5       	brge	.+82     	; 0x153c <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e2       	ldi	r20, 0x20	; 32
    14f8:	51 e4       	ldi	r21, 0x41	; 65
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 83       	std	Y+5, r24	; 0x05
    1512:	0f c0       	rjmp	.+30     	; 0x1532 <CLCD_voidInit+0xc6>
    1514:	88 ec       	ldi	r24, 0xC8	; 200
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9c 83       	std	Y+4, r25	; 0x04
    151a:	8b 83       	std	Y+3, r24	; 0x03
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <CLCD_voidInit+0xb4>
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	69 f7       	brne	.-38     	; 0x1514 <CLCD_voidInit+0xa8>
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153c:	6f 81       	ldd	r22, Y+7	; 0x07
    153e:	78 85       	ldd	r23, Y+8	; 0x08
    1540:	89 85       	ldd	r24, Y+9	; 0x09
    1542:	9a 85       	ldd	r25, Y+10	; 0x0a
    1544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	9a 83       	std	Y+2, r25	; 0x02
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <CLCD_voidInit+0xf0>
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>

	/*Set Commands to lcd*/
	voidSetLCDHalfDataPort(0b0010);
    1578:	82 e0       	ldi	r24, 0x02	; 2
    157a:	0e 94 c6 09 	call	0x138c	; 0x138c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    157e:	0e 94 37 09 	call	0x126e	; 0x126e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	0e 94 c6 09 	call	0x138c	; 0x138c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1588:	0e 94 37 09 	call	0x126e	; 0x126e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    158c:	88 e0       	ldi	r24, 0x08	; 8
    158e:	0e 94 c6 09 	call	0x138c	; 0x138c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1592:	0e 94 37 09 	call	0x126e	; 0x126e <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    1596:	8c e0       	ldi	r24, 0x0C	; 12
    1598:	0e 94 f6 09 	call	0x13ec	; 0x13ec <CLCD_voidSendCmd>

	/*Display Clear cmd*/
	CLCD_voidSendCmd(0b00000001);
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <CLCD_voidSendCmd>
}
    15a2:	2e 96       	adiw	r28, 0x0e	; 14
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	0e 94 f6 09 	call	0x13ec	; 0x13ec <CLCD_voidSendCmd>
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <CLCD_u8SendString+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <CLCD_u8SendString+0x8>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	9c 83       	std	Y+4, r25	; 0x04
    15d6:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
    15d8:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0;
    15da:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ch8String != NULL)
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	d9 f0       	breq	.+54     	; 0x161a <CLCD_u8SendString+0x52>
    15e4:	0e c0       	rjmp	.+28     	; 0x1602 <CLCD_u8SendString+0x3a>
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	fc 01       	movw	r30, r24
    15f2:	e2 0f       	add	r30, r18
    15f4:	f3 1f       	adc	r31, r19
    15f6:	80 81       	ld	r24, Z
    15f8:	0e 94 16 0a 	call	0x142c	; 0x142c <CLCD_voidSendData>
			Local_u8Counter++;
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	8f 5f       	subi	r24, 0xFF	; 255
    1600:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	fc 01       	movw	r30, r24
    160e:	e2 0f       	add	r30, r18
    1610:	f3 1f       	adc	r31, r19
    1612:	80 81       	ld	r24, Z
    1614:	88 23       	and	r24, r24
    1616:	39 f7       	brne	.-50     	; 0x15e6 <CLCD_u8SendString+0x1e>
    1618:	02 c0       	rjmp	.+4      	; 0x161e <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <CLCD_voidSendDecimalNumber>:


void CLCD_voidSendDecimalNumber(sint32 Copy_s32Number)
{
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	60 97       	sbiw	r28, 0x10	; 16
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	6d 87       	std	Y+13, r22	; 0x0d
    1648:	7e 87       	std	Y+14, r23	; 0x0e
    164a:	8f 87       	std	Y+15, r24	; 0x0f
    164c:	98 8b       	std	Y+16, r25	; 0x10
	char Local_ch8Digit[10] = {0};
    164e:	8a e0       	ldi	r24, 0x0A	; 10
    1650:	fe 01       	movw	r30, r28
    1652:	33 96       	adiw	r30, 0x03	; 3
    1654:	df 01       	movw	r26, r30
    1656:	98 2f       	mov	r25, r24
    1658:	1d 92       	st	X+, r1
    165a:	9a 95       	dec	r25
    165c:	e9 f7       	brne	.-6      	; 0x1658 <CLCD_voidSendDecimalNumber+0x2a>

	uint8 Local_u8ReverseCounter = 0u;
    165e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	if(Copy_s32Number == 0)
    1660:	8d 85       	ldd	r24, Y+13	; 0x0d
    1662:	9e 85       	ldd	r25, Y+14	; 0x0e
    1664:	af 85       	ldd	r26, Y+15	; 0x0f
    1666:	b8 89       	ldd	r27, Y+16	; 0x10
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	a1 05       	cpc	r26, r1
    166c:	b1 05       	cpc	r27, r1
    166e:	21 f4       	brne	.+8      	; 0x1678 <CLCD_voidSendDecimalNumber+0x4a>
	{
		CLCD_voidSendData('0');
    1670:	80 e3       	ldi	r24, 0x30	; 48
    1672:	0e 94 16 0a 	call	0x142c	; 0x142c <CLCD_voidSendData>
    1676:	7b c0       	rjmp	.+246    	; 0x176e <CLCD_voidSendDecimalNumber+0x140>
	}
	else
	{
		/*Check for the negative sign*/
		if(Copy_s32Number < 0)
    1678:	8d 85       	ldd	r24, Y+13	; 0x0d
    167a:	9e 85       	ldd	r25, Y+14	; 0x0e
    167c:	af 85       	ldd	r26, Y+15	; 0x0f
    167e:	b8 89       	ldd	r27, Y+16	; 0x10
    1680:	bb 23       	and	r27, r27
    1682:	0c f0       	brlt	.+2      	; 0x1686 <CLCD_voidSendDecimalNumber+0x58>
    1684:	54 c0       	rjmp	.+168    	; 0x172e <CLCD_voidSendDecimalNumber+0x100>
		{
			/*Print the negative sign to the lcd*/
			CLCD_voidSendData('-');
    1686:	8d e2       	ldi	r24, 0x2D	; 45
    1688:	0e 94 16 0a 	call	0x142c	; 0x142c <CLCD_voidSendData>

			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	af 85       	ldd	r26, Y+15	; 0x0f
    1692:	b8 89       	ldd	r27, Y+16	; 0x10
    1694:	b0 95       	com	r27
    1696:	a0 95       	com	r26
    1698:	90 95       	com	r25
    169a:	81 95       	neg	r24
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	af 4f       	sbci	r26, 0xFF	; 255
    16a0:	bf 4f       	sbci	r27, 0xFF	; 255
    16a2:	8d 87       	std	Y+13, r24	; 0x0d
    16a4:	9e 87       	std	Y+14, r25	; 0x0e
    16a6:	af 87       	std	Y+15, r26	; 0x0f
    16a8:	b8 8b       	std	Y+16, r27	; 0x10
    16aa:	41 c0       	rjmp	.+130    	; 0x172e <CLCD_voidSendDecimalNumber+0x100>
		{
			/*
			 * Extract every digit number to the array of characters,
			 * then translate it into ascii value through adding '0'
			 */
			Local_ch8Digit[Local_u8ReverseCounter] = (char) (Copy_s32Number % 10);
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	08 2f       	mov	r16, r24
    16b0:	10 e0       	ldi	r17, 0x00	; 0
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	af 85       	ldd	r26, Y+15	; 0x0f
    16b8:	b8 89       	ldd	r27, Y+16	; 0x10
    16ba:	2a e0       	ldi	r18, 0x0A	; 10
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 ab 28 	call	0x5156	; 0x5156 <__divmodsi4>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	28 2f       	mov	r18, r24
    16d0:	ce 01       	movw	r24, r28
    16d2:	03 96       	adiw	r24, 0x03	; 3
    16d4:	fc 01       	movw	r30, r24
    16d6:	e0 0f       	add	r30, r16
    16d8:	f1 1f       	adc	r31, r17
    16da:	20 83       	st	Z, r18
			Local_ch8Digit[Local_u8ReverseCounter] = Local_ch8Digit[Local_u8ReverseCounter] + '0';
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	48 2f       	mov	r20, r24
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	ce 01       	movw	r24, r28
    16ea:	03 96       	adiw	r24, 0x03	; 3
    16ec:	fc 01       	movw	r30, r24
    16ee:	e2 0f       	add	r30, r18
    16f0:	f3 1f       	adc	r31, r19
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	20 5d       	subi	r18, 0xD0	; 208
    16f8:	ce 01       	movw	r24, r28
    16fa:	03 96       	adiw	r24, 0x03	; 3
    16fc:	fc 01       	movw	r30, r24
    16fe:	e4 0f       	add	r30, r20
    1700:	f5 1f       	adc	r31, r21
    1702:	20 83       	st	Z, r18

			Copy_s32Number = Copy_s32Number / 10;
    1704:	8d 85       	ldd	r24, Y+13	; 0x0d
    1706:	9e 85       	ldd	r25, Y+14	; 0x0e
    1708:	af 85       	ldd	r26, Y+15	; 0x0f
    170a:	b8 89       	ldd	r27, Y+16	; 0x10
    170c:	2a e0       	ldi	r18, 0x0A	; 10
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 ab 28 	call	0x5156	; 0x5156 <__divmodsi4>
    171c:	da 01       	movw	r26, r20
    171e:	c9 01       	movw	r24, r18
    1720:	8d 87       	std	Y+13, r24	; 0x0d
    1722:	9e 87       	std	Y+14, r25	; 0x0e
    1724:	af 87       	std	Y+15, r26	; 0x0f
    1726:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8ReverseCounter++;
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	8a 83       	std	Y+2, r24	; 0x02
			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
		}

		/*Extracting the number digits into array of characters*/
		while(Copy_s32Number > 0)
    172e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1730:	9e 85       	ldd	r25, Y+14	; 0x0e
    1732:	af 85       	ldd	r26, Y+15	; 0x0f
    1734:	b8 89       	ldd	r27, Y+16	; 0x10
    1736:	18 16       	cp	r1, r24
    1738:	19 06       	cpc	r1, r25
    173a:	1a 06       	cpc	r1, r26
    173c:	1b 06       	cpc	r1, r27
    173e:	0c f4       	brge	.+2      	; 0x1742 <CLCD_voidSendDecimalNumber+0x114>
    1740:	b5 cf       	rjmp	.-150    	; 0x16ac <CLCD_voidSendDecimalNumber+0x7e>
			Copy_s32Number = Copy_s32Number / 10;
			Local_u8ReverseCounter++;
		}

		/*Printing every character in the array until the end of the number*/
		Local_u8PrintCounter = Local_u8ReverseCounter;
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			CLCD_voidSendData(Local_ch8Digit[Local_u8PrintCounter - 1u]);
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9c 01       	movw	r18, r24
    174e:	21 50       	subi	r18, 0x01	; 1
    1750:	30 40       	sbci	r19, 0x00	; 0
    1752:	ce 01       	movw	r24, r28
    1754:	03 96       	adiw	r24, 0x03	; 3
    1756:	fc 01       	movw	r30, r24
    1758:	e2 0f       	add	r30, r18
    175a:	f3 1f       	adc	r31, r19
    175c:	80 81       	ld	r24, Z
    175e:	0e 94 16 0a 	call	0x142c	; 0x142c <CLCD_voidSendData>
			Local_u8PrintCounter--;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	81 50       	subi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
		}
		while(Local_u8PrintCounter > 0u);
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	88 23       	and	r24, r24
    176c:	61 f7       	brne	.-40     	; 0x1746 <CLCD_voidSendDecimalNumber+0x118>
	}
}
    176e:	60 96       	adiw	r28, 0x10	; 16
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	08 95       	ret

00001784 <CLCD_voidSendBinaryNumber>:


void CLCD_voidSendBinaryNumber(sint16 Copy_s16Number)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	a4 97       	sbiw	r28, 0x24	; 36
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	9c a3       	std	Y+36, r25	; 0x24
    179a:	8b a3       	std	Y+35, r24	; 0x23
	uint8 Local_u8BinaryDigits[32] = {0u};
    179c:	80 e2       	ldi	r24, 0x20	; 32
    179e:	fe 01       	movw	r30, r28
    17a0:	33 96       	adiw	r30, 0x03	; 3
    17a2:	df 01       	movw	r26, r30
    17a4:	98 2f       	mov	r25, r24
    17a6:	1d 92       	st	X+, r1
    17a8:	9a 95       	dec	r25
    17aa:	e9 f7       	brne	.-6      	; 0x17a6 <CLCD_voidSendBinaryNumber+0x22>

	uint8 Local_u8ReverseCounter = 0u;
    17ac:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");
    17ae:	80 e6       	ldi	r24, 0x60	; 96
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <CLCD_u8SendString>

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    17b6:	1a 82       	std	Y+2, r1	; 0x02
    17b8:	23 c0       	rjmp	.+70     	; 0x1800 <CLCD_voidSendBinaryNumber+0x7c>
	{
		if((Copy_s16Number & 1) == 1)
    17ba:	8b a1       	ldd	r24, Y+35	; 0x23
    17bc:	9c a1       	ldd	r25, Y+36	; 0x24
    17be:	81 70       	andi	r24, 0x01	; 1
    17c0:	90 70       	andi	r25, 0x00	; 0
    17c2:	88 23       	and	r24, r24
    17c4:	59 f0       	breq	.+22     	; 0x17dc <CLCD_voidSendBinaryNumber+0x58>
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 1u;
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	ce 01       	movw	r24, r28
    17ce:	03 96       	adiw	r24, 0x03	; 3
    17d0:	fc 01       	movw	r30, r24
    17d2:	e2 0f       	add	r30, r18
    17d4:	f3 1f       	adc	r31, r19
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 83       	st	Z, r24
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <CLCD_voidSendBinaryNumber+0x6a>
		}
		else
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 0u;
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	ce 01       	movw	r24, r28
    17e4:	03 96       	adiw	r24, 0x03	; 3
    17e6:	fc 01       	movw	r30, r24
    17e8:	e2 0f       	add	r30, r18
    17ea:	f3 1f       	adc	r31, r19
    17ec:	10 82       	st	Z, r1
		}
		Copy_s16Number = Copy_s16Number >> 1;
    17ee:	8b a1       	ldd	r24, Y+35	; 0x23
    17f0:	9c a1       	ldd	r25, Y+36	; 0x24
    17f2:	95 95       	asr	r25
    17f4:	87 95       	ror	r24
    17f6:	9c a3       	std	Y+36, r25	; 0x24
    17f8:	8b a3       	std	Y+35, r24	; 0x23

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	8a 83       	std	Y+2, r24	; 0x02
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	80 31       	cpi	r24, 0x10	; 16
    1804:	d0 f2       	brcs	.-76     	; 0x17ba <CLCD_voidSendBinaryNumber+0x36>
		}
		Copy_s16Number = Copy_s16Number >> 1;
	}

	/*Go to the next line in the lcd*/
	CLCD_u8GoToXY(0,1);
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	0e 94 ef 0c 	call	0x19de	; 0x19de <CLCD_u8GoToXY>

	/*Printing every character in the array until the end of the number*/
	Local_u8PrintCounter = 16;
    180e:	80 e1       	ldi	r24, 0x10	; 16
    1810:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		if(Local_u8BinaryDigits[Local_u8PrintCounter - 1] == 0)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 01       	movw	r18, r24
    181a:	21 50       	subi	r18, 0x01	; 1
    181c:	30 40       	sbci	r19, 0x00	; 0
    181e:	ce 01       	movw	r24, r28
    1820:	03 96       	adiw	r24, 0x03	; 3
    1822:	fc 01       	movw	r30, r24
    1824:	e2 0f       	add	r30, r18
    1826:	f3 1f       	adc	r31, r19
    1828:	80 81       	ld	r24, Z
    182a:	88 23       	and	r24, r24
    182c:	21 f4       	brne	.+8      	; 0x1836 <CLCD_voidSendBinaryNumber+0xb2>
		{
			CLCD_voidSendData('0');
    182e:	80 e3       	ldi	r24, 0x30	; 48
    1830:	0e 94 16 0a 	call	0x142c	; 0x142c <CLCD_voidSendData>
    1834:	03 c0       	rjmp	.+6      	; 0x183c <CLCD_voidSendBinaryNumber+0xb8>
		}
		else
		{
			CLCD_voidSendData('1');
    1836:	81 e3       	ldi	r24, 0x31	; 49
    1838:	0e 94 16 0a 	call	0x142c	; 0x142c <CLCD_voidSendData>
		}

		Local_u8PrintCounter--;
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	89 83       	std	Y+1, r24	; 0x01
	}
	while(Local_u8PrintCounter > 0);
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	88 23       	and	r24, r24
    1846:	29 f7       	brne	.-54     	; 0x1812 <CLCD_voidSendBinaryNumber+0x8e>
}
    1848:	a4 96       	adiw	r28, 0x24	; 36
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <CLCD_voidSendHexaNumber>:
//	/*Returnning the MaxZeros counter*/
//	return MaxZeros;
//}

void CLCD_voidSendHexaNumber(sint32 Copy_s32Number)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	a5 97       	sbiw	r28, 0x25	; 37
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	6d 8f       	std	Y+29, r22	; 0x1d
    1870:	7e 8f       	std	Y+30, r23	; 0x1e
    1872:	8f 8f       	std	Y+31, r24	; 0x1f
    1874:	98 a3       	std	Y+32, r25	; 0x20
	/*Define Variables*/
	char Local_ch8HexaTable[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
									'A', 'B', 'C', 'D', 'E', 'F'};
    1876:	ce 01       	movw	r24, r28
    1878:	05 96       	adiw	r24, 0x05	; 5
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	e4 ed       	ldi	r30, 0xD4	; 212
    1880:	f1 e0       	ldi	r31, 0x01	; 1
    1882:	fc a3       	std	Y+36, r31	; 0x24
    1884:	eb a3       	std	Y+35, r30	; 0x23
    1886:	f0 e1       	ldi	r31, 0x10	; 16
    1888:	fd a3       	std	Y+37, r31	; 0x25
    188a:	eb a1       	ldd	r30, Y+35	; 0x23
    188c:	fc a1       	ldd	r31, Y+36	; 0x24
    188e:	00 80       	ld	r0, Z
    1890:	8b a1       	ldd	r24, Y+35	; 0x23
    1892:	9c a1       	ldd	r25, Y+36	; 0x24
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	9c a3       	std	Y+36, r25	; 0x24
    1898:	8b a3       	std	Y+35, r24	; 0x23
    189a:	e9 a1       	ldd	r30, Y+33	; 0x21
    189c:	fa a1       	ldd	r31, Y+34	; 0x22
    189e:	00 82       	st	Z, r0
    18a0:	89 a1       	ldd	r24, Y+33	; 0x21
    18a2:	9a a1       	ldd	r25, Y+34	; 0x22
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	9a a3       	std	Y+34, r25	; 0x22
    18a8:	89 a3       	std	Y+33, r24	; 0x21
    18aa:	9d a1       	ldd	r25, Y+37	; 0x25
    18ac:	91 50       	subi	r25, 0x01	; 1
    18ae:	9d a3       	std	Y+37, r25	; 0x25
    18b0:	ed a1       	ldd	r30, Y+37	; 0x25
    18b2:	ee 23       	and	r30, r30
    18b4:	51 f7       	brne	.-44     	; 0x188a <CLCD_voidSendHexaNumber+0x30>
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    18b6:	1b 82       	std	Y+3, r1	; 0x03
    18b8:	20 c0       	rjmp	.+64     	; 0x18fa <CLCD_voidSendHexaNumber+0xa0>
	{
		/*Get the least for bits of the number*/
		Local_u8LeastFourBits = Copy_s32Number & 0x0f;
    18ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18bc:	8f 70       	andi	r24, 0x0F	; 15
    18be:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number = Copy_s32Number >> 4;
    18c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18c4:	af 8d       	ldd	r26, Y+31	; 0x1f
    18c6:	b8 a1       	ldd	r27, Y+32	; 0x20
    18c8:	68 94       	set
    18ca:	13 f8       	bld	r1, 3
    18cc:	b5 95       	asr	r27
    18ce:	a7 95       	ror	r26
    18d0:	97 95       	ror	r25
    18d2:	87 95       	ror	r24
    18d4:	16 94       	lsr	r1
    18d6:	d1 f7       	brne	.-12     	; 0x18cc <CLCD_voidSendHexaNumber+0x72>
    18d8:	8d 8f       	std	Y+29, r24	; 0x1d
    18da:	9e 8f       	std	Y+30, r25	; 0x1e
    18dc:	af 8f       	std	Y+31, r26	; 0x1f
    18de:	b8 a3       	std	Y+32, r27	; 0x20

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	ce 01       	movw	r24, r28
    18e8:	45 96       	adiw	r24, 0x15	; 21
    18ea:	fc 01       	movw	r30, r24
    18ec:	e2 0f       	add	r30, r18
    18ee:	f3 1f       	adc	r31, r19
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	8f 5f       	subi	r24, 0xFF	; 255
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	88 30       	cpi	r24, 0x08	; 8
    18fe:	e8 f2       	brcs	.-70     	; 0x18ba <CLCD_voidSendHexaNumber+0x60>

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
	}

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");
    1900:	83 e6       	ldi	r24, 0x63	; 99
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <CLCD_u8SendString>

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    1908:	87 e0       	ldi	r24, 0x07	; 7
    190a:	8c 83       	std	Y+4, r24	; 0x04
    190c:	1a c0       	rjmp	.+52     	; 0x1942 <CLCD_voidSendHexaNumber+0xe8>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	28 2f       	mov	r18, r24
    1912:	33 27       	eor	r19, r19
    1914:	27 fd       	sbrc	r18, 7
    1916:	30 95       	com	r19
    1918:	ce 01       	movw	r24, r28
    191a:	45 96       	adiw	r24, 0x15	; 21
    191c:	fc 01       	movw	r30, r24
    191e:	e2 0f       	add	r30, r18
    1920:	f3 1f       	adc	r31, r19
    1922:	80 81       	ld	r24, Z
    1924:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	ce 01       	movw	r24, r28
    192e:	05 96       	adiw	r24, 0x05	; 5
    1930:	fc 01       	movw	r30, r24
    1932:	e2 0f       	add	r30, r18
    1934:	f3 1f       	adc	r31, r19
    1936:	80 81       	ld	r24, Z
    1938:	0e 94 16 0a 	call	0x142c	; 0x142c <CLCD_voidSendData>

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	81 50       	subi	r24, 0x01	; 1
    1940:	8c 83       	std	Y+4, r24	; 0x04
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	88 23       	and	r24, r24
    1946:	1c f7       	brge	.-58     	; 0x190e <CLCD_voidSendHexaNumber+0xb4>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
	}
}
    1948:	a5 96       	adiw	r28, 0x25	; 37
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	27 97       	sbiw	r28, 0x07	; 7
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	8b 83       	std	Y+3, r24	; 0x03
    1972:	6d 83       	std	Y+5, r22	; 0x05
    1974:	4e 83       	std	Y+6, r20	; 0x06
    1976:	2f 83       	std	Y+7, r18	; 0x07
	/*Define Variables*/
	uint8 Local_u8CGRAMAdd = Copy_u8PatternNum * 8u;
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter;

	/*Set bit 6 in CGRAMAdd for CGRAM Address command standard*/
	SET_BIT(Local_u8CGRAMAdd, 6);
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	80 64       	ori	r24, 0x40	; 64
    1990:	8a 83       	std	Y+2, r24	; 0x02

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	0e 94 f6 09 	call	0x13ec	; 0x13ec <CLCD_voidSendCmd>

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    1998:	19 82       	std	Y+1, r1	; 0x01
    199a:	0e c0       	rjmp	.+28     	; 0x19b8 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	fc 01       	movw	r30, r24
    19a8:	e2 0f       	add	r30, r18
    19aa:	f3 1f       	adc	r31, r19
    19ac:	80 81       	ld	r24, Z
    19ae:	0e 94 16 0a 	call	0x142c	; 0x142c <CLCD_voidSendData>

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	8f 5f       	subi	r24, 0xFF	; 255
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	88 30       	cpi	r24, 0x08	; 8
    19bc:	78 f3       	brcs	.-34     	; 0x199c <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}

	/*Go to DDRAM Address to display the pattern*/
	CLCD_u8GoToXY(Copy_u8XPos, Copy_u8YPos);
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	6f 81       	ldd	r22, Y+7	; 0x07
    19c2:	0e 94 ef 0c 	call	0x19de	; 0x19de <CLCD_u8GoToXY>

	/*Display the pattern from CGRAM to DDRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	0e 94 16 0a 	call	0x142c	; 0x142c <CLCD_voidSendData>
}
    19cc:	27 96       	adiw	r28, 0x07	; 7
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <CLCD_u8GoToXY>:

uint8 CLCD_u8GoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <CLCD_u8GoToXY+0x6>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <CLCD_u8GoToXY+0x8>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    19ec:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    19ee:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8DDRamAdd;

	/*Configure the address of DDRam*/
	if(Copy_u8YPos == 0u)
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	88 23       	and	r24, r24
    19f4:	19 f4       	brne	.+6      	; 0x19fc <CLCD_u8GoToXY+0x1e>
	{
		Local_u8DDRamAdd = Copy_u8XPos;
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <CLCD_u8GoToXY+0x30>
	}
	else if(Copy_u8YPos == 1u)
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	21 f4       	brne	.+8      	; 0x1a0a <CLCD_u8GoToXY+0x2c>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	80 5c       	subi	r24, 0xC0	; 192
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <CLCD_u8GoToXY+0x30>
	}
	else
	{
		Local_u8ErrorState = NOK;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Send DDRam Set Address command to lcd*/
	SET_BIT(Local_u8DDRamAdd,7);
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	80 68       	ori	r24, 0x80	; 128
    1a12:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	0e 94 f6 09 	call	0x13ec	; 0x13ec <CLCD_voidSendCmd>

	return Local_u8ErrorState;
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	28 97       	sbiw	r28, 0x08	; 8
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	8a 83       	std	Y+2, r24	; 0x02
    1a40:	6b 83       	std	Y+3, r22	; 0x03
    1a42:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
    1a44:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	88 30       	cpi	r24, 0x08	; 8
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <DIO_u8SetPinDirection+0x24>
    1a4c:	f4 c0       	rjmp	.+488    	; 0x1c36 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <DIO_u8SetPinDirection+0x2c>
    1a54:	72 c0       	rjmp	.+228    	; 0x1b3a <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	38 87       	std	Y+8, r19	; 0x08
    1a5e:	2f 83       	std	Y+7, r18	; 0x07
    1a60:	8f 81       	ldd	r24, Y+7	; 0x07
    1a62:	98 85       	ldd	r25, Y+8	; 0x08
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	91 05       	cpc	r25, r1
    1a68:	49 f1       	breq	.+82     	; 0x1abc <DIO_u8SetPinDirection+0x92>
    1a6a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a6c:	38 85       	ldd	r19, Y+8	; 0x08
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <DIO_u8SetPinDirection+0x54>
    1a74:	8f 81       	ldd	r24, Y+7	; 0x07
    1a76:	98 85       	ldd	r25, Y+8	; 0x08
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <DIO_u8SetPinDirection+0x6a>
    1a7c:	5b c0       	rjmp	.+182    	; 0x1b34 <DIO_u8SetPinDirection+0x10a>
    1a7e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a80:	38 85       	ldd	r19, Y+8	; 0x08
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	71 f1       	breq	.+92     	; 0x1ae4 <DIO_u8SetPinDirection+0xba>
    1a88:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8a:	98 85       	ldd	r25, Y+8	; 0x08
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	91 05       	cpc	r25, r1
    1a90:	e9 f1       	breq	.+122    	; 0x1b0c <DIO_u8SetPinDirection+0xe2>
    1a92:	50 c0       	rjmp	.+160    	; 0x1b34 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
    1a94:	aa e3       	ldi	r26, 0x3A	; 58
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	ea e3       	ldi	r30, 0x3A	; 58
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <DIO_u8SetPinDirection+0x88>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <DIO_u8SetPinDirection+0x84>
    1ab6:	84 2b       	or	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	bf c0       	rjmp	.+382    	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
    1abc:	a7 e3       	ldi	r26, 0x37	; 55
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e7 e3       	ldi	r30, 0x37	; 55
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 2e       	mov	r0, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <DIO_u8SetPinDirection+0xb0>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <DIO_u8SetPinDirection+0xac>
    1ade:	84 2b       	or	r24, r20
    1ae0:	8c 93       	st	X, r24
    1ae2:	ab c0       	rjmp	.+342    	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
    1ae4:	a4 e3       	ldi	r26, 0x34	; 52
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e4 e3       	ldi	r30, 0x34	; 52
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	48 2f       	mov	r20, r24
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	02 2e       	mov	r0, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <DIO_u8SetPinDirection+0xd8>
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	0a 94       	dec	r0
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <DIO_u8SetPinDirection+0xd4>
    1b06:	84 2b       	or	r24, r20
    1b08:	8c 93       	st	X, r24
    1b0a:	97 c0       	rjmp	.+302    	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
    1b0c:	a1 e3       	ldi	r26, 0x31	; 49
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e1 e3       	ldi	r30, 0x31	; 49
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	48 2f       	mov	r20, r24
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	02 2e       	mov	r0, r18
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <DIO_u8SetPinDirection+0x100>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	0a 94       	dec	r0
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <DIO_u8SetPinDirection+0xfc>
    1b2e:	84 2b       	or	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	83 c0       	rjmp	.+262    	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	80 c0       	rjmp	.+256    	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	88 23       	and	r24, r24
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <DIO_u8SetPinDirection+0x118>
    1b40:	77 c0       	rjmp	.+238    	; 0x1c30 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	3e 83       	std	Y+6, r19	; 0x06
    1b4a:	2d 83       	std	Y+5, r18	; 0x05
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	91 05       	cpc	r25, r1
    1b54:	59 f1       	breq	.+86     	; 0x1bac <DIO_u8SetPinDirection+0x182>
    1b56:	2d 81       	ldd	r18, Y+5	; 0x05
    1b58:	3e 81       	ldd	r19, Y+6	; 0x06
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	2c f4       	brge	.+10     	; 0x1b6a <DIO_u8SetPinDirection+0x140>
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f0       	breq	.+26     	; 0x1b82 <DIO_u8SetPinDirection+0x158>
    1b68:	60 c0       	rjmp	.+192    	; 0x1c2a <DIO_u8SetPinDirection+0x200>
    1b6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b6e:	22 30       	cpi	r18, 0x02	; 2
    1b70:	31 05       	cpc	r19, r1
    1b72:	89 f1       	breq	.+98     	; 0x1bd6 <DIO_u8SetPinDirection+0x1ac>
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	83 30       	cpi	r24, 0x03	; 3
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <DIO_u8SetPinDirection+0x156>
    1b7e:	40 c0       	rjmp	.+128    	; 0x1c00 <DIO_u8SetPinDirection+0x1d6>
    1b80:	54 c0       	rjmp	.+168    	; 0x1c2a <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
    1b82:	aa e3       	ldi	r26, 0x3A	; 58
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	ea e3       	ldi	r30, 0x3A	; 58
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	48 2f       	mov	r20, r24
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 2e       	mov	r0, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <DIO_u8SetPinDirection+0x176>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	0a 94       	dec	r0
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <DIO_u8SetPinDirection+0x172>
    1ba4:	80 95       	com	r24
    1ba6:	84 23       	and	r24, r20
    1ba8:	8c 93       	st	X, r24
    1baa:	47 c0       	rjmp	.+142    	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
    1bac:	a7 e3       	ldi	r26, 0x37	; 55
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e7 e3       	ldi	r30, 0x37	; 55
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 2e       	mov	r0, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <DIO_u8SetPinDirection+0x1a0>
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	0a 94       	dec	r0
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <DIO_u8SetPinDirection+0x19c>
    1bce:	80 95       	com	r24
    1bd0:	84 23       	and	r24, r20
    1bd2:	8c 93       	st	X, r24
    1bd4:	32 c0       	rjmp	.+100    	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
    1bd6:	a4 e3       	ldi	r26, 0x34	; 52
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e4 e3       	ldi	r30, 0x34	; 52
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_u8SetPinDirection+0x1ca>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <DIO_u8SetPinDirection+0x1c6>
    1bf8:	80 95       	com	r24
    1bfa:	84 23       	and	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	1d c0       	rjmp	.+58     	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    1c00:	a1 e3       	ldi	r26, 0x31	; 49
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e1 e3       	ldi	r30, 0x31	; 49
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_u8SetPinDirection+0x1f4>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_u8SetPinDirection+0x1f0>
    1c22:	80 95       	com	r24
    1c24:	84 23       	and	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	08 c0       	rjmp	.+16     	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	05 c0       	rjmp	.+10     	; 0x1c3a <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3c:	28 96       	adiw	r28, 0x08	; 8
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	28 97       	sbiw	r28, 0x08	; 8
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    1c64:	6b 83       	std	Y+3, r22	; 0x03
    1c66:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1c68:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	88 30       	cpi	r24, 0x08	; 8
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <DIO_u8SetPinValue+0x24>
    1c70:	f4 c0       	rjmp	.+488    	; 0x1e5a <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <DIO_u8SetPinValue+0x2c>
    1c78:	72 c0       	rjmp	.+228    	; 0x1d5e <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	38 87       	std	Y+8, r19	; 0x08
    1c82:	2f 83       	std	Y+7, r18	; 0x07
    1c84:	8f 81       	ldd	r24, Y+7	; 0x07
    1c86:	98 85       	ldd	r25, Y+8	; 0x08
    1c88:	81 30       	cpi	r24, 0x01	; 1
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	49 f1       	breq	.+82     	; 0x1ce0 <DIO_u8SetPinValue+0x92>
    1c8e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c90:	38 85       	ldd	r19, Y+8	; 0x08
    1c92:	22 30       	cpi	r18, 0x02	; 2
    1c94:	31 05       	cpc	r19, r1
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <DIO_u8SetPinValue+0x54>
    1c98:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9a:	98 85       	ldd	r25, Y+8	; 0x08
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	61 f0       	breq	.+24     	; 0x1cb8 <DIO_u8SetPinValue+0x6a>
    1ca0:	5b c0       	rjmp	.+182    	; 0x1d58 <DIO_u8SetPinValue+0x10a>
    1ca2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ca4:	38 85       	ldd	r19, Y+8	; 0x08
    1ca6:	22 30       	cpi	r18, 0x02	; 2
    1ca8:	31 05       	cpc	r19, r1
    1caa:	71 f1       	breq	.+92     	; 0x1d08 <DIO_u8SetPinValue+0xba>
    1cac:	8f 81       	ldd	r24, Y+7	; 0x07
    1cae:	98 85       	ldd	r25, Y+8	; 0x08
    1cb0:	83 30       	cpi	r24, 0x03	; 3
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	e9 f1       	breq	.+122    	; 0x1d30 <DIO_u8SetPinValue+0xe2>
    1cb6:	50 c0       	rjmp	.+160    	; 0x1d58 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    1cb8:	ab e3       	ldi	r26, 0x3B	; 59
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	eb e3       	ldi	r30, 0x3B	; 59
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_u8SetPinValue+0x88>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <DIO_u8SetPinValue+0x84>
    1cda:	84 2b       	or	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	bf c0       	rjmp	.+382    	; 0x1e5e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    1ce0:	a8 e3       	ldi	r26, 0x38	; 56
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e8 e3       	ldi	r30, 0x38	; 56
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_u8SetPinValue+0xb0>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <DIO_u8SetPinValue+0xac>
    1d02:	84 2b       	or	r24, r20
    1d04:	8c 93       	st	X, r24
    1d06:	ab c0       	rjmp	.+342    	; 0x1e5e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    1d08:	a5 e3       	ldi	r26, 0x35	; 53
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e5 e3       	ldi	r30, 0x35	; 53
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <DIO_u8SetPinValue+0xd8>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <DIO_u8SetPinValue+0xd4>
    1d2a:	84 2b       	or	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	97 c0       	rjmp	.+302    	; 0x1e5e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    1d30:	a2 e3       	ldi	r26, 0x32	; 50
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e2 e3       	ldi	r30, 0x32	; 50
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_u8SetPinValue+0x100>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <DIO_u8SetPinValue+0xfc>
    1d52:	84 2b       	or	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	83 c0       	rjmp	.+262    	; 0x1e5e <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	80 c0       	rjmp	.+256    	; 0x1e5e <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d60:	88 23       	and	r24, r24
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <DIO_u8SetPinValue+0x118>
    1d64:	77 c0       	rjmp	.+238    	; 0x1e54 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3e 83       	std	Y+6, r19	; 0x06
    1d6e:	2d 83       	std	Y+5, r18	; 0x05
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	59 f1       	breq	.+86     	; 0x1dd0 <DIO_u8SetPinValue+0x182>
    1d7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <DIO_u8SetPinValue+0x140>
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	69 f0       	breq	.+26     	; 0x1da6 <DIO_u8SetPinValue+0x158>
    1d8c:	60 c0       	rjmp	.+192    	; 0x1e4e <DIO_u8SetPinValue+0x200>
    1d8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d90:	3e 81       	ldd	r19, Y+6	; 0x06
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	89 f1       	breq	.+98     	; 0x1dfa <DIO_u8SetPinValue+0x1ac>
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	91 05       	cpc	r25, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <DIO_u8SetPinValue+0x156>
    1da2:	40 c0       	rjmp	.+128    	; 0x1e24 <DIO_u8SetPinValue+0x1d6>
    1da4:	54 c0       	rjmp	.+168    	; 0x1e4e <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    1da6:	ab e3       	ldi	r26, 0x3B	; 59
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	eb e3       	ldi	r30, 0x3B	; 59
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <DIO_u8SetPinValue+0x176>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <DIO_u8SetPinValue+0x172>
    1dc8:	80 95       	com	r24
    1dca:	84 23       	and	r24, r20
    1dcc:	8c 93       	st	X, r24
    1dce:	47 c0       	rjmp	.+142    	; 0x1e5e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    1dd0:	a8 e3       	ldi	r26, 0x38	; 56
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e8 e3       	ldi	r30, 0x38	; 56
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 2e       	mov	r0, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <DIO_u8SetPinValue+0x1a0>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	0a 94       	dec	r0
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <DIO_u8SetPinValue+0x19c>
    1df2:	80 95       	com	r24
    1df4:	84 23       	and	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	32 c0       	rjmp	.+100    	; 0x1e5e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    1dfa:	a5 e3       	ldi	r26, 0x35	; 53
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e5 e3       	ldi	r30, 0x35	; 53
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_u8SetPinValue+0x1ca>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_u8SetPinValue+0x1c6>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24
    1e22:	1d c0       	rjmp	.+58     	; 0x1e5e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    1e24:	a2 e3       	ldi	r26, 0x32	; 50
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e2 e3       	ldi	r30, 0x32	; 50
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_u8SetPinValue+0x1f4>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_u8SetPinValue+0x1f0>
    1e46:	80 95       	com	r24
    1e48:	84 23       	and	r24, r20
    1e4a:	8c 93       	st	X, r24
    1e4c:	08 c0       	rjmp	.+16     	; 0x1e5e <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	05 c0       	rjmp	.+10     	; 0x1e5e <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e60:	28 96       	adiw	r28, 0x08	; 8
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <DIO_u8TogglePinValue+0x6>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <DIO_u8TogglePinValue+0x8>
    1e7a:	0f 92       	push	r0
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    1e82:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1e84:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 30       	cpi	r24, 0x08	; 8
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <DIO_u8TogglePinValue+0x1c>
    1e8c:	72 c0       	rjmp	.+228    	; 0x1f72 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3d 83       	std	Y+5, r19	; 0x05
    1e96:	2c 83       	std	Y+4, r18	; 0x04
    1e98:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	49 f1       	breq	.+82     	; 0x1ef4 <DIO_u8TogglePinValue+0x82>
    1ea2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <DIO_u8TogglePinValue+0x44>
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	61 f0       	breq	.+24     	; 0x1ecc <DIO_u8TogglePinValue+0x5a>
    1eb4:	5b c0       	rjmp	.+182    	; 0x1f6c <DIO_u8TogglePinValue+0xfa>
    1eb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	71 f1       	breq	.+92     	; 0x1f1c <DIO_u8TogglePinValue+0xaa>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	83 30       	cpi	r24, 0x03	; 3
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	e9 f1       	breq	.+122    	; 0x1f44 <DIO_u8TogglePinValue+0xd2>
    1eca:	50 c0       	rjmp	.+160    	; 0x1f6c <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    1ecc:	ab e3       	ldi	r26, 0x3B	; 59
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	eb e3       	ldi	r30, 0x3B	; 59
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_u8TogglePinValue+0x78>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <DIO_u8TogglePinValue+0x74>
    1eee:	84 27       	eor	r24, r20
    1ef0:	8c 93       	st	X, r24
    1ef2:	41 c0       	rjmp	.+130    	; 0x1f76 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    1ef4:	a8 e3       	ldi	r26, 0x38	; 56
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e8 e3       	ldi	r30, 0x38	; 56
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	48 2f       	mov	r20, r24
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 2e       	mov	r0, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <DIO_u8TogglePinValue+0xa0>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <DIO_u8TogglePinValue+0x9c>
    1f16:	84 27       	eor	r24, r20
    1f18:	8c 93       	st	X, r24
    1f1a:	2d c0       	rjmp	.+90     	; 0x1f76 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    1f1c:	a5 e3       	ldi	r26, 0x35	; 53
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e5 e3       	ldi	r30, 0x35	; 53
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	48 2f       	mov	r20, r24
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	02 2e       	mov	r0, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <DIO_u8TogglePinValue+0xc8>
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	0a 94       	dec	r0
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <DIO_u8TogglePinValue+0xc4>
    1f3e:	84 27       	eor	r24, r20
    1f40:	8c 93       	st	X, r24
    1f42:	19 c0       	rjmp	.+50     	; 0x1f76 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    1f44:	a2 e3       	ldi	r26, 0x32	; 50
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e2 e3       	ldi	r30, 0x32	; 50
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	48 2f       	mov	r20, r24
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <DIO_u8TogglePinValue+0xf0>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	0a 94       	dec	r0
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <DIO_u8TogglePinValue+0xec>
    1f66:	84 27       	eor	r24, r20
    1f68:	8c 93       	st	X, r24
    1f6a:	05 c0       	rjmp	.+10     	; 0x1f76 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	27 97       	sbiw	r28, 0x07	; 7
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
    1f9e:	6b 83       	std	Y+3, r22	; 0x03
    1fa0:	5d 83       	std	Y+5, r21	; 0x05
    1fa2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1fa4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	88 30       	cpi	r24, 0x08	; 8
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <DIO_u8GetPinValue+0x26>
    1fac:	74 c0       	rjmp	.+232    	; 0x2096 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	3f 83       	std	Y+7, r19	; 0x07
    1fb6:	2e 83       	std	Y+6, r18	; 0x06
    1fb8:	4e 81       	ldd	r20, Y+6	; 0x06
    1fba:	5f 81       	ldd	r21, Y+7	; 0x07
    1fbc:	41 30       	cpi	r20, 0x01	; 1
    1fbe:	51 05       	cpc	r21, r1
    1fc0:	59 f1       	breq	.+86     	; 0x2018 <DIO_u8GetPinValue+0x90>
    1fc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	91 05       	cpc	r25, r1
    1fca:	34 f4       	brge	.+12     	; 0x1fd8 <DIO_u8GetPinValue+0x50>
    1fcc:	2e 81       	ldd	r18, Y+6	; 0x06
    1fce:	3f 81       	ldd	r19, Y+7	; 0x07
    1fd0:	21 15       	cp	r18, r1
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	69 f0       	breq	.+26     	; 0x1ff0 <DIO_u8GetPinValue+0x68>
    1fd6:	5c c0       	rjmp	.+184    	; 0x2090 <DIO_u8GetPinValue+0x108>
    1fd8:	4e 81       	ldd	r20, Y+6	; 0x06
    1fda:	5f 81       	ldd	r21, Y+7	; 0x07
    1fdc:	42 30       	cpi	r20, 0x02	; 2
    1fde:	51 05       	cpc	r21, r1
    1fe0:	79 f1       	breq	.+94     	; 0x2040 <DIO_u8GetPinValue+0xb8>
    1fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe6:	83 30       	cpi	r24, 0x03	; 3
    1fe8:	91 05       	cpc	r25, r1
    1fea:	09 f4       	brne	.+2      	; 0x1fee <DIO_u8GetPinValue+0x66>
    1fec:	3d c0       	rjmp	.+122    	; 0x2068 <DIO_u8GetPinValue+0xe0>
    1fee:	50 c0       	rjmp	.+160    	; 0x2090 <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    1ff0:	e9 e3       	ldi	r30, 0x39	; 57
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a9 01       	movw	r20, r18
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <DIO_u8GetPinValue+0x80>
    2004:	55 95       	asr	r21
    2006:	47 95       	ror	r20
    2008:	8a 95       	dec	r24
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <DIO_u8GetPinValue+0x7c>
    200c:	ca 01       	movw	r24, r20
    200e:	81 70       	andi	r24, 0x01	; 1
    2010:	ec 81       	ldd	r30, Y+4	; 0x04
    2012:	fd 81       	ldd	r31, Y+5	; 0x05
    2014:	80 83       	st	Z, r24
    2016:	41 c0       	rjmp	.+130    	; 0x209a <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    2018:	e6 e3       	ldi	r30, 0x36	; 54
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	88 2f       	mov	r24, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a9 01       	movw	r20, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <DIO_u8GetPinValue+0xa8>
    202c:	55 95       	asr	r21
    202e:	47 95       	ror	r20
    2030:	8a 95       	dec	r24
    2032:	e2 f7       	brpl	.-8      	; 0x202c <DIO_u8GetPinValue+0xa4>
    2034:	ca 01       	movw	r24, r20
    2036:	81 70       	andi	r24, 0x01	; 1
    2038:	ec 81       	ldd	r30, Y+4	; 0x04
    203a:	fd 81       	ldd	r31, Y+5	; 0x05
    203c:	80 83       	st	Z, r24
    203e:	2d c0       	rjmp	.+90     	; 0x209a <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    2040:	e3 e3       	ldi	r30, 0x33	; 51
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	88 2f       	mov	r24, r24
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a9 01       	movw	r20, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <DIO_u8GetPinValue+0xd0>
    2054:	55 95       	asr	r21
    2056:	47 95       	ror	r20
    2058:	8a 95       	dec	r24
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <DIO_u8GetPinValue+0xcc>
    205c:	ca 01       	movw	r24, r20
    205e:	81 70       	andi	r24, 0x01	; 1
    2060:	ec 81       	ldd	r30, Y+4	; 0x04
    2062:	fd 81       	ldd	r31, Y+5	; 0x05
    2064:	80 83       	st	Z, r24
    2066:	19 c0       	rjmp	.+50     	; 0x209a <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    2068:	e0 e3       	ldi	r30, 0x30	; 48
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	88 2f       	mov	r24, r24
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a9 01       	movw	r20, r18
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <DIO_u8GetPinValue+0xf8>
    207c:	55 95       	asr	r21
    207e:	47 95       	ror	r20
    2080:	8a 95       	dec	r24
    2082:	e2 f7       	brpl	.-8      	; 0x207c <DIO_u8GetPinValue+0xf4>
    2084:	ca 01       	movw	r24, r20
    2086:	81 70       	andi	r24, 0x01	; 1
    2088:	ec 81       	ldd	r30, Y+4	; 0x04
    208a:	fd 81       	ldd	r31, Y+5	; 0x05
    208c:	80 83       	st	Z, r24
    208e:	05 c0       	rjmp	.+10     	; 0x209a <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	02 c0       	rjmp	.+4      	; 0x209a <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
}
    209c:	27 96       	adiw	r28, 0x07	; 7
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <DIO_u8SetPortDirection+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <DIO_u8SetPortDirection+0x8>
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	8a 83       	std	Y+2, r24	; 0x02
    20be:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    20c0:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	3d 83       	std	Y+5, r19	; 0x05
    20ca:	2c 83       	std	Y+4, r18	; 0x04
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	9d 81       	ldd	r25, Y+5	; 0x05
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	91 05       	cpc	r25, r1
    20d4:	d1 f0       	breq	.+52     	; 0x210a <DIO_u8SetPortDirection+0x5c>
    20d6:	2c 81       	ldd	r18, Y+4	; 0x04
    20d8:	3d 81       	ldd	r19, Y+5	; 0x05
    20da:	22 30       	cpi	r18, 0x02	; 2
    20dc:	31 05       	cpc	r19, r1
    20de:	2c f4       	brge	.+10     	; 0x20ea <DIO_u8SetPortDirection+0x3c>
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	9d 81       	ldd	r25, Y+5	; 0x05
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	61 f0       	breq	.+24     	; 0x2100 <DIO_u8SetPortDirection+0x52>
    20e8:	1f c0       	rjmp	.+62     	; 0x2128 <DIO_u8SetPortDirection+0x7a>
    20ea:	2c 81       	ldd	r18, Y+4	; 0x04
    20ec:	3d 81       	ldd	r19, Y+5	; 0x05
    20ee:	22 30       	cpi	r18, 0x02	; 2
    20f0:	31 05       	cpc	r19, r1
    20f2:	81 f0       	breq	.+32     	; 0x2114 <DIO_u8SetPortDirection+0x66>
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	9d 81       	ldd	r25, Y+5	; 0x05
    20f8:	83 30       	cpi	r24, 0x03	; 3
    20fa:	91 05       	cpc	r25, r1
    20fc:	81 f0       	breq	.+32     	; 0x211e <DIO_u8SetPortDirection+0x70>
    20fe:	14 c0       	rjmp	.+40     	; 0x2128 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    2100:	ea e3       	ldi	r30, 0x3A	; 58
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	80 83       	st	Z, r24
    2108:	11 c0       	rjmp	.+34     	; 0x212c <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    210a:	e7 e3       	ldi	r30, 0x37	; 55
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	80 83       	st	Z, r24
    2112:	0c c0       	rjmp	.+24     	; 0x212c <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    2114:	e4 e3       	ldi	r30, 0x34	; 52
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	80 83       	st	Z, r24
    211c:	07 c0       	rjmp	.+14     	; 0x212c <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    211e:	e1 e3       	ldi	r30, 0x31	; 49
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	80 83       	st	Z, r24
    2126:	02 c0       	rjmp	.+4      	; 0x212c <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    212c:	89 81       	ldd	r24, Y+1	; 0x01
}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	00 d0       	rcall	.+0      	; 0x2144 <DIO_u8SetPortValue+0x6>
    2144:	00 d0       	rcall	.+0      	; 0x2146 <DIO_u8SetPortValue+0x8>
    2146:	0f 92       	push	r0
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	8a 83       	std	Y+2, r24	; 0x02
    214e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    2150:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	3d 83       	std	Y+5, r19	; 0x05
    215a:	2c 83       	std	Y+4, r18	; 0x04
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	9d 81       	ldd	r25, Y+5	; 0x05
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	91 05       	cpc	r25, r1
    2164:	d1 f0       	breq	.+52     	; 0x219a <DIO_u8SetPortValue+0x5c>
    2166:	2c 81       	ldd	r18, Y+4	; 0x04
    2168:	3d 81       	ldd	r19, Y+5	; 0x05
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	2c f4       	brge	.+10     	; 0x217a <DIO_u8SetPortValue+0x3c>
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	61 f0       	breq	.+24     	; 0x2190 <DIO_u8SetPortValue+0x52>
    2178:	1f c0       	rjmp	.+62     	; 0x21b8 <DIO_u8SetPortValue+0x7a>
    217a:	2c 81       	ldd	r18, Y+4	; 0x04
    217c:	3d 81       	ldd	r19, Y+5	; 0x05
    217e:	22 30       	cpi	r18, 0x02	; 2
    2180:	31 05       	cpc	r19, r1
    2182:	81 f0       	breq	.+32     	; 0x21a4 <DIO_u8SetPortValue+0x66>
    2184:	8c 81       	ldd	r24, Y+4	; 0x04
    2186:	9d 81       	ldd	r25, Y+5	; 0x05
    2188:	83 30       	cpi	r24, 0x03	; 3
    218a:	91 05       	cpc	r25, r1
    218c:	81 f0       	breq	.+32     	; 0x21ae <DIO_u8SetPortValue+0x70>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    2190:	eb e3       	ldi	r30, 0x3B	; 59
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	80 83       	st	Z, r24
    2198:	11 c0       	rjmp	.+34     	; 0x21bc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    219a:	e8 e3       	ldi	r30, 0x38	; 56
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	80 83       	st	Z, r24
    21a2:	0c c0       	rjmp	.+24     	; 0x21bc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    21a4:	e5 e3       	ldi	r30, 0x35	; 53
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	80 83       	st	Z, r24
    21ac:	07 c0       	rjmp	.+14     	; 0x21bc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    21ae:	e2 e3       	ldi	r30, 0x32	; 50
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	80 83       	st	Z, r24
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
    21d6:	78 94       	sei
}
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
    21e6:	f8 94       	cli
}
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <ICU_voidMeasurePWM>:
static uint8 ICU_u8OvfCounter = 0u;
static uint8 ICU_u8PeriodOvfCounter = 0u;
static uint8 ICU_u8DutyCycleOvfCounter = 0u;

void ICU_voidMeasurePWM(uint8 *Copy_pu8DutyCycle, uint32 *Copy_pu32PeriodTime)
{
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	2d 97       	sbiw	r28, 0x0d	; 13
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	9b 87       	std	Y+11, r25	; 0x0b
    220c:	8a 87       	std	Y+10, r24	; 0x0a
    220e:	7d 87       	std	Y+13, r23	; 0x0d
    2210:	6c 87       	std	Y+12, r22	; 0x0c
	uint32 Local_u32PeriodTime = 0u;
    2212:	1a 82       	std	Y+2, r1	; 0x02
    2214:	1b 82       	std	Y+3, r1	; 0x03
    2216:	1c 82       	std	Y+4, r1	; 0x04
    2218:	1d 82       	std	Y+5, r1	; 0x05
	uint8 Local_u8DutyCycle = 0u;
    221a:	19 82       	std	Y+1, r1	; 0x01

	TIMER1_CFG_t Local_stTimer1Cfg;
	Local_stTimer1Cfg.ClkSelect = TIMER1_u8SYS_CLK_BY_8;
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	8e 83       	std	Y+6, r24	; 0x06
	Local_stTimer1Cfg.WGM = NORMAL_16_BITS;
    2220:	1f 82       	std	Y+7, r1	; 0x07
	Local_stTimer1Cfg.OCAMode = OC_DISCONNECTED;
    2222:	18 86       	std	Y+8, r1	; 0x08
	Local_stTimer1Cfg.OCBMode = OC_DISCONNECTED;
    2224:	19 86       	std	Y+9, r1	; 0x09
	TIMER1_u8Init(&Local_stTimer1Cfg);
    2226:	ce 01       	movw	r24, r28
    2228:	06 96       	adiw	r24, 0x06	; 6
    222a:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <TIMER1_u8Init>

	TIMERS_u8IntEnable(TIMER1_CAPT);
    222e:	85 e0       	ldi	r24, 0x05	; 5
    2230:	0e 94 87 1b 	call	0x370e	; 0x370e <TIMERS_u8IntEnable>
	TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_RISING_EDGE);
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_u8SetInputCaptTriggerSrc>
	TIMERS_u8SetCallBack(TIMER1_CAPT, ICU_voidCaptureISR);
    223a:	23 ed       	ldi	r18, 0xD3	; 211
    223c:	32 e1       	ldi	r19, 0x12	; 18
    223e:	85 e0       	ldi	r24, 0x05	; 5
    2240:	b9 01       	movw	r22, r18
    2242:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <TIMERS_u8SetCallBack>

	TIMERS_u8IntEnable(TIMER1_OVF);
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	0e 94 87 1b 	call	0x370e	; 0x370e <TIMERS_u8IntEnable>
	TIMERS_u8SetCallBack(TIMER1_OVF, ICU_voidOvfISR);
    224c:	22 e1       	ldi	r18, 0x12	; 18
    224e:	33 e1       	ldi	r19, 0x13	; 19
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	b9 01       	movw	r22, r18
    2254:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <TIMERS_u8SetCallBack>
	while((ICU_u16Capture1 == 0u) || (ICU_u16Capture2 == 0u) || (ICU_u16Capture3 == 0u));
    2258:	80 91 ed 01 	lds	r24, 0x01ED
    225c:	90 91 ee 01 	lds	r25, 0x01EE
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	d1 f3       	breq	.-12     	; 0x2258 <ICU_voidMeasurePWM+0x6a>
    2264:	80 91 ef 01 	lds	r24, 0x01EF
    2268:	90 91 f0 01 	lds	r25, 0x01F0
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	a1 f3       	breq	.-24     	; 0x2258 <ICU_voidMeasurePWM+0x6a>
    2270:	80 91 f1 01 	lds	r24, 0x01F1
    2274:	90 91 f2 01 	lds	r25, 0x01F2
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	71 f3       	breq	.-36     	; 0x2258 <ICU_voidMeasurePWM+0x6a>

	if(ICU_u8PeriodOvfCounter == 0u)
    227c:	80 91 f4 01 	lds	r24, 0x01F4
    2280:	88 23       	and	r24, r24
    2282:	09 f0       	breq	.+2      	; 0x2286 <ICU_voidMeasurePWM+0x98>
    2284:	48 c0       	rjmp	.+144    	; 0x2316 <ICU_voidMeasurePWM+0x128>
	{
		Local_u32PeriodTime = ICU_u16Capture2 - ICU_u16Capture1;
    2286:	20 91 ef 01 	lds	r18, 0x01EF
    228a:	30 91 f0 01 	lds	r19, 0x01F0
    228e:	80 91 ed 01 	lds	r24, 0x01ED
    2292:	90 91 ee 01 	lds	r25, 0x01EE
    2296:	a9 01       	movw	r20, r18
    2298:	48 1b       	sub	r20, r24
    229a:	59 0b       	sbc	r21, r25
    229c:	ca 01       	movw	r24, r20
    229e:	cc 01       	movw	r24, r24
    22a0:	a0 e0       	ldi	r26, 0x00	; 0
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	8a 83       	std	Y+2, r24	; 0x02
    22a6:	9b 83       	std	Y+3, r25	; 0x03
    22a8:	ac 83       	std	Y+4, r26	; 0x04
    22aa:	bd 83       	std	Y+5, r27	; 0x05
		Local_u8DutyCycle = (((f32) (ICU_u16Capture3 - ICU_u16Capture2)) / (f32) Local_u32PeriodTime) * 100;
    22ac:	20 91 f1 01 	lds	r18, 0x01F1
    22b0:	30 91 f2 01 	lds	r19, 0x01F2
    22b4:	80 91 ef 01 	lds	r24, 0x01EF
    22b8:	90 91 f0 01 	lds	r25, 0x01F0
    22bc:	a9 01       	movw	r20, r18
    22be:	48 1b       	sub	r20, r24
    22c0:	59 0b       	sbc	r21, r25
    22c2:	ca 01       	movw	r24, r20
    22c4:	cc 01       	movw	r24, r24
    22c6:	a0 e0       	ldi	r26, 0x00	; 0
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22d2:	7b 01       	movw	r14, r22
    22d4:	8c 01       	movw	r16, r24
    22d6:	6a 81       	ldd	r22, Y+2	; 0x02
    22d8:	7b 81       	ldd	r23, Y+3	; 0x03
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	9d 81       	ldd	r25, Y+5	; 0x05
    22de:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22e2:	9b 01       	movw	r18, r22
    22e4:	ac 01       	movw	r20, r24
    22e6:	c8 01       	movw	r24, r16
    22e8:	b7 01       	movw	r22, r14
    22ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	48 ec       	ldi	r20, 0xC8	; 200
    22fc:	52 e4       	ldi	r21, 0x42	; 66
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	bc 01       	movw	r22, r24
    2308:	cd 01       	movw	r24, r26
    230a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	27 c1       	rjmp	.+590    	; 0x2564 <ICU_voidMeasurePWM+0x376>
	}
	else
	{
		if(ICU_u16Capture2 >= ICU_u16Capture1)
    2316:	20 91 ef 01 	lds	r18, 0x01EF
    231a:	30 91 f0 01 	lds	r19, 0x01F0
    231e:	80 91 ed 01 	lds	r24, 0x01ED
    2322:	90 91 ee 01 	lds	r25, 0x01EE
    2326:	28 17       	cp	r18, r24
    2328:	39 07       	cpc	r19, r25
    232a:	08 f1       	brcs	.+66     	; 0x236e <ICU_voidMeasurePWM+0x180>
		{
			Local_u32PeriodTime = ICU_u16Capture2 - ICU_u16Capture1 + (ICU_u8PeriodOvfCounter * 65536u);
    232c:	20 91 ef 01 	lds	r18, 0x01EF
    2330:	30 91 f0 01 	lds	r19, 0x01F0
    2334:	80 91 ed 01 	lds	r24, 0x01ED
    2338:	90 91 ee 01 	lds	r25, 0x01EE
    233c:	a9 01       	movw	r20, r18
    233e:	48 1b       	sub	r20, r24
    2340:	59 0b       	sbc	r21, r25
    2342:	ca 01       	movw	r24, r20
    2344:	9c 01       	movw	r18, r24
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	50 e0       	ldi	r21, 0x00	; 0
    234a:	80 91 f4 01 	lds	r24, 0x01F4
    234e:	88 2f       	mov	r24, r24
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e0       	ldi	r26, 0x00	; 0
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	dc 01       	movw	r26, r24
    2358:	99 27       	eor	r25, r25
    235a:	88 27       	eor	r24, r24
    235c:	82 0f       	add	r24, r18
    235e:	93 1f       	adc	r25, r19
    2360:	a4 1f       	adc	r26, r20
    2362:	b5 1f       	adc	r27, r21
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	9b 83       	std	Y+3, r25	; 0x03
    2368:	ac 83       	std	Y+4, r26	; 0x04
    236a:	bd 83       	std	Y+5, r27	; 0x05
    236c:	2b c0       	rjmp	.+86     	; 0x23c4 <ICU_voidMeasurePWM+0x1d6>
		}
		else if(ICU_u16Capture2 < ICU_u16Capture1)
    236e:	20 91 ef 01 	lds	r18, 0x01EF
    2372:	30 91 f0 01 	lds	r19, 0x01F0
    2376:	80 91 ed 01 	lds	r24, 0x01ED
    237a:	90 91 ee 01 	lds	r25, 0x01EE
    237e:	28 17       	cp	r18, r24
    2380:	39 07       	cpc	r19, r25
    2382:	00 f5       	brcc	.+64     	; 0x23c4 <ICU_voidMeasurePWM+0x1d6>
		{
			Local_u32PeriodTime = ICU_u16Capture1 - ICU_u16Capture2 + (ICU_u8PeriodOvfCounter * 65536u);
    2384:	20 91 ed 01 	lds	r18, 0x01ED
    2388:	30 91 ee 01 	lds	r19, 0x01EE
    238c:	80 91 ef 01 	lds	r24, 0x01EF
    2390:	90 91 f0 01 	lds	r25, 0x01F0
    2394:	a9 01       	movw	r20, r18
    2396:	48 1b       	sub	r20, r24
    2398:	59 0b       	sbc	r21, r25
    239a:	ca 01       	movw	r24, r20
    239c:	9c 01       	movw	r18, r24
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	80 91 f4 01 	lds	r24, 0x01F4
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	dc 01       	movw	r26, r24
    23b0:	99 27       	eor	r25, r25
    23b2:	88 27       	eor	r24, r24
    23b4:	82 0f       	add	r24, r18
    23b6:	93 1f       	adc	r25, r19
    23b8:	a4 1f       	adc	r26, r20
    23ba:	b5 1f       	adc	r27, r21
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	9b 83       	std	Y+3, r25	; 0x03
    23c0:	ac 83       	std	Y+4, r26	; 0x04
    23c2:	bd 83       	std	Y+5, r27	; 0x05
		}

		if(ICU_u8DutyCycleOvfCounter == 0u)
    23c4:	80 91 f5 01 	lds	r24, 0x01F5
    23c8:	88 23       	and	r24, r24
    23ca:	a9 f5       	brne	.+106    	; 0x2436 <ICU_voidMeasurePWM+0x248>
		{
			Local_u8DutyCycle = (((f32) (ICU_u16Capture3 - ICU_u16Capture2)) / (f32) Local_u32PeriodTime) * 100;
    23cc:	20 91 f1 01 	lds	r18, 0x01F1
    23d0:	30 91 f2 01 	lds	r19, 0x01F2
    23d4:	80 91 ef 01 	lds	r24, 0x01EF
    23d8:	90 91 f0 01 	lds	r25, 0x01F0
    23dc:	a9 01       	movw	r20, r18
    23de:	48 1b       	sub	r20, r24
    23e0:	59 0b       	sbc	r21, r25
    23e2:	ca 01       	movw	r24, r20
    23e4:	cc 01       	movw	r24, r24
    23e6:	a0 e0       	ldi	r26, 0x00	; 0
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    23f2:	7b 01       	movw	r14, r22
    23f4:	8c 01       	movw	r16, r24
    23f6:	6a 81       	ldd	r22, Y+2	; 0x02
    23f8:	7b 81       	ldd	r23, Y+3	; 0x03
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	9d 81       	ldd	r25, Y+5	; 0x05
    23fe:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2402:	9b 01       	movw	r18, r22
    2404:	ac 01       	movw	r20, r24
    2406:	c8 01       	movw	r24, r16
    2408:	b7 01       	movw	r22, r14
    240a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	48 ec       	ldi	r20, 0xC8	; 200
    241c:	52 e4       	ldi	r21, 0x42	; 66
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	97 c0       	rjmp	.+302    	; 0x2564 <ICU_voidMeasurePWM+0x376>
		}
		else
		{
			if(ICU_u16Capture3 >= ICU_u16Capture2)
    2436:	20 91 f1 01 	lds	r18, 0x01F1
    243a:	30 91 f2 01 	lds	r19, 0x01F2
    243e:	80 91 ef 01 	lds	r24, 0x01EF
    2442:	90 91 f0 01 	lds	r25, 0x01F0
    2446:	28 17       	cp	r18, r24
    2448:	39 07       	cpc	r19, r25
    244a:	08 f4       	brcc	.+2      	; 0x244e <ICU_voidMeasurePWM+0x260>
    244c:	40 c0       	rjmp	.+128    	; 0x24ce <ICU_voidMeasurePWM+0x2e0>
			{
				Local_u8DutyCycle = ICU_u16Capture3 - ICU_u16Capture2 + (ICU_u8DutyCycleOvfCounter * 65536u);
    244e:	80 91 f1 01 	lds	r24, 0x01F1
    2452:	90 91 f2 01 	lds	r25, 0x01F2
    2456:	28 2f       	mov	r18, r24
    2458:	80 91 ef 01 	lds	r24, 0x01EF
    245c:	90 91 f0 01 	lds	r25, 0x01F0
    2460:	28 1b       	sub	r18, r24
    2462:	80 91 f5 01 	lds	r24, 0x01F5
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	dc 01       	movw	r26, r24
    2470:	99 27       	eor	r25, r25
    2472:	88 27       	eor	r24, r24
    2474:	82 0f       	add	r24, r18
    2476:	89 83       	std	Y+1, r24	; 0x01
				Local_u8DutyCycle = ((f32) Local_u8DutyCycle / (f32) Local_u32PeriodTime) * 100;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e0       	ldi	r26, 0x00	; 0
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    248a:	7b 01       	movw	r14, r22
    248c:	8c 01       	movw	r16, r24
    248e:	6a 81       	ldd	r22, Y+2	; 0x02
    2490:	7b 81       	ldd	r23, Y+3	; 0x03
    2492:	8c 81       	ldd	r24, Y+4	; 0x04
    2494:	9d 81       	ldd	r25, Y+5	; 0x05
    2496:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	c8 01       	movw	r24, r16
    24a0:	b7 01       	movw	r22, r14
    24a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	bc 01       	movw	r22, r24
    24ac:	cd 01       	movw	r24, r26
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	48 ec       	ldi	r20, 0xC8	; 200
    24b4:	52 e4       	ldi	r21, 0x42	; 66
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	bc 01       	movw	r22, r24
    24c0:	cd 01       	movw	r24, r26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	4b c0       	rjmp	.+150    	; 0x2564 <ICU_voidMeasurePWM+0x376>
			}
			else if(ICU_u16Capture3 < ICU_u16Capture2)
    24ce:	20 91 f1 01 	lds	r18, 0x01F1
    24d2:	30 91 f2 01 	lds	r19, 0x01F2
    24d6:	80 91 ef 01 	lds	r24, 0x01EF
    24da:	90 91 f0 01 	lds	r25, 0x01F0
    24de:	28 17       	cp	r18, r24
    24e0:	39 07       	cpc	r19, r25
    24e2:	08 f0       	brcs	.+2      	; 0x24e6 <ICU_voidMeasurePWM+0x2f8>
    24e4:	3f c0       	rjmp	.+126    	; 0x2564 <ICU_voidMeasurePWM+0x376>
			{
				Local_u8DutyCycle = ICU_u16Capture2 - ICU_u16Capture3 + (ICU_u8DutyCycleOvfCounter * 65536u);
    24e6:	80 91 ef 01 	lds	r24, 0x01EF
    24ea:	90 91 f0 01 	lds	r25, 0x01F0
    24ee:	28 2f       	mov	r18, r24
    24f0:	80 91 f1 01 	lds	r24, 0x01F1
    24f4:	90 91 f2 01 	lds	r25, 0x01F2
    24f8:	28 1b       	sub	r18, r24
    24fa:	80 91 f5 01 	lds	r24, 0x01F5
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	a0 e0       	ldi	r26, 0x00	; 0
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	dc 01       	movw	r26, r24
    2508:	99 27       	eor	r25, r25
    250a:	88 27       	eor	r24, r24
    250c:	82 0f       	add	r24, r18
    250e:	89 83       	std	Y+1, r24	; 0x01
				Local_u8DutyCycle = ((f32) Local_u8DutyCycle / (f32) Local_u32PeriodTime) * 100;
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e0       	ldi	r26, 0x00	; 0
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2522:	7b 01       	movw	r14, r22
    2524:	8c 01       	movw	r16, r24
    2526:	6a 81       	ldd	r22, Y+2	; 0x02
    2528:	7b 81       	ldd	r23, Y+3	; 0x03
    252a:	8c 81       	ldd	r24, Y+4	; 0x04
    252c:	9d 81       	ldd	r25, Y+5	; 0x05
    252e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2532:	9b 01       	movw	r18, r22
    2534:	ac 01       	movw	r20, r24
    2536:	c8 01       	movw	r24, r16
    2538:	b7 01       	movw	r22, r14
    253a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	48 ec       	ldi	r20, 0xC8	; 200
    254c:	52 e4       	ldi	r21, 0x42	; 66
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	}

	*Copy_pu32PeriodTime = Local_u32PeriodTime;
    2564:	ec 85       	ldd	r30, Y+12	; 0x0c
    2566:	fd 85       	ldd	r31, Y+13	; 0x0d
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	9b 81       	ldd	r25, Y+3	; 0x03
    256c:	ac 81       	ldd	r26, Y+4	; 0x04
    256e:	bd 81       	ldd	r27, Y+5	; 0x05
    2570:	80 83       	st	Z, r24
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	a2 83       	std	Z+2, r26	; 0x02
    2576:	b3 83       	std	Z+3, r27	; 0x03
	*Copy_pu8DutyCycle = Local_u8DutyCycle;
    2578:	ea 85       	ldd	r30, Y+10	; 0x0a
    257a:	fb 85       	ldd	r31, Y+11	; 0x0b
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	80 83       	st	Z, r24
	TIMERS_u8IntDisable(TIMER1_OVF);
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	0e 94 0e 1c 	call	0x381c	; 0x381c <TIMERS_u8IntDisable>
	TIMERS_u8Disable(TIMER1);
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	0e 94 95 1c 	call	0x392a	; 0x392a <TIMERS_u8Disable>
}
    258c:	2d 96       	adiw	r28, 0x0d	; 13
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	08 95       	ret

000025a6 <ICU_voidCaptureISR>:

static void ICU_voidCaptureISR(void)
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;

	Local_u8Counter++;
    25ae:	80 91 f6 01 	lds	r24, 0x01F6
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	80 93 f6 01 	sts	0x01F6, r24

	if(Local_u8Counter == 1u)
    25b8:	80 91 f6 01 	lds	r24, 0x01F6
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	39 f4       	brne	.+14     	; 0x25ce <ICU_voidCaptureISR+0x28>
	{
		ICU_u16Capture1 = TIMER1_u16GetInputCaptValue();
    25c0:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <TIMER1_u16GetInputCaptValue>
    25c4:	90 93 ee 01 	sts	0x01EE, r25
    25c8:	80 93 ed 01 	sts	0x01ED, r24
    25cc:	28 c0       	rjmp	.+80     	; 0x261e <ICU_voidCaptureISR+0x78>
	}
	else if(Local_u8Counter == 2u)
    25ce:	80 91 f6 01 	lds	r24, 0x01F6
    25d2:	82 30       	cpi	r24, 0x02	; 2
    25d4:	71 f4       	brne	.+28     	; 0x25f2 <ICU_voidCaptureISR+0x4c>
	{
		ICU_u16Capture2 = TIMER1_u16GetInputCaptValue();
    25d6:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <TIMER1_u16GetInputCaptValue>
    25da:	90 93 f0 01 	sts	0x01F0, r25
    25de:	80 93 ef 01 	sts	0x01EF, r24
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_FALLING_EDGE);
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_u8SetInputCaptTriggerSrc>
		ICU_u8PeriodOvfCounter = ICU_u8OvfCounter;
    25e8:	80 91 f3 01 	lds	r24, 0x01F3
    25ec:	80 93 f4 01 	sts	0x01F4, r24
    25f0:	16 c0       	rjmp	.+44     	; 0x261e <ICU_voidCaptureISR+0x78>
	}
	else if(Local_u8Counter == 3u)
    25f2:	80 91 f6 01 	lds	r24, 0x01F6
    25f6:	83 30       	cpi	r24, 0x03	; 3
    25f8:	91 f4       	brne	.+36     	; 0x261e <ICU_voidCaptureISR+0x78>
	{
		ICU_u16Capture3 = TIMER1_u16GetInputCaptValue();
    25fa:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <TIMER1_u16GetInputCaptValue>
    25fe:	90 93 f2 01 	sts	0x01F2, r25
    2602:	80 93 f1 01 	sts	0x01F1, r24
		TIMERS_u8IntDisable(TIMER1_CAPT);
    2606:	85 e0       	ldi	r24, 0x05	; 5
    2608:	0e 94 0e 1c 	call	0x381c	; 0x381c <TIMERS_u8IntDisable>
		ICU_u8DutyCycleOvfCounter = ICU_u8OvfCounter - ICU_u8PeriodOvfCounter;
    260c:	90 91 f3 01 	lds	r25, 0x01F3
    2610:	80 91 f4 01 	lds	r24, 0x01F4
    2614:	29 2f       	mov	r18, r25
    2616:	28 1b       	sub	r18, r24
    2618:	82 2f       	mov	r24, r18
    261a:	80 93 f5 01 	sts	0x01F5, r24
	}
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <ICU_voidOvfISR>:

static void ICU_voidOvfISR(void)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	ICU_u8OvfCounter++;
    262c:	80 91 f3 01 	lds	r24, 0x01F3
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	80 93 f3 01 	sts	0x01F3, r24
}
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <LDR_u8GetAnalogVolt>:
 * @param Copy_u8ADCChannel The ADC Channel to which the sensor is attached.
 * @param Copy_pu16AnalogVolt A pointer to return The analog voltage in milli volt.
 * @return Error State.
 */
uint8 LDR_u8GetAnalogVolt(uint8 Copy_u8ADCChannel, uint16 *Copy_pu16AnalogVolt)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	2a 97       	sbiw	r28, 0x0a	; 10
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	8e 83       	std	Y+6, r24	; 0x06
    2652:	78 87       	std	Y+8, r23	; 0x08
    2654:	6f 83       	std	Y+7, r22	; 0x07
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    2656:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u16Voltage = 0;
    2658:	1a 82       	std	Y+2, r1	; 0x02
    265a:	19 82       	std	Y+1, r1	; 0x01
	uint16 Local_u16ADCReading = 0;
    265c:	1d 82       	std	Y+5, r1	; 0x05
    265e:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer passed by the user*/
	if(Copy_pu16AnalogVolt != NULL)
    2660:	8f 81       	ldd	r24, Y+7	; 0x07
    2662:	98 85       	ldd	r25, Y+8	; 0x08
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	09 f4       	brne	.+2      	; 0x266a <LDR_u8GetAnalogVolt+0x2e>
    2668:	8e c0       	rjmp	.+284    	; 0x2786 <LDR_u8GetAnalogVolt+0x14a>
	{
		/*Get the reading from ADC*/
		switch(Copy_u8ADCChannel)
    266a:	8e 81       	ldd	r24, Y+6	; 0x06
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	3a 87       	std	Y+10, r19	; 0x0a
    2672:	29 87       	std	Y+9, r18	; 0x09
    2674:	89 85       	ldd	r24, Y+9	; 0x09
    2676:	9a 85       	ldd	r25, Y+10	; 0x0a
    2678:	83 30       	cpi	r24, 0x03	; 3
    267a:	91 05       	cpc	r25, r1
    267c:	09 f4       	brne	.+2      	; 0x2680 <LDR_u8GetAnalogVolt+0x44>
    267e:	41 c0       	rjmp	.+130    	; 0x2702 <LDR_u8GetAnalogVolt+0xc6>
    2680:	29 85       	ldd	r18, Y+9	; 0x09
    2682:	3a 85       	ldd	r19, Y+10	; 0x0a
    2684:	24 30       	cpi	r18, 0x04	; 4
    2686:	31 05       	cpc	r19, r1
    2688:	7c f4       	brge	.+30     	; 0x26a8 <LDR_u8GetAnalogVolt+0x6c>
    268a:	89 85       	ldd	r24, Y+9	; 0x09
    268c:	9a 85       	ldd	r25, Y+10	; 0x0a
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	91 05       	cpc	r25, r1
    2692:	39 f1       	breq	.+78     	; 0x26e2 <LDR_u8GetAnalogVolt+0xa6>
    2694:	29 85       	ldd	r18, Y+9	; 0x09
    2696:	3a 85       	ldd	r19, Y+10	; 0x0a
    2698:	22 30       	cpi	r18, 0x02	; 2
    269a:	31 05       	cpc	r19, r1
    269c:	54 f5       	brge	.+84     	; 0x26f2 <LDR_u8GetAnalogVolt+0xb6>
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	b1 f0       	breq	.+44     	; 0x26d2 <LDR_u8GetAnalogVolt+0x96>
    26a6:	55 c0       	rjmp	.+170    	; 0x2752 <LDR_u8GetAnalogVolt+0x116>
    26a8:	29 85       	ldd	r18, Y+9	; 0x09
    26aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    26ac:	25 30       	cpi	r18, 0x05	; 5
    26ae:	31 05       	cpc	r19, r1
    26b0:	c1 f1       	breq	.+112    	; 0x2722 <LDR_u8GetAnalogVolt+0xe6>
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	85 30       	cpi	r24, 0x05	; 5
    26b8:	91 05       	cpc	r25, r1
    26ba:	5c f1       	brlt	.+86     	; 0x2712 <LDR_u8GetAnalogVolt+0xd6>
    26bc:	29 85       	ldd	r18, Y+9	; 0x09
    26be:	3a 85       	ldd	r19, Y+10	; 0x0a
    26c0:	26 30       	cpi	r18, 0x06	; 6
    26c2:	31 05       	cpc	r19, r1
    26c4:	b1 f1       	breq	.+108    	; 0x2732 <LDR_u8GetAnalogVolt+0xf6>
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	87 30       	cpi	r24, 0x07	; 7
    26cc:	91 05       	cpc	r25, r1
    26ce:	c9 f1       	breq	.+114    	; 0x2742 <LDR_u8GetAnalogVolt+0x106>
    26d0:	40 c0       	rjmp	.+128    	; 0x2752 <LDR_u8GetAnalogVolt+0x116>
		{
		case LDR_u8ADC_CH0: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH0, &Local_u16ADCReading);	break;
    26d2:	9e 01       	movw	r18, r28
    26d4:	2c 5f       	subi	r18, 0xFC	; 252
    26d6:	3f 4f       	sbci	r19, 0xFF	; 255
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	b9 01       	movw	r22, r18
    26dc:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8StartConversionSynch>
    26e0:	3a c0       	rjmp	.+116    	; 0x2756 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH1: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH1, &Local_u16ADCReading);	break;
    26e2:	9e 01       	movw	r18, r28
    26e4:	2c 5f       	subi	r18, 0xFC	; 252
    26e6:	3f 4f       	sbci	r19, 0xFF	; 255
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	b9 01       	movw	r22, r18
    26ec:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8StartConversionSynch>
    26f0:	32 c0       	rjmp	.+100    	; 0x2756 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH2: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH2, &Local_u16ADCReading);	break;
    26f2:	9e 01       	movw	r18, r28
    26f4:	2c 5f       	subi	r18, 0xFC	; 252
    26f6:	3f 4f       	sbci	r19, 0xFF	; 255
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	b9 01       	movw	r22, r18
    26fc:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8StartConversionSynch>
    2700:	2a c0       	rjmp	.+84     	; 0x2756 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH3: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH3, &Local_u16ADCReading);	break;
    2702:	9e 01       	movw	r18, r28
    2704:	2c 5f       	subi	r18, 0xFC	; 252
    2706:	3f 4f       	sbci	r19, 0xFF	; 255
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	b9 01       	movw	r22, r18
    270c:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8StartConversionSynch>
    2710:	22 c0       	rjmp	.+68     	; 0x2756 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH4: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH4, &Local_u16ADCReading);	break;
    2712:	9e 01       	movw	r18, r28
    2714:	2c 5f       	subi	r18, 0xFC	; 252
    2716:	3f 4f       	sbci	r19, 0xFF	; 255
    2718:	84 e0       	ldi	r24, 0x04	; 4
    271a:	b9 01       	movw	r22, r18
    271c:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8StartConversionSynch>
    2720:	1a c0       	rjmp	.+52     	; 0x2756 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH5: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH5, &Local_u16ADCReading);	break;
    2722:	9e 01       	movw	r18, r28
    2724:	2c 5f       	subi	r18, 0xFC	; 252
    2726:	3f 4f       	sbci	r19, 0xFF	; 255
    2728:	85 e0       	ldi	r24, 0x05	; 5
    272a:	b9 01       	movw	r22, r18
    272c:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8StartConversionSynch>
    2730:	12 c0       	rjmp	.+36     	; 0x2756 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH6: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH6, &Local_u16ADCReading);	break;
    2732:	9e 01       	movw	r18, r28
    2734:	2c 5f       	subi	r18, 0xFC	; 252
    2736:	3f 4f       	sbci	r19, 0xFF	; 255
    2738:	86 e0       	ldi	r24, 0x06	; 6
    273a:	b9 01       	movw	r22, r18
    273c:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8StartConversionSynch>
    2740:	0a c0       	rjmp	.+20     	; 0x2756 <LDR_u8GetAnalogVolt+0x11a>
		case LDR_u8ADC_CH7: ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH7, &Local_u16ADCReading);	break;
    2742:	9e 01       	movw	r18, r28
    2744:	2c 5f       	subi	r18, 0xFC	; 252
    2746:	3f 4f       	sbci	r19, 0xFF	; 255
    2748:	87 e0       	ldi	r24, 0x07	; 7
    274a:	b9 01       	movw	r22, r18
    274c:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_u8StartConversionSynch>
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <LDR_u8GetAnalogVolt+0x11a>
		default: Local_u8ErrorState = NOK;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	8b 83       	std	Y+3, r24	; 0x03
		}

		/*Calculate the voltage and return it to the user*/
#if LDR_u8ADC_RESOLUTION == LDR_u8ADC_8BITS_RES
		*Copy_pu16AnalogVolt = (uint16) (((uint32) Local_u16ADCReading * LDR_u8ADC_REF_VOLT * 1000UL) / 256UL);
    2756:	8c 81       	ldd	r24, Y+4	; 0x04
    2758:	9d 81       	ldd	r25, Y+5	; 0x05
    275a:	cc 01       	movw	r24, r24
    275c:	a0 e0       	ldi	r26, 0x00	; 0
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	28 e8       	ldi	r18, 0x88	; 136
    2762:	33 e1       	ldi	r19, 0x13	; 19
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	bc 01       	movw	r22, r24
    276a:	cd 01       	movw	r24, r26
    276c:	0e 94 56 28 	call	0x50ac	; 0x50ac <__mulsi3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	89 2f       	mov	r24, r25
    2776:	9a 2f       	mov	r25, r26
    2778:	ab 2f       	mov	r26, r27
    277a:	bb 27       	eor	r27, r27
    277c:	ef 81       	ldd	r30, Y+7	; 0x07
    277e:	f8 85       	ldd	r31, Y+8	; 0x08
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	80 83       	st	Z, r24
    2784:	02 c0       	rjmp	.+4      	; 0x278a <LDR_u8GetAnalogVolt+0x14e>
#endif

	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    278c:	2a 96       	adiw	r28, 0x0a	; 10
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <LDR_u8GetResistance>:
 * @param Copy_u16SourceVoltage The source voltage which support the LDR with power in milli volt.
 * @param Copy_u16KnownResistance The resistance which participate in the voltage divider circuit in ohm.
 * @return Error State.
 */
uint8 LDR_u8GetResistance(uint8 Copy_u8ADCChannel, uint16 Copy_u16SourceVoltage, uint16 Copy_u16KnownResistance, uint32 *Copy_pu32LDRResistance)
{
    279e:	ef 92       	push	r14
    27a0:	ff 92       	push	r15
    27a2:	0f 93       	push	r16
    27a4:	1f 93       	push	r17
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	2e 97       	sbiw	r28, 0x0e	; 14
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	88 87       	std	Y+8, r24	; 0x08
    27bc:	7a 87       	std	Y+10, r23	; 0x0a
    27be:	69 87       	std	Y+9, r22	; 0x09
    27c0:	5c 87       	std	Y+12, r21	; 0x0c
    27c2:	4b 87       	std	Y+11, r20	; 0x0b
    27c4:	3e 87       	std	Y+14, r19	; 0x0e
    27c6:	2d 87       	std	Y+13, r18	; 0x0d
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    27c8:	1d 82       	std	Y+5, r1	; 0x05
	uint16 Local_u16Voltage = 0;
    27ca:	1f 82       	std	Y+7, r1	; 0x07
    27cc:	1e 82       	std	Y+6, r1	; 0x06
	uint32 Local_u32Resistance = 0;
    27ce:	19 82       	std	Y+1, r1	; 0x01
    27d0:	1a 82       	std	Y+2, r1	; 0x02
    27d2:	1b 82       	std	Y+3, r1	; 0x03
    27d4:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer passed by the user*/
	if(Copy_pu32LDRResistance != NULL)
    27d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <LDR_u8GetResistance+0x42>
    27de:	64 c0       	rjmp	.+200    	; 0x28a8 <LDR_u8GetResistance+0x10a>
	{
		/*Get the voltage out from the LDR sensor*/
		LDR_u8GetAnalogVolt(Copy_u8ADCChannel, &Local_u16Voltage);
    27e0:	9e 01       	movw	r18, r28
    27e2:	2a 5f       	subi	r18, 0xFA	; 250
    27e4:	3f 4f       	sbci	r19, 0xFF	; 255
    27e6:	88 85       	ldd	r24, Y+8	; 0x08
    27e8:	b9 01       	movw	r22, r18
    27ea:	0e 94 1e 13 	call	0x263c	; 0x263c <LDR_u8GetAnalogVolt>

		/*Calculate the resistance*/
		Local_u32Resistance = ((uint32) Copy_u16SourceVoltage / 10UL) * ((uint32) Copy_u16KnownResistance / 10UL);
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	2a e0       	ldi	r18, 0x0A	; 10
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	b9 01       	movw	r22, r18
    27f8:	0e 94 75 28 	call	0x50ea	; 0x50ea <__udivmodhi4>
    27fc:	cb 01       	movw	r24, r22
    27fe:	7c 01       	movw	r14, r24
    2800:	00 e0       	ldi	r16, 0x00	; 0
    2802:	10 e0       	ldi	r17, 0x00	; 0
    2804:	8b 85       	ldd	r24, Y+11	; 0x0b
    2806:	9c 85       	ldd	r25, Y+12	; 0x0c
    2808:	2a e0       	ldi	r18, 0x0A	; 10
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	b9 01       	movw	r22, r18
    280e:	0e 94 75 28 	call	0x50ea	; 0x50ea <__udivmodhi4>
    2812:	cb 01       	movw	r24, r22
    2814:	9c 01       	movw	r18, r24
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	50 e0       	ldi	r21, 0x00	; 0
    281a:	c8 01       	movw	r24, r16
    281c:	b7 01       	movw	r22, r14
    281e:	0e 94 56 28 	call	0x50ac	; 0x50ac <__mulsi3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	ab 83       	std	Y+3, r26	; 0x03
    282c:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32Resistance = Local_u32Resistance / (uint32) Local_u16Voltage;
    282e:	8e 81       	ldd	r24, Y+6	; 0x06
    2830:	9f 81       	ldd	r25, Y+7	; 0x07
    2832:	9c 01       	movw	r18, r24
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	ab 81       	ldd	r26, Y+3	; 0x03
    283e:	bc 81       	ldd	r27, Y+4	; 0x04
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 89 28 	call	0x5112	; 0x5112 <__udivmodsi4>
    2848:	da 01       	movw	r26, r20
    284a:	c9 01       	movw	r24, r18
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	ab 83       	std	Y+3, r26	; 0x03
    2852:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32Resistance = (Local_u32Resistance * 100UL) - (uint32) Copy_u16KnownResistance;
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	ab 81       	ldd	r26, Y+3	; 0x03
    285a:	bc 81       	ldd	r27, Y+4	; 0x04
    285c:	24 e6       	ldi	r18, 0x64	; 100
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 56 28 	call	0x50ac	; 0x50ac <__mulsi3>
    286c:	9b 01       	movw	r18, r22
    286e:	ac 01       	movw	r20, r24
    2870:	8b 85       	ldd	r24, Y+11	; 0x0b
    2872:	9c 85       	ldd	r25, Y+12	; 0x0c
    2874:	cc 01       	movw	r24, r24
    2876:	a0 e0       	ldi	r26, 0x00	; 0
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	79 01       	movw	r14, r18
    287c:	8a 01       	movw	r16, r20
    287e:	e8 1a       	sub	r14, r24
    2880:	f9 0a       	sbc	r15, r25
    2882:	0a 0b       	sbc	r16, r26
    2884:	1b 0b       	sbc	r17, r27
    2886:	d8 01       	movw	r26, r16
    2888:	c7 01       	movw	r24, r14
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	ab 83       	std	Y+3, r26	; 0x03
    2890:	bc 83       	std	Y+4, r27	; 0x04
		*Copy_pu32LDRResistance = Local_u32Resistance;
    2892:	ed 85       	ldd	r30, Y+13	; 0x0d
    2894:	fe 85       	ldd	r31, Y+14	; 0x0e
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	ab 81       	ldd	r26, Y+3	; 0x03
    289c:	bc 81       	ldd	r27, Y+4	; 0x04
    289e:	80 83       	st	Z, r24
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	a2 83       	std	Z+2, r26	; 0x02
    28a4:	b3 83       	std	Z+3, r27	; 0x03
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <LDR_u8GetResistance+0x10e>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    28a8:	82 e0       	ldi	r24, 0x02	; 2
    28aa:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
}
    28ae:	2e 96       	adiw	r28, 0x0e	; 14
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	08 95       	ret

000028c8 <LIBRARY_s32Mapping>:
 * @param Copy_s32InputValue	Input value.
 * @return	Output Value
 */
sint32 LIBRARY_s32Mapping(sint32 Copy_s32InputRangeMin, sint32 Copy_s32InputRangeMax,
		sint32 Copy_s32OutputRangeMin, sint32 Copy_s32OutputRangeMax, sint32 Copy_s32InputValue)
{
    28c8:	af 92       	push	r10
    28ca:	bf 92       	push	r11
    28cc:	cf 92       	push	r12
    28ce:	df 92       	push	r13
    28d0:	ef 92       	push	r14
    28d2:	ff 92       	push	r15
    28d4:	0f 93       	push	r16
    28d6:	1f 93       	push	r17
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	64 97       	sbiw	r28, 0x14	; 20
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	6d 83       	std	Y+5, r22	; 0x05
    28ee:	7e 83       	std	Y+6, r23	; 0x06
    28f0:	8f 83       	std	Y+7, r24	; 0x07
    28f2:	98 87       	std	Y+8, r25	; 0x08
    28f4:	29 87       	std	Y+9, r18	; 0x09
    28f6:	3a 87       	std	Y+10, r19	; 0x0a
    28f8:	4b 87       	std	Y+11, r20	; 0x0b
    28fa:	5c 87       	std	Y+12, r21	; 0x0c
    28fc:	ed 86       	std	Y+13, r14	; 0x0d
    28fe:	fe 86       	std	Y+14, r15	; 0x0e
    2900:	0f 87       	std	Y+15, r16	; 0x0f
    2902:	18 8b       	std	Y+16, r17	; 0x10
    2904:	a9 8a       	std	Y+17, r10	; 0x11
    2906:	ba 8a       	std	Y+18, r11	; 0x12
    2908:	cb 8a       	std	Y+19, r12	; 0x13
    290a:	dc 8a       	std	Y+20, r13	; 0x14
	/*Define Variables*/
	sint32 Local_s32OutputValue = 0;
    290c:	19 82       	std	Y+1, r1	; 0x01
    290e:	1a 82       	std	Y+2, r1	; 0x02
    2910:	1b 82       	std	Y+3, r1	; 0x03
    2912:	1c 82       	std	Y+4, r1	; 0x04

	/*Calculate the output value*/
	Local_s32OutputValue = (Copy_s32OutputRangeMax - Copy_s32OutputRangeMin) * (Copy_s32InputValue - Copy_s32InputRangeMin);
    2914:	29 89       	ldd	r18, Y+17	; 0x11
    2916:	3a 89       	ldd	r19, Y+18	; 0x12
    2918:	4b 89       	ldd	r20, Y+19	; 0x13
    291a:	5c 89       	ldd	r21, Y+20	; 0x14
    291c:	8d 85       	ldd	r24, Y+13	; 0x0d
    291e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2920:	af 85       	ldd	r26, Y+15	; 0x0f
    2922:	b8 89       	ldd	r27, Y+16	; 0x10
    2924:	79 01       	movw	r14, r18
    2926:	8a 01       	movw	r16, r20
    2928:	e8 1a       	sub	r14, r24
    292a:	f9 0a       	sbc	r15, r25
    292c:	0a 0b       	sbc	r16, r26
    292e:	1b 0b       	sbc	r17, r27
    2930:	29 a1       	ldd	r18, Y+33	; 0x21
    2932:	3a a1       	ldd	r19, Y+34	; 0x22
    2934:	4b a1       	ldd	r20, Y+35	; 0x23
    2936:	5c a1       	ldd	r21, Y+36	; 0x24
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	af 81       	ldd	r26, Y+7	; 0x07
    293e:	b8 85       	ldd	r27, Y+8	; 0x08
    2940:	28 1b       	sub	r18, r24
    2942:	39 0b       	sbc	r19, r25
    2944:	4a 0b       	sbc	r20, r26
    2946:	5b 0b       	sbc	r21, r27
    2948:	c8 01       	movw	r24, r16
    294a:	b7 01       	movw	r22, r14
    294c:	0e 94 56 28 	call	0x50ac	; 0x50ac <__mulsi3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	ab 83       	std	Y+3, r26	; 0x03
    295a:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue / (Copy_s32InputRangeMax - Copy_s32InputRangeMin);
    295c:	29 85       	ldd	r18, Y+9	; 0x09
    295e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2960:	4b 85       	ldd	r20, Y+11	; 0x0b
    2962:	5c 85       	ldd	r21, Y+12	; 0x0c
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	af 81       	ldd	r26, Y+7	; 0x07
    296a:	b8 85       	ldd	r27, Y+8	; 0x08
    296c:	28 1b       	sub	r18, r24
    296e:	39 0b       	sbc	r19, r25
    2970:	4a 0b       	sbc	r20, r26
    2972:	5b 0b       	sbc	r21, r27
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	ab 81       	ldd	r26, Y+3	; 0x03
    297a:	bc 81       	ldd	r27, Y+4	; 0x04
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	0e 94 ab 28 	call	0x5156	; 0x5156 <__divmodsi4>
    2984:	da 01       	movw	r26, r20
    2986:	c9 01       	movw	r24, r18
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	ab 83       	std	Y+3, r26	; 0x03
    298e:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue + Copy_s32OutputRangeMin;
    2990:	29 81       	ldd	r18, Y+1	; 0x01
    2992:	3a 81       	ldd	r19, Y+2	; 0x02
    2994:	4b 81       	ldd	r20, Y+3	; 0x03
    2996:	5c 81       	ldd	r21, Y+4	; 0x04
    2998:	8d 85       	ldd	r24, Y+13	; 0x0d
    299a:	9e 85       	ldd	r25, Y+14	; 0x0e
    299c:	af 85       	ldd	r26, Y+15	; 0x0f
    299e:	b8 89       	ldd	r27, Y+16	; 0x10
    29a0:	82 0f       	add	r24, r18
    29a2:	93 1f       	adc	r25, r19
    29a4:	a4 1f       	adc	r26, r20
    29a6:	b5 1f       	adc	r27, r21
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	9a 83       	std	Y+2, r25	; 0x02
    29ac:	ab 83       	std	Y+3, r26	; 0x03
    29ae:	bc 83       	std	Y+4, r27	; 0x04

	return Local_s32OutputValue;
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	ab 81       	ldd	r26, Y+3	; 0x03
    29b6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	64 96       	adiw	r28, 0x14	; 20
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	ff 90       	pop	r15
    29d2:	ef 90       	pop	r14
    29d4:	df 90       	pop	r13
    29d6:	cf 90       	pop	r12
    29d8:	bf 90       	pop	r11
    29da:	af 90       	pop	r10
    29dc:	08 95       	ret

000029de <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    29e6:	ea e3       	ldi	r30, 0x3A	; 58
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	8e ef       	ldi	r24, 0xFE	; 254
    29ec:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    29ee:	e7 e3       	ldi	r30, 0x37	; 55
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	8f ef       	ldi	r24, 0xFF	; 255
    29f4:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    29f6:	e4 e3       	ldi	r30, 0x34	; 52
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	8f ef       	ldi	r24, 0xFF	; 255
    29fc:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    29fe:	e1 e3       	ldi	r30, 0x31	; 49
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	8a eb       	ldi	r24, 0xBA	; 186
    2a04:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
    2a06:	eb e3       	ldi	r30, 0x3B	; 59
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    2a0c:	e8 e3       	ldi	r30, 0x38	; 56
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    2a12:	e5 e3       	ldi	r30, 0x35	; 53
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    2a18:	e2 e3       	ldi	r30, 0x32	; 50
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	84 e0       	ldi	r24, 0x04	; 4
    2a1e:	80 83       	st	Z, r24
}
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <TIMER0_u8Init>:
static void (* TIMERS_pvCallBackFuncArr[8])(void);

static uint8 TIMERS_u8StateArr[3] = {IDLE};

uint8 TIMER0_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	27 97       	sbiw	r28, 0x07	; 7
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	9b 83       	std	Y+3, r25	; 0x03
    2a3c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2a3e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	9b 81       	ldd	r25, Y+3	; 0x03
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <TIMER0_u8Init+0x24>
    2a48:	de c0       	rjmp	.+444    	; 0x2c06 <TIMER0_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER0] == IDLE)
    2a4a:	80 91 f7 01 	lds	r24, 0x01F7
    2a4e:	88 23       	and	r24, r24
    2a50:	09 f0       	breq	.+2      	; 0x2a54 <TIMER0_u8Init+0x2e>
    2a52:	d6 c0       	rjmp	.+428    	; 0x2c00 <TIMER0_u8Init+0x1da>
		{
			/*Inform others that timer 0 is busy*/
			TIMERS_u8StateArr[TIMER0] = BUSY;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	80 93 f7 01 	sts	0x01F7, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    2a5a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a5c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a5e:	81 81       	ldd	r24, Z+1	; 0x01
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	3f 83       	std	Y+7, r19	; 0x07
    2a66:	2e 83       	std	Y+6, r18	; 0x06
    2a68:	8e 81       	ldd	r24, Y+6	; 0x06
    2a6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	91 05       	cpc	r25, r1
    2a70:	21 f1       	breq	.+72     	; 0x2aba <TIMER0_u8Init+0x94>
    2a72:	2e 81       	ldd	r18, Y+6	; 0x06
    2a74:	3f 81       	ldd	r19, Y+7	; 0x07
    2a76:	22 30       	cpi	r18, 0x02	; 2
    2a78:	31 05       	cpc	r19, r1
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <TIMER0_u8Init+0x60>
    2a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	61 f0       	breq	.+24     	; 0x2a9c <TIMER0_u8Init+0x76>
    2a84:	46 c0       	rjmp	.+140    	; 0x2b12 <TIMER0_u8Init+0xec>
    2a86:	2e 81       	ldd	r18, Y+6	; 0x06
    2a88:	3f 81       	ldd	r19, Y+7	; 0x07
    2a8a:	22 30       	cpi	r18, 0x02	; 2
    2a8c:	31 05       	cpc	r19, r1
    2a8e:	21 f1       	breq	.+72     	; 0x2ad8 <TIMER0_u8Init+0xb2>
    2a90:	8e 81       	ldd	r24, Y+6	; 0x06
    2a92:	9f 81       	ldd	r25, Y+7	; 0x07
    2a94:	83 30       	cpi	r24, 0x03	; 3
    2a96:	91 05       	cpc	r25, r1
    2a98:	71 f1       	breq	.+92     	; 0x2af6 <TIMER0_u8Init+0xd0>
    2a9a:	3b c0       	rjmp	.+118    	; 0x2b12 <TIMER0_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    2a9c:	a3 e5       	ldi	r26, 0x53	; 83
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e3 e5       	ldi	r30, 0x53	; 83
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8f 7b       	andi	r24, 0xBF	; 191
    2aa8:	8c 93       	st	X, r24
    2aaa:	a3 e5       	ldi	r26, 0x53	; 83
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e3 e5       	ldi	r30, 0x53	; 83
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	87 7f       	andi	r24, 0xF7	; 247
    2ab6:	8c 93       	st	X, r24
    2ab8:	2c c0       	rjmp	.+88     	; 0x2b12 <TIMER0_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    2aba:	a3 e5       	ldi	r26, 0x53	; 83
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e3 e5       	ldi	r30, 0x53	; 83
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	80 64       	ori	r24, 0x40	; 64
    2ac6:	8c 93       	st	X, r24
    2ac8:	a3 e5       	ldi	r26, 0x53	; 83
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e3 e5       	ldi	r30, 0x53	; 83
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	87 7f       	andi	r24, 0xF7	; 247
    2ad4:	8c 93       	st	X, r24
    2ad6:	1d c0       	rjmp	.+58     	; 0x2b12 <TIMER0_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    2ad8:	a3 e5       	ldi	r26, 0x53	; 83
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e3 e5       	ldi	r30, 0x53	; 83
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8f 7b       	andi	r24, 0xBF	; 191
    2ae4:	8c 93       	st	X, r24
    2ae6:	a3 e5       	ldi	r26, 0x53	; 83
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e3 e5       	ldi	r30, 0x53	; 83
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	88 60       	ori	r24, 0x08	; 8
    2af2:	8c 93       	st	X, r24
    2af4:	0e c0       	rjmp	.+28     	; 0x2b12 <TIMER0_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    2af6:	a3 e5       	ldi	r26, 0x53	; 83
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e3 e5       	ldi	r30, 0x53	; 83
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	80 64       	ori	r24, 0x40	; 64
    2b02:	8c 93       	st	X, r24
    2b04:	a3 e5       	ldi	r26, 0x53	; 83
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e3 e5       	ldi	r30, 0x53	; 83
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 60       	ori	r24, 0x08	; 8
    2b10:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR0 &= TIMER0_2_OCMATCH_MASK;
    2b12:	a3 e5       	ldi	r26, 0x53	; 83
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	e3 e5       	ldi	r30, 0x53	; 83
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	8f 7c       	andi	r24, 0xCF	; 207
    2b1e:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2b20:	ea 81       	ldd	r30, Y+2	; 0x02
    2b22:	fb 81       	ldd	r31, Y+3	; 0x03
    2b24:	81 81       	ldd	r24, Z+1	; 0x01
    2b26:	88 23       	and	r24, r24
    2b28:	29 f0       	breq	.+10     	; 0x2b34 <TIMER0_u8Init+0x10e>
    2b2a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b2c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b2e:	81 81       	ldd	r24, Z+1	; 0x01
    2b30:	82 30       	cpi	r24, 0x02	; 2
    2b32:	e1 f4       	brne	.+56     	; 0x2b6c <TIMER0_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    2b34:	ea 81       	ldd	r30, Y+2	; 0x02
    2b36:	fb 81       	ldd	r31, Y+3	; 0x03
    2b38:	82 81       	ldd	r24, Z+2	; 0x02
    2b3a:	84 30       	cpi	r24, 0x04	; 4
    2b3c:	a0 f4       	brcc	.+40     	; 0x2b66 <TIMER0_u8Init+0x140>
				{
					TCCR0 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    2b3e:	a3 e5       	ldi	r26, 0x53	; 83
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e3 e5       	ldi	r30, 0x53	; 83
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	28 2f       	mov	r18, r24
    2b4a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b4c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	82 95       	swap	r24
    2b56:	92 95       	swap	r25
    2b58:	90 7f       	andi	r25, 0xF0	; 240
    2b5a:	98 27       	eor	r25, r24
    2b5c:	80 7f       	andi	r24, 0xF0	; 240
    2b5e:	98 27       	eor	r25, r24
    2b60:	82 2b       	or	r24, r18
    2b62:	8c 93       	st	X, r24
    2b64:	3b c0       	rjmp	.+118    	; 0x2bdc <TIMER0_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	38 c0       	rjmp	.+112    	; 0x2bdc <TIMER0_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    2b6c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b70:	81 81       	ldd	r24, Z+1	; 0x01
    2b72:	83 30       	cpi	r24, 0x03	; 3
    2b74:	29 f0       	breq	.+10     	; 0x2b80 <TIMER0_u8Init+0x15a>
    2b76:	ea 81       	ldd	r30, Y+2	; 0x02
    2b78:	fb 81       	ldd	r31, Y+3	; 0x03
    2b7a:	81 81       	ldd	r24, Z+1	; 0x01
    2b7c:	81 30       	cpi	r24, 0x01	; 1
    2b7e:	71 f5       	brne	.+92     	; 0x2bdc <TIMER0_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    2b80:	ea 81       	ldd	r30, Y+2	; 0x02
    2b82:	fb 81       	ldd	r31, Y+3	; 0x03
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	3d 83       	std	Y+5, r19	; 0x05
    2b8c:	2c 83       	std	Y+4, r18	; 0x04
    2b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b90:	9d 81       	ldd	r25, Y+5	; 0x05
    2b92:	84 30       	cpi	r24, 0x04	; 4
    2b94:	91 05       	cpc	r25, r1
    2b96:	81 f0       	breq	.+32     	; 0x2bb8 <TIMER0_u8Init+0x192>
    2b98:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b9c:	25 30       	cpi	r18, 0x05	; 5
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	99 f0       	breq	.+38     	; 0x2bc8 <TIMER0_u8Init+0x1a2>
    2ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	b9 f4       	brne	.+46     	; 0x2bd8 <TIMER0_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    2baa:	e3 e5       	ldi	r30, 0x53	; 83
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	a3 e5       	ldi	r26, 0x53	; 83
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	8c 91       	ld	r24, X
    2bb4:	80 83       	st	Z, r24
    2bb6:	12 c0       	rjmp	.+36     	; 0x2bdc <TIMER0_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    2bb8:	a3 e5       	ldi	r26, 0x53	; 83
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e3 e5       	ldi	r30, 0x53	; 83
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	80 62       	ori	r24, 0x20	; 32
    2bc4:	8c 93       	st	X, r24
    2bc6:	0a c0       	rjmp	.+20     	; 0x2bdc <TIMER0_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    2bc8:	a3 e5       	ldi	r26, 0x53	; 83
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e3 e5       	ldi	r30, 0x53	; 83
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	80 63       	ori	r24, 0x30	; 48
    2bd4:	8c 93       	st	X, r24
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <TIMER0_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR0 &= PRESCALER_MASK;
    2bdc:	a3 e5       	ldi	r26, 0x53	; 83
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e3 e5       	ldi	r30, 0x53	; 83
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	88 7f       	andi	r24, 0xF8	; 248
    2be8:	8c 93       	st	X, r24
			TCCR0 |= Copy_pstTimerConfig -> ClkSelect;
    2bea:	a3 e5       	ldi	r26, 0x53	; 83
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e3 e5       	ldi	r30, 0x53	; 83
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	90 81       	ld	r25, Z
    2bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    2bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    2bf8:	80 81       	ld	r24, Z
    2bfa:	89 2b       	or	r24, r25
    2bfc:	8c 93       	st	X, r24
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <TIMER0_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2c00:	84 e0       	ldi	r24, 0x04	; 4
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <TIMER0_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c0c:	27 96       	adiw	r28, 0x07	; 7
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	08 95       	ret

00002c1e <TIMER1_u8Init>:
uint8 TIMER1_u8Init(const TIMER1_CFG_t *Copy_pstTimerConfig)
{
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	29 97       	sbiw	r28, 0x09	; 9
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	9b 83       	std	Y+3, r25	; 0x03
    2c34:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2c36:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <TIMER1_u8Init+0x24>
    2c40:	71 c1       	rjmp	.+738    	; 0x2f24 <TIMER1_u8Init+0x306>
	{
		if(TIMERS_u8StateArr[TIMER1] == IDLE)
    2c42:	80 91 f8 01 	lds	r24, 0x01F8
    2c46:	88 23       	and	r24, r24
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <TIMER1_u8Init+0x2e>
    2c4a:	69 c1       	rjmp	.+722    	; 0x2f1e <TIMER1_u8Init+0x300>
		{
			/*Inform others that timer 1 is busy from now*/
			TIMERS_u8StateArr[TIMER1] = BUSY;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	80 93 f8 01 	sts	0x01F8, r24

			/*Select Wave Generation Mode*/
			TCCR1A &= TIMER1_WGM_MASK_A;
    2c52:	af e4       	ldi	r26, 0x4F	; 79
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	ef e4       	ldi	r30, 0x4F	; 79
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	8c 7f       	andi	r24, 0xFC	; 252
    2c5e:	8c 93       	st	X, r24
			TCCR1B &= TIMER1_WGM_MASK_B;
    2c60:	ae e4       	ldi	r26, 0x4E	; 78
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	ee e4       	ldi	r30, 0x4E	; 78
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	87 7e       	andi	r24, 0xE7	; 231
    2c6c:	8c 93       	st	X, r24
			TCCR1A |= ((Copy_pstTimerConfig -> WGM) & 3);
    2c6e:	af e4       	ldi	r26, 0x4F	; 79
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	ef e4       	ldi	r30, 0x4F	; 79
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	98 2f       	mov	r25, r24
    2c7a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c7c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c7e:	81 81       	ldd	r24, Z+1	; 0x01
    2c80:	83 70       	andi	r24, 0x03	; 3
    2c82:	89 2b       	or	r24, r25
    2c84:	8c 93       	st	X, r24
			TCCR1B |= ((((Copy_pstTimerConfig -> WGM) >> 2) & 3) << 3);
    2c86:	ae e4       	ldi	r26, 0x4E	; 78
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	ee e4       	ldi	r30, 0x4E	; 78
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	28 2f       	mov	r18, r24
    2c92:	ea 81       	ldd	r30, Y+2	; 0x02
    2c94:	fb 81       	ldd	r31, Y+3	; 0x03
    2c96:	81 81       	ldd	r24, Z+1	; 0x01
    2c98:	86 95       	lsr	r24
    2c9a:	86 95       	lsr	r24
    2c9c:	88 2f       	mov	r24, r24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	83 70       	andi	r24, 0x03	; 3
    2ca2:	90 70       	andi	r25, 0x00	; 0
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	82 2b       	or	r24, r18
    2cb2:	8c 93       	st	X, r24

			/*Select Output Compare Match Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    2cb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2cb8:	81 81       	ldd	r24, Z+1	; 0x01
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	39 87       	std	Y+9, r19	; 0x09
    2cc0:	28 87       	std	Y+8, r18	; 0x08
    2cc2:	88 85       	ldd	r24, Y+8	; 0x08
    2cc4:	99 85       	ldd	r25, Y+9	; 0x09
    2cc6:	8c 30       	cpi	r24, 0x0C	; 12
    2cc8:	91 05       	cpc	r25, r1
    2cca:	b4 f4       	brge	.+44     	; 0x2cf8 <TIMER1_u8Init+0xda>
    2ccc:	28 85       	ldd	r18, Y+8	; 0x08
    2cce:	39 85       	ldd	r19, Y+9	; 0x09
    2cd0:	25 30       	cpi	r18, 0x05	; 5
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	0c f0       	brlt	.+2      	; 0x2cd8 <TIMER1_u8Init+0xba>
    2cd6:	70 c0       	rjmp	.+224    	; 0x2db8 <TIMER1_u8Init+0x19a>
    2cd8:	88 85       	ldd	r24, Y+8	; 0x08
    2cda:	99 85       	ldd	r25, Y+9	; 0x09
    2cdc:	84 30       	cpi	r24, 0x04	; 4
    2cde:	91 05       	cpc	r25, r1
    2ce0:	c4 f4       	brge	.+48     	; 0x2d12 <TIMER1_u8Init+0xf4>
    2ce2:	28 85       	ldd	r18, Y+8	; 0x08
    2ce4:	39 85       	ldd	r19, Y+9	; 0x09
    2ce6:	21 30       	cpi	r18, 0x01	; 1
    2ce8:	31 05       	cpc	r19, r1
    2cea:	0c f0       	brlt	.+2      	; 0x2cee <TIMER1_u8Init+0xd0>
    2cec:	65 c0       	rjmp	.+202    	; 0x2db8 <TIMER1_u8Init+0x19a>
    2cee:	88 85       	ldd	r24, Y+8	; 0x08
    2cf0:	99 85       	ldd	r25, Y+9	; 0x09
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	71 f0       	breq	.+28     	; 0x2d12 <TIMER1_u8Init+0xf4>
    2cf6:	ff c0       	rjmp	.+510    	; 0x2ef6 <TIMER1_u8Init+0x2d8>
    2cf8:	28 85       	ldd	r18, Y+8	; 0x08
    2cfa:	39 85       	ldd	r19, Y+9	; 0x09
    2cfc:	2c 30       	cpi	r18, 0x0C	; 12
    2cfe:	31 05       	cpc	r19, r1
    2d00:	41 f0       	breq	.+16     	; 0x2d12 <TIMER1_u8Init+0xf4>
    2d02:	88 85       	ldd	r24, Y+8	; 0x08
    2d04:	99 85       	ldd	r25, Y+9	; 0x09
    2d06:	0e 97       	sbiw	r24, 0x0e	; 14
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	08 f0       	brcs	.+2      	; 0x2d10 <TIMER1_u8Init+0xf2>
    2d0e:	f3 c0       	rjmp	.+486    	; 0x2ef6 <TIMER1_u8Init+0x2d8>
    2d10:	53 c0       	rjmp	.+166    	; 0x2db8 <TIMER1_u8Init+0x19a>
			{
			case NORMAL_16_BITS:
			case CTC_OCR1A:
			case CTC_ICR1:
				/*For Channel A*/
				if((Copy_pstTimerConfig -> OCAMode) < NON_INVERTED_PWM)
    2d12:	ea 81       	ldd	r30, Y+2	; 0x02
    2d14:	fb 81       	ldd	r31, Y+3	; 0x03
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	84 30       	cpi	r24, 0x04	; 4
    2d1a:	f0 f4       	brcc	.+60     	; 0x2d58 <TIMER1_u8Init+0x13a>
				{
					TCCR1A &= TIMER1_OCMATCH_A_MASK;
    2d1c:	af e4       	ldi	r26, 0x4F	; 79
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	ef e4       	ldi	r30, 0x4F	; 79
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	8f 73       	andi	r24, 0x3F	; 63
    2d28:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCAMode) << 6);
    2d2a:	af e4       	ldi	r26, 0x4F	; 79
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	ef e4       	ldi	r30, 0x4F	; 79
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	28 2f       	mov	r18, r24
    2d36:	ea 81       	ldd	r30, Y+2	; 0x02
    2d38:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	00 24       	eor	r0, r0
    2d42:	96 95       	lsr	r25
    2d44:	87 95       	ror	r24
    2d46:	07 94       	ror	r0
    2d48:	96 95       	lsr	r25
    2d4a:	87 95       	ror	r24
    2d4c:	07 94       	ror	r0
    2d4e:	98 2f       	mov	r25, r24
    2d50:	80 2d       	mov	r24, r0
    2d52:	82 2b       	or	r24, r18
    2d54:	8c 93       	st	X, r24
    2d56:	07 c0       	rjmp	.+14     	; 0x2d66 <TIMER1_u8Init+0x148>
				}
				else if((Copy_pstTimerConfig -> OCAMode) == DO_NOT_CHANGE)
    2d58:	ea 81       	ldd	r30, Y+2	; 0x02
    2d5a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d5c:	82 81       	ldd	r24, Z+2	; 0x02
    2d5e:	86 30       	cpi	r24, 0x06	; 6
    2d60:	11 f0       	breq	.+4      	; 0x2d66 <TIMER1_u8Init+0x148>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				if((Copy_pstTimerConfig -> OCBMode) < NON_INVERTED_PWM)
    2d66:	ea 81       	ldd	r30, Y+2	; 0x02
    2d68:	fb 81       	ldd	r31, Y+3	; 0x03
    2d6a:	83 81       	ldd	r24, Z+3	; 0x03
    2d6c:	84 30       	cpi	r24, 0x04	; 4
    2d6e:	d8 f4       	brcc	.+54     	; 0x2da6 <TIMER1_u8Init+0x188>
				{
					TCCR1A &= TIMER1_OCMATCH_B_MASK;
    2d70:	af e4       	ldi	r26, 0x4F	; 79
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	ef e4       	ldi	r30, 0x4F	; 79
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	8f 7c       	andi	r24, 0xCF	; 207
    2d7c:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCBMode) << 4);
    2d7e:	af e4       	ldi	r26, 0x4F	; 79
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	ef e4       	ldi	r30, 0x4F	; 79
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	28 2f       	mov	r18, r24
    2d8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d8e:	83 81       	ldd	r24, Z+3	; 0x03
    2d90:	88 2f       	mov	r24, r24
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	82 95       	swap	r24
    2d96:	92 95       	swap	r25
    2d98:	90 7f       	andi	r25, 0xF0	; 240
    2d9a:	98 27       	eor	r25, r24
    2d9c:	80 7f       	andi	r24, 0xF0	; 240
    2d9e:	98 27       	eor	r25, r24
    2da0:	82 2b       	or	r24, r18
    2da2:	8c 93       	st	X, r24
    2da4:	aa c0       	rjmp	.+340    	; 0x2efa <TIMER1_u8Init+0x2dc>
				}
				else if((Copy_pstTimerConfig -> OCBMode) == DO_NOT_CHANGE)
    2da6:	ea 81       	ldd	r30, Y+2	; 0x02
    2da8:	fb 81       	ldd	r31, Y+3	; 0x03
    2daa:	83 81       	ldd	r24, Z+3	; 0x03
    2dac:	86 30       	cpi	r24, 0x06	; 6
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <TIMER1_u8Init+0x194>
    2db0:	a4 c0       	rjmp	.+328    	; 0x2efa <TIMER1_u8Init+0x2dc>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	89 83       	std	Y+1, r24	; 0x01
    2db6:	a1 c0       	rjmp	.+322    	; 0x2efa <TIMER1_u8Init+0x2dc>
			case PHASE_FREQ_CORR_ICR1:
			case PHASE_FREQ_CORR_OCR1A:
			case PHASE_CORR_ICR1:
			case PHASE_CORR_OCR1A:
				/*For Channel A*/
				switch(Copy_pstTimerConfig -> OCAMode)
    2db8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dba:	fb 81       	ldd	r31, Y+3	; 0x03
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	3f 83       	std	Y+7, r19	; 0x07
    2dc4:	2e 83       	std	Y+6, r18	; 0x06
    2dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    2dca:	84 30       	cpi	r24, 0x04	; 4
    2dcc:	91 05       	cpc	r25, r1
    2dce:	19 f1       	breq	.+70     	; 0x2e16 <TIMER1_u8Init+0x1f8>
    2dd0:	2e 81       	ldd	r18, Y+6	; 0x06
    2dd2:	3f 81       	ldd	r19, Y+7	; 0x07
    2dd4:	25 30       	cpi	r18, 0x05	; 5
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <TIMER1_u8Init+0x1c6>
    2dda:	8e 81       	ldd	r24, Y+6	; 0x06
    2ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	61 f0       	breq	.+24     	; 0x2dfa <TIMER1_u8Init+0x1dc>
    2de2:	37 c0       	rjmp	.+110    	; 0x2e52 <TIMER1_u8Init+0x234>
    2de4:	2e 81       	ldd	r18, Y+6	; 0x06
    2de6:	3f 81       	ldd	r19, Y+7	; 0x07
    2de8:	25 30       	cpi	r18, 0x05	; 5
    2dea:	31 05       	cpc	r19, r1
    2dec:	19 f1       	breq	.+70     	; 0x2e34 <TIMER1_u8Init+0x216>
    2dee:	8e 81       	ldd	r24, Y+6	; 0x06
    2df0:	9f 81       	ldd	r25, Y+7	; 0x07
    2df2:	86 30       	cpi	r24, 0x06	; 6
    2df4:	91 05       	cpc	r25, r1
    2df6:	79 f1       	breq	.+94     	; 0x2e56 <TIMER1_u8Init+0x238>
    2df8:	2c c0       	rjmp	.+88     	; 0x2e52 <TIMER1_u8Init+0x234>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    2dfa:	af e4       	ldi	r26, 0x4F	; 79
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	ef e4       	ldi	r30, 0x4F	; 79
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	8f 73       	andi	r24, 0x3F	; 63
    2e06:	8c 93       	st	X, r24
    2e08:	af e4       	ldi	r26, 0x4F	; 79
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ef e4       	ldi	r30, 0x4F	; 79
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	8c 93       	st	X, r24
    2e14:	20 c0       	rjmp	.+64     	; 0x2e56 <TIMER1_u8Init+0x238>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    2e16:	af e4       	ldi	r26, 0x4F	; 79
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	ef e4       	ldi	r30, 0x4F	; 79
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	8f 73       	andi	r24, 0x3F	; 63
    2e22:	8c 93       	st	X, r24
    2e24:	af e4       	ldi	r26, 0x4F	; 79
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	ef e4       	ldi	r30, 0x4F	; 79
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	80 68       	ori	r24, 0x80	; 128
    2e30:	8c 93       	st	X, r24
    2e32:	11 c0       	rjmp	.+34     	; 0x2e56 <TIMER1_u8Init+0x238>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    2e34:	af e4       	ldi	r26, 0x4F	; 79
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	ef e4       	ldi	r30, 0x4F	; 79
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	8f 73       	andi	r24, 0x3F	; 63
    2e40:	8c 93       	st	X, r24
    2e42:	af e4       	ldi	r26, 0x4F	; 79
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	ef e4       	ldi	r30, 0x4F	; 79
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	80 6c       	ori	r24, 0xC0	; 192
    2e4e:	8c 93       	st	X, r24
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <TIMER1_u8Init+0x238>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				switch(Copy_pstTimerConfig -> OCBMode)
    2e56:	ea 81       	ldd	r30, Y+2	; 0x02
    2e58:	fb 81       	ldd	r31, Y+3	; 0x03
    2e5a:	83 81       	ldd	r24, Z+3	; 0x03
    2e5c:	28 2f       	mov	r18, r24
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	3d 83       	std	Y+5, r19	; 0x05
    2e62:	2c 83       	std	Y+4, r18	; 0x04
    2e64:	8c 81       	ldd	r24, Y+4	; 0x04
    2e66:	9d 81       	ldd	r25, Y+5	; 0x05
    2e68:	84 30       	cpi	r24, 0x04	; 4
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	19 f1       	breq	.+70     	; 0x2eb4 <TIMER1_u8Init+0x296>
    2e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    2e70:	3d 81       	ldd	r19, Y+5	; 0x05
    2e72:	25 30       	cpi	r18, 0x05	; 5
    2e74:	31 05       	cpc	r19, r1
    2e76:	2c f4       	brge	.+10     	; 0x2e82 <TIMER1_u8Init+0x264>
    2e78:	8c 81       	ldd	r24, Y+4	; 0x04
    2e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	61 f0       	breq	.+24     	; 0x2e98 <TIMER1_u8Init+0x27a>
    2e80:	37 c0       	rjmp	.+110    	; 0x2ef0 <TIMER1_u8Init+0x2d2>
    2e82:	2c 81       	ldd	r18, Y+4	; 0x04
    2e84:	3d 81       	ldd	r19, Y+5	; 0x05
    2e86:	25 30       	cpi	r18, 0x05	; 5
    2e88:	31 05       	cpc	r19, r1
    2e8a:	19 f1       	breq	.+70     	; 0x2ed2 <TIMER1_u8Init+0x2b4>
    2e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e90:	86 30       	cpi	r24, 0x06	; 6
    2e92:	91 05       	cpc	r25, r1
    2e94:	91 f1       	breq	.+100    	; 0x2efa <TIMER1_u8Init+0x2dc>
    2e96:	2c c0       	rjmp	.+88     	; 0x2ef0 <TIMER1_u8Init+0x2d2>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    2e98:	af e4       	ldi	r26, 0x4F	; 79
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	ef e4       	ldi	r30, 0x4F	; 79
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	8f 7c       	andi	r24, 0xCF	; 207
    2ea4:	8c 93       	st	X, r24
    2ea6:	af e4       	ldi	r26, 0x4F	; 79
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	ef e4       	ldi	r30, 0x4F	; 79
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	8c 93       	st	X, r24
    2eb2:	23 c0       	rjmp	.+70     	; 0x2efa <TIMER1_u8Init+0x2dc>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    2eb4:	af e4       	ldi	r26, 0x4F	; 79
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	ef e4       	ldi	r30, 0x4F	; 79
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	8f 7c       	andi	r24, 0xCF	; 207
    2ec0:	8c 93       	st	X, r24
    2ec2:	af e4       	ldi	r26, 0x4F	; 79
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	ef e4       	ldi	r30, 0x4F	; 79
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	80 62       	ori	r24, 0x20	; 32
    2ece:	8c 93       	st	X, r24
    2ed0:	14 c0       	rjmp	.+40     	; 0x2efa <TIMER1_u8Init+0x2dc>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    2ed2:	af e4       	ldi	r26, 0x4F	; 79
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	ef e4       	ldi	r30, 0x4F	; 79
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	8f 7c       	andi	r24, 0xCF	; 207
    2ede:	8c 93       	st	X, r24
    2ee0:	af e4       	ldi	r26, 0x4F	; 79
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	ef e4       	ldi	r30, 0x4F	; 79
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	80 63       	ori	r24, 0x30	; 48
    2eec:	8c 93       	st	X, r24
    2eee:	05 c0       	rjmp	.+10     	; 0x2efa <TIMER1_u8Init+0x2dc>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <TIMER1_u8Init+0x2dc>
				}
				break;

			default:Local_u8ErrorState = NOK;	break;
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	89 83       	std	Y+1, r24	; 0x01
			}

			/*Select the clock*/
			TCCR1B &= PRESCALER_MASK;
    2efa:	ae e4       	ldi	r26, 0x4E	; 78
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	ee e4       	ldi	r30, 0x4E	; 78
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	88 7f       	andi	r24, 0xF8	; 248
    2f06:	8c 93       	st	X, r24
			TCCR1B |= Copy_pstTimerConfig -> ClkSelect;
    2f08:	ae e4       	ldi	r26, 0x4E	; 78
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	ee e4       	ldi	r30, 0x4E	; 78
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	90 81       	ld	r25, Z
    2f12:	ea 81       	ldd	r30, Y+2	; 0x02
    2f14:	fb 81       	ldd	r31, Y+3	; 0x03
    2f16:	80 81       	ld	r24, Z
    2f18:	89 2b       	or	r24, r25
    2f1a:	8c 93       	st	X, r24
    2f1c:	05 c0       	rjmp	.+10     	; 0x2f28 <TIMER1_u8Init+0x30a>
//			OCR1A = 1000;
//			OCR1B = 2000;
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2f1e:	84 e0       	ldi	r24, 0x04	; 4
    2f20:	89 83       	std	Y+1, r24	; 0x01
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <TIMER1_u8Init+0x30a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f2a:	29 96       	adiw	r28, 0x09	; 9
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <TIMER2_u8Init>:
uint8 TIMER2_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	27 97       	sbiw	r28, 0x07	; 7
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	9b 83       	std	Y+3, r25	; 0x03
    2f52:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2f54:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <TIMER2_u8Init+0x24>
    2f5e:	de c0       	rjmp	.+444    	; 0x311c <TIMER2_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER2] == IDLE)
    2f60:	80 91 f9 01 	lds	r24, 0x01F9
    2f64:	88 23       	and	r24, r24
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <TIMER2_u8Init+0x2e>
    2f68:	d6 c0       	rjmp	.+428    	; 0x3116 <TIMER2_u8Init+0x1da>
		{
			/*Inform others that timer 2 is busy from now*/
			TIMERS_u8StateArr[TIMER2] = BUSY;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	80 93 f9 01 	sts	0x01F9, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    2f70:	ea 81       	ldd	r30, Y+2	; 0x02
    2f72:	fb 81       	ldd	r31, Y+3	; 0x03
    2f74:	81 81       	ldd	r24, Z+1	; 0x01
    2f76:	28 2f       	mov	r18, r24
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	3f 83       	std	Y+7, r19	; 0x07
    2f7c:	2e 83       	std	Y+6, r18	; 0x06
    2f7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f80:	9f 81       	ldd	r25, Y+7	; 0x07
    2f82:	81 30       	cpi	r24, 0x01	; 1
    2f84:	91 05       	cpc	r25, r1
    2f86:	21 f1       	breq	.+72     	; 0x2fd0 <TIMER2_u8Init+0x94>
    2f88:	2e 81       	ldd	r18, Y+6	; 0x06
    2f8a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f8c:	22 30       	cpi	r18, 0x02	; 2
    2f8e:	31 05       	cpc	r19, r1
    2f90:	2c f4       	brge	.+10     	; 0x2f9c <TIMER2_u8Init+0x60>
    2f92:	8e 81       	ldd	r24, Y+6	; 0x06
    2f94:	9f 81       	ldd	r25, Y+7	; 0x07
    2f96:	00 97       	sbiw	r24, 0x00	; 0
    2f98:	61 f0       	breq	.+24     	; 0x2fb2 <TIMER2_u8Init+0x76>
    2f9a:	46 c0       	rjmp	.+140    	; 0x3028 <TIMER2_u8Init+0xec>
    2f9c:	2e 81       	ldd	r18, Y+6	; 0x06
    2f9e:	3f 81       	ldd	r19, Y+7	; 0x07
    2fa0:	22 30       	cpi	r18, 0x02	; 2
    2fa2:	31 05       	cpc	r19, r1
    2fa4:	21 f1       	breq	.+72     	; 0x2fee <TIMER2_u8Init+0xb2>
    2fa6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa8:	9f 81       	ldd	r25, Y+7	; 0x07
    2faa:	83 30       	cpi	r24, 0x03	; 3
    2fac:	91 05       	cpc	r25, r1
    2fae:	71 f1       	breq	.+92     	; 0x300c <TIMER2_u8Init+0xd0>
    2fb0:	3b c0       	rjmp	.+118    	; 0x3028 <TIMER2_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2fb2:	a5 e4       	ldi	r26, 0x45	; 69
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e5 e4       	ldi	r30, 0x45	; 69
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	8f 7b       	andi	r24, 0xBF	; 191
    2fbe:	8c 93       	st	X, r24
    2fc0:	a5 e4       	ldi	r26, 0x45	; 69
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e5 e4       	ldi	r30, 0x45	; 69
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	87 7f       	andi	r24, 0xF7	; 247
    2fcc:	8c 93       	st	X, r24
    2fce:	2c c0       	rjmp	.+88     	; 0x3028 <TIMER2_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2fd0:	a5 e4       	ldi	r26, 0x45	; 69
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e5 e4       	ldi	r30, 0x45	; 69
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	80 64       	ori	r24, 0x40	; 64
    2fdc:	8c 93       	st	X, r24
    2fde:	a5 e4       	ldi	r26, 0x45	; 69
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	e5 e4       	ldi	r30, 0x45	; 69
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	87 7f       	andi	r24, 0xF7	; 247
    2fea:	8c 93       	st	X, r24
    2fec:	1d c0       	rjmp	.+58     	; 0x3028 <TIMER2_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2fee:	a5 e4       	ldi	r26, 0x45	; 69
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	e5 e4       	ldi	r30, 0x45	; 69
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	8f 7b       	andi	r24, 0xBF	; 191
    2ffa:	8c 93       	st	X, r24
    2ffc:	a5 e4       	ldi	r26, 0x45	; 69
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	e5 e4       	ldi	r30, 0x45	; 69
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	88 60       	ori	r24, 0x08	; 8
    3008:	8c 93       	st	X, r24
    300a:	0e c0       	rjmp	.+28     	; 0x3028 <TIMER2_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    300c:	a5 e4       	ldi	r26, 0x45	; 69
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	e5 e4       	ldi	r30, 0x45	; 69
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	80 64       	ori	r24, 0x40	; 64
    3018:	8c 93       	st	X, r24
    301a:	a5 e4       	ldi	r26, 0x45	; 69
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e5 e4       	ldi	r30, 0x45	; 69
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	88 60       	ori	r24, 0x08	; 8
    3026:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR2 &= TIMER0_2_OCMATCH_MASK;
    3028:	a5 e4       	ldi	r26, 0x45	; 69
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	e5 e4       	ldi	r30, 0x45	; 69
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	8f 7c       	andi	r24, 0xCF	; 207
    3034:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    3036:	ea 81       	ldd	r30, Y+2	; 0x02
    3038:	fb 81       	ldd	r31, Y+3	; 0x03
    303a:	81 81       	ldd	r24, Z+1	; 0x01
    303c:	88 23       	and	r24, r24
    303e:	29 f0       	breq	.+10     	; 0x304a <TIMER2_u8Init+0x10e>
    3040:	ea 81       	ldd	r30, Y+2	; 0x02
    3042:	fb 81       	ldd	r31, Y+3	; 0x03
    3044:	81 81       	ldd	r24, Z+1	; 0x01
    3046:	82 30       	cpi	r24, 0x02	; 2
    3048:	e1 f4       	brne	.+56     	; 0x3082 <TIMER2_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    304a:	ea 81       	ldd	r30, Y+2	; 0x02
    304c:	fb 81       	ldd	r31, Y+3	; 0x03
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	84 30       	cpi	r24, 0x04	; 4
    3052:	a0 f4       	brcc	.+40     	; 0x307c <TIMER2_u8Init+0x140>
				{
					TCCR2 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    3054:	a5 e4       	ldi	r26, 0x45	; 69
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	e5 e4       	ldi	r30, 0x45	; 69
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	28 2f       	mov	r18, r24
    3060:	ea 81       	ldd	r30, Y+2	; 0x02
    3062:	fb 81       	ldd	r31, Y+3	; 0x03
    3064:	82 81       	ldd	r24, Z+2	; 0x02
    3066:	88 2f       	mov	r24, r24
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	82 95       	swap	r24
    306c:	92 95       	swap	r25
    306e:	90 7f       	andi	r25, 0xF0	; 240
    3070:	98 27       	eor	r25, r24
    3072:	80 7f       	andi	r24, 0xF0	; 240
    3074:	98 27       	eor	r25, r24
    3076:	82 2b       	or	r24, r18
    3078:	8c 93       	st	X, r24
    307a:	3b c0       	rjmp	.+118    	; 0x30f2 <TIMER2_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	89 83       	std	Y+1, r24	; 0x01
    3080:	38 c0       	rjmp	.+112    	; 0x30f2 <TIMER2_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    3082:	ea 81       	ldd	r30, Y+2	; 0x02
    3084:	fb 81       	ldd	r31, Y+3	; 0x03
    3086:	81 81       	ldd	r24, Z+1	; 0x01
    3088:	83 30       	cpi	r24, 0x03	; 3
    308a:	29 f0       	breq	.+10     	; 0x3096 <TIMER2_u8Init+0x15a>
    308c:	ea 81       	ldd	r30, Y+2	; 0x02
    308e:	fb 81       	ldd	r31, Y+3	; 0x03
    3090:	81 81       	ldd	r24, Z+1	; 0x01
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	71 f5       	brne	.+92     	; 0x30f2 <TIMER2_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    3096:	ea 81       	ldd	r30, Y+2	; 0x02
    3098:	fb 81       	ldd	r31, Y+3	; 0x03
    309a:	82 81       	ldd	r24, Z+2	; 0x02
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	3d 83       	std	Y+5, r19	; 0x05
    30a2:	2c 83       	std	Y+4, r18	; 0x04
    30a4:	8c 81       	ldd	r24, Y+4	; 0x04
    30a6:	9d 81       	ldd	r25, Y+5	; 0x05
    30a8:	84 30       	cpi	r24, 0x04	; 4
    30aa:	91 05       	cpc	r25, r1
    30ac:	81 f0       	breq	.+32     	; 0x30ce <TIMER2_u8Init+0x192>
    30ae:	2c 81       	ldd	r18, Y+4	; 0x04
    30b0:	3d 81       	ldd	r19, Y+5	; 0x05
    30b2:	25 30       	cpi	r18, 0x05	; 5
    30b4:	31 05       	cpc	r19, r1
    30b6:	99 f0       	breq	.+38     	; 0x30de <TIMER2_u8Init+0x1a2>
    30b8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ba:	9d 81       	ldd	r25, Y+5	; 0x05
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	b9 f4       	brne	.+46     	; 0x30ee <TIMER2_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    30c0:	e5 e4       	ldi	r30, 0x45	; 69
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	a5 e4       	ldi	r26, 0x45	; 69
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	8c 91       	ld	r24, X
    30ca:	80 83       	st	Z, r24
    30cc:	12 c0       	rjmp	.+36     	; 0x30f2 <TIMER2_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    30ce:	a5 e4       	ldi	r26, 0x45	; 69
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e5 e4       	ldi	r30, 0x45	; 69
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	80 62       	ori	r24, 0x20	; 32
    30da:	8c 93       	st	X, r24
    30dc:	0a c0       	rjmp	.+20     	; 0x30f2 <TIMER2_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    30de:	a5 e4       	ldi	r26, 0x45	; 69
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e5 e4       	ldi	r30, 0x45	; 69
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	80 63       	ori	r24, 0x30	; 48
    30ea:	8c 93       	st	X, r24
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <TIMER2_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR2 &= PRESCALER_MASK;
    30f2:	a5 e4       	ldi	r26, 0x45	; 69
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	e5 e4       	ldi	r30, 0x45	; 69
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	88 7f       	andi	r24, 0xF8	; 248
    30fe:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    3100:	a5 e4       	ldi	r26, 0x45	; 69
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e5 e4       	ldi	r30, 0x45	; 69
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	90 81       	ld	r25, Z
    310a:	ea 81       	ldd	r30, Y+2	; 0x02
    310c:	fb 81       	ldd	r31, Y+3	; 0x03
    310e:	80 81       	ld	r24, Z
    3110:	89 2b       	or	r24, r25
    3112:	8c 93       	st	X, r24
    3114:	05 c0       	rjmp	.+10     	; 0x3120 <TIMER2_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    3116:	84 e0       	ldi	r24, 0x04	; 4
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <TIMER2_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    311c:	82 e0       	ldi	r24, 0x02	; 2
    311e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3120:	89 81       	ldd	r24, Y+1	; 0x01
}
    3122:	27 96       	adiw	r28, 0x07	; 7
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <TIMER0_u8SetCompOutMode>:



uint8 TIMER0_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	00 d0       	rcall	.+0      	; 0x313a <TIMER0_u8SetCompOutMode+0x6>
    313a:	00 d0       	rcall	.+0      	; 0x313c <TIMER0_u8SetCompOutMode+0x8>
    313c:	00 d0       	rcall	.+0      	; 0x313e <TIMER0_u8SetCompOutMode+0xa>
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	9b 83       	std	Y+3, r25	; 0x03
    3144:	8a 83       	std	Y+2, r24	; 0x02
    3146:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3148:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	9b 81       	ldd	r25, Y+3	; 0x03
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	09 f4       	brne	.+2      	; 0x3154 <TIMER0_u8SetCompOutMode+0x20>
    3152:	60 c0       	rjmp	.+192    	; 0x3214 <TIMER0_u8SetCompOutMode+0xe0>
	{
		TCCR0 &= TIMER0_2_OCMATCH_MASK;
    3154:	a3 e5       	ldi	r26, 0x53	; 83
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e3 e5       	ldi	r30, 0x53	; 83
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	8f 7c       	andi	r24, 0xCF	; 207
    3160:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    3162:	ea 81       	ldd	r30, Y+2	; 0x02
    3164:	fb 81       	ldd	r31, Y+3	; 0x03
    3166:	81 81       	ldd	r24, Z+1	; 0x01
    3168:	88 23       	and	r24, r24
    316a:	29 f0       	breq	.+10     	; 0x3176 <TIMER0_u8SetCompOutMode+0x42>
    316c:	ea 81       	ldd	r30, Y+2	; 0x02
    316e:	fb 81       	ldd	r31, Y+3	; 0x03
    3170:	81 81       	ldd	r24, Z+1	; 0x01
    3172:	82 30       	cpi	r24, 0x02	; 2
    3174:	c1 f4       	brne	.+48     	; 0x31a6 <TIMER0_u8SetCompOutMode+0x72>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    3176:	8c 81       	ldd	r24, Y+4	; 0x04
    3178:	84 30       	cpi	r24, 0x04	; 4
    317a:	90 f4       	brcc	.+36     	; 0x31a0 <TIMER0_u8SetCompOutMode+0x6c>
			{
				TCCR0 |= (Copy_u8Mode << 4);
    317c:	a3 e5       	ldi	r26, 0x53	; 83
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e3 e5       	ldi	r30, 0x53	; 83
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	28 2f       	mov	r18, r24
    3188:	8c 81       	ldd	r24, Y+4	; 0x04
    318a:	88 2f       	mov	r24, r24
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	82 95       	swap	r24
    3190:	92 95       	swap	r25
    3192:	90 7f       	andi	r25, 0xF0	; 240
    3194:	98 27       	eor	r25, r24
    3196:	80 7f       	andi	r24, 0xF0	; 240
    3198:	98 27       	eor	r25, r24
    319a:	82 2b       	or	r24, r18
    319c:	8c 93       	st	X, r24
    319e:	3c c0       	rjmp	.+120    	; 0x3218 <TIMER0_u8SetCompOutMode+0xe4>
			}
			else
			{
				Local_u8ErrorState = NOK;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	89 83       	std	Y+1, r24	; 0x01
    31a4:	39 c0       	rjmp	.+114    	; 0x3218 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    31a6:	ea 81       	ldd	r30, Y+2	; 0x02
    31a8:	fb 81       	ldd	r31, Y+3	; 0x03
    31aa:	81 81       	ldd	r24, Z+1	; 0x01
    31ac:	83 30       	cpi	r24, 0x03	; 3
    31ae:	29 f0       	breq	.+10     	; 0x31ba <TIMER0_u8SetCompOutMode+0x86>
    31b0:	ea 81       	ldd	r30, Y+2	; 0x02
    31b2:	fb 81       	ldd	r31, Y+3	; 0x03
    31b4:	81 81       	ldd	r24, Z+1	; 0x01
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	79 f5       	brne	.+94     	; 0x3218 <TIMER0_u8SetCompOutMode+0xe4>
		{
			switch(Copy_u8Mode)
    31ba:	8c 81       	ldd	r24, Y+4	; 0x04
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	3e 83       	std	Y+6, r19	; 0x06
    31c2:	2d 83       	std	Y+5, r18	; 0x05
    31c4:	8d 81       	ldd	r24, Y+5	; 0x05
    31c6:	9e 81       	ldd	r25, Y+6	; 0x06
    31c8:	84 30       	cpi	r24, 0x04	; 4
    31ca:	91 05       	cpc	r25, r1
    31cc:	81 f0       	breq	.+32     	; 0x31ee <TIMER0_u8SetCompOutMode+0xba>
    31ce:	2d 81       	ldd	r18, Y+5	; 0x05
    31d0:	3e 81       	ldd	r19, Y+6	; 0x06
    31d2:	25 30       	cpi	r18, 0x05	; 5
    31d4:	31 05       	cpc	r19, r1
    31d6:	99 f0       	breq	.+38     	; 0x31fe <TIMER0_u8SetCompOutMode+0xca>
    31d8:	8d 81       	ldd	r24, Y+5	; 0x05
    31da:	9e 81       	ldd	r25, Y+6	; 0x06
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	b9 f4       	brne	.+46     	; 0x320e <TIMER0_u8SetCompOutMode+0xda>
			{
			case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    31e0:	e3 e5       	ldi	r30, 0x53	; 83
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	a3 e5       	ldi	r26, 0x53	; 83
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	8c 91       	ld	r24, X
    31ea:	80 83       	st	Z, r24
    31ec:	15 c0       	rjmp	.+42     	; 0x3218 <TIMER0_u8SetCompOutMode+0xe4>
			case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    31ee:	a3 e5       	ldi	r26, 0x53	; 83
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e3 e5       	ldi	r30, 0x53	; 83
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	80 62       	ori	r24, 0x20	; 32
    31fa:	8c 93       	st	X, r24
    31fc:	0d c0       	rjmp	.+26     	; 0x3218 <TIMER0_u8SetCompOutMode+0xe4>
			case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    31fe:	a3 e5       	ldi	r26, 0x53	; 83
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	e3 e5       	ldi	r30, 0x53	; 83
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	80 63       	ori	r24, 0x30	; 48
    320a:	8c 93       	st	X, r24
    320c:	05 c0       	rjmp	.+10     	; 0x3218 <TIMER0_u8SetCompOutMode+0xe4>
			default: Local_u8ErrorState = NOK;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    3218:	89 81       	ldd	r24, Y+1	; 0x01
}
    321a:	26 96       	adiw	r28, 0x06	; 6
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	cd bf       	out	0x3d, r28	; 61
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <TIMER1_u8SetCompOutModeChA>:
uint8 TIMER1_u8SetCompOutModeChA(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	28 97       	sbiw	r28, 0x08	; 8
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	f8 94       	cli
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	cd bf       	out	0x3d, r28	; 61
    3240:	9b 83       	std	Y+3, r25	; 0x03
    3242:	8a 83       	std	Y+2, r24	; 0x02
    3244:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3246:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	9b 81       	ldd	r25, Y+3	; 0x03
    324c:	00 97       	sbiw	r24, 0x00	; 0
    324e:	09 f4       	brne	.+2      	; 0x3252 <TIMER1_u8SetCompOutModeChA+0x26>
    3250:	a5 c0       	rjmp	.+330    	; 0x339c <TIMER1_u8SetCompOutModeChA+0x170>
	{
		/*Select Output Compare Match Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    3252:	ea 81       	ldd	r30, Y+2	; 0x02
    3254:	fb 81       	ldd	r31, Y+3	; 0x03
    3256:	81 81       	ldd	r24, Z+1	; 0x01
    3258:	28 2f       	mov	r18, r24
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	38 87       	std	Y+8, r19	; 0x08
    325e:	2f 83       	std	Y+7, r18	; 0x07
    3260:	8f 81       	ldd	r24, Y+7	; 0x07
    3262:	98 85       	ldd	r25, Y+8	; 0x08
    3264:	8c 30       	cpi	r24, 0x0C	; 12
    3266:	91 05       	cpc	r25, r1
    3268:	ac f4       	brge	.+42     	; 0x3294 <TIMER1_u8SetCompOutModeChA+0x68>
    326a:	2f 81       	ldd	r18, Y+7	; 0x07
    326c:	38 85       	ldd	r19, Y+8	; 0x08
    326e:	25 30       	cpi	r18, 0x05	; 5
    3270:	31 05       	cpc	r19, r1
    3272:	0c f0       	brlt	.+2      	; 0x3276 <TIMER1_u8SetCompOutModeChA+0x4a>
    3274:	42 c0       	rjmp	.+132    	; 0x32fa <TIMER1_u8SetCompOutModeChA+0xce>
    3276:	8f 81       	ldd	r24, Y+7	; 0x07
    3278:	98 85       	ldd	r25, Y+8	; 0x08
    327a:	84 30       	cpi	r24, 0x04	; 4
    327c:	91 05       	cpc	r25, r1
    327e:	bc f4       	brge	.+46     	; 0x32ae <TIMER1_u8SetCompOutModeChA+0x82>
    3280:	2f 81       	ldd	r18, Y+7	; 0x07
    3282:	38 85       	ldd	r19, Y+8	; 0x08
    3284:	21 30       	cpi	r18, 0x01	; 1
    3286:	31 05       	cpc	r19, r1
    3288:	c4 f5       	brge	.+112    	; 0x32fa <TIMER1_u8SetCompOutModeChA+0xce>
    328a:	8f 81       	ldd	r24, Y+7	; 0x07
    328c:	98 85       	ldd	r25, Y+8	; 0x08
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	71 f0       	breq	.+28     	; 0x32ae <TIMER1_u8SetCompOutModeChA+0x82>
    3292:	81 c0       	rjmp	.+258    	; 0x3396 <TIMER1_u8SetCompOutModeChA+0x16a>
    3294:	2f 81       	ldd	r18, Y+7	; 0x07
    3296:	38 85       	ldd	r19, Y+8	; 0x08
    3298:	2c 30       	cpi	r18, 0x0C	; 12
    329a:	31 05       	cpc	r19, r1
    329c:	41 f0       	breq	.+16     	; 0x32ae <TIMER1_u8SetCompOutModeChA+0x82>
    329e:	8f 81       	ldd	r24, Y+7	; 0x07
    32a0:	98 85       	ldd	r25, Y+8	; 0x08
    32a2:	0e 97       	sbiw	r24, 0x0e	; 14
    32a4:	82 30       	cpi	r24, 0x02	; 2
    32a6:	91 05       	cpc	r25, r1
    32a8:	08 f0       	brcs	.+2      	; 0x32ac <TIMER1_u8SetCompOutModeChA+0x80>
    32aa:	75 c0       	rjmp	.+234    	; 0x3396 <TIMER1_u8SetCompOutModeChA+0x16a>
    32ac:	26 c0       	rjmp	.+76     	; 0x32fa <TIMER1_u8SetCompOutModeChA+0xce>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel A*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    32ae:	8c 81       	ldd	r24, Y+4	; 0x04
    32b0:	84 30       	cpi	r24, 0x04	; 4
    32b2:	e0 f4       	brcc	.+56     	; 0x32ec <TIMER1_u8SetCompOutModeChA+0xc0>
			{
				TCCR1A &= TIMER1_OCMATCH_A_MASK;
    32b4:	af e4       	ldi	r26, 0x4F	; 79
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	ef e4       	ldi	r30, 0x4F	; 79
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	8f 73       	andi	r24, 0x3F	; 63
    32c0:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 6);
    32c2:	af e4       	ldi	r26, 0x4F	; 79
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	ef e4       	ldi	r30, 0x4F	; 79
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	80 81       	ld	r24, Z
    32cc:	28 2f       	mov	r18, r24
    32ce:	8c 81       	ldd	r24, Y+4	; 0x04
    32d0:	88 2f       	mov	r24, r24
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	00 24       	eor	r0, r0
    32d6:	96 95       	lsr	r25
    32d8:	87 95       	ror	r24
    32da:	07 94       	ror	r0
    32dc:	96 95       	lsr	r25
    32de:	87 95       	ror	r24
    32e0:	07 94       	ror	r0
    32e2:	98 2f       	mov	r25, r24
    32e4:	80 2d       	mov	r24, r0
    32e6:	82 2b       	or	r24, r18
    32e8:	8c 93       	st	X, r24
    32ea:	5a c0       	rjmp	.+180    	; 0x33a0 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    32ec:	8c 81       	ldd	r24, Y+4	; 0x04
    32ee:	86 30       	cpi	r24, 0x06	; 6
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <TIMER1_u8SetCompOutModeChA+0xc8>
    32f2:	56 c0       	rjmp	.+172    	; 0x33a0 <TIMER1_u8SetCompOutModeChA+0x174>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	89 83       	std	Y+1, r24	; 0x01
    32f8:	53 c0       	rjmp	.+166    	; 0x33a0 <TIMER1_u8SetCompOutModeChA+0x174>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel A*/
			switch(Copy_u8Mode)
    32fa:	8c 81       	ldd	r24, Y+4	; 0x04
    32fc:	28 2f       	mov	r18, r24
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	3e 83       	std	Y+6, r19	; 0x06
    3302:	2d 83       	std	Y+5, r18	; 0x05
    3304:	8d 81       	ldd	r24, Y+5	; 0x05
    3306:	9e 81       	ldd	r25, Y+6	; 0x06
    3308:	84 30       	cpi	r24, 0x04	; 4
    330a:	91 05       	cpc	r25, r1
    330c:	19 f1       	breq	.+70     	; 0x3354 <TIMER1_u8SetCompOutModeChA+0x128>
    330e:	2d 81       	ldd	r18, Y+5	; 0x05
    3310:	3e 81       	ldd	r19, Y+6	; 0x06
    3312:	25 30       	cpi	r18, 0x05	; 5
    3314:	31 05       	cpc	r19, r1
    3316:	2c f4       	brge	.+10     	; 0x3322 <TIMER1_u8SetCompOutModeChA+0xf6>
    3318:	8d 81       	ldd	r24, Y+5	; 0x05
    331a:	9e 81       	ldd	r25, Y+6	; 0x06
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	61 f0       	breq	.+24     	; 0x3338 <TIMER1_u8SetCompOutModeChA+0x10c>
    3320:	37 c0       	rjmp	.+110    	; 0x3390 <TIMER1_u8SetCompOutModeChA+0x164>
    3322:	2d 81       	ldd	r18, Y+5	; 0x05
    3324:	3e 81       	ldd	r19, Y+6	; 0x06
    3326:	25 30       	cpi	r18, 0x05	; 5
    3328:	31 05       	cpc	r19, r1
    332a:	19 f1       	breq	.+70     	; 0x3372 <TIMER1_u8SetCompOutModeChA+0x146>
    332c:	8d 81       	ldd	r24, Y+5	; 0x05
    332e:	9e 81       	ldd	r25, Y+6	; 0x06
    3330:	86 30       	cpi	r24, 0x06	; 6
    3332:	91 05       	cpc	r25, r1
    3334:	a9 f1       	breq	.+106    	; 0x33a0 <TIMER1_u8SetCompOutModeChA+0x174>
    3336:	2c c0       	rjmp	.+88     	; 0x3390 <TIMER1_u8SetCompOutModeChA+0x164>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    3338:	af e4       	ldi	r26, 0x4F	; 79
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	ef e4       	ldi	r30, 0x4F	; 79
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	8f 73       	andi	r24, 0x3F	; 63
    3344:	8c 93       	st	X, r24
    3346:	af e4       	ldi	r26, 0x4F	; 79
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	ef e4       	ldi	r30, 0x4F	; 79
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	8c 93       	st	X, r24
    3352:	26 c0       	rjmp	.+76     	; 0x33a0 <TIMER1_u8SetCompOutModeChA+0x174>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    3354:	af e4       	ldi	r26, 0x4F	; 79
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	ef e4       	ldi	r30, 0x4F	; 79
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 81       	ld	r24, Z
    335e:	8f 73       	andi	r24, 0x3F	; 63
    3360:	8c 93       	st	X, r24
    3362:	af e4       	ldi	r26, 0x4F	; 79
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	ef e4       	ldi	r30, 0x4F	; 79
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	80 68       	ori	r24, 0x80	; 128
    336e:	8c 93       	st	X, r24
    3370:	17 c0       	rjmp	.+46     	; 0x33a0 <TIMER1_u8SetCompOutModeChA+0x174>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    3372:	af e4       	ldi	r26, 0x4F	; 79
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	ef e4       	ldi	r30, 0x4F	; 79
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	8f 73       	andi	r24, 0x3F	; 63
    337e:	8c 93       	st	X, r24
    3380:	af e4       	ldi	r26, 0x4F	; 79
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	ef e4       	ldi	r30, 0x4F	; 79
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	80 6c       	ori	r24, 0xC0	; 192
    338c:	8c 93       	st	X, r24
    338e:	08 c0       	rjmp	.+16     	; 0x33a0 <TIMER1_u8SetCompOutModeChA+0x174>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	89 83       	std	Y+1, r24	; 0x01
    3394:	05 c0       	rjmp	.+10     	; 0x33a0 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	89 83       	std	Y+1, r24	; 0x01
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <TIMER1_u8SetCompOutModeChA+0x174>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    33a2:	28 96       	adiw	r28, 0x08	; 8
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	0f be       	out	0x3f, r0	; 63
    33ac:	cd bf       	out	0x3d, r28	; 61
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <TIMER1_u8SetCompOutModeChB>:
uint8 TIMER1_u8SetCompOutModeChB(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	28 97       	sbiw	r28, 0x08	; 8
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	9b 83       	std	Y+3, r25	; 0x03
    33ca:	8a 83       	std	Y+2, r24	; 0x02
    33cc:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    33ce:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	9b 81       	ldd	r25, Y+3	; 0x03
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	09 f4       	brne	.+2      	; 0x33da <TIMER1_u8SetCompOutModeChB+0x26>
    33d8:	a2 c0       	rjmp	.+324    	; 0x351e <TIMER1_u8SetCompOutModeChB+0x16a>
	{
		switch(Copy_pstTimerConfig -> WGM)
    33da:	ea 81       	ldd	r30, Y+2	; 0x02
    33dc:	fb 81       	ldd	r31, Y+3	; 0x03
    33de:	81 81       	ldd	r24, Z+1	; 0x01
    33e0:	28 2f       	mov	r18, r24
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	38 87       	std	Y+8, r19	; 0x08
    33e6:	2f 83       	std	Y+7, r18	; 0x07
    33e8:	8f 81       	ldd	r24, Y+7	; 0x07
    33ea:	98 85       	ldd	r25, Y+8	; 0x08
    33ec:	8c 30       	cpi	r24, 0x0C	; 12
    33ee:	91 05       	cpc	r25, r1
    33f0:	ac f4       	brge	.+42     	; 0x341c <TIMER1_u8SetCompOutModeChB+0x68>
    33f2:	2f 81       	ldd	r18, Y+7	; 0x07
    33f4:	38 85       	ldd	r19, Y+8	; 0x08
    33f6:	25 30       	cpi	r18, 0x05	; 5
    33f8:	31 05       	cpc	r19, r1
    33fa:	0c f0       	brlt	.+2      	; 0x33fe <TIMER1_u8SetCompOutModeChB+0x4a>
    33fc:	3f c0       	rjmp	.+126    	; 0x347c <TIMER1_u8SetCompOutModeChB+0xc8>
    33fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3400:	98 85       	ldd	r25, Y+8	; 0x08
    3402:	84 30       	cpi	r24, 0x04	; 4
    3404:	91 05       	cpc	r25, r1
    3406:	bc f4       	brge	.+46     	; 0x3436 <TIMER1_u8SetCompOutModeChB+0x82>
    3408:	2f 81       	ldd	r18, Y+7	; 0x07
    340a:	38 85       	ldd	r19, Y+8	; 0x08
    340c:	21 30       	cpi	r18, 0x01	; 1
    340e:	31 05       	cpc	r19, r1
    3410:	ac f5       	brge	.+106    	; 0x347c <TIMER1_u8SetCompOutModeChB+0xc8>
    3412:	8f 81       	ldd	r24, Y+7	; 0x07
    3414:	98 85       	ldd	r25, Y+8	; 0x08
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	71 f0       	breq	.+28     	; 0x3436 <TIMER1_u8SetCompOutModeChB+0x82>
    341a:	7e c0       	rjmp	.+252    	; 0x3518 <TIMER1_u8SetCompOutModeChB+0x164>
    341c:	2f 81       	ldd	r18, Y+7	; 0x07
    341e:	38 85       	ldd	r19, Y+8	; 0x08
    3420:	2c 30       	cpi	r18, 0x0C	; 12
    3422:	31 05       	cpc	r19, r1
    3424:	41 f0       	breq	.+16     	; 0x3436 <TIMER1_u8SetCompOutModeChB+0x82>
    3426:	8f 81       	ldd	r24, Y+7	; 0x07
    3428:	98 85       	ldd	r25, Y+8	; 0x08
    342a:	0e 97       	sbiw	r24, 0x0e	; 14
    342c:	82 30       	cpi	r24, 0x02	; 2
    342e:	91 05       	cpc	r25, r1
    3430:	08 f0       	brcs	.+2      	; 0x3434 <TIMER1_u8SetCompOutModeChB+0x80>
    3432:	72 c0       	rjmp	.+228    	; 0x3518 <TIMER1_u8SetCompOutModeChB+0x164>
    3434:	23 c0       	rjmp	.+70     	; 0x347c <TIMER1_u8SetCompOutModeChB+0xc8>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel B*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    3436:	8c 81       	ldd	r24, Y+4	; 0x04
    3438:	84 30       	cpi	r24, 0x04	; 4
    343a:	c8 f4       	brcc	.+50     	; 0x346e <TIMER1_u8SetCompOutModeChB+0xba>
			{
				TCCR1A &= TIMER1_OCMATCH_B_MASK;
    343c:	af e4       	ldi	r26, 0x4F	; 79
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	ef e4       	ldi	r30, 0x4F	; 79
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	8f 7c       	andi	r24, 0xCF	; 207
    3448:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 4);
    344a:	af e4       	ldi	r26, 0x4F	; 79
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	ef e4       	ldi	r30, 0x4F	; 79
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	28 2f       	mov	r18, r24
    3456:	8c 81       	ldd	r24, Y+4	; 0x04
    3458:	88 2f       	mov	r24, r24
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	82 95       	swap	r24
    345e:	92 95       	swap	r25
    3460:	90 7f       	andi	r25, 0xF0	; 240
    3462:	98 27       	eor	r25, r24
    3464:	80 7f       	andi	r24, 0xF0	; 240
    3466:	98 27       	eor	r25, r24
    3468:	82 2b       	or	r24, r18
    346a:	8c 93       	st	X, r24
    346c:	5a c0       	rjmp	.+180    	; 0x3522 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    346e:	8c 81       	ldd	r24, Y+4	; 0x04
    3470:	86 30       	cpi	r24, 0x06	; 6
    3472:	09 f4       	brne	.+2      	; 0x3476 <TIMER1_u8SetCompOutModeChB+0xc2>
    3474:	56 c0       	rjmp	.+172    	; 0x3522 <TIMER1_u8SetCompOutModeChB+0x16e>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	53 c0       	rjmp	.+166    	; 0x3522 <TIMER1_u8SetCompOutModeChB+0x16e>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel B*/
			switch(Copy_u8Mode)
    347c:	8c 81       	ldd	r24, Y+4	; 0x04
    347e:	28 2f       	mov	r18, r24
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	3e 83       	std	Y+6, r19	; 0x06
    3484:	2d 83       	std	Y+5, r18	; 0x05
    3486:	8d 81       	ldd	r24, Y+5	; 0x05
    3488:	9e 81       	ldd	r25, Y+6	; 0x06
    348a:	84 30       	cpi	r24, 0x04	; 4
    348c:	91 05       	cpc	r25, r1
    348e:	19 f1       	breq	.+70     	; 0x34d6 <TIMER1_u8SetCompOutModeChB+0x122>
    3490:	2d 81       	ldd	r18, Y+5	; 0x05
    3492:	3e 81       	ldd	r19, Y+6	; 0x06
    3494:	25 30       	cpi	r18, 0x05	; 5
    3496:	31 05       	cpc	r19, r1
    3498:	2c f4       	brge	.+10     	; 0x34a4 <TIMER1_u8SetCompOutModeChB+0xf0>
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	00 97       	sbiw	r24, 0x00	; 0
    34a0:	61 f0       	breq	.+24     	; 0x34ba <TIMER1_u8SetCompOutModeChB+0x106>
    34a2:	37 c0       	rjmp	.+110    	; 0x3512 <TIMER1_u8SetCompOutModeChB+0x15e>
    34a4:	2d 81       	ldd	r18, Y+5	; 0x05
    34a6:	3e 81       	ldd	r19, Y+6	; 0x06
    34a8:	25 30       	cpi	r18, 0x05	; 5
    34aa:	31 05       	cpc	r19, r1
    34ac:	19 f1       	breq	.+70     	; 0x34f4 <TIMER1_u8SetCompOutModeChB+0x140>
    34ae:	8d 81       	ldd	r24, Y+5	; 0x05
    34b0:	9e 81       	ldd	r25, Y+6	; 0x06
    34b2:	86 30       	cpi	r24, 0x06	; 6
    34b4:	91 05       	cpc	r25, r1
    34b6:	a9 f1       	breq	.+106    	; 0x3522 <TIMER1_u8SetCompOutModeChB+0x16e>
    34b8:	2c c0       	rjmp	.+88     	; 0x3512 <TIMER1_u8SetCompOutModeChB+0x15e>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    34ba:	af e4       	ldi	r26, 0x4F	; 79
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	ef e4       	ldi	r30, 0x4F	; 79
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	80 81       	ld	r24, Z
    34c4:	8f 7c       	andi	r24, 0xCF	; 207
    34c6:	8c 93       	st	X, r24
    34c8:	af e4       	ldi	r26, 0x4F	; 79
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	ef e4       	ldi	r30, 0x4F	; 79
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	8c 93       	st	X, r24
    34d4:	26 c0       	rjmp	.+76     	; 0x3522 <TIMER1_u8SetCompOutModeChB+0x16e>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    34d6:	af e4       	ldi	r26, 0x4F	; 79
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	ef e4       	ldi	r30, 0x4F	; 79
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	8f 7c       	andi	r24, 0xCF	; 207
    34e2:	8c 93       	st	X, r24
    34e4:	af e4       	ldi	r26, 0x4F	; 79
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	ef e4       	ldi	r30, 0x4F	; 79
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	80 81       	ld	r24, Z
    34ee:	80 62       	ori	r24, 0x20	; 32
    34f0:	8c 93       	st	X, r24
    34f2:	17 c0       	rjmp	.+46     	; 0x3522 <TIMER1_u8SetCompOutModeChB+0x16e>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    34f4:	af e4       	ldi	r26, 0x4F	; 79
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	ef e4       	ldi	r30, 0x4F	; 79
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	8f 7c       	andi	r24, 0xCF	; 207
    3500:	8c 93       	st	X, r24
    3502:	af e4       	ldi	r26, 0x4F	; 79
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	ef e4       	ldi	r30, 0x4F	; 79
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	80 63       	ori	r24, 0x30	; 48
    350e:	8c 93       	st	X, r24
    3510:	08 c0       	rjmp	.+16     	; 0x3522 <TIMER1_u8SetCompOutModeChB+0x16e>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	89 83       	std	Y+1, r24	; 0x01
    3516:	05 c0       	rjmp	.+10     	; 0x3522 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	89 83       	std	Y+1, r24	; 0x01
    351c:	02 c0       	rjmp	.+4      	; 0x3522 <TIMER1_u8SetCompOutModeChB+0x16e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    351e:	82 e0       	ldi	r24, 0x02	; 2
    3520:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    3522:	89 81       	ldd	r24, Y+1	; 0x01
}
    3524:	28 96       	adiw	r28, 0x08	; 8
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	cd bf       	out	0x3d, r28	; 61
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	08 95       	ret

00003536 <TIMER2_u8SetCompOutMode>:
uint8 TIMER2_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	28 97       	sbiw	r28, 0x08	; 8
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	9b 83       	std	Y+3, r25	; 0x03
    354c:	8a 83       	std	Y+2, r24	; 0x02
    354e:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3550:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    3552:	8a 81       	ldd	r24, Y+2	; 0x02
    3554:	9b 81       	ldd	r25, Y+3	; 0x03
    3556:	00 97       	sbiw	r24, 0x00	; 0
    3558:	09 f4       	brne	.+2      	; 0x355c <TIMER2_u8SetCompOutMode+0x26>
    355a:	cd c0       	rjmp	.+410    	; 0x36f6 <TIMER2_u8SetCompOutMode+0x1c0>
	{
		/*Select Wave Generation Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    355c:	ea 81       	ldd	r30, Y+2	; 0x02
    355e:	fb 81       	ldd	r31, Y+3	; 0x03
    3560:	81 81       	ldd	r24, Z+1	; 0x01
    3562:	28 2f       	mov	r18, r24
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	38 87       	std	Y+8, r19	; 0x08
    3568:	2f 83       	std	Y+7, r18	; 0x07
    356a:	8f 81       	ldd	r24, Y+7	; 0x07
    356c:	98 85       	ldd	r25, Y+8	; 0x08
    356e:	81 30       	cpi	r24, 0x01	; 1
    3570:	91 05       	cpc	r25, r1
    3572:	21 f1       	breq	.+72     	; 0x35bc <TIMER2_u8SetCompOutMode+0x86>
    3574:	2f 81       	ldd	r18, Y+7	; 0x07
    3576:	38 85       	ldd	r19, Y+8	; 0x08
    3578:	22 30       	cpi	r18, 0x02	; 2
    357a:	31 05       	cpc	r19, r1
    357c:	2c f4       	brge	.+10     	; 0x3588 <TIMER2_u8SetCompOutMode+0x52>
    357e:	8f 81       	ldd	r24, Y+7	; 0x07
    3580:	98 85       	ldd	r25, Y+8	; 0x08
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	61 f0       	breq	.+24     	; 0x359e <TIMER2_u8SetCompOutMode+0x68>
    3586:	46 c0       	rjmp	.+140    	; 0x3614 <TIMER2_u8SetCompOutMode+0xde>
    3588:	2f 81       	ldd	r18, Y+7	; 0x07
    358a:	38 85       	ldd	r19, Y+8	; 0x08
    358c:	22 30       	cpi	r18, 0x02	; 2
    358e:	31 05       	cpc	r19, r1
    3590:	21 f1       	breq	.+72     	; 0x35da <TIMER2_u8SetCompOutMode+0xa4>
    3592:	8f 81       	ldd	r24, Y+7	; 0x07
    3594:	98 85       	ldd	r25, Y+8	; 0x08
    3596:	83 30       	cpi	r24, 0x03	; 3
    3598:	91 05       	cpc	r25, r1
    359a:	71 f1       	breq	.+92     	; 0x35f8 <TIMER2_u8SetCompOutMode+0xc2>
    359c:	3b c0       	rjmp	.+118    	; 0x3614 <TIMER2_u8SetCompOutMode+0xde>
		{
		case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    359e:	a5 e4       	ldi	r26, 0x45	; 69
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	e5 e4       	ldi	r30, 0x45	; 69
    35a4:	f0 e0       	ldi	r31, 0x00	; 0
    35a6:	80 81       	ld	r24, Z
    35a8:	8f 7b       	andi	r24, 0xBF	; 191
    35aa:	8c 93       	st	X, r24
    35ac:	a5 e4       	ldi	r26, 0x45	; 69
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	e5 e4       	ldi	r30, 0x45	; 69
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	87 7f       	andi	r24, 0xF7	; 247
    35b8:	8c 93       	st	X, r24
    35ba:	2c c0       	rjmp	.+88     	; 0x3614 <TIMER2_u8SetCompOutMode+0xde>
		case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    35bc:	a5 e4       	ldi	r26, 0x45	; 69
    35be:	b0 e0       	ldi	r27, 0x00	; 0
    35c0:	e5 e4       	ldi	r30, 0x45	; 69
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	80 81       	ld	r24, Z
    35c6:	80 64       	ori	r24, 0x40	; 64
    35c8:	8c 93       	st	X, r24
    35ca:	a5 e4       	ldi	r26, 0x45	; 69
    35cc:	b0 e0       	ldi	r27, 0x00	; 0
    35ce:	e5 e4       	ldi	r30, 0x45	; 69
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	80 81       	ld	r24, Z
    35d4:	87 7f       	andi	r24, 0xF7	; 247
    35d6:	8c 93       	st	X, r24
    35d8:	1d c0       	rjmp	.+58     	; 0x3614 <TIMER2_u8SetCompOutMode+0xde>
		case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    35da:	a5 e4       	ldi	r26, 0x45	; 69
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	e5 e4       	ldi	r30, 0x45	; 69
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	8f 7b       	andi	r24, 0xBF	; 191
    35e6:	8c 93       	st	X, r24
    35e8:	a5 e4       	ldi	r26, 0x45	; 69
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	e5 e4       	ldi	r30, 0x45	; 69
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	80 81       	ld	r24, Z
    35f2:	88 60       	ori	r24, 0x08	; 8
    35f4:	8c 93       	st	X, r24
    35f6:	0e c0       	rjmp	.+28     	; 0x3614 <TIMER2_u8SetCompOutMode+0xde>
		case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    35f8:	a5 e4       	ldi	r26, 0x45	; 69
    35fa:	b0 e0       	ldi	r27, 0x00	; 0
    35fc:	e5 e4       	ldi	r30, 0x45	; 69
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	80 64       	ori	r24, 0x40	; 64
    3604:	8c 93       	st	X, r24
    3606:	a5 e4       	ldi	r26, 0x45	; 69
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	e5 e4       	ldi	r30, 0x45	; 69
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	88 60       	ori	r24, 0x08	; 8
    3612:	8c 93       	st	X, r24
		}

		/*Select Output Compare Match Mode*/
		TCCR2 &= TIMER0_2_OCMATCH_MASK;
    3614:	a5 e4       	ldi	r26, 0x45	; 69
    3616:	b0 e0       	ldi	r27, 0x00	; 0
    3618:	e5 e4       	ldi	r30, 0x45	; 69
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	80 81       	ld	r24, Z
    361e:	8f 7c       	andi	r24, 0xCF	; 207
    3620:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    3622:	ea 81       	ldd	r30, Y+2	; 0x02
    3624:	fb 81       	ldd	r31, Y+3	; 0x03
    3626:	81 81       	ldd	r24, Z+1	; 0x01
    3628:	88 23       	and	r24, r24
    362a:	29 f0       	breq	.+10     	; 0x3636 <TIMER2_u8SetCompOutMode+0x100>
    362c:	ea 81       	ldd	r30, Y+2	; 0x02
    362e:	fb 81       	ldd	r31, Y+3	; 0x03
    3630:	81 81       	ldd	r24, Z+1	; 0x01
    3632:	82 30       	cpi	r24, 0x02	; 2
    3634:	c1 f4       	brne	.+48     	; 0x3666 <TIMER2_u8SetCompOutMode+0x130>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    3636:	8c 81       	ldd	r24, Y+4	; 0x04
    3638:	84 30       	cpi	r24, 0x04	; 4
    363a:	90 f4       	brcc	.+36     	; 0x3660 <TIMER2_u8SetCompOutMode+0x12a>
			{
				TCCR2 |= (Copy_u8Mode << 4);
    363c:	a5 e4       	ldi	r26, 0x45	; 69
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	e5 e4       	ldi	r30, 0x45	; 69
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	28 2f       	mov	r18, r24
    3648:	8c 81       	ldd	r24, Y+4	; 0x04
    364a:	88 2f       	mov	r24, r24
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	82 95       	swap	r24
    3650:	92 95       	swap	r25
    3652:	90 7f       	andi	r25, 0xF0	; 240
    3654:	98 27       	eor	r25, r24
    3656:	80 7f       	andi	r24, 0xF0	; 240
    3658:	98 27       	eor	r25, r24
    365a:	82 2b       	or	r24, r18
    365c:	8c 93       	st	X, r24
    365e:	39 c0       	rjmp	.+114    	; 0x36d2 <TIMER2_u8SetCompOutMode+0x19c>
			}
			else
			{
				Local_u8ErrorState = NOK;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	89 83       	std	Y+1, r24	; 0x01
    3664:	36 c0       	rjmp	.+108    	; 0x36d2 <TIMER2_u8SetCompOutMode+0x19c>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    3666:	ea 81       	ldd	r30, Y+2	; 0x02
    3668:	fb 81       	ldd	r31, Y+3	; 0x03
    366a:	81 81       	ldd	r24, Z+1	; 0x01
    366c:	83 30       	cpi	r24, 0x03	; 3
    366e:	29 f0       	breq	.+10     	; 0x367a <TIMER2_u8SetCompOutMode+0x144>
    3670:	ea 81       	ldd	r30, Y+2	; 0x02
    3672:	fb 81       	ldd	r31, Y+3	; 0x03
    3674:	81 81       	ldd	r24, Z+1	; 0x01
    3676:	81 30       	cpi	r24, 0x01	; 1
    3678:	61 f5       	brne	.+88     	; 0x36d2 <TIMER2_u8SetCompOutMode+0x19c>
		{
			switch(Copy_u8Mode)
    367a:	8c 81       	ldd	r24, Y+4	; 0x04
    367c:	28 2f       	mov	r18, r24
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	3e 83       	std	Y+6, r19	; 0x06
    3682:	2d 83       	std	Y+5, r18	; 0x05
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	9e 81       	ldd	r25, Y+6	; 0x06
    3688:	84 30       	cpi	r24, 0x04	; 4
    368a:	91 05       	cpc	r25, r1
    368c:	81 f0       	breq	.+32     	; 0x36ae <TIMER2_u8SetCompOutMode+0x178>
    368e:	2d 81       	ldd	r18, Y+5	; 0x05
    3690:	3e 81       	ldd	r19, Y+6	; 0x06
    3692:	25 30       	cpi	r18, 0x05	; 5
    3694:	31 05       	cpc	r19, r1
    3696:	99 f0       	breq	.+38     	; 0x36be <TIMER2_u8SetCompOutMode+0x188>
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	b9 f4       	brne	.+46     	; 0x36ce <TIMER2_u8SetCompOutMode+0x198>
			{
			case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    36a0:	e5 e4       	ldi	r30, 0x45	; 69
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	a5 e4       	ldi	r26, 0x45	; 69
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	8c 91       	ld	r24, X
    36aa:	80 83       	st	Z, r24
    36ac:	12 c0       	rjmp	.+36     	; 0x36d2 <TIMER2_u8SetCompOutMode+0x19c>
			case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    36ae:	a5 e4       	ldi	r26, 0x45	; 69
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	e5 e4       	ldi	r30, 0x45	; 69
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	80 62       	ori	r24, 0x20	; 32
    36ba:	8c 93       	st	X, r24
    36bc:	0a c0       	rjmp	.+20     	; 0x36d2 <TIMER2_u8SetCompOutMode+0x19c>
			case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    36be:	a5 e4       	ldi	r26, 0x45	; 69
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	e5 e4       	ldi	r30, 0x45	; 69
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	80 81       	ld	r24, Z
    36c8:	80 63       	ori	r24, 0x30	; 48
    36ca:	8c 93       	st	X, r24
    36cc:	02 c0       	rjmp	.+4      	; 0x36d2 <TIMER2_u8SetCompOutMode+0x19c>
			default: Local_u8ErrorState = NOK;
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		/*Select the clock*/
		TCCR2 &= PRESCALER_MASK;
    36d2:	a5 e4       	ldi	r26, 0x45	; 69
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e5 e4       	ldi	r30, 0x45	; 69
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	88 7f       	andi	r24, 0xF8	; 248
    36de:	8c 93       	st	X, r24
		TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    36e0:	a5 e4       	ldi	r26, 0x45	; 69
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e5 e4       	ldi	r30, 0x45	; 69
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	90 81       	ld	r25, Z
    36ea:	ea 81       	ldd	r30, Y+2	; 0x02
    36ec:	fb 81       	ldd	r31, Y+3	; 0x03
    36ee:	80 81       	ld	r24, Z
    36f0:	89 2b       	or	r24, r25
    36f2:	8c 93       	st	X, r24
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <TIMER2_u8SetCompOutMode+0x1c4>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    36fc:	28 96       	adiw	r28, 0x08	; 8
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <TIMERS_u8IntEnable>:



uint8 TIMERS_u8IntEnable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <TIMERS_u8IntEnable+0x6>
    3714:	00 d0       	rcall	.+0      	; 0x3716 <TIMERS_u8IntEnable+0x8>
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    371c:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    371e:	8a 81       	ldd	r24, Y+2	; 0x02
    3720:	28 2f       	mov	r18, r24
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	3c 83       	std	Y+4, r19	; 0x04
    3726:	2b 83       	std	Y+3, r18	; 0x03
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	9c 81       	ldd	r25, Y+4	; 0x04
    372c:	83 30       	cpi	r24, 0x03	; 3
    372e:	91 05       	cpc	r25, r1
    3730:	09 f4       	brne	.+2      	; 0x3734 <TIMERS_u8IntEnable+0x26>
    3732:	42 c0       	rjmp	.+132    	; 0x37b8 <TIMERS_u8IntEnable+0xaa>
    3734:	2b 81       	ldd	r18, Y+3	; 0x03
    3736:	3c 81       	ldd	r19, Y+4	; 0x04
    3738:	24 30       	cpi	r18, 0x04	; 4
    373a:	31 05       	cpc	r19, r1
    373c:	7c f4       	brge	.+30     	; 0x375c <TIMERS_u8IntEnable+0x4e>
    373e:	8b 81       	ldd	r24, Y+3	; 0x03
    3740:	9c 81       	ldd	r25, Y+4	; 0x04
    3742:	81 30       	cpi	r24, 0x01	; 1
    3744:	91 05       	cpc	r25, r1
    3746:	41 f1       	breq	.+80     	; 0x3798 <TIMERS_u8IntEnable+0x8a>
    3748:	2b 81       	ldd	r18, Y+3	; 0x03
    374a:	3c 81       	ldd	r19, Y+4	; 0x04
    374c:	22 30       	cpi	r18, 0x02	; 2
    374e:	31 05       	cpc	r19, r1
    3750:	5c f5       	brge	.+86     	; 0x37a8 <TIMERS_u8IntEnable+0x9a>
    3752:	8b 81       	ldd	r24, Y+3	; 0x03
    3754:	9c 81       	ldd	r25, Y+4	; 0x04
    3756:	00 97       	sbiw	r24, 0x00	; 0
    3758:	b9 f0       	breq	.+46     	; 0x3788 <TIMERS_u8IntEnable+0x7a>
    375a:	56 c0       	rjmp	.+172    	; 0x3808 <TIMERS_u8IntEnable+0xfa>
    375c:	2b 81       	ldd	r18, Y+3	; 0x03
    375e:	3c 81       	ldd	r19, Y+4	; 0x04
    3760:	25 30       	cpi	r18, 0x05	; 5
    3762:	31 05       	cpc	r19, r1
    3764:	c9 f1       	breq	.+114    	; 0x37d8 <TIMERS_u8IntEnable+0xca>
    3766:	8b 81       	ldd	r24, Y+3	; 0x03
    3768:	9c 81       	ldd	r25, Y+4	; 0x04
    376a:	85 30       	cpi	r24, 0x05	; 5
    376c:	91 05       	cpc	r25, r1
    376e:	64 f1       	brlt	.+88     	; 0x37c8 <TIMERS_u8IntEnable+0xba>
    3770:	2b 81       	ldd	r18, Y+3	; 0x03
    3772:	3c 81       	ldd	r19, Y+4	; 0x04
    3774:	26 30       	cpi	r18, 0x06	; 6
    3776:	31 05       	cpc	r19, r1
    3778:	09 f4       	brne	.+2      	; 0x377c <TIMERS_u8IntEnable+0x6e>
    377a:	3e c0       	rjmp	.+124    	; 0x37f8 <TIMERS_u8IntEnable+0xea>
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	9c 81       	ldd	r25, Y+4	; 0x04
    3780:	87 30       	cpi	r24, 0x07	; 7
    3782:	91 05       	cpc	r25, r1
    3784:	89 f1       	breq	.+98     	; 0x37e8 <TIMERS_u8IntEnable+0xda>
    3786:	40 c0       	rjmp	.+128    	; 0x3808 <TIMERS_u8IntEnable+0xfa>
	{
	case TIMER0_OVF:	SET_BIT(TIMSK,TIMSK_TOIE0);	break;
    3788:	a9 e5       	ldi	r26, 0x59	; 89
    378a:	b0 e0       	ldi	r27, 0x00	; 0
    378c:	e9 e5       	ldi	r30, 0x59	; 89
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	80 81       	ld	r24, Z
    3792:	81 60       	ori	r24, 0x01	; 1
    3794:	8c 93       	st	X, r24
    3796:	3a c0       	rjmp	.+116    	; 0x380c <TIMERS_u8IntEnable+0xfe>
	case TIMER0_COMP:	SET_BIT(TIMSK,TIMSK_OCIE0);	break;
    3798:	a9 e5       	ldi	r26, 0x59	; 89
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	e9 e5       	ldi	r30, 0x59	; 89
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	80 81       	ld	r24, Z
    37a2:	82 60       	ori	r24, 0x02	; 2
    37a4:	8c 93       	st	X, r24
    37a6:	32 c0       	rjmp	.+100    	; 0x380c <TIMERS_u8IntEnable+0xfe>
	case TIMER1_OVF:	SET_BIT(TIMSK,TIMSK_TOIE1);	break;
    37a8:	a9 e5       	ldi	r26, 0x59	; 89
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	e9 e5       	ldi	r30, 0x59	; 89
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 81       	ld	r24, Z
    37b2:	84 60       	ori	r24, 0x04	; 4
    37b4:	8c 93       	st	X, r24
    37b6:	2a c0       	rjmp	.+84     	; 0x380c <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPA:	SET_BIT(TIMSK,TIMSK_OCIE1A);	break;
    37b8:	a9 e5       	ldi	r26, 0x59	; 89
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e9 e5       	ldi	r30, 0x59	; 89
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	80 81       	ld	r24, Z
    37c2:	80 61       	ori	r24, 0x10	; 16
    37c4:	8c 93       	st	X, r24
    37c6:	22 c0       	rjmp	.+68     	; 0x380c <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPB:	SET_BIT(TIMSK,TIMSK_OCIE1B);	break;
    37c8:	a9 e5       	ldi	r26, 0x59	; 89
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	e9 e5       	ldi	r30, 0x59	; 89
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	80 81       	ld	r24, Z
    37d2:	88 60       	ori	r24, 0x08	; 8
    37d4:	8c 93       	st	X, r24
    37d6:	1a c0       	rjmp	.+52     	; 0x380c <TIMERS_u8IntEnable+0xfe>
	case TIMER1_CAPT:	SET_BIT(TIMSK,TIMSK_TICIE1);	break;
    37d8:	a9 e5       	ldi	r26, 0x59	; 89
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	e9 e5       	ldi	r30, 0x59	; 89
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	80 81       	ld	r24, Z
    37e2:	80 62       	ori	r24, 0x20	; 32
    37e4:	8c 93       	st	X, r24
    37e6:	12 c0       	rjmp	.+36     	; 0x380c <TIMERS_u8IntEnable+0xfe>
	case TIMER2_COMP:	SET_BIT(TIMSK,TIMSK_OCIE2); break;
    37e8:	a9 e5       	ldi	r26, 0x59	; 89
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	e9 e5       	ldi	r30, 0x59	; 89
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	80 68       	ori	r24, 0x80	; 128
    37f4:	8c 93       	st	X, r24
    37f6:	0a c0       	rjmp	.+20     	; 0x380c <TIMERS_u8IntEnable+0xfe>
	case TIMER2_OVF:	SET_BIT(TIMSK,TIMSK_TOIE2);	break;
    37f8:	a9 e5       	ldi	r26, 0x59	; 89
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	e9 e5       	ldi	r30, 0x59	; 89
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	80 64       	ori	r24, 0x40	; 64
    3804:	8c 93       	st	X, r24
    3806:	02 c0       	rjmp	.+4      	; 0x380c <TIMERS_u8IntEnable+0xfe>
	default:Local_u8ErrorState = NOK;
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    380c:	89 81       	ldd	r24, Y+1	; 0x01
}
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <TIMERS_u8IntDisable>:
uint8 TIMERS_u8IntDisable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	00 d0       	rcall	.+0      	; 0x3822 <TIMERS_u8IntDisable+0x6>
    3822:	00 d0       	rcall	.+0      	; 0x3824 <TIMERS_u8IntDisable+0x8>
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    382a:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	28 2f       	mov	r18, r24
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	3c 83       	std	Y+4, r19	; 0x04
    3834:	2b 83       	std	Y+3, r18	; 0x03
    3836:	8b 81       	ldd	r24, Y+3	; 0x03
    3838:	9c 81       	ldd	r25, Y+4	; 0x04
    383a:	83 30       	cpi	r24, 0x03	; 3
    383c:	91 05       	cpc	r25, r1
    383e:	09 f4       	brne	.+2      	; 0x3842 <TIMERS_u8IntDisable+0x26>
    3840:	42 c0       	rjmp	.+132    	; 0x38c6 <TIMERS_u8IntDisable+0xaa>
    3842:	2b 81       	ldd	r18, Y+3	; 0x03
    3844:	3c 81       	ldd	r19, Y+4	; 0x04
    3846:	24 30       	cpi	r18, 0x04	; 4
    3848:	31 05       	cpc	r19, r1
    384a:	7c f4       	brge	.+30     	; 0x386a <TIMERS_u8IntDisable+0x4e>
    384c:	8b 81       	ldd	r24, Y+3	; 0x03
    384e:	9c 81       	ldd	r25, Y+4	; 0x04
    3850:	81 30       	cpi	r24, 0x01	; 1
    3852:	91 05       	cpc	r25, r1
    3854:	41 f1       	breq	.+80     	; 0x38a6 <TIMERS_u8IntDisable+0x8a>
    3856:	2b 81       	ldd	r18, Y+3	; 0x03
    3858:	3c 81       	ldd	r19, Y+4	; 0x04
    385a:	22 30       	cpi	r18, 0x02	; 2
    385c:	31 05       	cpc	r19, r1
    385e:	5c f5       	brge	.+86     	; 0x38b6 <TIMERS_u8IntDisable+0x9a>
    3860:	8b 81       	ldd	r24, Y+3	; 0x03
    3862:	9c 81       	ldd	r25, Y+4	; 0x04
    3864:	00 97       	sbiw	r24, 0x00	; 0
    3866:	b9 f0       	breq	.+46     	; 0x3896 <TIMERS_u8IntDisable+0x7a>
    3868:	56 c0       	rjmp	.+172    	; 0x3916 <TIMERS_u8IntDisable+0xfa>
    386a:	2b 81       	ldd	r18, Y+3	; 0x03
    386c:	3c 81       	ldd	r19, Y+4	; 0x04
    386e:	25 30       	cpi	r18, 0x05	; 5
    3870:	31 05       	cpc	r19, r1
    3872:	c9 f1       	breq	.+114    	; 0x38e6 <TIMERS_u8IntDisable+0xca>
    3874:	8b 81       	ldd	r24, Y+3	; 0x03
    3876:	9c 81       	ldd	r25, Y+4	; 0x04
    3878:	85 30       	cpi	r24, 0x05	; 5
    387a:	91 05       	cpc	r25, r1
    387c:	64 f1       	brlt	.+88     	; 0x38d6 <TIMERS_u8IntDisable+0xba>
    387e:	2b 81       	ldd	r18, Y+3	; 0x03
    3880:	3c 81       	ldd	r19, Y+4	; 0x04
    3882:	26 30       	cpi	r18, 0x06	; 6
    3884:	31 05       	cpc	r19, r1
    3886:	09 f4       	brne	.+2      	; 0x388a <TIMERS_u8IntDisable+0x6e>
    3888:	3e c0       	rjmp	.+124    	; 0x3906 <TIMERS_u8IntDisable+0xea>
    388a:	8b 81       	ldd	r24, Y+3	; 0x03
    388c:	9c 81       	ldd	r25, Y+4	; 0x04
    388e:	87 30       	cpi	r24, 0x07	; 7
    3890:	91 05       	cpc	r25, r1
    3892:	89 f1       	breq	.+98     	; 0x38f6 <TIMERS_u8IntDisable+0xda>
    3894:	40 c0       	rjmp	.+128    	; 0x3916 <TIMERS_u8IntDisable+0xfa>
	{
	case TIMER0_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE0);	break;
    3896:	a9 e5       	ldi	r26, 0x59	; 89
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	e9 e5       	ldi	r30, 0x59	; 89
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	8e 7f       	andi	r24, 0xFE	; 254
    38a2:	8c 93       	st	X, r24
    38a4:	3a c0       	rjmp	.+116    	; 0x391a <TIMERS_u8IntDisable+0xfe>
	case TIMER0_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE0);	break;
    38a6:	a9 e5       	ldi	r26, 0x59	; 89
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	e9 e5       	ldi	r30, 0x59	; 89
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	8d 7f       	andi	r24, 0xFD	; 253
    38b2:	8c 93       	st	X, r24
    38b4:	32 c0       	rjmp	.+100    	; 0x391a <TIMERS_u8IntDisable+0xfe>
	case TIMER1_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE1);	break;
    38b6:	a9 e5       	ldi	r26, 0x59	; 89
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
    38ba:	e9 e5       	ldi	r30, 0x59	; 89
    38bc:	f0 e0       	ldi	r31, 0x00	; 0
    38be:	80 81       	ld	r24, Z
    38c0:	8b 7f       	andi	r24, 0xFB	; 251
    38c2:	8c 93       	st	X, r24
    38c4:	2a c0       	rjmp	.+84     	; 0x391a <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPA:	CLR_BIT(TIMSK,TIMSK_OCIE1A);	break;
    38c6:	a9 e5       	ldi	r26, 0x59	; 89
    38c8:	b0 e0       	ldi	r27, 0x00	; 0
    38ca:	e9 e5       	ldi	r30, 0x59	; 89
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	80 81       	ld	r24, Z
    38d0:	8f 7e       	andi	r24, 0xEF	; 239
    38d2:	8c 93       	st	X, r24
    38d4:	22 c0       	rjmp	.+68     	; 0x391a <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPB:	CLR_BIT(TIMSK,TIMSK_OCIE1B);	break;
    38d6:	a9 e5       	ldi	r26, 0x59	; 89
    38d8:	b0 e0       	ldi	r27, 0x00	; 0
    38da:	e9 e5       	ldi	r30, 0x59	; 89
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	80 81       	ld	r24, Z
    38e0:	87 7f       	andi	r24, 0xF7	; 247
    38e2:	8c 93       	st	X, r24
    38e4:	1a c0       	rjmp	.+52     	; 0x391a <TIMERS_u8IntDisable+0xfe>
	case TIMER1_CAPT:	CLR_BIT(TIMSK,TIMSK_TICIE1);	break;
    38e6:	a9 e5       	ldi	r26, 0x59	; 89
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e9 e5       	ldi	r30, 0x59	; 89
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	8f 7d       	andi	r24, 0xDF	; 223
    38f2:	8c 93       	st	X, r24
    38f4:	12 c0       	rjmp	.+36     	; 0x391a <TIMERS_u8IntDisable+0xfe>
	case TIMER2_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE2); break;
    38f6:	a9 e5       	ldi	r26, 0x59	; 89
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	e9 e5       	ldi	r30, 0x59	; 89
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	80 81       	ld	r24, Z
    3900:	8f 77       	andi	r24, 0x7F	; 127
    3902:	8c 93       	st	X, r24
    3904:	0a c0       	rjmp	.+20     	; 0x391a <TIMERS_u8IntDisable+0xfe>
	case TIMER2_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE2);	break;
    3906:	a9 e5       	ldi	r26, 0x59	; 89
    3908:	b0 e0       	ldi	r27, 0x00	; 0
    390a:	e9 e5       	ldi	r30, 0x59	; 89
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	80 81       	ld	r24, Z
    3910:	8f 7b       	andi	r24, 0xBF	; 191
    3912:	8c 93       	st	X, r24
    3914:	02 c0       	rjmp	.+4      	; 0x391a <TIMERS_u8IntDisable+0xfe>
	default:Local_u8ErrorState = NOK;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    391a:	89 81       	ldd	r24, Y+1	; 0x01
}
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	cf 91       	pop	r28
    3926:	df 91       	pop	r29
    3928:	08 95       	ret

0000392a <TIMERS_u8Disable>:

uint8 TIMERS_u8Disable(TIMERS_NUM Copy_u8Timer)
{
    392a:	df 93       	push	r29
    392c:	cf 93       	push	r28
    392e:	00 d0       	rcall	.+0      	; 0x3930 <TIMERS_u8Disable+0x6>
    3930:	00 d0       	rcall	.+0      	; 0x3932 <TIMERS_u8Disable+0x8>
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
    3936:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3938:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the timer*/
	switch(Copy_u8Timer)
    393a:	8a 81       	ldd	r24, Y+2	; 0x02
    393c:	28 2f       	mov	r18, r24
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	3c 83       	std	Y+4, r19	; 0x04
    3942:	2b 83       	std	Y+3, r18	; 0x03
    3944:	8b 81       	ldd	r24, Y+3	; 0x03
    3946:	9c 81       	ldd	r25, Y+4	; 0x04
    3948:	81 30       	cpi	r24, 0x01	; 1
    394a:	91 05       	cpc	r25, r1
    394c:	99 f0       	breq	.+38     	; 0x3974 <TIMERS_u8Disable+0x4a>
    394e:	2b 81       	ldd	r18, Y+3	; 0x03
    3950:	3c 81       	ldd	r19, Y+4	; 0x04
    3952:	22 30       	cpi	r18, 0x02	; 2
    3954:	31 05       	cpc	r19, r1
    3956:	c1 f0       	breq	.+48     	; 0x3988 <TIMERS_u8Disable+0x5e>
    3958:	8b 81       	ldd	r24, Y+3	; 0x03
    395a:	9c 81       	ldd	r25, Y+4	; 0x04
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	f1 f4       	brne	.+60     	; 0x399c <TIMERS_u8Disable+0x72>
	{
	case TIMER0: TIMERS_u8StateArr[TIMER0] = IDLE;	TCCR0 &= PRESCALER_MASK;	break;
    3960:	10 92 f7 01 	sts	0x01F7, r1
    3964:	a3 e5       	ldi	r26, 0x53	; 83
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	e3 e5       	ldi	r30, 0x53	; 83
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	88 7f       	andi	r24, 0xF8	; 248
    3970:	8c 93       	st	X, r24
    3972:	16 c0       	rjmp	.+44     	; 0x39a0 <TIMERS_u8Disable+0x76>
	case TIMER1: TIMERS_u8StateArr[TIMER1] = IDLE;	TCCR1B &= PRESCALER_MASK;	break;
    3974:	10 92 f8 01 	sts	0x01F8, r1
    3978:	ae e4       	ldi	r26, 0x4E	; 78
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	ee e4       	ldi	r30, 0x4E	; 78
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	88 7f       	andi	r24, 0xF8	; 248
    3984:	8c 93       	st	X, r24
    3986:	0c c0       	rjmp	.+24     	; 0x39a0 <TIMERS_u8Disable+0x76>
	case TIMER2: TIMERS_u8StateArr[TIMER2] = IDLE;	TCCR2 &= PRESCALER_MASK;	break;
    3988:	10 92 f9 01 	sts	0x01F9, r1
    398c:	a5 e4       	ldi	r26, 0x45	; 69
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	e5 e4       	ldi	r30, 0x45	; 69
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	88 7f       	andi	r24, 0xF8	; 248
    3998:	8c 93       	st	X, r24
    399a:	02 c0       	rjmp	.+4      	; 0x39a0 <TIMERS_u8Disable+0x76>
	default:	Local_u8ErrorState = NOK;	break;
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    39a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	0f 90       	pop	r0
    39a8:	0f 90       	pop	r0
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	08 95       	ret

000039b0 <TIMERS_u8SetCallBack>:
uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_u8TimerIntSource, void (* Copy_pvCallBackFunc)(void))
{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <TIMERS_u8SetCallBack+0x6>
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <TIMERS_u8SetCallBack+0x8>
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	8a 83       	std	Y+2, r24	; 0x02
    39be:	7c 83       	std	Y+4, r23	; 0x04
    39c0:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    39c2:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer of function*/
	if(Copy_pvCallBackFunc != NULL)
    39c4:	8b 81       	ldd	r24, Y+3	; 0x03
    39c6:	9c 81       	ldd	r25, Y+4	; 0x04
    39c8:	00 97       	sbiw	r24, 0x00	; 0
    39ca:	69 f0       	breq	.+26     	; 0x39e6 <TIMERS_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource] = Copy_pvCallBackFunc;
    39cc:	8a 81       	ldd	r24, Y+2	; 0x02
    39ce:	88 2f       	mov	r24, r24
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	88 0f       	add	r24, r24
    39d4:	99 1f       	adc	r25, r25
    39d6:	fc 01       	movw	r30, r24
    39d8:	e6 50       	subi	r30, 0x06	; 6
    39da:	fe 4f       	sbci	r31, 0xFE	; 254
    39dc:	8b 81       	ldd	r24, Y+3	; 0x03
    39de:	9c 81       	ldd	r25, Y+4	; 0x04
    39e0:	91 83       	std	Z+1, r25	; 0x01
    39e2:	80 83       	st	Z, r24
    39e4:	02 c0       	rjmp	.+4      	; 0x39ea <TIMERS_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    39e6:	82 e0       	ldi	r24, 0x02	; 2
    39e8:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    39ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	cf 91       	pop	r28
    39f6:	df 91       	pop	r29
    39f8:	08 95       	ret

000039fa <TIMER0_voidSetCompValue>:



void TIMER0_voidSetCompValue(uint8 Copy_u8Value)
{
    39fa:	df 93       	push	r29
    39fc:	cf 93       	push	r28
    39fe:	0f 92       	push	r0
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
    3a04:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 0*/
	OCR0 = Copy_u8Value;
    3a06:	ec e5       	ldi	r30, 0x5C	; 92
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	80 83       	st	Z, r24
}
    3a0e:	0f 90       	pop	r0
    3a10:	cf 91       	pop	r28
    3a12:	df 91       	pop	r29
    3a14:	08 95       	ret

00003a16 <TIMER0_voidSetOvfValue>:
void TIMER0_voidSetOvfValue(uint8 Copy_u8Value)
{
    3a16:	df 93       	push	r29
    3a18:	cf 93       	push	r28
    3a1a:	0f 92       	push	r0
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 0*/
	TCNT0 = Copy_u8Value;
    3a22:	e2 e5       	ldi	r30, 0x52	; 82
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	80 83       	st	Z, r24
}
    3a2a:	0f 90       	pop	r0
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	08 95       	ret

00003a32 <TIMER0_u8GetTimerValue>:
uint8 TIMER0_u8GetTimerValue(void)
{
    3a32:	df 93       	push	r29
    3a34:	cf 93       	push	r28
    3a36:	cd b7       	in	r28, 0x3d	; 61
    3a38:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 0*/
	return TCNT0;
    3a3a:	e2 e5       	ldi	r30, 0x52	; 82
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	80 81       	ld	r24, Z
}
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	08 95       	ret

00003a46 <TIMER2_voidSetCompValue>:



void TIMER2_voidSetCompValue(uint8 Copy_u8Value)
{
    3a46:	df 93       	push	r29
    3a48:	cf 93       	push	r28
    3a4a:	0f 92       	push	r0
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 2*/
	OCR2 = Copy_u8Value;
    3a52:	e3 e4       	ldi	r30, 0x43	; 67
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	80 83       	st	Z, r24
}
    3a5a:	0f 90       	pop	r0
    3a5c:	cf 91       	pop	r28
    3a5e:	df 91       	pop	r29
    3a60:	08 95       	ret

00003a62 <TIMER2_voidSetOvfValue>:
void TIMER2_voidSetOvfValue(uint8 Copy_u8Value)
{
    3a62:	df 93       	push	r29
    3a64:	cf 93       	push	r28
    3a66:	0f 92       	push	r0
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
    3a6c:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 2*/
	TCNT2 = Copy_u8Value;
    3a6e:	e4 e4       	ldi	r30, 0x44	; 68
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	80 83       	st	Z, r24
}
    3a76:	0f 90       	pop	r0
    3a78:	cf 91       	pop	r28
    3a7a:	df 91       	pop	r29
    3a7c:	08 95       	ret

00003a7e <TIMER2_u8GetTimerValue>:
uint8 TIMER2_u8GetTimerValue(void)
{
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 2*/
	return TCNT2;
    3a86:	e4 e4       	ldi	r30, 0x44	; 68
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	80 81       	ld	r24, Z
}
    3a8c:	cf 91       	pop	r28
    3a8e:	df 91       	pop	r29
    3a90:	08 95       	ret

00003a92 <TIMER1_voidSetCompValueChA>:



void TIMER1_voidSetCompValueChA(uint16 Copy_u16Value)
{
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	00 d0       	rcall	.+0      	; 0x3a98 <TIMER1_voidSetCompValueChA+0x6>
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
    3a9e:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel A*/
	OCR1A = Copy_u16Value;
    3aa0:	ea e4       	ldi	r30, 0x4A	; 74
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa8:	91 83       	std	Z+1, r25	; 0x01
    3aaa:	80 83       	st	Z, r24
}
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	08 95       	ret

00003ab6 <TIMER1_voidSetCompValueChB>:
void TIMER1_voidSetCompValueChB(uint16 Copy_u16Value)
{
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <TIMER1_voidSetCompValueChB+0x6>
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	9a 83       	std	Y+2, r25	; 0x02
    3ac2:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel B*/
	OCR1B = Copy_u16Value;
    3ac4:	e8 e4       	ldi	r30, 0x48	; 72
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	9a 81       	ldd	r25, Y+2	; 0x02
    3acc:	91 83       	std	Z+1, r25	; 0x01
    3ace:	80 83       	st	Z, r24
}
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	cf 91       	pop	r28
    3ad6:	df 91       	pop	r29
    3ad8:	08 95       	ret

00003ada <TIMER1_voidSetOvfValue>:
void TIMER1_voidSetOvfValue(uint16 Copy_u16Value)
{
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <TIMER1_voidSetOvfValue+0x6>
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	9a 83       	std	Y+2, r25	; 0x02
    3ae6:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 1*/
	TCNT1 = Copy_u16Value;
    3ae8:	ec e4       	ldi	r30, 0x4C	; 76
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	9a 81       	ldd	r25, Y+2	; 0x02
    3af0:	91 83       	std	Z+1, r25	; 0x01
    3af2:	80 83       	st	Z, r24
}
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <TIMER1_voidSetInputCaptValue>:
void TIMER1_voidSetInputCaptValue(uint16 Copy_u16Value)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	00 d0       	rcall	.+0      	; 0x3b04 <TIMER1_voidSetInputCaptValue+0x6>
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	9a 83       	std	Y+2, r25	; 0x02
    3b0a:	89 83       	std	Y+1, r24	; 0x01
	/*Set Input Capture Value of Timer 1*/
	ICR1 = Copy_u16Value;
    3b0c:	e6 e4       	ldi	r30, 0x46	; 70
    3b0e:	f0 e0       	ldi	r31, 0x00	; 0
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	9a 81       	ldd	r25, Y+2	; 0x02
    3b14:	91 83       	std	Z+1, r25	; 0x01
    3b16:	80 83       	st	Z, r24
}
    3b18:	0f 90       	pop	r0
    3b1a:	0f 90       	pop	r0
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <TIMER1_u16GetTimerValue>:
uint16 TIMER1_u16GetTimerValue(void)
{
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 1*/
	return TCNT1;
    3b2a:	ec e4       	ldi	r30, 0x4C	; 76
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	80 81       	ld	r24, Z
    3b30:	91 81       	ldd	r25, Z+1	; 0x01
}
    3b32:	cf 91       	pop	r28
    3b34:	df 91       	pop	r29
    3b36:	08 95       	ret

00003b38 <TIMER1_u16GetInputCaptValue>:
uint16 TIMER1_u16GetInputCaptValue(void)
{
    3b38:	df 93       	push	r29
    3b3a:	cf 93       	push	r28
    3b3c:	cd b7       	in	r28, 0x3d	; 61
    3b3e:	de b7       	in	r29, 0x3e	; 62
	/*Return Input Capture Register Value*/
	return ICR1;
    3b40:	e6 e4       	ldi	r30, 0x46	; 70
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	80 81       	ld	r24, Z
    3b46:	91 81       	ldd	r25, Z+1	; 0x01
}
    3b48:	cf 91       	pop	r28
    3b4a:	df 91       	pop	r29
    3b4c:	08 95       	ret

00003b4e <TIMER1_u8SetInputCaptTriggerSrc>:
uint8 TIMER1_u8SetInputCaptTriggerSrc(uint8 Copy_u8TriggerSrc)
{
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	00 d0       	rcall	.+0      	; 0x3b54 <TIMER1_u8SetInputCaptTriggerSrc+0x6>
    3b54:	00 d0       	rcall	.+0      	; 0x3b56 <TIMER1_u8SetInputCaptTriggerSrc+0x8>
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3b5c:	19 82       	std	Y+1, r1	; 0x01

	/*Set the trigger source selected*/
	switch(Copy_u8TriggerSrc)
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b60:	28 2f       	mov	r18, r24
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	3c 83       	std	Y+4, r19	; 0x04
    3b66:	2b 83       	std	Y+3, r18	; 0x03
    3b68:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6c:	00 97       	sbiw	r24, 0x00	; 0
    3b6e:	31 f0       	breq	.+12     	; 0x3b7c <TIMER1_u8SetInputCaptTriggerSrc+0x2e>
    3b70:	2b 81       	ldd	r18, Y+3	; 0x03
    3b72:	3c 81       	ldd	r19, Y+4	; 0x04
    3b74:	21 30       	cpi	r18, 0x01	; 1
    3b76:	31 05       	cpc	r19, r1
    3b78:	49 f0       	breq	.+18     	; 0x3b8c <TIMER1_u8SetInputCaptTriggerSrc+0x3e>
    3b7a:	10 c0       	rjmp	.+32     	; 0x3b9c <TIMER1_u8SetInputCaptTriggerSrc+0x4e>
	{
	case TIMER1_u8ICU_RISING_EDGE:	SET_BIT(TCCR1B,TCCR1B_ICES1);	break;
    3b7c:	ae e4       	ldi	r26, 0x4E	; 78
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	ee e4       	ldi	r30, 0x4E	; 78
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	80 64       	ori	r24, 0x40	; 64
    3b88:	8c 93       	st	X, r24
    3b8a:	0a c0       	rjmp	.+20     	; 0x3ba0 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	case TIMER1_u8ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1);	break;
    3b8c:	ae e4       	ldi	r26, 0x4E	; 78
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	ee e4       	ldi	r30, 0x4E	; 78
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	80 81       	ld	r24, Z
    3b96:	8f 7b       	andi	r24, 0xBF	; 191
    3b98:	8c 93       	st	X, r24
    3b9a:	02 c0       	rjmp	.+4      	; 0x3ba0 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	default: Local_u8ErrorState = NOK;
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <WDT_voidEnable>:



void WDT_voidEnable(void)
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    3bb8:	a1 e4       	ldi	r26, 0x41	; 65
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	e1 e4       	ldi	r30, 0x41	; 65
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	88 60       	ori	r24, 0x08	; 8
    3bc4:	8c 93       	st	X, r24
}
    3bc6:	cf 91       	pop	r28
    3bc8:	df 91       	pop	r29
    3bca:	08 95       	ret

00003bcc <WDT_voidDisable>:
void WDT_voidDisable(void)
{
    3bcc:	df 93       	push	r29
    3bce:	cf 93       	push	r28
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
    3bd4:	a1 e4       	ldi	r26, 0x41	; 65
    3bd6:	b0 e0       	ldi	r27, 0x00	; 0
    3bd8:	e1 e4       	ldi	r30, 0x41	; 65
    3bda:	f0 e0       	ldi	r31, 0x00	; 0
    3bdc:	80 81       	ld	r24, Z
    3bde:	88 61       	ori	r24, 0x18	; 24
    3be0:	8c 93       	st	X, r24
	WDTCR &= 0b11110111;
    3be2:	a1 e4       	ldi	r26, 0x41	; 65
    3be4:	b0 e0       	ldi	r27, 0x00	; 0
    3be6:	e1 e4       	ldi	r30, 0x41	; 65
    3be8:	f0 e0       	ldi	r31, 0x00	; 0
    3bea:	80 81       	ld	r24, Z
    3bec:	87 7f       	andi	r24, 0xF7	; 247
    3bee:	8c 93       	st	X, r24
}
    3bf0:	cf 91       	pop	r28
    3bf2:	df 91       	pop	r29
    3bf4:	08 95       	ret

00003bf6 <WDT_u8SetTime>:
uint8 WDT_u8SetTime(uint8 Copy_u8WatchDogTime)
{
    3bf6:	df 93       	push	r29
    3bf8:	cf 93       	push	r28
    3bfa:	00 d0       	rcall	.+0      	; 0x3bfc <WDT_u8SetTime+0x6>
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	8a 83       	std	Y+2, r24	; 0x02
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    3c02:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8WatchDogTime < 8u)
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	88 30       	cpi	r24, 0x08	; 8
    3c08:	80 f4       	brcc	.+32     	; 0x3c2a <WDT_u8SetTime+0x34>
	{
		WDTCR &= WDT_PRESCALER_MASK;
    3c0a:	a1 e4       	ldi	r26, 0x41	; 65
    3c0c:	b0 e0       	ldi	r27, 0x00	; 0
    3c0e:	e1 e4       	ldi	r30, 0x41	; 65
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	80 81       	ld	r24, Z
    3c14:	88 7f       	andi	r24, 0xF8	; 248
    3c16:	8c 93       	st	X, r24
		WDTCR |= Copy_u8WatchDogTime;
    3c18:	a1 e4       	ldi	r26, 0x41	; 65
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	e1 e4       	ldi	r30, 0x41	; 65
    3c1e:	f0 e0       	ldi	r31, 0x00	; 0
    3c20:	90 81       	ld	r25, Z
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	89 2b       	or	r24, r25
    3c26:	8c 93       	st	X, r24
    3c28:	02 c0       	rjmp	.+4      	; 0x3c2e <WDT_u8SetTime+0x38>
	}
	else
	{
		Local_u8ErrorState = NOK;
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c30:	0f 90       	pop	r0
    3c32:	0f 90       	pop	r0
    3c34:	cf 91       	pop	r28
    3c36:	df 91       	pop	r29
    3c38:	08 95       	ret

00003c3a <__vector_11>:


/*Timer/Counter 0 OverFlow Event ISR*/
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
    3c3a:	1f 92       	push	r1
    3c3c:	0f 92       	push	r0
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	0f 92       	push	r0
    3c42:	11 24       	eor	r1, r1
    3c44:	2f 93       	push	r18
    3c46:	3f 93       	push	r19
    3c48:	4f 93       	push	r20
    3c4a:	5f 93       	push	r21
    3c4c:	6f 93       	push	r22
    3c4e:	7f 93       	push	r23
    3c50:	8f 93       	push	r24
    3c52:	9f 93       	push	r25
    3c54:	af 93       	push	r26
    3c56:	bf 93       	push	r27
    3c58:	ef 93       	push	r30
    3c5a:	ff 93       	push	r31
    3c5c:	df 93       	push	r29
    3c5e:	cf 93       	push	r28
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    3c64:	80 91 fa 01 	lds	r24, 0x01FA
    3c68:	90 91 fb 01 	lds	r25, 0x01FB
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	29 f0       	breq	.+10     	; 0x3c7a <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_OVF]();
    3c70:	e0 91 fa 01 	lds	r30, 0x01FA
    3c74:	f0 91 fb 01 	lds	r31, 0x01FB
    3c78:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	ff 91       	pop	r31
    3c80:	ef 91       	pop	r30
    3c82:	bf 91       	pop	r27
    3c84:	af 91       	pop	r26
    3c86:	9f 91       	pop	r25
    3c88:	8f 91       	pop	r24
    3c8a:	7f 91       	pop	r23
    3c8c:	6f 91       	pop	r22
    3c8e:	5f 91       	pop	r21
    3c90:	4f 91       	pop	r20
    3c92:	3f 91       	pop	r19
    3c94:	2f 91       	pop	r18
    3c96:	0f 90       	pop	r0
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	0f 90       	pop	r0
    3c9c:	1f 90       	pop	r1
    3c9e:	18 95       	reti

00003ca0 <__vector_10>:

/*Timer/Counter 0 Compare Match Event ISR*/
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
    3ca0:	1f 92       	push	r1
    3ca2:	0f 92       	push	r0
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	0f 92       	push	r0
    3ca8:	11 24       	eor	r1, r1
    3caa:	2f 93       	push	r18
    3cac:	3f 93       	push	r19
    3cae:	4f 93       	push	r20
    3cb0:	5f 93       	push	r21
    3cb2:	6f 93       	push	r22
    3cb4:	7f 93       	push	r23
    3cb6:	8f 93       	push	r24
    3cb8:	9f 93       	push	r25
    3cba:	af 93       	push	r26
    3cbc:	bf 93       	push	r27
    3cbe:	ef 93       	push	r30
    3cc0:	ff 93       	push	r31
    3cc2:	df 93       	push	r29
    3cc4:	cf 93       	push	r28
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    3cca:	80 91 fc 01 	lds	r24, 0x01FC
    3cce:	90 91 fd 01 	lds	r25, 0x01FD
    3cd2:	00 97       	sbiw	r24, 0x00	; 0
    3cd4:	29 f0       	breq	.+10     	; 0x3ce0 <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    3cd6:	e0 91 fc 01 	lds	r30, 0x01FC
    3cda:	f0 91 fd 01 	lds	r31, 0x01FD
    3cde:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3ce0:	cf 91       	pop	r28
    3ce2:	df 91       	pop	r29
    3ce4:	ff 91       	pop	r31
    3ce6:	ef 91       	pop	r30
    3ce8:	bf 91       	pop	r27
    3cea:	af 91       	pop	r26
    3cec:	9f 91       	pop	r25
    3cee:	8f 91       	pop	r24
    3cf0:	7f 91       	pop	r23
    3cf2:	6f 91       	pop	r22
    3cf4:	5f 91       	pop	r21
    3cf6:	4f 91       	pop	r20
    3cf8:	3f 91       	pop	r19
    3cfa:	2f 91       	pop	r18
    3cfc:	0f 90       	pop	r0
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	0f 90       	pop	r0
    3d02:	1f 90       	pop	r1
    3d04:	18 95       	reti

00003d06 <__vector_9>:

/*Timer/Counter 1 OverFlow Event ISR*/
void __vector_9 (void) __attribute((signal));
void __vector_9 (void)
{
    3d06:	1f 92       	push	r1
    3d08:	0f 92       	push	r0
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	0f 92       	push	r0
    3d0e:	11 24       	eor	r1, r1
    3d10:	2f 93       	push	r18
    3d12:	3f 93       	push	r19
    3d14:	4f 93       	push	r20
    3d16:	5f 93       	push	r21
    3d18:	6f 93       	push	r22
    3d1a:	7f 93       	push	r23
    3d1c:	8f 93       	push	r24
    3d1e:	9f 93       	push	r25
    3d20:	af 93       	push	r26
    3d22:	bf 93       	push	r27
    3d24:	ef 93       	push	r30
    3d26:	ff 93       	push	r31
    3d28:	df 93       	push	r29
    3d2a:	cf 93       	push	r28
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_OVF] != NULL)
    3d30:	80 91 fe 01 	lds	r24, 0x01FE
    3d34:	90 91 ff 01 	lds	r25, 0x01FF
    3d38:	00 97       	sbiw	r24, 0x00	; 0
    3d3a:	29 f0       	breq	.+10     	; 0x3d46 <__vector_9+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_OVF]();
    3d3c:	e0 91 fe 01 	lds	r30, 0x01FE
    3d40:	f0 91 ff 01 	lds	r31, 0x01FF
    3d44:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3d46:	cf 91       	pop	r28
    3d48:	df 91       	pop	r29
    3d4a:	ff 91       	pop	r31
    3d4c:	ef 91       	pop	r30
    3d4e:	bf 91       	pop	r27
    3d50:	af 91       	pop	r26
    3d52:	9f 91       	pop	r25
    3d54:	8f 91       	pop	r24
    3d56:	7f 91       	pop	r23
    3d58:	6f 91       	pop	r22
    3d5a:	5f 91       	pop	r21
    3d5c:	4f 91       	pop	r20
    3d5e:	3f 91       	pop	r19
    3d60:	2f 91       	pop	r18
    3d62:	0f 90       	pop	r0
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	0f 90       	pop	r0
    3d68:	1f 90       	pop	r1
    3d6a:	18 95       	reti

00003d6c <__vector_8>:

/*Timer/Counter 1 Channel B Compare Match Event ISR*/
void __vector_8 (void) __attribute((signal));
void __vector_8 (void)
{
    3d6c:	1f 92       	push	r1
    3d6e:	0f 92       	push	r0
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	0f 92       	push	r0
    3d74:	11 24       	eor	r1, r1
    3d76:	2f 93       	push	r18
    3d78:	3f 93       	push	r19
    3d7a:	4f 93       	push	r20
    3d7c:	5f 93       	push	r21
    3d7e:	6f 93       	push	r22
    3d80:	7f 93       	push	r23
    3d82:	8f 93       	push	r24
    3d84:	9f 93       	push	r25
    3d86:	af 93       	push	r26
    3d88:	bf 93       	push	r27
    3d8a:	ef 93       	push	r30
    3d8c:	ff 93       	push	r31
    3d8e:	df 93       	push	r29
    3d90:	cf 93       	push	r28
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPB] != NULL)
    3d96:	80 91 02 02 	lds	r24, 0x0202
    3d9a:	90 91 03 02 	lds	r25, 0x0203
    3d9e:	00 97       	sbiw	r24, 0x00	; 0
    3da0:	29 f0       	breq	.+10     	; 0x3dac <__vector_8+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPB]();
    3da2:	e0 91 02 02 	lds	r30, 0x0202
    3da6:	f0 91 03 02 	lds	r31, 0x0203
    3daa:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	ff 91       	pop	r31
    3db2:	ef 91       	pop	r30
    3db4:	bf 91       	pop	r27
    3db6:	af 91       	pop	r26
    3db8:	9f 91       	pop	r25
    3dba:	8f 91       	pop	r24
    3dbc:	7f 91       	pop	r23
    3dbe:	6f 91       	pop	r22
    3dc0:	5f 91       	pop	r21
    3dc2:	4f 91       	pop	r20
    3dc4:	3f 91       	pop	r19
    3dc6:	2f 91       	pop	r18
    3dc8:	0f 90       	pop	r0
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	0f 90       	pop	r0
    3dce:	1f 90       	pop	r1
    3dd0:	18 95       	reti

00003dd2 <__vector_7>:

/*Timer/Counter 1 Channel A Compare Match Event ISR*/
void __vector_7 (void) __attribute((signal));
void __vector_7 (void)
{
    3dd2:	1f 92       	push	r1
    3dd4:	0f 92       	push	r0
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	0f 92       	push	r0
    3dda:	11 24       	eor	r1, r1
    3ddc:	2f 93       	push	r18
    3dde:	3f 93       	push	r19
    3de0:	4f 93       	push	r20
    3de2:	5f 93       	push	r21
    3de4:	6f 93       	push	r22
    3de6:	7f 93       	push	r23
    3de8:	8f 93       	push	r24
    3dea:	9f 93       	push	r25
    3dec:	af 93       	push	r26
    3dee:	bf 93       	push	r27
    3df0:	ef 93       	push	r30
    3df2:	ff 93       	push	r31
    3df4:	df 93       	push	r29
    3df6:	cf 93       	push	r28
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPA] != NULL)
    3dfc:	80 91 00 02 	lds	r24, 0x0200
    3e00:	90 91 01 02 	lds	r25, 0x0201
    3e04:	00 97       	sbiw	r24, 0x00	; 0
    3e06:	29 f0       	breq	.+10     	; 0x3e12 <__vector_7+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPA]();
    3e08:	e0 91 00 02 	lds	r30, 0x0200
    3e0c:	f0 91 01 02 	lds	r31, 0x0201
    3e10:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3e12:	cf 91       	pop	r28
    3e14:	df 91       	pop	r29
    3e16:	ff 91       	pop	r31
    3e18:	ef 91       	pop	r30
    3e1a:	bf 91       	pop	r27
    3e1c:	af 91       	pop	r26
    3e1e:	9f 91       	pop	r25
    3e20:	8f 91       	pop	r24
    3e22:	7f 91       	pop	r23
    3e24:	6f 91       	pop	r22
    3e26:	5f 91       	pop	r21
    3e28:	4f 91       	pop	r20
    3e2a:	3f 91       	pop	r19
    3e2c:	2f 91       	pop	r18
    3e2e:	0f 90       	pop	r0
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	0f 90       	pop	r0
    3e34:	1f 90       	pop	r1
    3e36:	18 95       	reti

00003e38 <__vector_6>:

/*Timer/Counter 1 Input Capture Event ISR*/
void __vector_6 (void) __attribute((signal));
void __vector_6 (void)
{
    3e38:	1f 92       	push	r1
    3e3a:	0f 92       	push	r0
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	0f 92       	push	r0
    3e40:	11 24       	eor	r1, r1
    3e42:	2f 93       	push	r18
    3e44:	3f 93       	push	r19
    3e46:	4f 93       	push	r20
    3e48:	5f 93       	push	r21
    3e4a:	6f 93       	push	r22
    3e4c:	7f 93       	push	r23
    3e4e:	8f 93       	push	r24
    3e50:	9f 93       	push	r25
    3e52:	af 93       	push	r26
    3e54:	bf 93       	push	r27
    3e56:	ef 93       	push	r30
    3e58:	ff 93       	push	r31
    3e5a:	df 93       	push	r29
    3e5c:	cf 93       	push	r28
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_CAPT] != NULL)
    3e62:	80 91 04 02 	lds	r24, 0x0204
    3e66:	90 91 05 02 	lds	r25, 0x0205
    3e6a:	00 97       	sbiw	r24, 0x00	; 0
    3e6c:	29 f0       	breq	.+10     	; 0x3e78 <__vector_6+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_CAPT]();
    3e6e:	e0 91 04 02 	lds	r30, 0x0204
    3e72:	f0 91 05 02 	lds	r31, 0x0205
    3e76:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	ff 91       	pop	r31
    3e7e:	ef 91       	pop	r30
    3e80:	bf 91       	pop	r27
    3e82:	af 91       	pop	r26
    3e84:	9f 91       	pop	r25
    3e86:	8f 91       	pop	r24
    3e88:	7f 91       	pop	r23
    3e8a:	6f 91       	pop	r22
    3e8c:	5f 91       	pop	r21
    3e8e:	4f 91       	pop	r20
    3e90:	3f 91       	pop	r19
    3e92:	2f 91       	pop	r18
    3e94:	0f 90       	pop	r0
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	0f 90       	pop	r0
    3e9a:	1f 90       	pop	r1
    3e9c:	18 95       	reti

00003e9e <__vector_5>:

/*Timer/Counter 2 OverFlow Event ISR*/
void __vector_5 (void) __attribute((signal));
void __vector_5 (void)
{
    3e9e:	1f 92       	push	r1
    3ea0:	0f 92       	push	r0
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	0f 92       	push	r0
    3ea6:	11 24       	eor	r1, r1
    3ea8:	2f 93       	push	r18
    3eaa:	3f 93       	push	r19
    3eac:	4f 93       	push	r20
    3eae:	5f 93       	push	r21
    3eb0:	6f 93       	push	r22
    3eb2:	7f 93       	push	r23
    3eb4:	8f 93       	push	r24
    3eb6:	9f 93       	push	r25
    3eb8:	af 93       	push	r26
    3eba:	bf 93       	push	r27
    3ebc:	ef 93       	push	r30
    3ebe:	ff 93       	push	r31
    3ec0:	df 93       	push	r29
    3ec2:	cf 93       	push	r28
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_OVF] != NULL)
    3ec8:	80 91 06 02 	lds	r24, 0x0206
    3ecc:	90 91 07 02 	lds	r25, 0x0207
    3ed0:	00 97       	sbiw	r24, 0x00	; 0
    3ed2:	29 f0       	breq	.+10     	; 0x3ede <__vector_5+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_OVF]();
    3ed4:	e0 91 06 02 	lds	r30, 0x0206
    3ed8:	f0 91 07 02 	lds	r31, 0x0207
    3edc:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3ede:	cf 91       	pop	r28
    3ee0:	df 91       	pop	r29
    3ee2:	ff 91       	pop	r31
    3ee4:	ef 91       	pop	r30
    3ee6:	bf 91       	pop	r27
    3ee8:	af 91       	pop	r26
    3eea:	9f 91       	pop	r25
    3eec:	8f 91       	pop	r24
    3eee:	7f 91       	pop	r23
    3ef0:	6f 91       	pop	r22
    3ef2:	5f 91       	pop	r21
    3ef4:	4f 91       	pop	r20
    3ef6:	3f 91       	pop	r19
    3ef8:	2f 91       	pop	r18
    3efa:	0f 90       	pop	r0
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	0f 90       	pop	r0
    3f00:	1f 90       	pop	r1
    3f02:	18 95       	reti

00003f04 <__vector_4>:

/*Timer/Counter 2 Compare Match Event ISR*/
void __vector_4 (void) __attribute((signal));
void __vector_4 (void)
{
    3f04:	1f 92       	push	r1
    3f06:	0f 92       	push	r0
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	0f 92       	push	r0
    3f0c:	11 24       	eor	r1, r1
    3f0e:	2f 93       	push	r18
    3f10:	3f 93       	push	r19
    3f12:	4f 93       	push	r20
    3f14:	5f 93       	push	r21
    3f16:	6f 93       	push	r22
    3f18:	7f 93       	push	r23
    3f1a:	8f 93       	push	r24
    3f1c:	9f 93       	push	r25
    3f1e:	af 93       	push	r26
    3f20:	bf 93       	push	r27
    3f22:	ef 93       	push	r30
    3f24:	ff 93       	push	r31
    3f26:	df 93       	push	r29
    3f28:	cf 93       	push	r28
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_COMP] != NULL)
    3f2e:	80 91 08 02 	lds	r24, 0x0208
    3f32:	90 91 09 02 	lds	r25, 0x0209
    3f36:	00 97       	sbiw	r24, 0x00	; 0
    3f38:	29 f0       	breq	.+10     	; 0x3f44 <__vector_4+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_COMP]();
    3f3a:	e0 91 08 02 	lds	r30, 0x0208
    3f3e:	f0 91 09 02 	lds	r31, 0x0209
    3f42:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	ff 91       	pop	r31
    3f4a:	ef 91       	pop	r30
    3f4c:	bf 91       	pop	r27
    3f4e:	af 91       	pop	r26
    3f50:	9f 91       	pop	r25
    3f52:	8f 91       	pop	r24
    3f54:	7f 91       	pop	r23
    3f56:	6f 91       	pop	r22
    3f58:	5f 91       	pop	r21
    3f5a:	4f 91       	pop	r20
    3f5c:	3f 91       	pop	r19
    3f5e:	2f 91       	pop	r18
    3f60:	0f 90       	pop	r0
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	0f 90       	pop	r0
    3f66:	1f 90       	pop	r1
    3f68:	18 95       	reti

00003f6a <USART_voidInit>:

/**
 * @brief A function to initialize the USART peripheral.
 */
void USART_voidInit(void)
{
    3f6a:	df 93       	push	r29
    3f6c:	cf 93       	push	r28
    3f6e:	0f 92       	push	r0
    3f70:	cd b7       	in	r28, 0x3d	; 61
    3f72:	de b7       	in	r29, 0x3e	; 62
	/*Define Temporary Variable for UCSRC*/
	uint8 Local_u8TempUCSRC = 0u;
    3f74:	19 82       	std	Y+1, r1	; 0x01

	/*Enable Receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    3f76:	aa e2       	ldi	r26, 0x2A	; 42
    3f78:	b0 e0       	ldi	r27, 0x00	; 0
    3f7a:	ea e2       	ldi	r30, 0x2A	; 42
    3f7c:	f0 e0       	ldi	r31, 0x00	; 0
    3f7e:	80 81       	ld	r24, Z
    3f80:	80 61       	ori	r24, 0x10	; 16
    3f82:	8c 93       	st	X, r24

	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    3f84:	aa e2       	ldi	r26, 0x2A	; 42
    3f86:	b0 e0       	ldi	r27, 0x00	; 0
    3f88:	ea e2       	ldi	r30, 0x2A	; 42
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	80 81       	ld	r24, Z
    3f8e:	88 60       	ori	r24, 0x08	; 8
    3f90:	8c 93       	st	X, r24

	/*Disable Double Transmission Speed*/
	CLR_BIT(UCSRA,UCSRA_U2X);
    3f92:	ab e2       	ldi	r26, 0x2B	; 43
    3f94:	b0 e0       	ldi	r27, 0x00	; 0
    3f96:	eb e2       	ldi	r30, 0x2B	; 43
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	80 81       	ld	r24, Z
    3f9c:	8d 7f       	andi	r24, 0xFD	; 253
    3f9e:	8c 93       	st	X, r24
	CLR_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);

#elif USART_u8CHAR_SIZE == EIGHT_BITS_CHAR_SIZE
	Local_u8TempUCSRC &= CHAR_SIZE_MASK;
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
    3fa2:	89 7f       	andi	r24, 0xF9	; 249
    3fa4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	82 60       	ori	r24, 0x02	; 2
    3faa:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	84 60       	ori	r24, 0x04	; 4
    3fb0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    3fb2:	aa e2       	ldi	r26, 0x2A	; 42
    3fb4:	b0 e0       	ldi	r27, 0x00	; 0
    3fb6:	ea e2       	ldi	r30, 0x2A	; 42
    3fb8:	f0 e0       	ldi	r31, 0x00	; 0
    3fba:	80 81       	ld	r24, Z
    3fbc:	8b 7f       	andi	r24, 0xFB	; 251
    3fbe:	8c 93       	st	X, r24
	/*Select Synchronization Mode*/
#if USART_u8SYNCH_MODE == SYNCHRONOUS_MODE
	SET_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);

#elif USART_u8SYNCH_MODE == ASYNCHRONOUS_MODE
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	8f 7b       	andi	r24, 0xBF	; 191
    3fc4:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8SYNCH_MODE configuration type
#endif

	/*Select Parity Mode*/
#if USART_u8PARITY_MODE == DISABLED
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM0);
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	8f 7e       	andi	r24, 0xEF	; 239
    3fca:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM1);
    3fcc:	89 81       	ldd	r24, Y+1	; 0x01
    3fce:	8f 7d       	andi	r24, 0xDF	; 223
    3fd0:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8PARITY_MODE configuration type
#endif

	/*Select Stop Bit Mode*/
#if USART_u8STOP_BITS_NUM == ONE_BIT
	CLR_BIT(Local_u8TempUCSRC,UCSRC_USBS);
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
    3fd4:	87 7f       	andi	r24, 0xF7	; 247
    3fd6:	89 83       	std	Y+1, r24	; 0x01
#else
#error Wrong USART_u8STOP_BITS_NUM configuration type
#endif

	/*Select Mode of UCSRC Register to write on it*/
	SET_BIT(Local_u8TempUCSRC,UCSRC_URSEL);
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	80 68       	ori	r24, 0x80	; 128
    3fdc:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = Local_u8TempUCSRC;
    3fde:	e0 e4       	ldi	r30, 0x40	; 64
    3fe0:	f0 e0       	ldi	r31, 0x00	; 0
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	80 83       	st	Z, r24

	/*Set Baud Rate*/
	UBRRL = USART_u8BAUD_RATE;
    3fe6:	e9 e2       	ldi	r30, 0x29	; 41
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    3fea:	83 e3       	ldi	r24, 0x33	; 51
    3fec:	80 83       	st	Z, r24
}
    3fee:	0f 90       	pop	r0
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <USART_u8Send>:
 * @brief A function to transmit data with USART.
 * @param Copy_u16Data	Data that will be transmitted by USART.
 * @return Error State.
 */
uint8 USART_u8Send(uint16 Copy_u16Data)
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	27 97       	sbiw	r28, 0x07	; 7
    4000:	0f b6       	in	r0, 0x3f	; 63
    4002:	f8 94       	cli
    4004:	de bf       	out	0x3e, r29	; 62
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	cd bf       	out	0x3d, r28	; 61
    400a:	9f 83       	std	Y+7, r25	; 0x07
    400c:	8e 83       	std	Y+6, r24	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    400e:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeoutCounter = 0u;
    4010:	19 82       	std	Y+1, r1	; 0x01
    4012:	1a 82       	std	Y+2, r1	; 0x02
    4014:	1b 82       	std	Y+3, r1	; 0x03
    4016:	1c 82       	std	Y+4, r1	; 0x04

	/*Check if USART Transmitter is idle or not*/
	if((USART_u8TransmitBusyState == IDLE) || (USART_u8TransmitCallSrc == SYNCH_FUNC_CALL))
    4018:	80 91 16 02 	lds	r24, 0x0216
    401c:	88 23       	and	r24, r24
    401e:	29 f0       	breq	.+10     	; 0x402a <USART_u8Send+0x34>
    4020:	80 91 18 02 	lds	r24, 0x0218
    4024:	81 30       	cpi	r24, 0x01	; 1
    4026:	09 f0       	breq	.+2      	; 0x402a <USART_u8Send+0x34>
    4028:	41 c0       	rjmp	.+130    	; 0x40ac <USART_u8Send+0xb6>
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	80 93 16 02 	sts	0x0216, r24
    4030:	0b c0       	rjmp	.+22     	; 0x4048 <USART_u8Send+0x52>

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	9a 81       	ldd	r25, Y+2	; 0x02
    4036:	ab 81       	ldd	r26, Y+3	; 0x03
    4038:	bc 81       	ldd	r27, Y+4	; 0x04
    403a:	01 96       	adiw	r24, 0x01	; 1
    403c:	a1 1d       	adc	r26, r1
    403e:	b1 1d       	adc	r27, r1
    4040:	89 83       	std	Y+1, r24	; 0x01
    4042:	9a 83       	std	Y+2, r25	; 0x02
    4044:	ab 83       	std	Y+3, r26	; 0x03
    4046:	bc 83       	std	Y+4, r27	; 0x04
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
    4048:	eb e2       	ldi	r30, 0x2B	; 43
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	80 81       	ld	r24, Z
    404e:	82 95       	swap	r24
    4050:	86 95       	lsr	r24
    4052:	87 70       	andi	r24, 0x07	; 7
    4054:	88 2f       	mov	r24, r24
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	81 70       	andi	r24, 0x01	; 1
    405a:	90 70       	andi	r25, 0x00	; 0
    405c:	00 97       	sbiw	r24, 0x00	; 0
    405e:	61 f4       	brne	.+24     	; 0x4078 <USART_u8Send+0x82>
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	9a 81       	ldd	r25, Y+2	; 0x02
    4064:	ab 81       	ldd	r26, Y+3	; 0x03
    4066:	bc 81       	ldd	r27, Y+4	; 0x04
    4068:	80 3a       	cpi	r24, 0xA0	; 160
    406a:	26 e8       	ldi	r18, 0x86	; 134
    406c:	92 07       	cpc	r25, r18
    406e:	21 e0       	ldi	r18, 0x01	; 1
    4070:	a2 07       	cpc	r26, r18
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	b2 07       	cpc	r27, r18
    4076:	e8 f2       	brcs	.-70     	; 0x4032 <USART_u8Send+0x3c>
		{
			Local_u32TimeoutCounter++;
		}

		/*Check why the loop has been broken*/
		if(Local_u32TimeoutCounter == USART_u32TIMEOUT)
    4078:	89 81       	ldd	r24, Y+1	; 0x01
    407a:	9a 81       	ldd	r25, Y+2	; 0x02
    407c:	ab 81       	ldd	r26, Y+3	; 0x03
    407e:	bc 81       	ldd	r27, Y+4	; 0x04
    4080:	80 3a       	cpi	r24, 0xA0	; 160
    4082:	26 e8       	ldi	r18, 0x86	; 134
    4084:	92 07       	cpc	r25, r18
    4086:	21 e0       	ldi	r18, 0x01	; 1
    4088:	a2 07       	cpc	r26, r18
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	b2 07       	cpc	r27, r18
    408e:	19 f4       	brne	.+6      	; 0x4096 <USART_u8Send+0xa0>
		{
			/*Loop is broken because the counter exceed timeout counts*/
			Local_u8ErrorState = TIMEOUT_ERR;
    4090:	83 e0       	ldi	r24, 0x03	; 3
    4092:	8d 83       	std	Y+5, r24	; 0x05
    4094:	04 c0       	rjmp	.+8      	; 0x409e <USART_u8Send+0xa8>
		else
		{
			/*Loop is broken because the transmit buffer is ready*/

			/*Set the transmit data*/
			UDR = (uint8) Copy_u16Data;
    4096:	ec e2       	ldi	r30, 0x2C	; 44
    4098:	f0 e0       	ldi	r31, 0x00	; 0
    409a:	8e 81       	ldd	r24, Y+6	; 0x06
    409c:	80 83       	st	Z, r24
			}
#endif
		}


		if(USART_u8TransmitCallSrc == MAIN_CALL)
    409e:	80 91 18 02 	lds	r24, 0x0218
    40a2:	88 23       	and	r24, r24
    40a4:	29 f4       	brne	.+10     	; 0x40b0 <USART_u8Send+0xba>
		{
			/*Reset busy flag to be idle*/
			USART_u8TransmitBusyState = IDLE;
    40a6:	10 92 16 02 	sts	0x0216, r1
    40aa:	02 c0       	rjmp	.+4      	; 0x40b0 <USART_u8Send+0xba>
		}

	}
	else
	{
		Local_u8ErrorState = BUSY_STATE_ERR;
    40ac:	84 e0       	ldi	r24, 0x04	; 4
    40ae:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error state*/
	return Local_u8ErrorState;
    40b0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    40b2:	27 96       	adiw	r28, 0x07	; 7
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	f8 94       	cli
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	cd bf       	out	0x3d, r28	; 61
    40be:	cf 91       	pop	r28
    40c0:	df 91       	pop	r29
    40c2:	08 95       	ret

000040c4 <USART_u8Receive>:
 * @brief A function to receive data by USART up to nine bits.
 * @param Copy_pvData Pointer to return the data received.
 * @return Error State.
 */
uint8 USART_u8Receive(void *Copy_pvData)
{
    40c4:	df 93       	push	r29
    40c6:	cf 93       	push	r28
    40c8:	cd b7       	in	r28, 0x3d	; 61
    40ca:	de b7       	in	r29, 0x3e	; 62
    40cc:	27 97       	sbiw	r28, 0x07	; 7
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	f8 94       	cli
    40d2:	de bf       	out	0x3e, r29	; 62
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	9f 83       	std	Y+7, r25	; 0x07
    40da:	8e 83       	std	Y+6, r24	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    40dc:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeoutCounter = 0u;
    40de:	19 82       	std	Y+1, r1	; 0x01
    40e0:	1a 82       	std	Y+2, r1	; 0x02
    40e2:	1b 82       	std	Y+3, r1	; 0x03
    40e4:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer*/
	if(Copy_pvData != NULL)
    40e6:	8e 81       	ldd	r24, Y+6	; 0x06
    40e8:	9f 81       	ldd	r25, Y+7	; 0x07
    40ea:	00 97       	sbiw	r24, 0x00	; 0
    40ec:	01 f1       	breq	.+64     	; 0x412e <USART_u8Receive+0x6a>
	{
		if((USART_u8ReceiveBusyState == IDLE) || (USART_u8ReceiveCallSrc == SYNCH_FUNC_CALL))
    40ee:	80 91 17 02 	lds	r24, 0x0217
    40f2:	88 23       	and	r24, r24
    40f4:	21 f0       	breq	.+8      	; 0x40fe <USART_u8Receive+0x3a>
    40f6:	80 91 19 02 	lds	r24, 0x0219
    40fa:	81 30       	cpi	r24, 0x01	; 1
    40fc:	a9 f4       	brne	.+42     	; 0x4128 <USART_u8Receive+0x64>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	80 93 17 02 	sts	0x0217, r24

			/*Polling until USART receive data in receive buffer*/
			while((GET_BIT(UCSRA,UCSRA_RXC)) == 0);
    4104:	eb e2       	ldi	r30, 0x2B	; 43
    4106:	f0 e0       	ldi	r31, 0x00	; 0
    4108:	80 81       	ld	r24, Z
    410a:	88 23       	and	r24, r24
    410c:	dc f7       	brge	.-10     	; 0x4104 <USART_u8Receive+0x40>

			/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
			*(uint8 *) Copy_pvData = UDR;
    410e:	ae 81       	ldd	r26, Y+6	; 0x06
    4110:	bf 81       	ldd	r27, Y+7	; 0x07
    4112:	ec e2       	ldi	r30, 0x2C	; 44
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	80 81       	ld	r24, Z
    4118:	8c 93       	st	X, r24
			case 0u: CLR_BIT((*(uint16 *) Copy_pvData),9u);	break;
			case 1u: SET_BIT((*(uint16 *) Copy_pvData),9u);	break;
			}
#endif

			if(USART_u8ReceiveCallSrc == MAIN_CALL)
    411a:	80 91 19 02 	lds	r24, 0x0219
    411e:	88 23       	and	r24, r24
    4120:	41 f4       	brne	.+16     	; 0x4132 <USART_u8Receive+0x6e>
			{
				/*Reset busy flag to be idle*/
				USART_u8ReceiveBusyState = IDLE;
    4122:	10 92 17 02 	sts	0x0217, r1
    4126:	05 c0       	rjmp	.+10     	; 0x4132 <USART_u8Receive+0x6e>
			}
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    4128:	84 e0       	ldi	r24, 0x04	; 4
    412a:	8d 83       	std	Y+5, r24	; 0x05
    412c:	02 c0       	rjmp	.+4      	; 0x4132 <USART_u8Receive+0x6e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    412e:	82 e0       	ldi	r24, 0x02	; 2
    4130:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    4132:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4134:	27 96       	adiw	r28, 0x07	; 7
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
    4140:	cf 91       	pop	r28
    4142:	df 91       	pop	r29
    4144:	08 95       	ret

00004146 <USART_u8SendBufferSynch>:
 * @param Copy_pvBufferArr	A pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize Size of the buffer array.
 * @return Error State.
 */
uint8 USART_u8SendBufferSynch(const void *Copy_pvBufferArr, uint8 Copy_u8BufferSize)
{
    4146:	df 93       	push	r29
    4148:	cf 93       	push	r28
    414a:	00 d0       	rcall	.+0      	; 0x414c <USART_u8SendBufferSynch+0x6>
    414c:	00 d0       	rcall	.+0      	; 0x414e <USART_u8SendBufferSynch+0x8>
    414e:	00 d0       	rcall	.+0      	; 0x4150 <USART_u8SendBufferSynch+0xa>
    4150:	cd b7       	in	r28, 0x3d	; 61
    4152:	de b7       	in	r29, 0x3e	; 62
    4154:	9d 83       	std	Y+5, r25	; 0x05
    4156:	8c 83       	std	Y+4, r24	; 0x04
    4158:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    415a:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    415c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    415e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pvBufferArr != NULL)
    4160:	8c 81       	ldd	r24, Y+4	; 0x04
    4162:	9d 81       	ldd	r25, Y+5	; 0x05
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	79 f1       	breq	.+94     	; 0x41c6 <USART_u8SendBufferSynch+0x80>
	{
		if(USART_u8TransmitBusyState == IDLE)
    4168:	80 91 16 02 	lds	r24, 0x0216
    416c:	88 23       	and	r24, r24
    416e:	41 f5       	brne	.+80     	; 0x41c0 <USART_u8SendBufferSynch+0x7a>
		{
			/*Inform Others that transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	80 93 16 02 	sts	0x0216, r24

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	80 93 18 02 	sts	0x0218, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    417c:	19 82       	std	Y+1, r1	; 0x01
    417e:	17 c0       	rjmp	.+46     	; 0x41ae <USART_u8SendBufferSynch+0x68>
			{
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
				/*Transmit each element with function USART_u8Send*/
				Local_u8ErrorFounder = USART_u8Send((uint8) (*((uint8 *) Copy_pvBufferArr + Local_u8Counter)));
    4180:	2c 81       	ldd	r18, Y+4	; 0x04
    4182:	3d 81       	ldd	r19, Y+5	; 0x05
    4184:	89 81       	ldd	r24, Y+1	; 0x01
    4186:	88 2f       	mov	r24, r24
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	f9 01       	movw	r30, r18
    418c:	e8 0f       	add	r30, r24
    418e:	f9 1f       	adc	r31, r25
    4190:	80 81       	ld	r24, Z
    4192:	88 2f       	mov	r24, r24
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <USART_u8Send>
    419a:	8a 83       	std	Y+2, r24	; 0x02
				Local_u8ErrorFounder = USART_u8Send(*((uint16 *) Copy_pvBufferArr + Local_u8Counter));

#endif

				/*Check that the transmission operation goes well*/
				if(Local_u8ErrorFounder != OK)
    419c:	8a 81       	ldd	r24, Y+2	; 0x02
    419e:	88 23       	and	r24, r24
    41a0:	19 f0       	breq	.+6      	; 0x41a8 <USART_u8SendBufferSynch+0x62>
				{
					Local_u8ErrorState = NOK;
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	8b 83       	std	Y+3, r24	; 0x03
    41a6:	07 c0       	rjmp	.+14     	; 0x41b6 <USART_u8SendBufferSynch+0x70>

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	8f 5f       	subi	r24, 0xFF	; 255
    41ac:	89 83       	std	Y+1, r24	; 0x01
    41ae:	99 81       	ldd	r25, Y+1	; 0x01
    41b0:	8e 81       	ldd	r24, Y+6	; 0x06
    41b2:	98 17       	cp	r25, r24
    41b4:	28 f3       	brcs	.-54     	; 0x4180 <USART_u8SendBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Send that main is the caller from now*/
			USART_u8TransmitCallSrc = MAIN_CALL;
    41b6:	10 92 18 02 	sts	0x0218, r1

			/*Reset busy flag to be idle*/
			USART_u8TransmitBusyState = IDLE;
    41ba:	10 92 16 02 	sts	0x0216, r1
    41be:	05 c0       	rjmp	.+10     	; 0x41ca <USART_u8SendBufferSynch+0x84>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    41c0:	84 e0       	ldi	r24, 0x04	; 4
    41c2:	8b 83       	std	Y+3, r24	; 0x03
    41c4:	02 c0       	rjmp	.+4      	; 0x41ca <USART_u8SendBufferSynch+0x84>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    41c6:	82 e0       	ldi	r24, 0x02	; 2
    41c8:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    41ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    41cc:	26 96       	adiw	r28, 0x06	; 6
    41ce:	0f b6       	in	r0, 0x3f	; 63
    41d0:	f8 94       	cli
    41d2:	de bf       	out	0x3e, r29	; 62
    41d4:	0f be       	out	0x3f, r0	; 63
    41d6:	cd bf       	out	0x3d, r28	; 61
    41d8:	cf 91       	pop	r28
    41da:	df 91       	pop	r29
    41dc:	08 95       	ret

000041de <USART_u8ReceiveBufferSynch>:
 * @param Copy_pu16BufferArr	A pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize Size of the buffer array.
 * @return Error State.
 */
uint8 USART_u8ReceiveBufferSynch(uint8 *Copy_pu8BufferArr, uint8 Copy_u8BufferSize)
{
    41de:	df 93       	push	r29
    41e0:	cf 93       	push	r28
    41e2:	00 d0       	rcall	.+0      	; 0x41e4 <USART_u8ReceiveBufferSynch+0x6>
    41e4:	00 d0       	rcall	.+0      	; 0x41e6 <USART_u8ReceiveBufferSynch+0x8>
    41e6:	00 d0       	rcall	.+0      	; 0x41e8 <USART_u8ReceiveBufferSynch+0xa>
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62
    41ec:	9d 83       	std	Y+5, r25	; 0x05
    41ee:	8c 83       	std	Y+4, r24	; 0x04
    41f0:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    41f2:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    41f4:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    41f6:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pu8BufferArr != NULL)
    41f8:	8c 81       	ldd	r24, Y+4	; 0x04
    41fa:	9d 81       	ldd	r25, Y+5	; 0x05
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	59 f1       	breq	.+86     	; 0x4256 <USART_u8ReceiveBufferSynch+0x78>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    4200:	80 91 17 02 	lds	r24, 0x0217
    4204:	88 23       	and	r24, r24
    4206:	21 f5       	brne	.+72     	; 0x4250 <USART_u8ReceiveBufferSynch+0x72>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	80 93 17 02 	sts	0x0217, r24

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	80 93 19 02 	sts	0x0219, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    4214:	19 82       	std	Y+1, r1	; 0x01
    4216:	13 c0       	rjmp	.+38     	; 0x423e <USART_u8ReceiveBufferSynch+0x60>
			{
				/*Transmit each element with function USART_u8Transmit*/
				Local_u8ErrorFounder = USART_u8Receive(&Copy_pu8BufferArr[Local_u8Counter]);
    4218:	89 81       	ldd	r24, Y+1	; 0x01
    421a:	28 2f       	mov	r18, r24
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	8c 81       	ldd	r24, Y+4	; 0x04
    4220:	9d 81       	ldd	r25, Y+5	; 0x05
    4222:	82 0f       	add	r24, r18
    4224:	93 1f       	adc	r25, r19
    4226:	0e 94 62 20 	call	0x40c4	; 0x40c4 <USART_u8Receive>
    422a:	8a 83       	std	Y+2, r24	; 0x02

				/*Check that the Receive operation goes well*/
				if(Local_u8ErrorFounder != OK)
    422c:	8a 81       	ldd	r24, Y+2	; 0x02
    422e:	88 23       	and	r24, r24
    4230:	19 f0       	breq	.+6      	; 0x4238 <USART_u8ReceiveBufferSynch+0x5a>
				{
					Local_u8ErrorState = NOK;
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	8b 83       	std	Y+3, r24	; 0x03
    4236:	07 c0       	rjmp	.+14     	; 0x4246 <USART_u8ReceiveBufferSynch+0x68>

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	89 83       	std	Y+1, r24	; 0x01
    423e:	99 81       	ldd	r25, Y+1	; 0x01
    4240:	8e 81       	ldd	r24, Y+6	; 0x06
    4242:	98 17       	cp	r25, r24
    4244:	48 f3       	brcs	.-46     	; 0x4218 <USART_u8ReceiveBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Receive that main is the caller from now*/
			USART_u8ReceiveCallSrc = MAIN_CALL;
    4246:	10 92 19 02 	sts	0x0219, r1

			/*Reset busy flag to be idle*/
			USART_u8ReceiveBusyState = IDLE;
    424a:	10 92 17 02 	sts	0x0217, r1
    424e:	05 c0       	rjmp	.+10     	; 0x425a <USART_u8ReceiveBufferSynch+0x7c>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    4250:	84 e0       	ldi	r24, 0x04	; 4
    4252:	8b 83       	std	Y+3, r24	; 0x03
    4254:	02 c0       	rjmp	.+4      	; 0x425a <USART_u8ReceiveBufferSynch+0x7c>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    4256:	82 e0       	ldi	r24, 0x02	; 2
    4258:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    425a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    425c:	26 96       	adiw	r28, 0x06	; 6
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	de bf       	out	0x3e, r29	; 62
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	cd bf       	out	0x3d, r28	; 61
    4268:	cf 91       	pop	r28
    426a:	df 91       	pop	r29
    426c:	08 95       	ret

0000426e <USART_u8SendBufferAsynch>:
 * @param Copy_u8BufferSize	Size of the buffer array.
 * @param Copy_pvNotificationFunc A pointer to the notification function.
 * @return Error state.
 */
uint8 USART_u8SendBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8BufferSize, void (*Copy_pvNotificationFunc)(void))
{
    426e:	df 93       	push	r29
    4270:	cf 93       	push	r28
    4272:	00 d0       	rcall	.+0      	; 0x4274 <USART_u8SendBufferAsynch+0x6>
    4274:	00 d0       	rcall	.+0      	; 0x4276 <USART_u8SendBufferAsynch+0x8>
    4276:	00 d0       	rcall	.+0      	; 0x4278 <USART_u8SendBufferAsynch+0xa>
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    427c:	9b 83       	std	Y+3, r25	; 0x03
    427e:	8a 83       	std	Y+2, r24	; 0x02
    4280:	6c 83       	std	Y+4, r22	; 0x04
    4282:	5e 83       	std	Y+6, r21	; 0x06
    4284:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    4286:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    4288:	8a 81       	ldd	r24, Y+2	; 0x02
    428a:	9b 81       	ldd	r25, Y+3	; 0x03
    428c:	00 97       	sbiw	r24, 0x00	; 0
    428e:	39 f1       	breq	.+78     	; 0x42de <USART_u8SendBufferAsynch+0x70>
    4290:	8d 81       	ldd	r24, Y+5	; 0x05
    4292:	9e 81       	ldd	r25, Y+6	; 0x06
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	19 f1       	breq	.+70     	; 0x42de <USART_u8SendBufferAsynch+0x70>
	{
		if(USART_u8TransmitBusyState == IDLE)
    4298:	80 91 16 02 	lds	r24, 0x0216
    429c:	88 23       	and	r24, r24
    429e:	e1 f4       	brne	.+56     	; 0x42d8 <USART_u8SendBufferAsynch+0x6a>
		{
			/*Inform Others that Transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	80 93 16 02 	sts	0x0216, r24

			/*Initialize buffer pointer as global*/
			USART_pvTransmitBufferArr = Copy_pvBufferArr;
    42a6:	8a 81       	ldd	r24, Y+2	; 0x02
    42a8:	9b 81       	ldd	r25, Y+3	; 0x03
    42aa:	90 93 0e 02 	sts	0x020E, r25
    42ae:	80 93 0d 02 	sts	0x020D, r24

			/*Initialize buffer size as global*/
			USART_u8TransmitBufferSize = Copy_u8BufferSize;
    42b2:	8c 81       	ldd	r24, Y+4	; 0x04
    42b4:	80 93 0c 02 	sts	0x020C, r24

			/*Initialize notification function as global*/
			USART_pvTransmitNotificationFunc = Copy_pvNotificationFunc;
    42b8:	8d 81       	ldd	r24, Y+5	; 0x05
    42ba:	9e 81       	ldd	r25, Y+6	; 0x06
    42bc:	90 93 0b 02 	sts	0x020B, r25
    42c0:	80 93 0a 02 	sts	0x020A, r24

			/*Set the buffer counter to 0*/
			USART_u8TransmitBufferCounter = 0u;
    42c4:	10 92 0f 02 	sts	0x020F, r1

			/*Enable USART Data Register Empty Interrupt*/
			SET_BIT(UCSRB,UCSRB_UDRIE);
    42c8:	aa e2       	ldi	r26, 0x2A	; 42
    42ca:	b0 e0       	ldi	r27, 0x00	; 0
    42cc:	ea e2       	ldi	r30, 0x2A	; 42
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	80 81       	ld	r24, Z
    42d2:	80 62       	ori	r24, 0x20	; 32
    42d4:	8c 93       	st	X, r24
    42d6:	05 c0       	rjmp	.+10     	; 0x42e2 <USART_u8SendBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    42d8:	84 e0       	ldi	r24, 0x04	; 4
    42da:	89 83       	std	Y+1, r24	; 0x01
    42dc:	02 c0       	rjmp	.+4      	; 0x42e2 <USART_u8SendBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    42de:	82 e0       	ldi	r24, 0x02	; 2
    42e0:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    42e4:	26 96       	adiw	r28, 0x06	; 6
    42e6:	0f b6       	in	r0, 0x3f	; 63
    42e8:	f8 94       	cli
    42ea:	de bf       	out	0x3e, r29	; 62
    42ec:	0f be       	out	0x3f, r0	; 63
    42ee:	cd bf       	out	0x3d, r28	; 61
    42f0:	cf 91       	pop	r28
    42f2:	df 91       	pop	r29
    42f4:	08 95       	ret

000042f6 <USART_u8ReceiveBufferAsynch>:
 * @param Copy_u8Bufferize Size of the buffer array.
 * @param Copy_pvNotificationFunc A pointer to the notification function.
 * @return Error State.
 */
uint8 USART_u8ReceiveBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8Bufferize, void (*Copy_pvNotificationFunc)(void))
{
    42f6:	df 93       	push	r29
    42f8:	cf 93       	push	r28
    42fa:	00 d0       	rcall	.+0      	; 0x42fc <USART_u8ReceiveBufferAsynch+0x6>
    42fc:	00 d0       	rcall	.+0      	; 0x42fe <USART_u8ReceiveBufferAsynch+0x8>
    42fe:	00 d0       	rcall	.+0      	; 0x4300 <USART_u8ReceiveBufferAsynch+0xa>
    4300:	cd b7       	in	r28, 0x3d	; 61
    4302:	de b7       	in	r29, 0x3e	; 62
    4304:	9b 83       	std	Y+3, r25	; 0x03
    4306:	8a 83       	std	Y+2, r24	; 0x02
    4308:	6c 83       	std	Y+4, r22	; 0x04
    430a:	5e 83       	std	Y+6, r21	; 0x06
    430c:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    430e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    4310:	8a 81       	ldd	r24, Y+2	; 0x02
    4312:	9b 81       	ldd	r25, Y+3	; 0x03
    4314:	00 97       	sbiw	r24, 0x00	; 0
    4316:	39 f1       	breq	.+78     	; 0x4366 <USART_u8ReceiveBufferAsynch+0x70>
    4318:	8d 81       	ldd	r24, Y+5	; 0x05
    431a:	9e 81       	ldd	r25, Y+6	; 0x06
    431c:	00 97       	sbiw	r24, 0x00	; 0
    431e:	19 f1       	breq	.+70     	; 0x4366 <USART_u8ReceiveBufferAsynch+0x70>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    4320:	80 91 17 02 	lds	r24, 0x0217
    4324:	88 23       	and	r24, r24
    4326:	e1 f4       	brne	.+56     	; 0x4360 <USART_u8ReceiveBufferAsynch+0x6a>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	80 93 17 02 	sts	0x0217, r24

			/*Initialize buffer pointer as global*/
			USART_pvReceiveBufferArr = Copy_pvBufferArr;
    432e:	8a 81       	ldd	r24, Y+2	; 0x02
    4330:	9b 81       	ldd	r25, Y+3	; 0x03
    4332:	90 93 14 02 	sts	0x0214, r25
    4336:	80 93 13 02 	sts	0x0213, r24

			/*Initialize buffer size as global*/
			USART_u8ReceiveBufferSize = Copy_u8Bufferize;
    433a:	8c 81       	ldd	r24, Y+4	; 0x04
    433c:	80 93 12 02 	sts	0x0212, r24

			/*Initialize notification function as global*/
			USART_pvReceiveNotificationFunc = Copy_pvNotificationFunc;
    4340:	8d 81       	ldd	r24, Y+5	; 0x05
    4342:	9e 81       	ldd	r25, Y+6	; 0x06
    4344:	90 93 11 02 	sts	0x0211, r25
    4348:	80 93 10 02 	sts	0x0210, r24

			/*Set the buffer counter to 0*/
			USART_u8ReceiveBufferCounter = 0u;
    434c:	10 92 15 02 	sts	0x0215, r1

			/*Enable USART RX Complete Interrupt*/
			SET_BIT(UCSRB,UCSRB_RXCIE);
    4350:	aa e2       	ldi	r26, 0x2A	; 42
    4352:	b0 e0       	ldi	r27, 0x00	; 0
    4354:	ea e2       	ldi	r30, 0x2A	; 42
    4356:	f0 e0       	ldi	r31, 0x00	; 0
    4358:	80 81       	ld	r24, Z
    435a:	80 68       	ori	r24, 0x80	; 128
    435c:	8c 93       	st	X, r24
    435e:	05 c0       	rjmp	.+10     	; 0x436a <USART_u8ReceiveBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    4360:	84 e0       	ldi	r24, 0x04	; 4
    4362:	89 83       	std	Y+1, r24	; 0x01
    4364:	02 c0       	rjmp	.+4      	; 0x436a <USART_u8ReceiveBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    4366:	82 e0       	ldi	r24, 0x02	; 2
    4368:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    436a:	89 81       	ldd	r24, Y+1	; 0x01
}
    436c:	26 96       	adiw	r28, 0x06	; 6
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61
    4378:	cf 91       	pop	r28
    437a:	df 91       	pop	r29
    437c:	08 95       	ret

0000437e <__vector_13>:
/**
 * @brief USART Receive Complete ISR.
 */
void __vector_13 (void) __attribute((signal));
void __vector_13 (void)
{
    437e:	1f 92       	push	r1
    4380:	0f 92       	push	r0
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	0f 92       	push	r0
    4386:	11 24       	eor	r1, r1
    4388:	2f 93       	push	r18
    438a:	3f 93       	push	r19
    438c:	4f 93       	push	r20
    438e:	5f 93       	push	r21
    4390:	6f 93       	push	r22
    4392:	7f 93       	push	r23
    4394:	8f 93       	push	r24
    4396:	9f 93       	push	r25
    4398:	af 93       	push	r26
    439a:	bf 93       	push	r27
    439c:	ef 93       	push	r30
    439e:	ff 93       	push	r31
    43a0:	df 93       	push	r29
    43a2:	cf 93       	push	r28
    43a4:	cd b7       	in	r28, 0x3d	; 61
    43a6:	de b7       	in	r29, 0x3e	; 62
	/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	*((uint8 *) USART_pvReceiveBufferArr + USART_u8ReceiveBufferCounter) = UDR;
    43a8:	80 91 13 02 	lds	r24, 0x0213
    43ac:	90 91 14 02 	lds	r25, 0x0214
    43b0:	9c 01       	movw	r18, r24
    43b2:	80 91 15 02 	lds	r24, 0x0215
    43b6:	88 2f       	mov	r24, r24
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	d9 01       	movw	r26, r18
    43bc:	a8 0f       	add	r26, r24
    43be:	b9 1f       	adc	r27, r25
    43c0:	ec e2       	ldi	r30, 0x2C	; 44
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	80 81       	ld	r24, Z
    43c6:	8c 93       	st	X, r24
	case 1u: SET_BIT(*(((uint16 *) USART_pvReceiveBufferArr) + USART_u8ReceiveBufferCounter),9u);	break;
	}
#endif

	/*Increment Receive Buffer Counter*/
	USART_u8ReceiveBufferCounter++;
    43c8:	80 91 15 02 	lds	r24, 0x0215
    43cc:	8f 5f       	subi	r24, 0xFF	; 255
    43ce:	80 93 15 02 	sts	0x0215, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8ReceiveBufferCounter == USART_u8ReceiveBufferSize)
    43d2:	90 91 15 02 	lds	r25, 0x0215
    43d6:	80 91 12 02 	lds	r24, 0x0212
    43da:	98 17       	cp	r25, r24
    43dc:	a1 f4       	brne	.+40     	; 0x4406 <__vector_13+0x88>
	{
		/*Reset busy flag for receive channel to be idle*/
		USART_u8ReceiveBusyState = IDLE;
    43de:	10 92 17 02 	sts	0x0217, r1

		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_RXCIE);
    43e2:	aa e2       	ldi	r26, 0x2A	; 42
    43e4:	b0 e0       	ldi	r27, 0x00	; 0
    43e6:	ea e2       	ldi	r30, 0x2A	; 42
    43e8:	f0 e0       	ldi	r31, 0x00	; 0
    43ea:	80 81       	ld	r24, Z
    43ec:	8f 77       	andi	r24, 0x7F	; 127
    43ee:	8c 93       	st	X, r24

		/*Call Notification Function*/
		if(USART_pvReceiveNotificationFunc != NULL)
    43f0:	80 91 10 02 	lds	r24, 0x0210
    43f4:	90 91 11 02 	lds	r25, 0x0211
    43f8:	00 97       	sbiw	r24, 0x00	; 0
    43fa:	29 f0       	breq	.+10     	; 0x4406 <__vector_13+0x88>
		{
			USART_pvReceiveNotificationFunc();
    43fc:	e0 91 10 02 	lds	r30, 0x0210
    4400:	f0 91 11 02 	lds	r31, 0x0211
    4404:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    4406:	cf 91       	pop	r28
    4408:	df 91       	pop	r29
    440a:	ff 91       	pop	r31
    440c:	ef 91       	pop	r30
    440e:	bf 91       	pop	r27
    4410:	af 91       	pop	r26
    4412:	9f 91       	pop	r25
    4414:	8f 91       	pop	r24
    4416:	7f 91       	pop	r23
    4418:	6f 91       	pop	r22
    441a:	5f 91       	pop	r21
    441c:	4f 91       	pop	r20
    441e:	3f 91       	pop	r19
    4420:	2f 91       	pop	r18
    4422:	0f 90       	pop	r0
    4424:	0f be       	out	0x3f, r0	; 63
    4426:	0f 90       	pop	r0
    4428:	1f 90       	pop	r1
    442a:	18 95       	reti

0000442c <__vector_14>:
/**
 * @brief USART Data Register Empty ISR.
 */
void __vector_14 (void) __attribute((signal));
void __vector_14 (void)
{
    442c:	1f 92       	push	r1
    442e:	0f 92       	push	r0
    4430:	0f b6       	in	r0, 0x3f	; 63
    4432:	0f 92       	push	r0
    4434:	11 24       	eor	r1, r1
    4436:	2f 93       	push	r18
    4438:	3f 93       	push	r19
    443a:	4f 93       	push	r20
    443c:	5f 93       	push	r21
    443e:	6f 93       	push	r22
    4440:	7f 93       	push	r23
    4442:	8f 93       	push	r24
    4444:	9f 93       	push	r25
    4446:	af 93       	push	r26
    4448:	bf 93       	push	r27
    444a:	ef 93       	push	r30
    444c:	ff 93       	push	r31
    444e:	df 93       	push	r29
    4450:	cf 93       	push	r28
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
	/*Set the data to the transmit register*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	UDR = *(((uint8 *) USART_pvTransmitBufferArr) + USART_u8TransmitBufferCounter);
    4456:	ac e2       	ldi	r26, 0x2C	; 44
    4458:	b0 e0       	ldi	r27, 0x00	; 0
    445a:	80 91 0d 02 	lds	r24, 0x020D
    445e:	90 91 0e 02 	lds	r25, 0x020E
    4462:	9c 01       	movw	r18, r24
    4464:	80 91 0f 02 	lds	r24, 0x020F
    4468:	88 2f       	mov	r24, r24
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	f9 01       	movw	r30, r18
    446e:	e8 0f       	add	r30, r24
    4470:	f9 1f       	adc	r31, r25
    4472:	80 81       	ld	r24, Z
    4474:	8c 93       	st	X, r24
	case 1u: SET_BIT(UCSRB,UCSRB_TXB8);	break;
	}
#endif

	/*Increment Transmit Buffer Counter*/
	USART_u8TransmitBufferCounter++;
    4476:	80 91 0f 02 	lds	r24, 0x020F
    447a:	8f 5f       	subi	r24, 0xFF	; 255
    447c:	80 93 0f 02 	sts	0x020F, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8TransmitBufferCounter == USART_u8TransmitBufferSize)
    4480:	90 91 0f 02 	lds	r25, 0x020F
    4484:	80 91 0c 02 	lds	r24, 0x020C
    4488:	98 17       	cp	r25, r24
    448a:	a1 f4       	brne	.+40     	; 0x44b4 <__vector_14+0x88>
	{
		/*Reset busy flag for transmit channel to be idle*/
		USART_u8TransmitBusyState = IDLE;
    448c:	10 92 16 02 	sts	0x0216, r1

		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_UDRIE);
    4490:	aa e2       	ldi	r26, 0x2A	; 42
    4492:	b0 e0       	ldi	r27, 0x00	; 0
    4494:	ea e2       	ldi	r30, 0x2A	; 42
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	80 81       	ld	r24, Z
    449a:	8f 7d       	andi	r24, 0xDF	; 223
    449c:	8c 93       	st	X, r24

		/*Call Notification Function*/
		if(USART_pvTransmitNotificationFunc != NULL)
    449e:	80 91 0a 02 	lds	r24, 0x020A
    44a2:	90 91 0b 02 	lds	r25, 0x020B
    44a6:	00 97       	sbiw	r24, 0x00	; 0
    44a8:	29 f0       	breq	.+10     	; 0x44b4 <__vector_14+0x88>
		{
			USART_pvTransmitNotificationFunc();
    44aa:	e0 91 0a 02 	lds	r30, 0x020A
    44ae:	f0 91 0b 02 	lds	r31, 0x020B
    44b2:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    44b4:	cf 91       	pop	r28
    44b6:	df 91       	pop	r29
    44b8:	ff 91       	pop	r31
    44ba:	ef 91       	pop	r30
    44bc:	bf 91       	pop	r27
    44be:	af 91       	pop	r26
    44c0:	9f 91       	pop	r25
    44c2:	8f 91       	pop	r24
    44c4:	7f 91       	pop	r23
    44c6:	6f 91       	pop	r22
    44c8:	5f 91       	pop	r21
    44ca:	4f 91       	pop	r20
    44cc:	3f 91       	pop	r19
    44ce:	2f 91       	pop	r18
    44d0:	0f 90       	pop	r0
    44d2:	0f be       	out	0x3f, r0	; 63
    44d4:	0f 90       	pop	r0
    44d6:	1f 90       	pop	r1
    44d8:	18 95       	reti

000044da <__vector_15>:
/**
 * @brief USART transmission Complete ISR.
 */
void __vector_15 (void) __attribute((signal));
void __vector_15 (void)
{
    44da:	1f 92       	push	r1
    44dc:	0f 92       	push	r0
    44de:	0f b6       	in	r0, 0x3f	; 63
    44e0:	0f 92       	push	r0
    44e2:	11 24       	eor	r1, r1
    44e4:	df 93       	push	r29
    44e6:	cf 93       	push	r28
    44e8:	cd b7       	in	r28, 0x3d	; 61
    44ea:	de b7       	in	r29, 0x3e	; 62

}
    44ec:	cf 91       	pop	r28
    44ee:	df 91       	pop	r29
    44f0:	0f 90       	pop	r0
    44f2:	0f be       	out	0x3f, r0	; 63
    44f4:	0f 90       	pop	r0
    44f6:	1f 90       	pop	r1
    44f8:	18 95       	reti

000044fa <ULTSONIC_u8MeasureDistance>:
 * @param Copy_stUltsonicData Pointer to struct that carry the ultrasonic data.
 * @param Copy_u16Distance Pointer to return the distance in cm.
 * @return Error State.
 */
uint8 ULTSONIC_u8MeasureDistance(const ULTSONIC_t *Copy_stUltsonicData, uint16 *Copy_u16Distance)
{
    44fa:	df 93       	push	r29
    44fc:	cf 93       	push	r28
    44fe:	cd b7       	in	r28, 0x3d	; 61
    4500:	de b7       	in	r29, 0x3e	; 62
    4502:	aa 97       	sbiw	r28, 0x2a	; 42
    4504:	0f b6       	in	r0, 0x3f	; 63
    4506:	f8 94       	cli
    4508:	de bf       	out	0x3e, r29	; 62
    450a:	0f be       	out	0x3f, r0	; 63
    450c:	cd bf       	out	0x3d, r28	; 61
    450e:	98 a7       	std	Y+40, r25	; 0x28
    4510:	8f a3       	std	Y+39, r24	; 0x27
    4512:	7a a7       	std	Y+42, r23	; 0x2a
    4514:	69 a7       	std	Y+41, r22	; 0x29
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    4516:	1a a2       	std	Y+34, r1	; 0x22
	uint8 Local_u8ErrorFounder = OK;
    4518:	19 a2       	std	Y+33, r1	; 0x21
	uint32 Local_u32EchoTime = 0u;
    451a:	1d 8e       	std	Y+29, r1	; 0x1d
    451c:	1e 8e       	std	Y+30, r1	; 0x1e
    451e:	1f 8e       	std	Y+31, r1	; 0x1f
    4520:	18 a2       	std	Y+32, r1	; 0x20
	uint32 Local_u32TimeoutCounter = 0u;
    4522:	19 8e       	std	Y+25, r1	; 0x19
    4524:	1a 8e       	std	Y+26, r1	; 0x1a
    4526:	1b 8e       	std	Y+27, r1	; 0x1b
    4528:	1c 8e       	std	Y+28, r1	; 0x1c

	/*Initialize timer 1*/
	TIMER1_CFG_t Local_stTimer1Cfg;
	Local_stTimer1Cfg.ClkSelect = TIMER1_u8SYS_CLK_BY_8;
    452a:	82 e0       	ldi	r24, 0x02	; 2
    452c:	8b a3       	std	Y+35, r24	; 0x23
	Local_stTimer1Cfg.WGM = NORMAL_16_BITS;
    452e:	1c a2       	std	Y+36, r1	; 0x24
	Local_stTimer1Cfg.OCAMode = OC_DISCONNECTED;
    4530:	1d a2       	std	Y+37, r1	; 0x25
	Local_stTimer1Cfg.OCBMode = OC_DISCONNECTED;
    4532:	1e a2       	std	Y+38, r1	; 0x26
	Local_u8ErrorFounder = TIMER1_u8Init(&Local_stTimer1Cfg);
    4534:	ce 01       	movw	r24, r28
    4536:	83 96       	adiw	r24, 0x23	; 35
    4538:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <TIMER1_u8Init>
    453c:	89 a3       	std	Y+33, r24	; 0x21

	if(Local_u8ErrorFounder == OK)
    453e:	89 a1       	ldd	r24, Y+33	; 0x21
    4540:	88 23       	and	r24, r24
    4542:	09 f0       	breq	.+2      	; 0x4546 <ULTSONIC_u8MeasureDistance+0x4c>
    4544:	bb c1       	rjmp	.+886    	; 0x48bc <ULTSONIC_u8MeasureDistance+0x3c2>
	{
		/*Initialize and Enable Capture Unit and Overflow Interrupts of timer 1*/
		TIMERS_u8SetCallBack(TIMER1_OVF, ULTSONIC_voidOvfISR);
    4546:	2b e9       	ldi	r18, 0x9B	; 155
    4548:	34 e2       	ldi	r19, 0x24	; 36
    454a:	82 e0       	ldi	r24, 0x02	; 2
    454c:	b9 01       	movw	r22, r18
    454e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <TIMERS_u8SetCallBack>
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_RISING_EDGE);
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_u8SetInputCaptTriggerSrc>
		TIMERS_u8SetCallBack(TIMER1_CAPT, ULTSONIC_voidCaptureISR);
    4558:	2a e6       	ldi	r18, 0x6A	; 106
    455a:	34 e2       	ldi	r19, 0x24	; 36
    455c:	85 e0       	ldi	r24, 0x05	; 5
    455e:	b9 01       	movw	r22, r18
    4560:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <TIMERS_u8SetCallBack>
		TIMERS_u8IntEnable(TIMER1_CAPT);
    4564:	85 e0       	ldi	r24, 0x05	; 5
    4566:	0e 94 87 1b 	call	0x370e	; 0x370e <TIMERS_u8IntEnable>

		/*Trigger the ultrasonic to return its echo*/
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_HIGH);
    456a:	ef a1       	ldd	r30, Y+39	; 0x27
    456c:	f8 a5       	ldd	r31, Y+40	; 0x28
    456e:	80 81       	ld	r24, Z
    4570:	ef a1       	ldd	r30, Y+39	; 0x27
    4572:	f8 a5       	ldd	r31, Y+40	; 0x28
    4574:	91 81       	ldd	r25, Z+1	; 0x01
    4576:	69 2f       	mov	r22, r25
    4578:	41 e0       	ldi	r20, 0x01	; 1
    457a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	a8 ec       	ldi	r26, 0xC8	; 200
    4584:	b2 e4       	ldi	r27, 0x42	; 66
    4586:	8d 8b       	std	Y+21, r24	; 0x15
    4588:	9e 8b       	std	Y+22, r25	; 0x16
    458a:	af 8b       	std	Y+23, r26	; 0x17
    458c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    458e:	6d 89       	ldd	r22, Y+21	; 0x15
    4590:	7e 89       	ldd	r23, Y+22	; 0x16
    4592:	8f 89       	ldd	r24, Y+23	; 0x17
    4594:	98 8d       	ldd	r25, Y+24	; 0x18
    4596:	2b ea       	ldi	r18, 0xAB	; 171
    4598:	3a ea       	ldi	r19, 0xAA	; 170
    459a:	4a e2       	ldi	r20, 0x2A	; 42
    459c:	50 e4       	ldi	r21, 0x40	; 64
    459e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	89 8b       	std	Y+17, r24	; 0x11
    45a8:	9a 8b       	std	Y+18, r25	; 0x12
    45aa:	ab 8b       	std	Y+19, r26	; 0x13
    45ac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    45ae:	69 89       	ldd	r22, Y+17	; 0x11
    45b0:	7a 89       	ldd	r23, Y+18	; 0x12
    45b2:	8b 89       	ldd	r24, Y+19	; 0x13
    45b4:	9c 89       	ldd	r25, Y+20	; 0x14
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 e8       	ldi	r20, 0x80	; 128
    45bc:	5f e3       	ldi	r21, 0x3F	; 63
    45be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45c2:	88 23       	and	r24, r24
    45c4:	1c f4       	brge	.+6      	; 0x45cc <ULTSONIC_u8MeasureDistance+0xd2>
		__ticks = 1;
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	88 8b       	std	Y+16, r24	; 0x10
    45ca:	91 c0       	rjmp	.+290    	; 0x46ee <ULTSONIC_u8MeasureDistance+0x1f4>
	else if (__tmp > 255)
    45cc:	69 89       	ldd	r22, Y+17	; 0x11
    45ce:	7a 89       	ldd	r23, Y+18	; 0x12
    45d0:	8b 89       	ldd	r24, Y+19	; 0x13
    45d2:	9c 89       	ldd	r25, Y+20	; 0x14
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	4f e7       	ldi	r20, 0x7F	; 127
    45da:	53 e4       	ldi	r21, 0x43	; 67
    45dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45e0:	18 16       	cp	r1, r24
    45e2:	0c f0       	brlt	.+2      	; 0x45e6 <ULTSONIC_u8MeasureDistance+0xec>
    45e4:	7b c0       	rjmp	.+246    	; 0x46dc <ULTSONIC_u8MeasureDistance+0x1e2>
	{
		_delay_ms(__us / 1000.0);
    45e6:	6d 89       	ldd	r22, Y+21	; 0x15
    45e8:	7e 89       	ldd	r23, Y+22	; 0x16
    45ea:	8f 89       	ldd	r24, Y+23	; 0x17
    45ec:	98 8d       	ldd	r25, Y+24	; 0x18
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	4a e7       	ldi	r20, 0x7A	; 122
    45f4:	54 e4       	ldi	r21, 0x44	; 68
    45f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	8c 87       	std	Y+12, r24	; 0x0c
    4600:	9d 87       	std	Y+13, r25	; 0x0d
    4602:	ae 87       	std	Y+14, r26	; 0x0e
    4604:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4606:	6c 85       	ldd	r22, Y+12	; 0x0c
    4608:	7d 85       	ldd	r23, Y+13	; 0x0d
    460a:	8e 85       	ldd	r24, Y+14	; 0x0e
    460c:	9f 85       	ldd	r25, Y+15	; 0x0f
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	4a ef       	ldi	r20, 0xFA	; 250
    4614:	54 e4       	ldi	r21, 0x44	; 68
    4616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	88 87       	std	Y+8, r24	; 0x08
    4620:	99 87       	std	Y+9, r25	; 0x09
    4622:	aa 87       	std	Y+10, r26	; 0x0a
    4624:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4626:	68 85       	ldd	r22, Y+8	; 0x08
    4628:	79 85       	ldd	r23, Y+9	; 0x09
    462a:	8a 85       	ldd	r24, Y+10	; 0x0a
    462c:	9b 85       	ldd	r25, Y+11	; 0x0b
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	40 e8       	ldi	r20, 0x80	; 128
    4634:	5f e3       	ldi	r21, 0x3F	; 63
    4636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    463a:	88 23       	and	r24, r24
    463c:	2c f4       	brge	.+10     	; 0x4648 <ULTSONIC_u8MeasureDistance+0x14e>
		__ticks = 1;
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	9f 83       	std	Y+7, r25	; 0x07
    4644:	8e 83       	std	Y+6, r24	; 0x06
    4646:	3f c0       	rjmp	.+126    	; 0x46c6 <ULTSONIC_u8MeasureDistance+0x1cc>
	else if (__tmp > 65535)
    4648:	68 85       	ldd	r22, Y+8	; 0x08
    464a:	79 85       	ldd	r23, Y+9	; 0x09
    464c:	8a 85       	ldd	r24, Y+10	; 0x0a
    464e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	3f ef       	ldi	r19, 0xFF	; 255
    4654:	4f e7       	ldi	r20, 0x7F	; 127
    4656:	57 e4       	ldi	r21, 0x47	; 71
    4658:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    465c:	18 16       	cp	r1, r24
    465e:	4c f5       	brge	.+82     	; 0x46b2 <ULTSONIC_u8MeasureDistance+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4660:	6c 85       	ldd	r22, Y+12	; 0x0c
    4662:	7d 85       	ldd	r23, Y+13	; 0x0d
    4664:	8e 85       	ldd	r24, Y+14	; 0x0e
    4666:	9f 85       	ldd	r25, Y+15	; 0x0f
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	40 e2       	ldi	r20, 0x20	; 32
    466e:	51 e4       	ldi	r21, 0x41	; 65
    4670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	bc 01       	movw	r22, r24
    467a:	cd 01       	movw	r24, r26
    467c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	9f 83       	std	Y+7, r25	; 0x07
    4686:	8e 83       	std	Y+6, r24	; 0x06
    4688:	0f c0       	rjmp	.+30     	; 0x46a8 <ULTSONIC_u8MeasureDistance+0x1ae>
    468a:	88 ec       	ldi	r24, 0xC8	; 200
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	9d 83       	std	Y+5, r25	; 0x05
    4690:	8c 83       	std	Y+4, r24	; 0x04
    4692:	8c 81       	ldd	r24, Y+4	; 0x04
    4694:	9d 81       	ldd	r25, Y+5	; 0x05
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	f1 f7       	brne	.-4      	; 0x4696 <ULTSONIC_u8MeasureDistance+0x19c>
    469a:	9d 83       	std	Y+5, r25	; 0x05
    469c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    469e:	8e 81       	ldd	r24, Y+6	; 0x06
    46a0:	9f 81       	ldd	r25, Y+7	; 0x07
    46a2:	01 97       	sbiw	r24, 0x01	; 1
    46a4:	9f 83       	std	Y+7, r25	; 0x07
    46a6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46a8:	8e 81       	ldd	r24, Y+6	; 0x06
    46aa:	9f 81       	ldd	r25, Y+7	; 0x07
    46ac:	00 97       	sbiw	r24, 0x00	; 0
    46ae:	69 f7       	brne	.-38     	; 0x468a <ULTSONIC_u8MeasureDistance+0x190>
    46b0:	24 c0       	rjmp	.+72     	; 0x46fa <ULTSONIC_u8MeasureDistance+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b2:	68 85       	ldd	r22, Y+8	; 0x08
    46b4:	79 85       	ldd	r23, Y+9	; 0x09
    46b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    46b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    46ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46be:	dc 01       	movw	r26, r24
    46c0:	cb 01       	movw	r24, r22
    46c2:	9f 83       	std	Y+7, r25	; 0x07
    46c4:	8e 83       	std	Y+6, r24	; 0x06
    46c6:	8e 81       	ldd	r24, Y+6	; 0x06
    46c8:	9f 81       	ldd	r25, Y+7	; 0x07
    46ca:	9b 83       	std	Y+3, r25	; 0x03
    46cc:	8a 83       	std	Y+2, r24	; 0x02
    46ce:	8a 81       	ldd	r24, Y+2	; 0x02
    46d0:	9b 81       	ldd	r25, Y+3	; 0x03
    46d2:	01 97       	sbiw	r24, 0x01	; 1
    46d4:	f1 f7       	brne	.-4      	; 0x46d2 <ULTSONIC_u8MeasureDistance+0x1d8>
    46d6:	9b 83       	std	Y+3, r25	; 0x03
    46d8:	8a 83       	std	Y+2, r24	; 0x02
    46da:	0f c0       	rjmp	.+30     	; 0x46fa <ULTSONIC_u8MeasureDistance+0x200>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    46dc:	69 89       	ldd	r22, Y+17	; 0x11
    46de:	7a 89       	ldd	r23, Y+18	; 0x12
    46e0:	8b 89       	ldd	r24, Y+19	; 0x13
    46e2:	9c 89       	ldd	r25, Y+20	; 0x14
    46e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e8:	dc 01       	movw	r26, r24
    46ea:	cb 01       	movw	r24, r22
    46ec:	88 8b       	std	Y+16, r24	; 0x10
    46ee:	88 89       	ldd	r24, Y+16	; 0x10
    46f0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    46f2:	89 81       	ldd	r24, Y+1	; 0x01
    46f4:	8a 95       	dec	r24
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <ULTSONIC_u8MeasureDistance+0x1fa>
    46f8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_LOW);
    46fa:	ef a1       	ldd	r30, Y+39	; 0x27
    46fc:	f8 a5       	ldd	r31, Y+40	; 0x28
    46fe:	80 81       	ld	r24, Z
    4700:	ef a1       	ldd	r30, Y+39	; 0x27
    4702:	f8 a5       	ldd	r31, Y+40	; 0x28
    4704:	91 81       	ldd	r25, Z+1	; 0x01
    4706:	69 2f       	mov	r22, r25
    4708:	40 e0       	ldi	r20, 0x00	; 0
    470a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
    470e:	0b c0       	rjmp	.+22     	; 0x4726 <ULTSONIC_u8MeasureDistance+0x22c>


		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    4710:	89 8d       	ldd	r24, Y+25	; 0x19
    4712:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4714:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4716:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4718:	01 96       	adiw	r24, 0x01	; 1
    471a:	a1 1d       	adc	r26, r1
    471c:	b1 1d       	adc	r27, r1
    471e:	89 8f       	std	Y+25, r24	; 0x19
    4720:	9a 8f       	std	Y+26, r25	; 0x1a
    4722:	ab 8f       	std	Y+27, r26	; 0x1b
    4724:	bc 8f       	std	Y+28, r27	; 0x1c
		_delay_us(100);
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_LOW);


		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
    4726:	80 91 1a 02 	lds	r24, 0x021A
    472a:	90 91 1b 02 	lds	r25, 0x021B
    472e:	00 97       	sbiw	r24, 0x00	; 0
    4730:	31 f0       	breq	.+12     	; 0x473e <ULTSONIC_u8MeasureDistance+0x244>
    4732:	80 91 1c 02 	lds	r24, 0x021C
    4736:	90 91 1d 02 	lds	r25, 0x021D
    473a:	00 97       	sbiw	r24, 0x00	; 0
    473c:	61 f4       	brne	.+24     	; 0x4756 <ULTSONIC_u8MeasureDistance+0x25c>
    473e:	89 8d       	ldd	r24, Y+25	; 0x19
    4740:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4742:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4744:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4746:	80 35       	cpi	r24, 0x50	; 80
    4748:	23 ec       	ldi	r18, 0xC3	; 195
    474a:	92 07       	cpc	r25, r18
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	a2 07       	cpc	r26, r18
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	b2 07       	cpc	r27, r18
    4754:	e8 f2       	brcs	.-70     	; 0x4710 <ULTSONIC_u8MeasureDistance+0x216>
		{
			Local_u32TimeoutCounter++;
		}

		/*Disable timer 1 and overflow interrupt of it*/
		TIMERS_u8IntDisable(TIMER1_OVF);
    4756:	82 e0       	ldi	r24, 0x02	; 2
    4758:	0e 94 0e 1c 	call	0x381c	; 0x381c <TIMERS_u8IntDisable>
		TIMERS_u8IntDisable(TIMER1_CAPT);
    475c:	85 e0       	ldi	r24, 0x05	; 5
    475e:	0e 94 0e 1c 	call	0x381c	; 0x381c <TIMERS_u8IntDisable>
		TIMERS_u8Disable(TIMER1);
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	0e 94 95 1c 	call	0x392a	; 0x392a <TIMERS_u8Disable>

		/*Check if there was overflow interrupts or not*/
		if(ULTSONIC_u16EchoOvfCounter == 0u)
    4768:	80 91 20 02 	lds	r24, 0x0220
    476c:	90 91 21 02 	lds	r25, 0x0221
    4770:	00 97       	sbiw	r24, 0x00	; 0
    4772:	a1 f4       	brne	.+40     	; 0x479c <ULTSONIC_u8MeasureDistance+0x2a2>
		{
			/*Calculate Echo Time in microseconds*/
			Local_u32EchoTime = ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1;
    4774:	20 91 1c 02 	lds	r18, 0x021C
    4778:	30 91 1d 02 	lds	r19, 0x021D
    477c:	80 91 1a 02 	lds	r24, 0x021A
    4780:	90 91 1b 02 	lds	r25, 0x021B
    4784:	a9 01       	movw	r20, r18
    4786:	48 1b       	sub	r20, r24
    4788:	59 0b       	sbc	r21, r25
    478a:	ca 01       	movw	r24, r20
    478c:	cc 01       	movw	r24, r24
    478e:	a0 e0       	ldi	r26, 0x00	; 0
    4790:	b0 e0       	ldi	r27, 0x00	; 0
    4792:	8d 8f       	std	Y+29, r24	; 0x1d
    4794:	9e 8f       	std	Y+30, r25	; 0x1e
    4796:	af 8f       	std	Y+31, r26	; 0x1f
    4798:	b8 a3       	std	Y+32, r27	; 0x20
    479a:	59 c0       	rjmp	.+178    	; 0x484e <ULTSONIC_u8MeasureDistance+0x354>
		}
		else
		{
			/*Calculate Echo Time in microseconds*/
			if(ULTSONIC_u16Capture2 >= ULTSONIC_u16Capture1)
    479c:	20 91 1c 02 	lds	r18, 0x021C
    47a0:	30 91 1d 02 	lds	r19, 0x021D
    47a4:	80 91 1a 02 	lds	r24, 0x021A
    47a8:	90 91 1b 02 	lds	r25, 0x021B
    47ac:	28 17       	cp	r18, r24
    47ae:	39 07       	cpc	r19, r25
    47b0:	10 f1       	brcs	.+68     	; 0x47f6 <ULTSONIC_u8MeasureDistance+0x2fc>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    47b2:	20 91 1c 02 	lds	r18, 0x021C
    47b6:	30 91 1d 02 	lds	r19, 0x021D
    47ba:	80 91 1a 02 	lds	r24, 0x021A
    47be:	90 91 1b 02 	lds	r25, 0x021B
    47c2:	a9 01       	movw	r20, r18
    47c4:	48 1b       	sub	r20, r24
    47c6:	59 0b       	sbc	r21, r25
    47c8:	ca 01       	movw	r24, r20
    47ca:	9c 01       	movw	r18, r24
    47cc:	40 e0       	ldi	r20, 0x00	; 0
    47ce:	50 e0       	ldi	r21, 0x00	; 0
    47d0:	80 91 20 02 	lds	r24, 0x0220
    47d4:	90 91 21 02 	lds	r25, 0x0221
    47d8:	cc 01       	movw	r24, r24
    47da:	a0 e0       	ldi	r26, 0x00	; 0
    47dc:	b0 e0       	ldi	r27, 0x00	; 0
    47de:	dc 01       	movw	r26, r24
    47e0:	99 27       	eor	r25, r25
    47e2:	88 27       	eor	r24, r24
    47e4:	82 0f       	add	r24, r18
    47e6:	93 1f       	adc	r25, r19
    47e8:	a4 1f       	adc	r26, r20
    47ea:	b5 1f       	adc	r27, r21
    47ec:	8d 8f       	std	Y+29, r24	; 0x1d
    47ee:	9e 8f       	std	Y+30, r25	; 0x1e
    47f0:	af 8f       	std	Y+31, r26	; 0x1f
    47f2:	b8 a3       	std	Y+32, r27	; 0x20
    47f4:	2c c0       	rjmp	.+88     	; 0x484e <ULTSONIC_u8MeasureDistance+0x354>
			}
			else if(ULTSONIC_u16Capture2 < ULTSONIC_u16Capture1)
    47f6:	20 91 1c 02 	lds	r18, 0x021C
    47fa:	30 91 1d 02 	lds	r19, 0x021D
    47fe:	80 91 1a 02 	lds	r24, 0x021A
    4802:	90 91 1b 02 	lds	r25, 0x021B
    4806:	28 17       	cp	r18, r24
    4808:	39 07       	cpc	r19, r25
    480a:	08 f5       	brcc	.+66     	; 0x484e <ULTSONIC_u8MeasureDistance+0x354>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture1 - ULTSONIC_u16Capture2) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    480c:	20 91 1a 02 	lds	r18, 0x021A
    4810:	30 91 1b 02 	lds	r19, 0x021B
    4814:	80 91 1c 02 	lds	r24, 0x021C
    4818:	90 91 1d 02 	lds	r25, 0x021D
    481c:	a9 01       	movw	r20, r18
    481e:	48 1b       	sub	r20, r24
    4820:	59 0b       	sbc	r21, r25
    4822:	ca 01       	movw	r24, r20
    4824:	9c 01       	movw	r18, r24
    4826:	40 e0       	ldi	r20, 0x00	; 0
    4828:	50 e0       	ldi	r21, 0x00	; 0
    482a:	80 91 20 02 	lds	r24, 0x0220
    482e:	90 91 21 02 	lds	r25, 0x0221
    4832:	cc 01       	movw	r24, r24
    4834:	a0 e0       	ldi	r26, 0x00	; 0
    4836:	b0 e0       	ldi	r27, 0x00	; 0
    4838:	dc 01       	movw	r26, r24
    483a:	99 27       	eor	r25, r25
    483c:	88 27       	eor	r24, r24
    483e:	82 0f       	add	r24, r18
    4840:	93 1f       	adc	r25, r19
    4842:	a4 1f       	adc	r26, r20
    4844:	b5 1f       	adc	r27, r21
    4846:	8d 8f       	std	Y+29, r24	; 0x1d
    4848:	9e 8f       	std	Y+30, r25	; 0x1e
    484a:	af 8f       	std	Y+31, r26	; 0x1f
    484c:	b8 a3       	std	Y+32, r27	; 0x20
			}
		}

		/*Measure Distance using Echo Time*/
		*Copy_u16Distance = (((f32) Local_u32EchoTime / 2.0) * (34.0 / 1000.0));
    484e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4850:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4852:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4854:	98 a1       	ldd	r25, Y+32	; 0x20
    4856:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	bc 01       	movw	r22, r24
    4860:	cd 01       	movw	r24, r26
    4862:	20 e0       	ldi	r18, 0x00	; 0
    4864:	30 e0       	ldi	r19, 0x00	; 0
    4866:	40 e0       	ldi	r20, 0x00	; 0
    4868:	50 e4       	ldi	r21, 0x40	; 64
    486a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	bc 01       	movw	r22, r24
    4874:	cd 01       	movw	r24, r26
    4876:	26 e9       	ldi	r18, 0x96	; 150
    4878:	33 e4       	ldi	r19, 0x43	; 67
    487a:	4b e0       	ldi	r20, 0x0B	; 11
    487c:	5d e3       	ldi	r21, 0x3D	; 61
    487e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22
    4886:	bc 01       	movw	r22, r24
    4888:	cd 01       	movw	r24, r26
    488a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	e9 a5       	ldd	r30, Y+41	; 0x29
    4894:	fa a5       	ldd	r31, Y+42	; 0x2a
    4896:	91 83       	std	Z+1, r25	; 0x01
    4898:	80 83       	st	Z, r24

		/*Reset the global variables*/
		ULTSONIC_u16Capture1 = 0u;
    489a:	10 92 1b 02 	sts	0x021B, r1
    489e:	10 92 1a 02 	sts	0x021A, r1
		ULTSONIC_u16Capture2 = 0u;
    48a2:	10 92 1d 02 	sts	0x021D, r1
    48a6:	10 92 1c 02 	sts	0x021C, r1
		ULTSONIC_u16OvfCounter = 0u;
    48aa:	10 92 1f 02 	sts	0x021F, r1
    48ae:	10 92 1e 02 	sts	0x021E, r1
		ULTSONIC_u16EchoOvfCounter = 0u;
    48b2:	10 92 21 02 	sts	0x0221, r1
    48b6:	10 92 20 02 	sts	0x0220, r1
    48ba:	02 c0       	rjmp	.+4      	; 0x48c0 <ULTSONIC_u8MeasureDistance+0x3c6>
	}
	else
	{
		Local_u8ErrorState = NOK;
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	8a a3       	std	Y+34, r24	; 0x22
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    48c0:	8a a1       	ldd	r24, Y+34	; 0x22
}
    48c2:	aa 96       	adiw	r28, 0x2a	; 42
    48c4:	0f b6       	in	r0, 0x3f	; 63
    48c6:	f8 94       	cli
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	0f be       	out	0x3f, r0	; 63
    48cc:	cd bf       	out	0x3d, r28	; 61
    48ce:	cf 91       	pop	r28
    48d0:	df 91       	pop	r29
    48d2:	08 95       	ret

000048d4 <ULTSONIC_voidCaptureISR>:

/*Input Capture ISR*/
static void ULTSONIC_voidCaptureISR(void)
{
    48d4:	df 93       	push	r29
    48d6:	cf 93       	push	r28
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;

	Local_u8Counter++;
    48dc:	80 91 22 02 	lds	r24, 0x0222
    48e0:	8f 5f       	subi	r24, 0xFF	; 255
    48e2:	80 93 22 02 	sts	0x0222, r24

	if(Local_u8Counter == 1u)
    48e6:	80 91 22 02 	lds	r24, 0x0222
    48ea:	81 30       	cpi	r24, 0x01	; 1
    48ec:	69 f4       	brne	.+26     	; 0x4908 <ULTSONIC_voidCaptureISR+0x34>
	{
		/*Enable Overflow interrupt of timer1*/
		TIMERS_u8IntEnable(TIMER1_OVF);
    48ee:	82 e0       	ldi	r24, 0x02	; 2
    48f0:	0e 94 87 1b 	call	0x370e	; 0x370e <TIMERS_u8IntEnable>
		ULTSONIC_u16Capture1 = TIMER1_u16GetInputCaptValue();
    48f4:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <TIMER1_u16GetInputCaptValue>
    48f8:	90 93 1b 02 	sts	0x021B, r25
    48fc:	80 93 1a 02 	sts	0x021A, r24
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_FALLING_EDGE);
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <TIMER1_u8SetInputCaptTriggerSrc>
    4906:	14 c0       	rjmp	.+40     	; 0x4930 <ULTSONIC_voidCaptureISR+0x5c>
	}
	else if(Local_u8Counter == 2u)
    4908:	80 91 22 02 	lds	r24, 0x0222
    490c:	82 30       	cpi	r24, 0x02	; 2
    490e:	81 f4       	brne	.+32     	; 0x4930 <ULTSONIC_voidCaptureISR+0x5c>
	{
		ULTSONIC_u16Capture2 = TIMER1_u16GetInputCaptValue();
    4910:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <TIMER1_u16GetInputCaptValue>
    4914:	90 93 1d 02 	sts	0x021D, r25
    4918:	80 93 1c 02 	sts	0x021C, r24
		ULTSONIC_u16EchoOvfCounter = ULTSONIC_u16OvfCounter;
    491c:	80 91 1e 02 	lds	r24, 0x021E
    4920:	90 91 1f 02 	lds	r25, 0x021F
    4924:	90 93 21 02 	sts	0x0221, r25
    4928:	80 93 20 02 	sts	0x0220, r24
		Local_u8Counter = 0;
    492c:	10 92 22 02 	sts	0x0222, r1
	}
}
    4930:	cf 91       	pop	r28
    4932:	df 91       	pop	r29
    4934:	08 95       	ret

00004936 <ULTSONIC_voidOvfISR>:

/*Overflow ISR*/
static void ULTSONIC_voidOvfISR(void)
{
    4936:	df 93       	push	r29
    4938:	cf 93       	push	r28
    493a:	cd b7       	in	r28, 0x3d	; 61
    493c:	de b7       	in	r29, 0x3e	; 62

	ULTSONIC_u16OvfCounter++;
    493e:	80 91 1e 02 	lds	r24, 0x021E
    4942:	90 91 1f 02 	lds	r25, 0x021F
    4946:	01 96       	adiw	r24, 0x01	; 1
    4948:	90 93 1f 02 	sts	0x021F, r25
    494c:	80 93 1e 02 	sts	0x021E, r24
}
    4950:	cf 91       	pop	r28
    4952:	df 91       	pop	r29
    4954:	08 95       	ret

00004956 <main>:
 * 					4- Connect Buzzer pin with D7.
 * */

/*It is the main*/
void main(void)
{
    4956:	af 92       	push	r10
    4958:	bf 92       	push	r11
    495a:	cf 92       	push	r12
    495c:	df 92       	push	r13
    495e:	ef 92       	push	r14
    4960:	ff 92       	push	r15
    4962:	0f 93       	push	r16
    4964:	1f 93       	push	r17
    4966:	df 93       	push	r29
    4968:	cf 93       	push	r28
    496a:	cd b7       	in	r28, 0x3d	; 61
    496c:	de b7       	in	r29, 0x3e	; 62
    496e:	a6 97       	sbiw	r28, 0x26	; 38
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	de bf       	out	0x3e, r29	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	cd bf       	out	0x3d, r28	; 61
	/*Initialize needed peripherals*/
	PORT_voidInit();
    497a:	0e 94 ef 14 	call	0x29de	; 0x29de <PORT_voidInit>
	USART_voidInit();
    497e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <USART_voidInit>
	ADC_voidInit();
    4982:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>
	CLCD_voidInit();
    4986:	0e 94 36 0a 	call	0x146c	; 0x146c <CLCD_voidInit>

	/*Enable Global Interrupt*/
	GIE_voidEnable();
    498a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <GIE_voidEnable>

	/*Initialize Timer 0*/
	TIMER0_2_CFG_t Local_stTimer0;
	Local_stTimer0.ClkSelect = TIMER0_u8SYS_CLK_BY_8;
    498e:	82 e0       	ldi	r24, 0x02	; 2
    4990:	8e 8f       	std	Y+30, r24	; 0x1e
	Local_stTimer0.OCMode = OC_DISCONNECTED;
    4992:	18 a2       	std	Y+32, r1	; 0x20
	Local_stTimer0.WGM = CTC;
    4994:	82 e0       	ldi	r24, 0x02	; 2
    4996:	8f 8f       	std	Y+31, r24	; 0x1f
	TIMER0_u8Init(&Local_stTimer0);
    4998:	ce 01       	movw	r24, r28
    499a:	4e 96       	adiw	r24, 0x1e	; 30
    499c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <TIMER0_u8Init>
	TIMER0_voidSetCompValue(200);
    49a0:	88 ec       	ldi	r24, 0xC8	; 200
    49a2:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <TIMER0_voidSetCompValue>
	TIMERS_u8SetCallBack(TIMER0_COMP, Main_voidTimer0ISR);
    49a6:	29 e9       	ldi	r18, 0x99	; 153
    49a8:	37 e2       	ldi	r19, 0x27	; 39
    49aa:	81 e0       	ldi	r24, 0x01	; 1
    49ac:	b9 01       	movw	r22, r18
    49ae:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <TIMERS_u8SetCallBack>
	TIMERS_u8IntEnable(TIMER0_COMP);
    49b2:	81 e0       	ldi	r24, 0x01	; 1
    49b4:	0e 94 87 1b 	call	0x370e	; 0x370e <TIMERS_u8IntEnable>

	/*Initialize Timer 2*/
	Local_stTimer2.ClkSelect = TIMER2_u8SYS_CLK_BY_8;
    49b8:	82 e0       	ldi	r24, 0x02	; 2
    49ba:	80 93 2a 02 	sts	0x022A, r24
	Local_stTimer2.WGM = FAST_PWM;
    49be:	83 e0       	ldi	r24, 0x03	; 3
    49c0:	80 93 2b 02 	sts	0x022B, r24
	Local_stTimer2.OCMode = OC_DISCONNECTED;
    49c4:	10 92 2c 02 	sts	0x022C, r1
	TIMER2_u8Init(&Local_stTimer2);
    49c8:	8a e2       	ldi	r24, 0x2A	; 42
    49ca:	92 e0       	ldi	r25, 0x02	; 2
    49cc:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <TIMER2_u8Init>
	TIMERS_u8SetCallBack(TIMER2_COMP, Main_voidTimer2ISR);
    49d0:	29 ee       	ldi	r18, 0xE9	; 233
    49d2:	37 e2       	ldi	r19, 0x27	; 39
    49d4:	87 e0       	ldi	r24, 0x07	; 7
    49d6:	b9 01       	movw	r22, r18
    49d8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <TIMERS_u8SetCallBack>

	/*Initialize Ultrosonic sensor*/
	ULTSONIC_t Local_stUltsonic;
	Local_stUltsonic.TrigPort = MAIN_u8ULTSONIC_TRIG_PORT;
    49dc:	19 a2       	std	Y+33, r1	; 0x21
	Local_stUltsonic.TrigPin = MAIN_u8ULTSONIC_TRIG_PIN;
    49de:	84 e0       	ldi	r24, 0x04	; 4
    49e0:	8a a3       	std	Y+34, r24	; 0x22

	/*Initialize Variables*/
	uint16 Local_u16LDRVoltage = 0u;
    49e2:	1c a2       	std	Y+36, r1	; 0x24
    49e4:	1b a2       	std	Y+35, r1	; 0x23
	uint16 Local_u16Distance = 0u;
    49e6:	1e a2       	std	Y+38, r1	; 0x26
    49e8:	1d a2       	std	Y+37, r1	; 0x25
	uint8 Local_u8LoginState = IGNORED;
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Call Login Function*/
	/*
	 * ID: is any 4 digits number.
	 * Password: is the reverse of that number.
	 */
	Local_u8LoginState = PASSED;
    49ee:	1d 8e       	std	Y+29, r1	; 0x1d

	/*If user passed*/
	if(Local_u8LoginState == PASSED)
    49f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49f2:	88 23       	and	r24, r24
    49f4:	09 f0       	breq	.+2      	; 0x49f8 <main+0xa2>
    49f6:	af c1       	rjmp	.+862    	; 0x4d56 <main+0x400>
	{
		CLCD_u8GoToXY(4, 0);
    49f8:	84 e0       	ldi	r24, 0x04	; 4
    49fa:	60 e0       	ldi	r22, 0x00	; 0
    49fc:	0e 94 ef 0c 	call	0x19de	; 0x19de <CLCD_u8GoToXY>
		CLCD_u8SendString("Welcome");
    4a00:	86 e6       	ldi	r24, 0x66	; 102
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <CLCD_u8SendString>
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	aa e7       	ldi	r26, 0x7A	; 122
    4a0e:	b4 e4       	ldi	r27, 0x44	; 68
    4a10:	89 8f       	std	Y+25, r24	; 0x19
    4a12:	9a 8f       	std	Y+26, r25	; 0x1a
    4a14:	ab 8f       	std	Y+27, r26	; 0x1b
    4a16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a18:	69 8d       	ldd	r22, Y+25	; 0x19
    4a1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	4a ef       	ldi	r20, 0xFA	; 250
    4a26:	54 e4       	ldi	r21, 0x44	; 68
    4a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	8d 8b       	std	Y+21, r24	; 0x15
    4a32:	9e 8b       	std	Y+22, r25	; 0x16
    4a34:	af 8b       	std	Y+23, r26	; 0x17
    4a36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a38:	6d 89       	ldd	r22, Y+21	; 0x15
    4a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	40 e8       	ldi	r20, 0x80	; 128
    4a46:	5f e3       	ldi	r21, 0x3F	; 63
    4a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a4c:	88 23       	and	r24, r24
    4a4e:	2c f4       	brge	.+10     	; 0x4a5a <main+0x104>
		__ticks = 1;
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	9c 8b       	std	Y+20, r25	; 0x14
    4a56:	8b 8b       	std	Y+19, r24	; 0x13
    4a58:	3f c0       	rjmp	.+126    	; 0x4ad8 <main+0x182>
	else if (__tmp > 65535)
    4a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    4a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    4a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a60:	98 8d       	ldd	r25, Y+24	; 0x18
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	3f ef       	ldi	r19, 0xFF	; 255
    4a66:	4f e7       	ldi	r20, 0x7F	; 127
    4a68:	57 e4       	ldi	r21, 0x47	; 71
    4a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a6e:	18 16       	cp	r1, r24
    4a70:	4c f5       	brge	.+82     	; 0x4ac4 <main+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a72:	69 8d       	ldd	r22, Y+25	; 0x19
    4a74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e2       	ldi	r20, 0x20	; 32
    4a80:	51 e4       	ldi	r21, 0x41	; 65
    4a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a86:	dc 01       	movw	r26, r24
    4a88:	cb 01       	movw	r24, r22
    4a8a:	bc 01       	movw	r22, r24
    4a8c:	cd 01       	movw	r24, r26
    4a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	9c 8b       	std	Y+20, r25	; 0x14
    4a98:	8b 8b       	std	Y+19, r24	; 0x13
    4a9a:	0f c0       	rjmp	.+30     	; 0x4aba <main+0x164>
    4a9c:	88 ec       	ldi	r24, 0xC8	; 200
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	9a 8b       	std	Y+18, r25	; 0x12
    4aa2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4aa4:	89 89       	ldd	r24, Y+17	; 0x11
    4aa6:	9a 89       	ldd	r25, Y+18	; 0x12
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	f1 f7       	brne	.-4      	; 0x4aa8 <main+0x152>
    4aac:	9a 8b       	std	Y+18, r25	; 0x12
    4aae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ab4:	01 97       	sbiw	r24, 0x01	; 1
    4ab6:	9c 8b       	std	Y+20, r25	; 0x14
    4ab8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aba:	8b 89       	ldd	r24, Y+19	; 0x13
    4abc:	9c 89       	ldd	r25, Y+20	; 0x14
    4abe:	00 97       	sbiw	r24, 0x00	; 0
    4ac0:	69 f7       	brne	.-38     	; 0x4a9c <main+0x146>
    4ac2:	14 c0       	rjmp	.+40     	; 0x4aec <main+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    4aca:	98 8d       	ldd	r25, Y+24	; 0x18
    4acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad0:	dc 01       	movw	r26, r24
    4ad2:	cb 01       	movw	r24, r22
    4ad4:	9c 8b       	std	Y+20, r25	; 0x14
    4ad6:	8b 8b       	std	Y+19, r24	; 0x13
    4ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    4ada:	9c 89       	ldd	r25, Y+20	; 0x14
    4adc:	98 8b       	std	Y+16, r25	; 0x10
    4ade:	8f 87       	std	Y+15, r24	; 0x0f
    4ae0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ae2:	98 89       	ldd	r25, Y+16	; 0x10
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	f1 f7       	brne	.-4      	; 0x4ae4 <main+0x18e>
    4ae8:	98 8b       	std	Y+16, r25	; 0x10
    4aea:	8f 87       	std	Y+15, r24	; 0x0f
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	a8 ec       	ldi	r26, 0xC8	; 200
    4af2:	b2 e4       	ldi	r27, 0x42	; 66
    4af4:	8b 87       	std	Y+11, r24	; 0x0b
    4af6:	9c 87       	std	Y+12, r25	; 0x0c
    4af8:	ad 87       	std	Y+13, r26	; 0x0d
    4afa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b04:	20 e0       	ldi	r18, 0x00	; 0
    4b06:	30 e0       	ldi	r19, 0x00	; 0
    4b08:	4a ef       	ldi	r20, 0xFA	; 250
    4b0a:	54 e4       	ldi	r21, 0x44	; 68
    4b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b10:	dc 01       	movw	r26, r24
    4b12:	cb 01       	movw	r24, r22
    4b14:	8f 83       	std	Y+7, r24	; 0x07
    4b16:	98 87       	std	Y+8, r25	; 0x08
    4b18:	a9 87       	std	Y+9, r26	; 0x09
    4b1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b1e:	78 85       	ldd	r23, Y+8	; 0x08
    4b20:	89 85       	ldd	r24, Y+9	; 0x09
    4b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b24:	20 e0       	ldi	r18, 0x00	; 0
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	40 e8       	ldi	r20, 0x80	; 128
    4b2a:	5f e3       	ldi	r21, 0x3F	; 63
    4b2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b30:	88 23       	and	r24, r24
    4b32:	2c f4       	brge	.+10     	; 0x4b3e <main+0x1e8>
		__ticks = 1;
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	9e 83       	std	Y+6, r25	; 0x06
    4b3a:	8d 83       	std	Y+5, r24	; 0x05
    4b3c:	3f c0       	rjmp	.+126    	; 0x4bbc <main+0x266>
	else if (__tmp > 65535)
    4b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    4b40:	78 85       	ldd	r23, Y+8	; 0x08
    4b42:	89 85       	ldd	r24, Y+9	; 0x09
    4b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b46:	20 e0       	ldi	r18, 0x00	; 0
    4b48:	3f ef       	ldi	r19, 0xFF	; 255
    4b4a:	4f e7       	ldi	r20, 0x7F	; 127
    4b4c:	57 e4       	ldi	r21, 0x47	; 71
    4b4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b52:	18 16       	cp	r1, r24
    4b54:	4c f5       	brge	.+82     	; 0x4ba8 <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b5e:	20 e0       	ldi	r18, 0x00	; 0
    4b60:	30 e0       	ldi	r19, 0x00	; 0
    4b62:	40 e2       	ldi	r20, 0x20	; 32
    4b64:	51 e4       	ldi	r21, 0x41	; 65
    4b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	cb 01       	movw	r24, r22
    4b6e:	bc 01       	movw	r22, r24
    4b70:	cd 01       	movw	r24, r26
    4b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b76:	dc 01       	movw	r26, r24
    4b78:	cb 01       	movw	r24, r22
    4b7a:	9e 83       	std	Y+6, r25	; 0x06
    4b7c:	8d 83       	std	Y+5, r24	; 0x05
    4b7e:	0f c0       	rjmp	.+30     	; 0x4b9e <main+0x248>
    4b80:	88 ec       	ldi	r24, 0xC8	; 200
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	9c 83       	std	Y+4, r25	; 0x04
    4b86:	8b 83       	std	Y+3, r24	; 0x03
    4b88:	8b 81       	ldd	r24, Y+3	; 0x03
    4b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b8c:	01 97       	sbiw	r24, 0x01	; 1
    4b8e:	f1 f7       	brne	.-4      	; 0x4b8c <main+0x236>
    4b90:	9c 83       	std	Y+4, r25	; 0x04
    4b92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b94:	8d 81       	ldd	r24, Y+5	; 0x05
    4b96:	9e 81       	ldd	r25, Y+6	; 0x06
    4b98:	01 97       	sbiw	r24, 0x01	; 1
    4b9a:	9e 83       	std	Y+6, r25	; 0x06
    4b9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ba2:	00 97       	sbiw	r24, 0x00	; 0
    4ba4:	69 f7       	brne	.-38     	; 0x4b80 <main+0x22a>
    4ba6:	14 c0       	rjmp	.+40     	; 0x4bd0 <main+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    4baa:	78 85       	ldd	r23, Y+8	; 0x08
    4bac:	89 85       	ldd	r24, Y+9	; 0x09
    4bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb4:	dc 01       	movw	r26, r24
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	9e 83       	std	Y+6, r25	; 0x06
    4bba:	8d 83       	std	Y+5, r24	; 0x05
    4bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc0:	9a 83       	std	Y+2, r25	; 0x02
    4bc2:	89 83       	std	Y+1, r24	; 0x01
    4bc4:	89 81       	ldd	r24, Y+1	; 0x01
    4bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc8:	01 97       	sbiw	r24, 0x01	; 1
    4bca:	f1 f7       	brne	.-4      	; 0x4bc8 <main+0x272>
    4bcc:	9a 83       	std	Y+2, r25	; 0x02
    4bce:	89 83       	std	Y+1, r24	; 0x01

		while(1)
		{
			/*Clear Display*/
			_delay_ms(100);
			CLCD_voidClearDisplay();
    4bd0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <CLCD_voidClearDisplay>

			/*Receive Character message from uart with asynchronous function*/
			USART_u8ReceiveBufferAsynch(&Main_u8ReceivedData, 1, Main_voidReceiveNotificFunc);
    4bd4:	85 e2       	ldi	r24, 0x25	; 37
    4bd6:	92 e0       	ldi	r25, 0x02	; 2
    4bd8:	2c ea       	ldi	r18, 0xAC	; 172
    4bda:	36 e2       	ldi	r19, 0x26	; 38
    4bdc:	61 e0       	ldi	r22, 0x01	; 1
    4bde:	a9 01       	movw	r20, r18
    4be0:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <USART_u8ReceiveBufferAsynch>

			/*If LDR is opened, manipulate its reading to the light intensity*/
			if(Main_u8LdrFlag == OPENED)
    4be4:	80 91 d1 01 	lds	r24, 0x01D1
    4be8:	88 23       	and	r24, r24
    4bea:	09 f0       	breq	.+2      	; 0x4bee <main+0x298>
    4bec:	4a c0       	rjmp	.+148    	; 0x4c82 <main+0x32c>
			{
				LDR_u8GetAnalogVolt(MAIN_u8LDR_CH, &Local_u16LDRVoltage);
    4bee:	9e 01       	movw	r18, r28
    4bf0:	2d 5d       	subi	r18, 0xDD	; 221
    4bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf4:	80 e0       	ldi	r24, 0x00	; 0
    4bf6:	b9 01       	movw	r22, r18
    4bf8:	0e 94 1e 13 	call	0x263c	; 0x263c <LDR_u8GetAnalogVolt>
				Main_u8LightIntensity = LIBRARY_s32Mapping(150u, 4850u, 100u, 1u, Local_u16LDRVoltage);
    4bfc:	8b a1       	ldd	r24, Y+35	; 0x23
    4bfe:	9c a1       	ldd	r25, Y+36	; 0x24
    4c00:	cc 01       	movw	r24, r24
    4c02:	a0 e0       	ldi	r26, 0x00	; 0
    4c04:	b0 e0       	ldi	r27, 0x00	; 0
    4c06:	00 d0       	rcall	.+0      	; 0x4c08 <main+0x2b2>
    4c08:	00 d0       	rcall	.+0      	; 0x4c0a <main+0x2b4>
    4c0a:	ed b7       	in	r30, 0x3d	; 61
    4c0c:	fe b7       	in	r31, 0x3e	; 62
    4c0e:	31 96       	adiw	r30, 0x01	; 1
    4c10:	80 83       	st	Z, r24
    4c12:	91 83       	std	Z+1, r25	; 0x01
    4c14:	a2 83       	std	Z+2, r26	; 0x02
    4c16:	b3 83       	std	Z+3, r27	; 0x03
    4c18:	66 e9       	ldi	r22, 0x96	; 150
    4c1a:	70 e0       	ldi	r23, 0x00	; 0
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	22 ef       	ldi	r18, 0xF2	; 242
    4c22:	32 e1       	ldi	r19, 0x12	; 18
    4c24:	40 e0       	ldi	r20, 0x00	; 0
    4c26:	50 e0       	ldi	r21, 0x00	; 0
    4c28:	0f 2e       	mov	r0, r31
    4c2a:	f4 e6       	ldi	r31, 0x64	; 100
    4c2c:	ef 2e       	mov	r14, r31
    4c2e:	f0 e0       	ldi	r31, 0x00	; 0
    4c30:	ff 2e       	mov	r15, r31
    4c32:	f0 e0       	ldi	r31, 0x00	; 0
    4c34:	0f 2f       	mov	r16, r31
    4c36:	f0 e0       	ldi	r31, 0x00	; 0
    4c38:	1f 2f       	mov	r17, r31
    4c3a:	f0 2d       	mov	r31, r0
    4c3c:	aa 24       	eor	r10, r10
    4c3e:	bb 24       	eor	r11, r11
    4c40:	65 01       	movw	r12, r10
    4c42:	a3 94       	inc	r10
    4c44:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LIBRARY_s32Mapping>
    4c48:	0f 90       	pop	r0
    4c4a:	0f 90       	pop	r0
    4c4c:	0f 90       	pop	r0
    4c4e:	0f 90       	pop	r0
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	80 93 23 02 	sts	0x0223, r24
				CLCD_u8GoToXY(0, 0);
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	60 e0       	ldi	r22, 0x00	; 0
    4c5c:	0e 94 ef 0c 	call	0x19de	; 0x19de <CLCD_u8GoToXY>
				CLCD_u8SendString("Voltage: ");
    4c60:	8e e6       	ldi	r24, 0x6E	; 110
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <CLCD_u8SendString>
				CLCD_voidSendDecimalNumber(Local_u16LDRVoltage);
    4c68:	8b a1       	ldd	r24, Y+35	; 0x23
    4c6a:	9c a1       	ldd	r25, Y+36	; 0x24
    4c6c:	cc 01       	movw	r24, r24
    4c6e:	a0 e0       	ldi	r26, 0x00	; 0
    4c70:	b0 e0       	ldi	r27, 0x00	; 0
    4c72:	bc 01       	movw	r22, r24
    4c74:	cd 01       	movw	r24, r26
    4c76:	0e 94 17 0b 	call	0x162e	; 0x162e <CLCD_voidSendDecimalNumber>
				CLCD_u8SendString(" mv");
    4c7a:	88 e7       	ldi	r24, 0x78	; 120
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <CLCD_u8SendString>
			}

			/*If Ultrasonic sensor is opened, manipulate its reading to the motor speed*/
			if(Main_u8UltraFlag == OPENED)
    4c82:	80 91 d0 01 	lds	r24, 0x01D0
    4c86:	88 23       	and	r24, r24
    4c88:	09 f0       	breq	.+2      	; 0x4c8c <main+0x336>
    4c8a:	54 c0       	rjmp	.+168    	; 0x4d34 <main+0x3de>
			{
				ULTSONIC_u8MeasureDistance(&Local_stUltsonic, &Local_u16Distance);
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	81 96       	adiw	r24, 0x21	; 33
    4c90:	9e 01       	movw	r18, r28
    4c92:	2b 5d       	subi	r18, 0xDB	; 219
    4c94:	3f 4f       	sbci	r19, 0xFF	; 255
    4c96:	b9 01       	movw	r22, r18
    4c98:	0e 94 7d 22 	call	0x44fa	; 0x44fa <ULTSONIC_u8MeasureDistance>
				if(Local_u16Distance > 30)
    4c9c:	8d a1       	ldd	r24, Y+37	; 0x25
    4c9e:	9e a1       	ldd	r25, Y+38	; 0x26
    4ca0:	8f 31       	cpi	r24, 0x1F	; 31
    4ca2:	91 05       	cpc	r25, r1
    4ca4:	20 f0       	brcs	.+8      	; 0x4cae <main+0x358>
				{
					Main_u8DcMotorSpeed = 100u;
    4ca6:	84 e6       	ldi	r24, 0x64	; 100
    4ca8:	80 93 24 02 	sts	0x0224, r24
    4cac:	2e c0       	rjmp	.+92     	; 0x4d0a <main+0x3b4>
				}
				else
				{
					Main_u8DcMotorSpeed = LIBRARY_s32Mapping(0u, 30u, 1u, 100u, Local_u16Distance);
    4cae:	8d a1       	ldd	r24, Y+37	; 0x25
    4cb0:	9e a1       	ldd	r25, Y+38	; 0x26
    4cb2:	cc 01       	movw	r24, r24
    4cb4:	a0 e0       	ldi	r26, 0x00	; 0
    4cb6:	b0 e0       	ldi	r27, 0x00	; 0
    4cb8:	00 d0       	rcall	.+0      	; 0x4cba <main+0x364>
    4cba:	00 d0       	rcall	.+0      	; 0x4cbc <main+0x366>
    4cbc:	ed b7       	in	r30, 0x3d	; 61
    4cbe:	fe b7       	in	r31, 0x3e	; 62
    4cc0:	31 96       	adiw	r30, 0x01	; 1
    4cc2:	80 83       	st	Z, r24
    4cc4:	91 83       	std	Z+1, r25	; 0x01
    4cc6:	a2 83       	std	Z+2, r26	; 0x02
    4cc8:	b3 83       	std	Z+3, r27	; 0x03
    4cca:	60 e0       	ldi	r22, 0x00	; 0
    4ccc:	70 e0       	ldi	r23, 0x00	; 0
    4cce:	80 e0       	ldi	r24, 0x00	; 0
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	2e e1       	ldi	r18, 0x1E	; 30
    4cd4:	30 e0       	ldi	r19, 0x00	; 0
    4cd6:	40 e0       	ldi	r20, 0x00	; 0
    4cd8:	50 e0       	ldi	r21, 0x00	; 0
    4cda:	ee 24       	eor	r14, r14
    4cdc:	ff 24       	eor	r15, r15
    4cde:	87 01       	movw	r16, r14
    4ce0:	e3 94       	inc	r14
    4ce2:	0f 2e       	mov	r0, r31
    4ce4:	f4 e6       	ldi	r31, 0x64	; 100
    4ce6:	af 2e       	mov	r10, r31
    4ce8:	f0 e0       	ldi	r31, 0x00	; 0
    4cea:	bf 2e       	mov	r11, r31
    4cec:	f0 e0       	ldi	r31, 0x00	; 0
    4cee:	cf 2e       	mov	r12, r31
    4cf0:	f0 e0       	ldi	r31, 0x00	; 0
    4cf2:	df 2e       	mov	r13, r31
    4cf4:	f0 2d       	mov	r31, r0
    4cf6:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LIBRARY_s32Mapping>
    4cfa:	0f 90       	pop	r0
    4cfc:	0f 90       	pop	r0
    4cfe:	0f 90       	pop	r0
    4d00:	0f 90       	pop	r0
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	80 93 24 02 	sts	0x0224, r24
				}
				CLCD_u8GoToXY(0, 1);
    4d0a:	80 e0       	ldi	r24, 0x00	; 0
    4d0c:	61 e0       	ldi	r22, 0x01	; 1
    4d0e:	0e 94 ef 0c 	call	0x19de	; 0x19de <CLCD_u8GoToXY>
				CLCD_u8SendString("Distance: ");
    4d12:	8c e7       	ldi	r24, 0x7C	; 124
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <CLCD_u8SendString>
				CLCD_voidSendDecimalNumber(Local_u16Distance);
    4d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    4d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    4d1e:	cc 01       	movw	r24, r24
    4d20:	a0 e0       	ldi	r26, 0x00	; 0
    4d22:	b0 e0       	ldi	r27, 0x00	; 0
    4d24:	bc 01       	movw	r22, r24
    4d26:	cd 01       	movw	r24, r26
    4d28:	0e 94 17 0b 	call	0x162e	; 0x162e <CLCD_voidSendDecimalNumber>
				CLCD_u8SendString(" cm");
    4d2c:	87 e8       	ldi	r24, 0x87	; 135
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <CLCD_u8SendString>
			}

			/*If the user send an alarm, turn on timer 2 to send control the buzzer*/
			if(Main_u8AlarmFlag == OPENED)
    4d34:	80 91 d2 01 	lds	r24, 0x01D2
    4d38:	88 23       	and	r24, r24
    4d3a:	09 f0       	breq	.+2      	; 0x4d3e <main+0x3e8>
    4d3c:	d7 ce       	rjmp	.-594    	; 0x4aec <main+0x196>
			{
				TIMER2_u8SetCompOutMode(&Local_stTimer2, NON_INVERTED_PWM);
    4d3e:	8a e2       	ldi	r24, 0x2A	; 42
    4d40:	92 e0       	ldi	r25, 0x02	; 2
    4d42:	64 e0       	ldi	r22, 0x04	; 4
    4d44:	0e 94 9b 1a 	call	0x3536	; 0x3536 <TIMER2_u8SetCompOutMode>
				TIMERS_u8IntEnable(TIMER2_COMP);
    4d48:	87 e0       	ldi	r24, 0x07	; 7
    4d4a:	0e 94 87 1b 	call	0x370e	; 0x370e <TIMERS_u8IntEnable>
				Main_u8AlarmFlag = CLOSED;
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	80 93 d2 01 	sts	0x01D2, r24
    4d54:	cb ce       	rjmp	.-618    	; 0x4aec <main+0x196>
    4d56:	ff cf       	rjmp	.-2      	; 0x4d56 <main+0x400>

00004d58 <Main_voidReceiveNotificFunc>:


}

void Main_voidReceiveNotificFunc(void)
{
    4d58:	df 93       	push	r29
    4d5a:	cf 93       	push	r28
    4d5c:	00 d0       	rcall	.+0      	; 0x4d5e <Main_voidReceiveNotificFunc+0x6>
    4d5e:	cd b7       	in	r28, 0x3d	; 61
    4d60:	de b7       	in	r29, 0x3e	; 62
	switch(Main_u8ReceivedData)
    4d62:	80 91 25 02 	lds	r24, 0x0225
    4d66:	28 2f       	mov	r18, r24
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	3a 83       	std	Y+2, r19	; 0x02
    4d6c:	29 83       	std	Y+1, r18	; 0x01
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	9a 81       	ldd	r25, Y+2	; 0x02
    4d72:	85 33       	cpi	r24, 0x35	; 53
    4d74:	91 05       	cpc	r25, r1
    4d76:	09 f4       	brne	.+2      	; 0x4d7a <Main_voidReceiveNotificFunc+0x22>
    4d78:	4c c0       	rjmp	.+152    	; 0x4e12 <Main_voidReceiveNotificFunc+0xba>
    4d7a:	29 81       	ldd	r18, Y+1	; 0x01
    4d7c:	3a 81       	ldd	r19, Y+2	; 0x02
    4d7e:	26 33       	cpi	r18, 0x36	; 54
    4d80:	31 05       	cpc	r19, r1
    4d82:	dc f4       	brge	.+54     	; 0x4dba <Main_voidReceiveNotificFunc+0x62>
    4d84:	89 81       	ldd	r24, Y+1	; 0x01
    4d86:	9a 81       	ldd	r25, Y+2	; 0x02
    4d88:	82 33       	cpi	r24, 0x32	; 50
    4d8a:	91 05       	cpc	r25, r1
    4d8c:	99 f1       	breq	.+102    	; 0x4df4 <Main_voidReceiveNotificFunc+0x9c>
    4d8e:	29 81       	ldd	r18, Y+1	; 0x01
    4d90:	3a 81       	ldd	r19, Y+2	; 0x02
    4d92:	23 33       	cpi	r18, 0x33	; 51
    4d94:	31 05       	cpc	r19, r1
    4d96:	34 f4       	brge	.+12     	; 0x4da4 <Main_voidReceiveNotificFunc+0x4c>
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9c:	81 33       	cpi	r24, 0x31	; 49
    4d9e:	91 05       	cpc	r25, r1
    4da0:	09 f1       	breq	.+66     	; 0x4de4 <Main_voidReceiveNotificFunc+0x8c>
    4da2:	52 c0       	rjmp	.+164    	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
    4da4:	29 81       	ldd	r18, Y+1	; 0x01
    4da6:	3a 81       	ldd	r19, Y+2	; 0x02
    4da8:	23 33       	cpi	r18, 0x33	; 51
    4daa:	31 05       	cpc	r19, r1
    4dac:	31 f1       	breq	.+76     	; 0x4dfa <Main_voidReceiveNotificFunc+0xa2>
    4dae:	89 81       	ldd	r24, Y+1	; 0x01
    4db0:	9a 81       	ldd	r25, Y+2	; 0x02
    4db2:	84 33       	cpi	r24, 0x34	; 52
    4db4:	91 05       	cpc	r25, r1
    4db6:	49 f1       	breq	.+82     	; 0x4e0a <Main_voidReceiveNotificFunc+0xb2>
    4db8:	47 c0       	rjmp	.+142    	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
    4dba:	29 81       	ldd	r18, Y+1	; 0x01
    4dbc:	3a 81       	ldd	r19, Y+2	; 0x02
    4dbe:	27 33       	cpi	r18, 0x37	; 55
    4dc0:	31 05       	cpc	r19, r1
    4dc2:	a1 f1       	breq	.+104    	; 0x4e2c <Main_voidReceiveNotificFunc+0xd4>
    4dc4:	89 81       	ldd	r24, Y+1	; 0x01
    4dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc8:	87 33       	cpi	r24, 0x37	; 55
    4dca:	91 05       	cpc	r25, r1
    4dcc:	34 f1       	brlt	.+76     	; 0x4e1a <Main_voidReceiveNotificFunc+0xc2>
    4dce:	29 81       	ldd	r18, Y+1	; 0x01
    4dd0:	3a 81       	ldd	r19, Y+2	; 0x02
    4dd2:	28 33       	cpi	r18, 0x38	; 56
    4dd4:	31 05       	cpc	r19, r1
    4dd6:	69 f1       	breq	.+90     	; 0x4e32 <Main_voidReceiveNotificFunc+0xda>
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	9a 81       	ldd	r25, Y+2	; 0x02
    4ddc:	89 33       	cpi	r24, 0x39	; 57
    4dde:	91 05       	cpc	r25, r1
    4de0:	89 f1       	breq	.+98     	; 0x4e44 <Main_voidReceiveNotificFunc+0xec>
    4de2:	32 c0       	rjmp	.+100    	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
	{
	case TURN_ON_LIGHT:
		Main_u8LdrFlag = CLOSED;
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	80 93 d1 01 	sts	0x01D1, r24
		DIO_u8SetPortValue(MAIN_u8LIGHT_PORT, 0xff);
    4dea:	82 e0       	ldi	r24, 0x02	; 2
    4dec:	6f ef       	ldi	r22, 0xFF	; 255
    4dee:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_u8SetPortValue>
    4df2:	2a c0       	rjmp	.+84     	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
		break;
	case CONTROL_LIGHT_INTENSITY:
		Main_u8LdrFlag = OPENED;
    4df4:	10 92 d1 01 	sts	0x01D1, r1
    4df8:	27 c0       	rjmp	.+78     	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
		break;
	case TURN_OFF_LIGHT:
		Main_u8LdrFlag = CLOSED;
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	80 93 d1 01 	sts	0x01D1, r24
		DIO_u8SetPortValue(MAIN_u8LIGHT_PORT, 0x00);
    4e00:	82 e0       	ldi	r24, 0x02	; 2
    4e02:	60 e0       	ldi	r22, 0x00	; 0
    4e04:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_u8SetPortValue>
    4e08:	1f c0       	rjmp	.+62     	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
		break;
	case OPEN_THE_DOOR:
		Main_u8ServoState = MAIN_u8SERVO_OPENED;
    4e0a:	8c e0       	ldi	r24, 0x0C	; 12
    4e0c:	80 93 d3 01 	sts	0x01D3, r24
    4e10:	1b c0       	rjmp	.+54     	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
		break;
	case CLOSE_THE_DOOR:
		Main_u8ServoState = MAIN_u8SERVO_CLOSED;
    4e12:	83 e0       	ldi	r24, 0x03	; 3
    4e14:	80 93 d3 01 	sts	0x01D3, r24
    4e18:	17 c0       	rjmp	.+46     	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
		break;
	case OPEN_THE_FAN:
		Main_u8UltraFlag = CLOSED;
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	80 93 d0 01 	sts	0x01D0, r24
		DIO_u8SetPinValue(MAIN_u8DC_PORT, MAIN_u8DC_PIN, DIO_u8PIN_HIGH);
    4e20:	80 e0       	ldi	r24, 0x00	; 0
    4e22:	65 e0       	ldi	r22, 0x05	; 5
    4e24:	41 e0       	ldi	r20, 0x01	; 1
    4e26:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
    4e2a:	0e c0       	rjmp	.+28     	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
		break;
	case CONTROL_THE_FAN_SPEED:
		Main_u8UltraFlag = OPENED;
    4e2c:	10 92 d0 01 	sts	0x01D0, r1
    4e30:	0b c0       	rjmp	.+22     	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
		break;
	case CLOSE_THE_FAN:
		Main_u8UltraFlag = CLOSED;
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	80 93 d0 01 	sts	0x01D0, r24
		DIO_u8SetPinValue(MAIN_u8DC_PORT, MAIN_u8DC_PIN, DIO_u8PIN_LOW);
    4e38:	80 e0       	ldi	r24, 0x00	; 0
    4e3a:	65 e0       	ldi	r22, 0x05	; 5
    4e3c:	40 e0       	ldi	r20, 0x00	; 0
    4e3e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
    4e42:	02 c0       	rjmp	.+4      	; 0x4e48 <Main_voidReceiveNotificFunc+0xf0>
		break;
	case SEND_ALARM:
		Main_u8AlarmFlag = OPENED;
    4e44:	10 92 d2 01 	sts	0x01D2, r1
		break;
	default:
		break;
	}
}
    4e48:	0f 90       	pop	r0
    4e4a:	0f 90       	pop	r0
    4e4c:	cf 91       	pop	r28
    4e4e:	df 91       	pop	r29
    4e50:	08 95       	ret

00004e52 <Main_voidLogin>:

uint8 Main_voidLogin(void)
{
    4e52:	df 93       	push	r29
    4e54:	cf 93       	push	r28
    4e56:	cd b7       	in	r28, 0x3d	; 61
    4e58:	de b7       	in	r29, 0x3e	; 62
    4e5a:	2c 97       	sbiw	r28, 0x0c	; 12
    4e5c:	0f b6       	in	r0, 0x3f	; 63
    4e5e:	f8 94       	cli
    4e60:	de bf       	out	0x3e, r29	; 62
    4e62:	0f be       	out	0x3f, r0	; 63
    4e64:	cd bf       	out	0x3d, r28	; 61
	/*Define Variables*/
	uint8 Local_u8ErrorFounder;
	uint8 Local_u8Iterator;
	uint8 Local_u8LoginState = IGNORED;
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ID[4];
	uint8 Local_u8Password[4];
	uint8 Local_u8Attempts = 3u;
    4e6a:	83 e0       	ldi	r24, 0x03	; 3
    4e6c:	89 83       	std	Y+1, r24	; 0x01
    4e6e:	53 c0       	rjmp	.+166    	; 0x4f16 <Main_voidLogin+0xc4>

	while(Local_u8Attempts != 0)
	{
		/*Decrement the attempts counter*/
		Local_u8Attempts--;
    4e70:	89 81       	ldd	r24, Y+1	; 0x01
    4e72:	81 50       	subi	r24, 0x01	; 1
    4e74:	89 83       	std	Y+1, r24	; 0x01

		/*Get ID and Password from the user*/
		USART_u8SendBufferSynch("Enter ID: ", 10);
    4e76:	8b e8       	ldi	r24, 0x8B	; 139
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	6a e0       	ldi	r22, 0x0A	; 10
    4e7c:	0e 94 a3 20 	call	0x4146	; 0x4146 <USART_u8SendBufferSynch>
		USART_u8ReceiveBufferSynch(Local_u8ID, 4);
    4e80:	ce 01       	movw	r24, r28
    4e82:	05 96       	adiw	r24, 0x05	; 5
    4e84:	64 e0       	ldi	r22, 0x04	; 4
    4e86:	0e 94 ef 20 	call	0x41de	; 0x41de <USART_u8ReceiveBufferSynch>

		Local_u8ErrorFounder = USART_u8SendBufferSynch("Enter Password: ", 16);
    4e8a:	86 e9       	ldi	r24, 0x96	; 150
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	60 e1       	ldi	r22, 0x10	; 16
    4e90:	0e 94 a3 20 	call	0x4146	; 0x4146 <USART_u8SendBufferSynch>
    4e94:	8c 83       	std	Y+4, r24	; 0x04
		USART_u8ReceiveBufferSynch(Local_u8Password, 4);
    4e96:	ce 01       	movw	r24, r28
    4e98:	09 96       	adiw	r24, 0x09	; 9
    4e9a:	64 e0       	ldi	r22, 0x04	; 4
    4e9c:	0e 94 ef 20 	call	0x41de	; 0x41de <USART_u8ReceiveBufferSynch>

		/*Check ID and Password Received*/
		for(Local_u8Iterator = 0; Local_u8Iterator < 4; Local_u8Iterator++)
    4ea0:	1b 82       	std	Y+3, r1	; 0x03
    4ea2:	1d c0       	rjmp	.+58     	; 0x4ede <Main_voidLogin+0x8c>
		{
			if(Local_u8ID[Local_u8Iterator] != Local_u8Password[3u - Local_u8Iterator])
    4ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea6:	28 2f       	mov	r18, r24
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	ce 01       	movw	r24, r28
    4eac:	05 96       	adiw	r24, 0x05	; 5
    4eae:	fc 01       	movw	r30, r24
    4eb0:	e2 0f       	add	r30, r18
    4eb2:	f3 1f       	adc	r31, r19
    4eb4:	40 81       	ld	r20, Z
    4eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4eb8:	28 2f       	mov	r18, r24
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	83 e0       	ldi	r24, 0x03	; 3
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	bc 01       	movw	r22, r24
    4ec2:	62 1b       	sub	r22, r18
    4ec4:	73 0b       	sbc	r23, r19
    4ec6:	9b 01       	movw	r18, r22
    4ec8:	ce 01       	movw	r24, r28
    4eca:	09 96       	adiw	r24, 0x09	; 9
    4ecc:	fc 01       	movw	r30, r24
    4ece:	e2 0f       	add	r30, r18
    4ed0:	f3 1f       	adc	r31, r19
    4ed2:	80 81       	ld	r24, Z
    4ed4:	48 17       	cp	r20, r24
    4ed6:	31 f4       	brne	.+12     	; 0x4ee4 <Main_voidLogin+0x92>

		Local_u8ErrorFounder = USART_u8SendBufferSynch("Enter Password: ", 16);
		USART_u8ReceiveBufferSynch(Local_u8Password, 4);

		/*Check ID and Password Received*/
		for(Local_u8Iterator = 0; Local_u8Iterator < 4; Local_u8Iterator++)
    4ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eda:	8f 5f       	subi	r24, 0xFF	; 255
    4edc:	8b 83       	std	Y+3, r24	; 0x03
    4ede:	8b 81       	ldd	r24, Y+3	; 0x03
    4ee0:	84 30       	cpi	r24, 0x04	; 4
    4ee2:	00 f3       	brcs	.-64     	; 0x4ea4 <Main_voidLogin+0x52>
				break;
			}
		}

		/*Set the login state*/
		if(Local_u8Iterator == 4)
    4ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ee6:	84 30       	cpi	r24, 0x04	; 4
    4ee8:	39 f4       	brne	.+14     	; 0x4ef8 <Main_voidLogin+0xa6>
		{
			USART_u8SendBufferSynch("Passed", 6);
    4eea:	87 ea       	ldi	r24, 0xA7	; 167
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	66 e0       	ldi	r22, 0x06	; 6
    4ef0:	0e 94 a3 20 	call	0x4146	; 0x4146 <USART_u8SendBufferSynch>
			Local_u8LoginState = PASSED;
    4ef4:	1a 82       	std	Y+2, r1	; 0x02
    4ef6:	13 c0       	rjmp	.+38     	; 0x4f1e <Main_voidLogin+0xcc>
			break;
		}
		else
		{
			USART_u8SendBufferSynch("Ignored, ", 9);
    4ef8:	8e ea       	ldi	r24, 0xAE	; 174
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	69 e0       	ldi	r22, 0x09	; 9
    4efe:	0e 94 a3 20 	call	0x4146	; 0x4146 <USART_u8SendBufferSynch>
			USART_u8Send(Local_u8Attempts);
    4f02:	89 81       	ldd	r24, Y+1	; 0x01
    4f04:	88 2f       	mov	r24, r24
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <USART_u8Send>
			USART_u8SendBufferSynch(" Attempts Left!", 15);
    4f0c:	88 eb       	ldi	r24, 0xB8	; 184
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	6f e0       	ldi	r22, 0x0F	; 15
    4f12:	0e 94 a3 20 	call	0x4146	; 0x4146 <USART_u8SendBufferSynch>
	uint8 Local_u8LoginState = IGNORED;
	uint8 Local_u8ID[4];
	uint8 Local_u8Password[4];
	uint8 Local_u8Attempts = 3u;

	while(Local_u8Attempts != 0)
    4f16:	89 81       	ldd	r24, Y+1	; 0x01
    4f18:	88 23       	and	r24, r24
    4f1a:	09 f0       	breq	.+2      	; 0x4f1e <Main_voidLogin+0xcc>
    4f1c:	a9 cf       	rjmp	.-174    	; 0x4e70 <Main_voidLogin+0x1e>
		}

	}

	/*Return Login State*/
	return Local_u8LoginState;
    4f1e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4f20:	2c 96       	adiw	r28, 0x0c	; 12
    4f22:	0f b6       	in	r0, 0x3f	; 63
    4f24:	f8 94       	cli
    4f26:	de bf       	out	0x3e, r29	; 62
    4f28:	0f be       	out	0x3f, r0	; 63
    4f2a:	cd bf       	out	0x3d, r28	; 61
    4f2c:	cf 91       	pop	r28
    4f2e:	df 91       	pop	r29
    4f30:	08 95       	ret

00004f32 <Main_voidTimer0ISR>:


void Main_voidTimer0ISR(void)
{
    4f32:	df 93       	push	r29
    4f34:	cf 93       	push	r28
    4f36:	cd b7       	in	r28, 0x3d	; 61
    4f38:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;
	Local_u8Counter++;
    4f3a:	80 91 26 02 	lds	r24, 0x0226
    4f3e:	8f 5f       	subi	r24, 0xFF	; 255
    4f40:	80 93 26 02 	sts	0x0226, r24

	if(Local_u8Counter == Main_u8ServoState)
    4f44:	90 91 26 02 	lds	r25, 0x0226
    4f48:	80 91 d3 01 	lds	r24, 0x01D3
    4f4c:	98 17       	cp	r25, r24
    4f4e:	29 f4       	brne	.+10     	; 0x4f5a <Main_voidTimer0ISR+0x28>
	{
		DIO_u8SetPinValue(MAIN_u8SERVO_PORT, MAIN_u8SERVO_PIN, DIO_u8PIN_LOW);
    4f50:	80 e0       	ldi	r24, 0x00	; 0
    4f52:	66 e0       	ldi	r22, 0x06	; 6
    4f54:	40 e0       	ldi	r20, 0x00	; 0
    4f56:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
	}
	if((Local_u8Counter == Main_u8DcMotorSpeed) && (Main_u8UltraFlag == OPENED))
    4f5a:	90 91 26 02 	lds	r25, 0x0226
    4f5e:	80 91 24 02 	lds	r24, 0x0224
    4f62:	98 17       	cp	r25, r24
    4f64:	49 f4       	brne	.+18     	; 0x4f78 <Main_voidTimer0ISR+0x46>
    4f66:	80 91 d0 01 	lds	r24, 0x01D0
    4f6a:	88 23       	and	r24, r24
    4f6c:	29 f4       	brne	.+10     	; 0x4f78 <Main_voidTimer0ISR+0x46>
	{
		DIO_u8SetPinValue(MAIN_u8DC_PORT, MAIN_u8DC_PIN, DIO_u8PIN_LOW);
    4f6e:	80 e0       	ldi	r24, 0x00	; 0
    4f70:	65 e0       	ldi	r22, 0x05	; 5
    4f72:	40 e0       	ldi	r20, 0x00	; 0
    4f74:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
	}
	if((Local_u8Counter == Main_u8LightIntensity) && (Main_u8LdrFlag == OPENED))
    4f78:	90 91 26 02 	lds	r25, 0x0226
    4f7c:	80 91 23 02 	lds	r24, 0x0223
    4f80:	98 17       	cp	r25, r24
    4f82:	41 f4       	brne	.+16     	; 0x4f94 <Main_voidTimer0ISR+0x62>
    4f84:	80 91 d1 01 	lds	r24, 0x01D1
    4f88:	88 23       	and	r24, r24
    4f8a:	21 f4       	brne	.+8      	; 0x4f94 <Main_voidTimer0ISR+0x62>
	{
		DIO_u8SetPortValue(MAIN_u8LIGHT_PORT, 0x00);
    4f8c:	82 e0       	ldi	r24, 0x02	; 2
    4f8e:	60 e0       	ldi	r22, 0x00	; 0
    4f90:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_u8SetPortValue>
	}
	if(Local_u8Counter == 100u)
    4f94:	80 91 26 02 	lds	r24, 0x0226
    4f98:	84 36       	cpi	r24, 0x64	; 100
    4f9a:	c1 f4       	brne	.+48     	; 0x4fcc <Main_voidTimer0ISR+0x9a>
	{
		Local_u8Counter = 0u;
    4f9c:	10 92 26 02 	sts	0x0226, r1
		DIO_u8SetPinValue(MAIN_u8SERVO_PORT, MAIN_u8SERVO_PIN, DIO_u8PIN_HIGH);
    4fa0:	80 e0       	ldi	r24, 0x00	; 0
    4fa2:	66 e0       	ldi	r22, 0x06	; 6
    4fa4:	41 e0       	ldi	r20, 0x01	; 1
    4fa6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
		if(Main_u8UltraFlag == OPENED)
    4faa:	80 91 d0 01 	lds	r24, 0x01D0
    4fae:	88 23       	and	r24, r24
    4fb0:	29 f4       	brne	.+10     	; 0x4fbc <Main_voidTimer0ISR+0x8a>
		{
			DIO_u8SetPinValue(MAIN_u8DC_PORT, MAIN_u8DC_PIN, DIO_u8PIN_HIGH);
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	65 e0       	ldi	r22, 0x05	; 5
    4fb6:	41 e0       	ldi	r20, 0x01	; 1
    4fb8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DIO_u8SetPinValue>
		}
		if(Main_u8LdrFlag == OPENED)
    4fbc:	80 91 d1 01 	lds	r24, 0x01D1
    4fc0:	88 23       	and	r24, r24
    4fc2:	21 f4       	brne	.+8      	; 0x4fcc <Main_voidTimer0ISR+0x9a>
		{
			DIO_u8SetPortValue(MAIN_u8LIGHT_PORT, 0xff);
    4fc4:	82 e0       	ldi	r24, 0x02	; 2
    4fc6:	6f ef       	ldi	r22, 0xFF	; 255
    4fc8:	0e 94 9f 10 	call	0x213e	; 0x213e <DIO_u8SetPortValue>
		}
	}
}
    4fcc:	cf 91       	pop	r28
    4fce:	df 91       	pop	r29
    4fd0:	08 95       	ret

00004fd2 <Main_voidTimer2ISR>:

void Main_voidTimer2ISR(void)
{
    4fd2:	df 93       	push	r29
    4fd4:	cf 93       	push	r28
    4fd6:	cd b7       	in	r28, 0x3d	; 61
    4fd8:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8HighCounter = 0u;
	static uint8 Local_u8LowCounter = 0u;
	static uint8 Local_u8MedCounter = 0u;

	if(Local_u8MedCounter == 5u)
    4fda:	80 91 27 02 	lds	r24, 0x0227
    4fde:	85 30       	cpi	r24, 0x05	; 5
    4fe0:	59 f4       	brne	.+22     	; 0x4ff8 <Main_voidTimer2ISR+0x26>
	{
		TIMER2_u8SetCompOutMode(&Local_stTimer2, OC_DISCONNECTED);
    4fe2:	8a e2       	ldi	r24, 0x2A	; 42
    4fe4:	92 e0       	ldi	r25, 0x02	; 2
    4fe6:	60 e0       	ldi	r22, 0x00	; 0
    4fe8:	0e 94 9b 1a 	call	0x3536	; 0x3536 <TIMER2_u8SetCompOutMode>
		TIMERS_u8IntDisable(TIMER2_COMP);
    4fec:	87 e0       	ldi	r24, 0x07	; 7
    4fee:	0e 94 0e 1c 	call	0x381c	; 0x381c <TIMERS_u8IntDisable>
		Local_u8MedCounter = 0;
    4ff2:	10 92 27 02 	sts	0x0227, r1
    4ff6:	57 c0       	rjmp	.+174    	; 0x50a6 <Main_voidTimer2ISR+0xd4>
	}
	else
	{
		Local_u8LowCounter++;
    4ff8:	80 91 28 02 	lds	r24, 0x0228
    4ffc:	8f 5f       	subi	r24, 0xFF	; 255
    4ffe:	80 93 28 02 	sts	0x0228, r24
		if(Local_u8LowCounter == 250)
    5002:	80 91 28 02 	lds	r24, 0x0228
    5006:	8a 3f       	cpi	r24, 0xFA	; 250
    5008:	09 f0       	breq	.+2      	; 0x500c <Main_voidTimer2ISR+0x3a>
    500a:	4d c0       	rjmp	.+154    	; 0x50a6 <Main_voidTimer2ISR+0xd4>
		{
			Local_u8LowCounter = 0u;
    500c:	10 92 28 02 	sts	0x0228, r1
			Local_u8HighCounter++;
    5010:	80 91 29 02 	lds	r24, 0x0229
    5014:	8f 5f       	subi	r24, 0xFF	; 255
    5016:	80 93 29 02 	sts	0x0229, r24

			if(Local_u8HighCounter == 5u)
    501a:	80 91 29 02 	lds	r24, 0x0229
    501e:	85 30       	cpi	r24, 0x05	; 5
    5020:	49 f4       	brne	.+18     	; 0x5034 <Main_voidTimer2ISR+0x62>
			{
				Local_u8MedCounter++;
    5022:	80 91 27 02 	lds	r24, 0x0227
    5026:	8f 5f       	subi	r24, 0xFF	; 255
    5028:	80 93 27 02 	sts	0x0227, r24
				TIMER2_voidSetCompValue(1);
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <TIMER2_voidSetCompValue>
    5032:	39 c0       	rjmp	.+114    	; 0x50a6 <Main_voidTimer2ISR+0xd4>
			}
			else if(Local_u8HighCounter == 10u)
    5034:	80 91 29 02 	lds	r24, 0x0229
    5038:	8a 30       	cpi	r24, 0x0A	; 10
    503a:	21 f4       	brne	.+8      	; 0x5044 <Main_voidTimer2ISR+0x72>
			{
				TIMER2_voidSetCompValue(255);
    503c:	8f ef       	ldi	r24, 0xFF	; 255
    503e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <TIMER2_voidSetCompValue>
    5042:	31 c0       	rjmp	.+98     	; 0x50a6 <Main_voidTimer2ISR+0xd4>
			}
			else if(Local_u8HighCounter == 15u)
    5044:	80 91 29 02 	lds	r24, 0x0229
    5048:	8f 30       	cpi	r24, 0x0F	; 15
    504a:	21 f4       	brne	.+8      	; 0x5054 <Main_voidTimer2ISR+0x82>
			{
				TIMER2_voidSetCompValue(1);
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <TIMER2_voidSetCompValue>
    5052:	29 c0       	rjmp	.+82     	; 0x50a6 <Main_voidTimer2ISR+0xd4>
			}
			else if(Local_u8HighCounter == 20u)
    5054:	80 91 29 02 	lds	r24, 0x0229
    5058:	84 31       	cpi	r24, 0x14	; 20
    505a:	21 f4       	brne	.+8      	; 0x5064 <Main_voidTimer2ISR+0x92>
			{
				TIMER2_voidSetCompValue(150);
    505c:	86 e9       	ldi	r24, 0x96	; 150
    505e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <TIMER2_voidSetCompValue>
    5062:	21 c0       	rjmp	.+66     	; 0x50a6 <Main_voidTimer2ISR+0xd4>
			}
			else if(Local_u8HighCounter == 24u)
    5064:	80 91 29 02 	lds	r24, 0x0229
    5068:	88 31       	cpi	r24, 0x18	; 24
    506a:	21 f4       	brne	.+8      	; 0x5074 <Main_voidTimer2ISR+0xa2>
			{
				TIMER2_voidSetCompValue(255);
    506c:	8f ef       	ldi	r24, 0xFF	; 255
    506e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <TIMER2_voidSetCompValue>
    5072:	19 c0       	rjmp	.+50     	; 0x50a6 <Main_voidTimer2ISR+0xd4>
			}
			else if(Local_u8HighCounter == 28u)
    5074:	80 91 29 02 	lds	r24, 0x0229
    5078:	8c 31       	cpi	r24, 0x1C	; 28
    507a:	21 f4       	brne	.+8      	; 0x5084 <Main_voidTimer2ISR+0xb2>
			{
				TIMER2_voidSetCompValue(150);
    507c:	86 e9       	ldi	r24, 0x96	; 150
    507e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <TIMER2_voidSetCompValue>
    5082:	11 c0       	rjmp	.+34     	; 0x50a6 <Main_voidTimer2ISR+0xd4>
			}
			else if(Local_u8HighCounter == 32u)
    5084:	80 91 29 02 	lds	r24, 0x0229
    5088:	80 32       	cpi	r24, 0x20	; 32
    508a:	21 f4       	brne	.+8      	; 0x5094 <Main_voidTimer2ISR+0xc2>
			{
				TIMER2_voidSetCompValue(255);
    508c:	8f ef       	ldi	r24, 0xFF	; 255
    508e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <TIMER2_voidSetCompValue>
    5092:	09 c0       	rjmp	.+18     	; 0x50a6 <Main_voidTimer2ISR+0xd4>
			}
			else if(Local_u8HighCounter == 36u)
    5094:	80 91 29 02 	lds	r24, 0x0229
    5098:	84 32       	cpi	r24, 0x24	; 36
    509a:	29 f4       	brne	.+10     	; 0x50a6 <Main_voidTimer2ISR+0xd4>
			{
				Local_u8HighCounter = 0u;
    509c:	10 92 29 02 	sts	0x0229, r1
				TIMER2_voidSetCompValue(150);
    50a0:	86 e9       	ldi	r24, 0x96	; 150
    50a2:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <TIMER2_voidSetCompValue>
			}
		}
	}
}
    50a6:	cf 91       	pop	r28
    50a8:	df 91       	pop	r29
    50aa:	08 95       	ret

000050ac <__mulsi3>:
    50ac:	62 9f       	mul	r22, r18
    50ae:	d0 01       	movw	r26, r0
    50b0:	73 9f       	mul	r23, r19
    50b2:	f0 01       	movw	r30, r0
    50b4:	82 9f       	mul	r24, r18
    50b6:	e0 0d       	add	r30, r0
    50b8:	f1 1d       	adc	r31, r1
    50ba:	64 9f       	mul	r22, r20
    50bc:	e0 0d       	add	r30, r0
    50be:	f1 1d       	adc	r31, r1
    50c0:	92 9f       	mul	r25, r18
    50c2:	f0 0d       	add	r31, r0
    50c4:	83 9f       	mul	r24, r19
    50c6:	f0 0d       	add	r31, r0
    50c8:	74 9f       	mul	r23, r20
    50ca:	f0 0d       	add	r31, r0
    50cc:	65 9f       	mul	r22, r21
    50ce:	f0 0d       	add	r31, r0
    50d0:	99 27       	eor	r25, r25
    50d2:	72 9f       	mul	r23, r18
    50d4:	b0 0d       	add	r27, r0
    50d6:	e1 1d       	adc	r30, r1
    50d8:	f9 1f       	adc	r31, r25
    50da:	63 9f       	mul	r22, r19
    50dc:	b0 0d       	add	r27, r0
    50de:	e1 1d       	adc	r30, r1
    50e0:	f9 1f       	adc	r31, r25
    50e2:	bd 01       	movw	r22, r26
    50e4:	cf 01       	movw	r24, r30
    50e6:	11 24       	eor	r1, r1
    50e8:	08 95       	ret

000050ea <__udivmodhi4>:
    50ea:	aa 1b       	sub	r26, r26
    50ec:	bb 1b       	sub	r27, r27
    50ee:	51 e1       	ldi	r21, 0x11	; 17
    50f0:	07 c0       	rjmp	.+14     	; 0x5100 <__udivmodhi4_ep>

000050f2 <__udivmodhi4_loop>:
    50f2:	aa 1f       	adc	r26, r26
    50f4:	bb 1f       	adc	r27, r27
    50f6:	a6 17       	cp	r26, r22
    50f8:	b7 07       	cpc	r27, r23
    50fa:	10 f0       	brcs	.+4      	; 0x5100 <__udivmodhi4_ep>
    50fc:	a6 1b       	sub	r26, r22
    50fe:	b7 0b       	sbc	r27, r23

00005100 <__udivmodhi4_ep>:
    5100:	88 1f       	adc	r24, r24
    5102:	99 1f       	adc	r25, r25
    5104:	5a 95       	dec	r21
    5106:	a9 f7       	brne	.-22     	; 0x50f2 <__udivmodhi4_loop>
    5108:	80 95       	com	r24
    510a:	90 95       	com	r25
    510c:	bc 01       	movw	r22, r24
    510e:	cd 01       	movw	r24, r26
    5110:	08 95       	ret

00005112 <__udivmodsi4>:
    5112:	a1 e2       	ldi	r26, 0x21	; 33
    5114:	1a 2e       	mov	r1, r26
    5116:	aa 1b       	sub	r26, r26
    5118:	bb 1b       	sub	r27, r27
    511a:	fd 01       	movw	r30, r26
    511c:	0d c0       	rjmp	.+26     	; 0x5138 <__udivmodsi4_ep>

0000511e <__udivmodsi4_loop>:
    511e:	aa 1f       	adc	r26, r26
    5120:	bb 1f       	adc	r27, r27
    5122:	ee 1f       	adc	r30, r30
    5124:	ff 1f       	adc	r31, r31
    5126:	a2 17       	cp	r26, r18
    5128:	b3 07       	cpc	r27, r19
    512a:	e4 07       	cpc	r30, r20
    512c:	f5 07       	cpc	r31, r21
    512e:	20 f0       	brcs	.+8      	; 0x5138 <__udivmodsi4_ep>
    5130:	a2 1b       	sub	r26, r18
    5132:	b3 0b       	sbc	r27, r19
    5134:	e4 0b       	sbc	r30, r20
    5136:	f5 0b       	sbc	r31, r21

00005138 <__udivmodsi4_ep>:
    5138:	66 1f       	adc	r22, r22
    513a:	77 1f       	adc	r23, r23
    513c:	88 1f       	adc	r24, r24
    513e:	99 1f       	adc	r25, r25
    5140:	1a 94       	dec	r1
    5142:	69 f7       	brne	.-38     	; 0x511e <__udivmodsi4_loop>
    5144:	60 95       	com	r22
    5146:	70 95       	com	r23
    5148:	80 95       	com	r24
    514a:	90 95       	com	r25
    514c:	9b 01       	movw	r18, r22
    514e:	ac 01       	movw	r20, r24
    5150:	bd 01       	movw	r22, r26
    5152:	cf 01       	movw	r24, r30
    5154:	08 95       	ret

00005156 <__divmodsi4>:
    5156:	97 fb       	bst	r25, 7
    5158:	09 2e       	mov	r0, r25
    515a:	05 26       	eor	r0, r21
    515c:	0e d0       	rcall	.+28     	; 0x517a <__divmodsi4_neg1>
    515e:	57 fd       	sbrc	r21, 7
    5160:	04 d0       	rcall	.+8      	; 0x516a <__divmodsi4_neg2>
    5162:	d7 df       	rcall	.-82     	; 0x5112 <__udivmodsi4>
    5164:	0a d0       	rcall	.+20     	; 0x517a <__divmodsi4_neg1>
    5166:	00 1c       	adc	r0, r0
    5168:	38 f4       	brcc	.+14     	; 0x5178 <__divmodsi4_exit>

0000516a <__divmodsi4_neg2>:
    516a:	50 95       	com	r21
    516c:	40 95       	com	r20
    516e:	30 95       	com	r19
    5170:	21 95       	neg	r18
    5172:	3f 4f       	sbci	r19, 0xFF	; 255
    5174:	4f 4f       	sbci	r20, 0xFF	; 255
    5176:	5f 4f       	sbci	r21, 0xFF	; 255

00005178 <__divmodsi4_exit>:
    5178:	08 95       	ret

0000517a <__divmodsi4_neg1>:
    517a:	f6 f7       	brtc	.-4      	; 0x5178 <__divmodsi4_exit>
    517c:	90 95       	com	r25
    517e:	80 95       	com	r24
    5180:	70 95       	com	r23
    5182:	61 95       	neg	r22
    5184:	7f 4f       	sbci	r23, 0xFF	; 255
    5186:	8f 4f       	sbci	r24, 0xFF	; 255
    5188:	9f 4f       	sbci	r25, 0xFF	; 255
    518a:	08 95       	ret

0000518c <__prologue_saves__>:
    518c:	2f 92       	push	r2
    518e:	3f 92       	push	r3
    5190:	4f 92       	push	r4
    5192:	5f 92       	push	r5
    5194:	6f 92       	push	r6
    5196:	7f 92       	push	r7
    5198:	8f 92       	push	r8
    519a:	9f 92       	push	r9
    519c:	af 92       	push	r10
    519e:	bf 92       	push	r11
    51a0:	cf 92       	push	r12
    51a2:	df 92       	push	r13
    51a4:	ef 92       	push	r14
    51a6:	ff 92       	push	r15
    51a8:	0f 93       	push	r16
    51aa:	1f 93       	push	r17
    51ac:	cf 93       	push	r28
    51ae:	df 93       	push	r29
    51b0:	cd b7       	in	r28, 0x3d	; 61
    51b2:	de b7       	in	r29, 0x3e	; 62
    51b4:	ca 1b       	sub	r28, r26
    51b6:	db 0b       	sbc	r29, r27
    51b8:	0f b6       	in	r0, 0x3f	; 63
    51ba:	f8 94       	cli
    51bc:	de bf       	out	0x3e, r29	; 62
    51be:	0f be       	out	0x3f, r0	; 63
    51c0:	cd bf       	out	0x3d, r28	; 61
    51c2:	09 94       	ijmp

000051c4 <__epilogue_restores__>:
    51c4:	2a 88       	ldd	r2, Y+18	; 0x12
    51c6:	39 88       	ldd	r3, Y+17	; 0x11
    51c8:	48 88       	ldd	r4, Y+16	; 0x10
    51ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    51cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    51ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    51d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    51d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    51d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    51d6:	b9 84       	ldd	r11, Y+9	; 0x09
    51d8:	c8 84       	ldd	r12, Y+8	; 0x08
    51da:	df 80       	ldd	r13, Y+7	; 0x07
    51dc:	ee 80       	ldd	r14, Y+6	; 0x06
    51de:	fd 80       	ldd	r15, Y+5	; 0x05
    51e0:	0c 81       	ldd	r16, Y+4	; 0x04
    51e2:	1b 81       	ldd	r17, Y+3	; 0x03
    51e4:	aa 81       	ldd	r26, Y+2	; 0x02
    51e6:	b9 81       	ldd	r27, Y+1	; 0x01
    51e8:	ce 0f       	add	r28, r30
    51ea:	d1 1d       	adc	r29, r1
    51ec:	0f b6       	in	r0, 0x3f	; 63
    51ee:	f8 94       	cli
    51f0:	de bf       	out	0x3e, r29	; 62
    51f2:	0f be       	out	0x3f, r0	; 63
    51f4:	cd bf       	out	0x3d, r28	; 61
    51f6:	ed 01       	movw	r28, r26
    51f8:	08 95       	ret

000051fa <_exit>:
    51fa:	f8 94       	cli

000051fc <__stop_program>:
    51fc:	ff cf       	rjmp	.-2      	; 0x51fc <__stop_program>
