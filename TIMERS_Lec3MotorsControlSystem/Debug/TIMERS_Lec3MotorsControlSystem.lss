
TIMERS_Lec3MotorsControlSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000030e  00800060  00006b6a  00006bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080036e  0080036e  00006f0c  2**0
                  ALLOC
  3 .stab         00005b74  00000000  00000000  00006f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001dc2  00000000  00000000  0000ca80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e842  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000e9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00010fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00012365  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001353c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000136fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000139f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__vector_1>
       8:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__vector_2>
       c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__vector_10>
      2c:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fb e6       	ldi	r31, 0x6B	; 107
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <main>
      8a:	0c 94 b3 35 	jmp	0x6b66	; 0x6b66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7c 35 	jmp	0x6af8	; 0x6af8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 98 35 	jmp	0x6b30	; 0x6b30 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 88 35 	jmp	0x6b10	; 0x6b10 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a4 35 	jmp	0x6b48	; 0x6b48 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 88 35 	jmp	0x6b10	; 0x6b10 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a4 35 	jmp	0x6b48	; 0x6b48 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7c 35 	jmp	0x6af8	; 0x6af8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 98 35 	jmp	0x6b30	; 0x6b30 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 35 	jmp	0x6b08	; 0x6b08 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 88 35 	jmp	0x6b10	; 0x6b10 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a4 35 	jmp	0x6b48	; 0x6b48 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 88 35 	jmp	0x6b10	; 0x6b10 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a4 35 	jmp	0x6b48	; 0x6b48 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 88 35 	jmp	0x6b10	; 0x6b10 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a4 35 	jmp	0x6b48	; 0x6b48 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8c 35 	jmp	0x6b18	; 0x6b18 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a8 35 	jmp	0x6b50	; 0x6b50 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 84 35 	jmp	0x6b08	; 0x6b08 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a0 35 	jmp	0x6b40	; 0x6b40 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 58       	subi	r30, 0x85	; 133
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:

/**
 * @brief Function to initialize ADC with prebuild configuration.
 */
void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if	ADC_u8REF_VOLT == AREF_REF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_u8REF_VOLT == AVCC_REF
	SET_BIT(ADMUX,ADMUX_REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24
	/*Left Adjust Result Selection*/
#if	ADC_u8RESOLUTION == EIGHT_BITS
	SET_BIT(ADMUX,ADMUX_ADLAR);

#elif ADC_u8RESOLUTION == TEN_BITS
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
	/*ADC Interrupt Enable/Disable*/
#if ADC_u8INT_ENABLE == ENABLED
	SET_BIT(ADCSRA,ADCSRA_ADIE);

#elif ADC_u8INT_ENABLE == DISABLED
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	87 7f       	andi	r24, 0xF7	; 247
     e6c:	8c 93       	st	X, r24
#error Wrong ADC_u8INT_ENABLE configuration option

#endif

	/*Prescaler Selection*/
	ADCSRA = ADCSRA & PRESCALER_MASK;
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	88 7f       	andi	r24, 0xF8	; 248
     e7a:	8c 93       	st	X, r24
	ADCSRA = ADCSRA | ADC_u8PRESCALER_VALUE;
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	85 60       	ori	r24, 0x05	; 5
     e88:	8c 93       	st	X, r24

	/*Enable the ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_u8StartConversionSynch>:
 * @param Copy_u8Channel The number of channel you want to read.
 * @param Copy_pu16Result This pointer return the reading of the channel selected.
 * @return Error State of the function.
 */
uint8 ADC_u8StartConversionSynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <ADC_u8StartConversionSynch+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <ADC_u8StartConversionSynch+0x8>
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	8b 83       	std	Y+3, r24	; 0x03
     eae:	7d 83       	std	Y+5, r23	; 0x05
     eb0:	6c 83       	std	Y+4, r22	; 0x04
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
     eb2:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u32TimeoutCounter = 0u;
     eb4:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Copy_pu16Rsult*/
	if(Copy_pu16Result != NULL)
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	09 f4       	brne	.+2      	; 0xec0 <ADC_u8StartConversionSynch+0x22>
     ebe:	41 c0       	rjmp	.+130    	; 0xf42 <ADC_u8StartConversionSynch+0xa4>
	{
		if(ADC_u8BusyFlag == IDLE)
     ec0:	80 91 7b 02 	lds	r24, 0x027B
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	d1 f5       	brne	.+116    	; 0xf3c <ADC_u8StartConversionSynch+0x9e>
		{
			/*Inform others that adc is busy*/
			ADC_u8BusyFlag = BUSY;
     ec8:	10 92 7b 02 	sts	0x027B, r1

			/*Set the required channel*/
			ADMUX = ADMUX & CHANNEL_MASK;
     ecc:	a7 e2       	ldi	r26, 0x27	; 39
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e7 e2       	ldi	r30, 0x27	; 39
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 7e       	andi	r24, 0xE0	; 224
     ed8:	8c 93       	st	X, r24
			ADMUX = ADMUX | Copy_u8Channel;
     eda:	a7 e2       	ldi	r26, 0x27	; 39
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e7 e2       	ldi	r30, 0x27	; 39
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	90 81       	ld	r25, Z
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	89 2b       	or	r24, r25
     ee8:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     eea:	a6 e2       	ldi	r26, 0x26	; 38
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e6 e2       	ldi	r30, 0x26	; 38
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 64       	ori	r24, 0x40	; 64
     ef6:	8c 93       	st	X, r24

			/*Polling until the interrupt flag rise*/
			while((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter < ADC_u32TIMEOUT))
     ef8:	e6 e2       	ldi	r30, 0x26	; 38
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	82 95       	swap	r24
     f00:	8f 70       	andi	r24, 0x0F	; 15
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	81 70       	andi	r24, 0x01	; 1
     f08:	90 70       	andi	r25, 0x00	; 0
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	21 f4       	brne	.+8      	; 0xf16 <ADC_u8StartConversionSynch+0x78>
			{
				Local_u32TimeoutCounter++;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	f1 cf       	rjmp	.-30     	; 0xef8 <ADC_u8StartConversionSynch+0x5a>
			else
			{
				/*Loop is broken because the conversion has been done*/

				/*Clear the conversion complete flag flag*/
				SET_BIT(ADCSRA,ADCSRA_ADIF);
     f16:	a6 e2       	ldi	r26, 0x26	; 38
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e6 e2       	ldi	r30, 0x26	; 38
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 61       	ori	r24, 0x10	; 16
     f22:	8c 93       	st	X, r24
				/*Return the data*/
#if ADC_u8RESOLUTION == EIGHT_BITS
				*Copy_pu16Result = ADCH;

#elif ADC_u8RESOLUTION == TEN_BITS
				*Copy_pu16Result = ADC;
     f24:	e4 e2       	ldi	r30, 0x24	; 36
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	ec 81       	ldd	r30, Y+4	; 0x04
     f2e:	fd 81       	ldd	r31, Y+5	; 0x05
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
#endif
			}

			/*Inform others that ADC is idle now*/
			ADC_u8BusyFlag = IDLE;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 7b 02 	sts	0x027B, r24
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <ADC_u8StartConversionSynch+0xa8>
		}
		else
		{
			/*ADC is busy now*/
			Local_u8ErrorState = BUSY_STATE_ERR;
     f3c:	84 e0       	ldi	r24, 0x04	; 4
     f3e:	8a 83       	std	Y+2, r24	; 0x02
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <ADC_u8StartConversionSynch+0xa8>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Return the error state*/
	return Local_u8ErrorState;
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <ADC_u8StartConversionAsynch>:
 * @param Copy_pu16Result This pointer return the reading of the channel selected.
 * @param Copy_pvNotificationFunc This pointer set call back the notification function from the application layer.
 * @return Error State of the function.
 */
uint8 ADC_u8StartConversionAsynch(uint8 Copy_u8Channel, uint16 *Copy_pu16Result, void (* Copy_pvNotificationFunc)(void))
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <ADC_u8StartConversionAsynch+0x6>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <ADC_u8StartConversionAsynch+0x8>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <ADC_u8StartConversionAsynch+0xa>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	7c 83       	std	Y+4, r23	; 0x04
     f6a:	6b 83       	std	Y+3, r22	; 0x03
     f6c:	5e 83       	std	Y+6, r21	; 0x06
     f6e:	4d 83       	std	Y+5, r20	; 0x05
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
     f70:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Copy_pu16Rsult*/
	if((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	b9 f1       	breq	.+110    	; 0xfe8 <ADC_u8StartConversionAsynch+0x90>
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	99 f1       	breq	.+102    	; 0xfe8 <ADC_u8StartConversionAsynch+0x90>
	{
		/*Check if ADC is busy or idle*/
		if(ADC_u8BusyFlag == IDLE)
     f82:	80 91 7b 02 	lds	r24, 0x027B
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	61 f5       	brne	.+88     	; 0xfe2 <ADC_u8StartConversionAsynch+0x8a>
		{
			/*Inform others that ADC is busy now*/
			ADC_u8BusyFlag = BUSY;
     f8a:	10 92 7b 02 	sts	0x027B, r1

			/*Initialize the result pointer globally*/
			ADC_pu16ConversionResult = Copy_pu16Result;
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	90 93 71 03 	sts	0x0371, r25
     f96:	80 93 70 03 	sts	0x0370, r24

			/*Initialize the notification function globally*/
			ADC_pvNotificationFunc = Copy_pvNotificationFunc;
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	90 93 6f 03 	sts	0x036F, r25
     fa2:	80 93 6e 03 	sts	0x036E, r24

			/*Set the required channel*/
			ADMUX = ADMUX & CHANNEL_MASK;
     fa6:	a7 e2       	ldi	r26, 0x27	; 39
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e2       	ldi	r30, 0x27	; 39
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 7e       	andi	r24, 0xE0	; 224
     fb2:	8c 93       	st	X, r24
			ADMUX = ADMUX | Copy_u8Channel;
     fb4:	a7 e2       	ldi	r26, 0x27	; 39
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e2       	ldi	r30, 0x27	; 39
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     fc4:	a6 e2       	ldi	r26, 0x26	; 38
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e6 e2       	ldi	r30, 0x26	; 38
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 64       	ori	r24, 0x40	; 64
     fd0:	8c 93       	st	X, r24

			/*Enable ADC Conversion Complete Interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     fd2:	a6 e2       	ldi	r26, 0x26	; 38
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e6 e2       	ldi	r30, 0x26	; 38
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	8c 93       	st	X, r24
     fe0:	05 c0       	rjmp	.+10     	; 0xfec <ADC_u8StartConversionAsynch+0x94>
		}
		else
		{
			/*ADC is busy now*/
			Local_u8ErrorState = BUSY_STATE_ERR;
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <ADC_u8StartConversionAsynch+0x94>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
}
     fee:	26 96       	adiw	r28, 0x06	; 6
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <__vector_16>:
/**
 * @brief ADC Conversion Complete ISR.
 */
void __vector_16 (void) __attribute((signal));
void __vector_16 (void)
{
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pu16ConversionResult != NULL)
    102a:	80 91 70 03 	lds	r24, 0x0370
    102e:	90 91 71 03 	lds	r25, 0x0371
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	f9 f0       	breq	.+62     	; 0x1074 <__vector_16+0x74>
		/*Return the data*/
#if ADC_u8RESOLUTION == EIGHT_BITS
		*ADC_pu16ConversionResult = ADCH;

#elif ADC_u8RESOLUTION == TEN_BITS
		*ADC_pu16ConversionResult = ADC;
    1036:	a0 91 70 03 	lds	r26, 0x0370
    103a:	b0 91 71 03 	lds	r27, 0x0371
    103e:	e4 e2       	ldi	r30, 0x24	; 36
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	8d 93       	st	X+, r24
    1048:	9c 93       	st	X, r25
#endif

		/*Disable ADC Conversion Complete Interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    104a:	a6 e2       	ldi	r26, 0x26	; 38
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e6 e2       	ldi	r30, 0x26	; 38
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	87 7f       	andi	r24, 0xF7	; 247
    1056:	8c 93       	st	X, r24

		/*Inform others that ADC is idle now*/
		ADC_u8BusyFlag = IDLE;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 7b 02 	sts	0x027B, r24

		/*Invoke the application notification function*/
		if(ADC_pvNotificationFunc != NULL)
    105e:	80 91 6e 03 	lds	r24, 0x036E
    1062:	90 91 6f 03 	lds	r25, 0x036F
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	29 f0       	breq	.+10     	; 0x1074 <__vector_16+0x74>
		{
			ADC_pvNotificationFunc();
    106a:	e0 91 6e 03 	lds	r30, 0x036E
    106e:	f0 91 6f 03 	lds	r31, 0x036F
    1072:	09 95       	icall
	}
	else
	{
		/*Result pointer is assigned to NULL*/
	}
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <voidSendEnablePulse>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

static void voidSendEnablePulse(void)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	2e 97       	sbiw	r28, 0x0e	; 14
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	62 e0       	ldi	r22, 0x02	; 2
    10b2:	41 e0       	ldi	r20, 0x01	; 1
    10b4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e4       	ldi	r27, 0x40	; 64
    10c0:	8b 87       	std	Y+11, r24	; 0x0b
    10c2:	9c 87       	std	Y+12, r25	; 0x0c
    10c4:	ad 87       	std	Y+13, r26	; 0x0d
    10c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    10cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	4a ef       	ldi	r20, 0xFA	; 250
    10d6:	54 e4       	ldi	r21, 0x44	; 68
    10d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	8f 83       	std	Y+7, r24	; 0x07
    10e2:	98 87       	std	Y+8, r25	; 0x08
    10e4:	a9 87       	std	Y+9, r26	; 0x09
    10e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ea:	78 85       	ldd	r23, Y+8	; 0x08
    10ec:	89 85       	ldd	r24, Y+9	; 0x09
    10ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	5f e3       	ldi	r21, 0x3F	; 63
    10f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10fc:	88 23       	and	r24, r24
    10fe:	2c f4       	brge	.+10     	; 0x110a <voidSendEnablePulse+0x70>
		__ticks = 1;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	3f c0       	rjmp	.+126    	; 0x1188 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    110a:	6f 81       	ldd	r22, Y+7	; 0x07
    110c:	78 85       	ldd	r23, Y+8	; 0x08
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	9a 85       	ldd	r25, Y+10	; 0x0a
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	3f ef       	ldi	r19, 0xFF	; 255
    1116:	4f e7       	ldi	r20, 0x7F	; 127
    1118:	57 e4       	ldi	r21, 0x47	; 71
    111a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    111e:	18 16       	cp	r1, r24
    1120:	4c f5       	brge	.+82     	; 0x1174 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1122:	6b 85       	ldd	r22, Y+11	; 0x0b
    1124:	7c 85       	ldd	r23, Y+12	; 0x0c
    1126:	8d 85       	ldd	r24, Y+13	; 0x0d
    1128:	9e 85       	ldd	r25, Y+14	; 0x0e
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e2       	ldi	r20, 0x20	; 32
    1130:	51 e4       	ldi	r21, 0x41	; 65
    1132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	0f c0       	rjmp	.+30     	; 0x116a <voidSendEnablePulse+0xd0>
    114c:	88 ec       	ldi	r24, 0xC8	; 200
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <voidSendEnablePulse+0xbe>
    115c:	9c 83       	std	Y+4, r25	; 0x04
    115e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	69 f7       	brne	.-38     	; 0x114c <voidSendEnablePulse+0xb2>
    1172:	14 c0       	rjmp	.+40     	; 0x119c <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1174:	6f 81       	ldd	r22, Y+7	; 0x07
    1176:	78 85       	ldd	r23, Y+8	; 0x08
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	9a 85       	ldd	r25, Y+10	; 0x0a
    117c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <voidSendEnablePulse+0xfa>
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	62 e0       	ldi	r22, 0x02	; 2
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
}
    11a6:	2e 96       	adiw	r28, 0x0e	; 14
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	0f 92       	push	r0
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple, 0));
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	98 2f       	mov	r25, r24
    11c8:	91 70       	andi	r25, 0x01	; 1
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	63 e0       	ldi	r22, 0x03	; 3
    11ce:	49 2f       	mov	r20, r25
    11d0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple, 1));
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	86 95       	lsr	r24
    11d8:	98 2f       	mov	r25, r24
    11da:	91 70       	andi	r25, 0x01	; 1
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	64 e0       	ldi	r22, 0x04	; 4
    11e0:	49 2f       	mov	r20, r25
    11e2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple, 2));
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	86 95       	lsr	r24
    11ea:	86 95       	lsr	r24
    11ec:	98 2f       	mov	r25, r24
    11ee:	91 70       	andi	r25, 0x01	; 1
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	65 e0       	ldi	r22, 0x05	; 5
    11f4:	49 2f       	mov	r20, r25
    11f6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple, 3));
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	86 95       	lsr	r24
    11fe:	86 95       	lsr	r24
    1200:	86 95       	lsr	r24
    1202:	98 2f       	mov	r25, r24
    1204:	91 70       	andi	r25, 0x01	; 1
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	66 e0       	ldi	r22, 0x06	; 6
    120a:	49 2f       	mov	r20, r25
    120c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
}
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4);
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	82 95       	swap	r24
    123c:	8f 70       	andi	r24, 0x0F	; 15
    123e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1242:	0e 94 4d 08 	call	0x109a	; 0x109a <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    124c:	0e 94 4d 08 	call	0x109a	; 0x109a <voidSendEnablePulse>

#endif

}
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <CLCD_voidSendData>:

void CLCD_voidSendData(char Copy_c8Data)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data >> 4);
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	82 95       	swap	r24
    127c:	8f 70       	andi	r24, 0x0F	; 15
    127e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1282:	0e 94 4d 08 	call	0x109a	; 0x109a <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data);
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    128c:	0e 94 4d 08 	call	0x109a	; 0x109a <voidSendEnablePulse>

#endif

}
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	2e 97       	sbiw	r28, 0x0e	; 14
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 e2       	ldi	r26, 0x20	; 32
    12b2:	b2 e4       	ldi	r27, 0x42	; 66
    12b4:	8b 87       	std	Y+11, r24	; 0x0b
    12b6:	9c 87       	std	Y+12, r25	; 0x0c
    12b8:	ad 87       	std	Y+13, r26	; 0x0d
    12ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12be:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a ef       	ldi	r20, 0xFA	; 250
    12ca:	54 e4       	ldi	r21, 0x44	; 68
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8f 83       	std	Y+7, r24	; 0x07
    12d6:	98 87       	std	Y+8, r25	; 0x08
    12d8:	a9 87       	std	Y+9, r26	; 0x09
    12da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12dc:	6f 81       	ldd	r22, Y+7	; 0x07
    12de:	78 85       	ldd	r23, Y+8	; 0x08
    12e0:	89 85       	ldd	r24, Y+9	; 0x09
    12e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <CLCD_voidInit+0x66>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    12fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1300:	78 85       	ldd	r23, Y+8	; 0x08
    1302:	89 85       	ldd	r24, Y+9	; 0x09
    1304:	9a 85       	ldd	r25, Y+10	; 0x0a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	6b 85       	ldd	r22, Y+11	; 0x0b
    1318:	7c 85       	ldd	r23, Y+12	; 0x0c
    131a:	8d 85       	ldd	r24, Y+13	; 0x0d
    131c:	9e 85       	ldd	r25, Y+14	; 0x0e
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9e 83       	std	Y+6, r25	; 0x06
    133c:	8d 83       	std	Y+5, r24	; 0x05
    133e:	0f c0       	rjmp	.+30     	; 0x135e <CLCD_voidInit+0xc6>
    1340:	88 ec       	ldi	r24, 0xC8	; 200
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <CLCD_voidInit+0xb4>
    1350:	9c 83       	std	Y+4, r25	; 0x04
    1352:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f7       	brne	.-38     	; 0x1340 <CLCD_voidInit+0xa8>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	6f 81       	ldd	r22, Y+7	; 0x07
    136a:	78 85       	ldd	r23, Y+8	; 0x08
    136c:	89 85       	ldd	r24, Y+9	; 0x09
    136e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9e 83       	std	Y+6, r25	; 0x06
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <CLCD_voidInit+0xf0>
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>

	/*Set Commands to lcd*/
	voidSetLCDHalfDataPort(0b0010);
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    13aa:	0e 94 4d 08 	call	0x109a	; 0x109a <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    13b4:	0e 94 4d 08 	call	0x109a	; 0x109a <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    13b8:	88 e0       	ldi	r24, 0x08	; 8
    13ba:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    13be:	0e 94 4d 08 	call	0x109a	; 0x109a <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    13c2:	8c e0       	ldi	r24, 0x0C	; 12
    13c4:	0e 94 0c 09 	call	0x1218	; 0x1218 <CLCD_voidSendCmd>

	/*Display Clear cmd*/
	CLCD_voidSendCmd(0b00000001);
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	0e 94 0c 09 	call	0x1218	; 0x1218 <CLCD_voidSendCmd>
}
    13ce:	2e 96       	adiw	r28, 0x0e	; 14
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	0e 94 0c 09 	call	0x1218	; 0x1218 <CLCD_voidSendCmd>
}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <CLCD_u8SendString+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <CLCD_u8SendString+0x8>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
    1404:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0;
    1406:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ch8String != NULL)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	d9 f0       	breq	.+54     	; 0x1446 <CLCD_u8SendString+0x52>
    1410:	0e c0       	rjmp	.+28     	; 0x142e <CLCD_u8SendString+0x3a>
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	fc 01       	movw	r30, r24
    141e:	e2 0f       	add	r30, r18
    1420:	f3 1f       	adc	r31, r19
    1422:	80 81       	ld	r24, Z
    1424:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>
			Local_u8Counter++;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	8f 5f       	subi	r24, 0xFF	; 255
    142c:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	fc 01       	movw	r30, r24
    143a:	e2 0f       	add	r30, r18
    143c:	f3 1f       	adc	r31, r19
    143e:	80 81       	ld	r24, Z
    1440:	88 23       	and	r24, r24
    1442:	39 f7       	brne	.-50     	; 0x1412 <CLCD_u8SendString+0x1e>
    1444:	02 c0       	rjmp	.+4      	; 0x144a <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <CLCD_voidSendDecimalNumber>:


void CLCD_voidSendDecimalNumber(sint32 Copy_s32Number)
{
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	60 97       	sbiw	r28, 0x10	; 16
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	6d 87       	std	Y+13, r22	; 0x0d
    1474:	7e 87       	std	Y+14, r23	; 0x0e
    1476:	8f 87       	std	Y+15, r24	; 0x0f
    1478:	98 8b       	std	Y+16, r25	; 0x10
	char Local_ch8Digit[10] = {0};
    147a:	8a e0       	ldi	r24, 0x0A	; 10
    147c:	fe 01       	movw	r30, r28
    147e:	33 96       	adiw	r30, 0x03	; 3
    1480:	df 01       	movw	r26, r30
    1482:	98 2f       	mov	r25, r24
    1484:	1d 92       	st	X+, r1
    1486:	9a 95       	dec	r25
    1488:	e9 f7       	brne	.-6      	; 0x1484 <CLCD_voidSendDecimalNumber+0x2a>

	uint8 Local_u8ReverseCounter = 0u;
    148a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	if(Copy_s32Number == 0)
    148c:	8d 85       	ldd	r24, Y+13	; 0x0d
    148e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1490:	af 85       	ldd	r26, Y+15	; 0x0f
    1492:	b8 89       	ldd	r27, Y+16	; 0x10
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	a1 05       	cpc	r26, r1
    1498:	b1 05       	cpc	r27, r1
    149a:	21 f4       	brne	.+8      	; 0x14a4 <CLCD_voidSendDecimalNumber+0x4a>
	{
		CLCD_voidSendData('0');
    149c:	80 e3       	ldi	r24, 0x30	; 48
    149e:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>
    14a2:	7b c0       	rjmp	.+246    	; 0x159a <CLCD_voidSendDecimalNumber+0x140>
	}
	else
	{
		/*Check for the negative sign*/
		if(Copy_s32Number < 0)
    14a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a8:	af 85       	ldd	r26, Y+15	; 0x0f
    14aa:	b8 89       	ldd	r27, Y+16	; 0x10
    14ac:	bb 23       	and	r27, r27
    14ae:	0c f0       	brlt	.+2      	; 0x14b2 <CLCD_voidSendDecimalNumber+0x58>
    14b0:	54 c0       	rjmp	.+168    	; 0x155a <CLCD_voidSendDecimalNumber+0x100>
		{
			/*Print the negative sign to the lcd*/
			CLCD_voidSendData('-');
    14b2:	8d e2       	ldi	r24, 0x2D	; 45
    14b4:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>

			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	af 85       	ldd	r26, Y+15	; 0x0f
    14be:	b8 89       	ldd	r27, Y+16	; 0x10
    14c0:	b0 95       	com	r27
    14c2:	a0 95       	com	r26
    14c4:	90 95       	com	r25
    14c6:	81 95       	neg	r24
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	af 4f       	sbci	r26, 0xFF	; 255
    14cc:	bf 4f       	sbci	r27, 0xFF	; 255
    14ce:	8d 87       	std	Y+13, r24	; 0x0d
    14d0:	9e 87       	std	Y+14, r25	; 0x0e
    14d2:	af 87       	std	Y+15, r26	; 0x0f
    14d4:	b8 8b       	std	Y+16, r27	; 0x10
    14d6:	41 c0       	rjmp	.+130    	; 0x155a <CLCD_voidSendDecimalNumber+0x100>
		{
			/*
			 * Extract every digit number to the array of characters,
			 * then translate it into ascii value through adding '0'
			 */
			Local_ch8Digit[Local_u8ReverseCounter] = (char) (Copy_s32Number % 10);
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	08 2f       	mov	r16, r24
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	af 85       	ldd	r26, Y+15	; 0x0f
    14e4:	b8 89       	ldd	r27, Y+16	; 0x10
    14e6:	2a e0       	ldi	r18, 0x0A	; 10
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__divmodsi4>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	28 2f       	mov	r18, r24
    14fc:	ce 01       	movw	r24, r28
    14fe:	03 96       	adiw	r24, 0x03	; 3
    1500:	fc 01       	movw	r30, r24
    1502:	e0 0f       	add	r30, r16
    1504:	f1 1f       	adc	r31, r17
    1506:	20 83       	st	Z, r18
			Local_ch8Digit[Local_u8ReverseCounter] = Local_ch8Digit[Local_u8ReverseCounter] + '0';
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	48 2f       	mov	r20, r24
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	ce 01       	movw	r24, r28
    1516:	03 96       	adiw	r24, 0x03	; 3
    1518:	fc 01       	movw	r30, r24
    151a:	e2 0f       	add	r30, r18
    151c:	f3 1f       	adc	r31, r19
    151e:	80 81       	ld	r24, Z
    1520:	28 2f       	mov	r18, r24
    1522:	20 5d       	subi	r18, 0xD0	; 208
    1524:	ce 01       	movw	r24, r28
    1526:	03 96       	adiw	r24, 0x03	; 3
    1528:	fc 01       	movw	r30, r24
    152a:	e4 0f       	add	r30, r20
    152c:	f5 1f       	adc	r31, r21
    152e:	20 83       	st	Z, r18

			Copy_s32Number = Copy_s32Number / 10;
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	9e 85       	ldd	r25, Y+14	; 0x0e
    1534:	af 85       	ldd	r26, Y+15	; 0x0f
    1536:	b8 89       	ldd	r27, Y+16	; 0x10
    1538:	2a e0       	ldi	r18, 0x0A	; 10
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__divmodsi4>
    1548:	da 01       	movw	r26, r20
    154a:	c9 01       	movw	r24, r18
    154c:	8d 87       	std	Y+13, r24	; 0x0d
    154e:	9e 87       	std	Y+14, r25	; 0x0e
    1550:	af 87       	std	Y+15, r26	; 0x0f
    1552:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8ReverseCounter++;
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	8f 5f       	subi	r24, 0xFF	; 255
    1558:	8a 83       	std	Y+2, r24	; 0x02
			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
		}

		/*Extracting the number digits into array of characters*/
		while(Copy_s32Number > 0)
    155a:	8d 85       	ldd	r24, Y+13	; 0x0d
    155c:	9e 85       	ldd	r25, Y+14	; 0x0e
    155e:	af 85       	ldd	r26, Y+15	; 0x0f
    1560:	b8 89       	ldd	r27, Y+16	; 0x10
    1562:	18 16       	cp	r1, r24
    1564:	19 06       	cpc	r1, r25
    1566:	1a 06       	cpc	r1, r26
    1568:	1b 06       	cpc	r1, r27
    156a:	0c f4       	brge	.+2      	; 0x156e <CLCD_voidSendDecimalNumber+0x114>
    156c:	b5 cf       	rjmp	.-150    	; 0x14d8 <CLCD_voidSendDecimalNumber+0x7e>
			Copy_s32Number = Copy_s32Number / 10;
			Local_u8ReverseCounter++;
		}

		/*Printing every character in the array until the end of the number*/
		Local_u8PrintCounter = Local_u8ReverseCounter;
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			CLCD_voidSendData(Local_ch8Digit[Local_u8PrintCounter - 1u]);
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9c 01       	movw	r18, r24
    157a:	21 50       	subi	r18, 0x01	; 1
    157c:	30 40       	sbci	r19, 0x00	; 0
    157e:	ce 01       	movw	r24, r28
    1580:	03 96       	adiw	r24, 0x03	; 3
    1582:	fc 01       	movw	r30, r24
    1584:	e2 0f       	add	r30, r18
    1586:	f3 1f       	adc	r31, r19
    1588:	80 81       	ld	r24, Z
    158a:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>
			Local_u8PrintCounter--;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	81 50       	subi	r24, 0x01	; 1
    1592:	89 83       	std	Y+1, r24	; 0x01
		}
		while(Local_u8PrintCounter > 0u);
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	88 23       	and	r24, r24
    1598:	61 f7       	brne	.-40     	; 0x1572 <CLCD_voidSendDecimalNumber+0x118>
	}
}
    159a:	60 96       	adiw	r28, 0x10	; 16
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	08 95       	ret

000015b0 <CLCD_voidSendBinaryNumber>:


void CLCD_voidSendBinaryNumber(sint16 Copy_s16Number)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	a4 97       	sbiw	r28, 0x24	; 36
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	9c a3       	std	Y+36, r25	; 0x24
    15c6:	8b a3       	std	Y+35, r24	; 0x23
	uint8 Local_u8BinaryDigits[32] = {0u};
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	fe 01       	movw	r30, r28
    15cc:	33 96       	adiw	r30, 0x03	; 3
    15ce:	df 01       	movw	r26, r30
    15d0:	98 2f       	mov	r25, r24
    15d2:	1d 92       	st	X+, r1
    15d4:	9a 95       	dec	r25
    15d6:	e9 f7       	brne	.-6      	; 0x15d2 <CLCD_voidSendBinaryNumber+0x22>

	uint8 Local_u8ReverseCounter = 0u;
    15d8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");
    15da:	80 e6       	ldi	r24, 0x60	; 96
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    15e2:	1a 82       	std	Y+2, r1	; 0x02
    15e4:	23 c0       	rjmp	.+70     	; 0x162c <CLCD_voidSendBinaryNumber+0x7c>
	{
		if((Copy_s16Number & 1) == 1)
    15e6:	8b a1       	ldd	r24, Y+35	; 0x23
    15e8:	9c a1       	ldd	r25, Y+36	; 0x24
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	88 23       	and	r24, r24
    15f0:	59 f0       	breq	.+22     	; 0x1608 <CLCD_voidSendBinaryNumber+0x58>
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 1u;
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	ce 01       	movw	r24, r28
    15fa:	03 96       	adiw	r24, 0x03	; 3
    15fc:	fc 01       	movw	r30, r24
    15fe:	e2 0f       	add	r30, r18
    1600:	f3 1f       	adc	r31, r19
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 83       	st	Z, r24
    1606:	09 c0       	rjmp	.+18     	; 0x161a <CLCD_voidSendBinaryNumber+0x6a>
		}
		else
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 0u;
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	ce 01       	movw	r24, r28
    1610:	03 96       	adiw	r24, 0x03	; 3
    1612:	fc 01       	movw	r30, r24
    1614:	e2 0f       	add	r30, r18
    1616:	f3 1f       	adc	r31, r19
    1618:	10 82       	st	Z, r1
		}
		Copy_s16Number = Copy_s16Number >> 1;
    161a:	8b a1       	ldd	r24, Y+35	; 0x23
    161c:	9c a1       	ldd	r25, Y+36	; 0x24
    161e:	95 95       	asr	r25
    1620:	87 95       	ror	r24
    1622:	9c a3       	std	Y+36, r25	; 0x24
    1624:	8b a3       	std	Y+35, r24	; 0x23

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	8a 83       	std	Y+2, r24	; 0x02
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	80 31       	cpi	r24, 0x10	; 16
    1630:	d0 f2       	brcs	.-76     	; 0x15e6 <CLCD_voidSendBinaryNumber+0x36>
		}
		Copy_s16Number = Copy_s16Number >> 1;
	}

	/*Go to the next line in the lcd*/
	CLCD_u8GoToXY(0,1);
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>

	/*Printing every character in the array until the end of the number*/
	Local_u8PrintCounter = 16;
    163a:	80 e1       	ldi	r24, 0x10	; 16
    163c:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		if(Local_u8BinaryDigits[Local_u8PrintCounter - 1] == 0)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9c 01       	movw	r18, r24
    1646:	21 50       	subi	r18, 0x01	; 1
    1648:	30 40       	sbci	r19, 0x00	; 0
    164a:	ce 01       	movw	r24, r28
    164c:	03 96       	adiw	r24, 0x03	; 3
    164e:	fc 01       	movw	r30, r24
    1650:	e2 0f       	add	r30, r18
    1652:	f3 1f       	adc	r31, r19
    1654:	80 81       	ld	r24, Z
    1656:	88 23       	and	r24, r24
    1658:	21 f4       	brne	.+8      	; 0x1662 <CLCD_voidSendBinaryNumber+0xb2>
		{
			CLCD_voidSendData('0');
    165a:	80 e3       	ldi	r24, 0x30	; 48
    165c:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <CLCD_voidSendBinaryNumber+0xb8>
		}
		else
		{
			CLCD_voidSendData('1');
    1662:	81 e3       	ldi	r24, 0x31	; 49
    1664:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>
		}

		Local_u8PrintCounter--;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	81 50       	subi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
	}
	while(Local_u8PrintCounter > 0);
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	88 23       	and	r24, r24
    1672:	29 f7       	brne	.-54     	; 0x163e <CLCD_voidSendBinaryNumber+0x8e>
}
    1674:	a4 96       	adiw	r28, 0x24	; 36
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <CLCD_voidSendHexaNumber>:
//	/*Returnning the MaxZeros counter*/
//	return MaxZeros;
//}

void CLCD_voidSendHexaNumber(sint32 Copy_s32Number)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	a5 97       	sbiw	r28, 0x25	; 37
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	6d 8f       	std	Y+29, r22	; 0x1d
    169c:	7e 8f       	std	Y+30, r23	; 0x1e
    169e:	8f 8f       	std	Y+31, r24	; 0x1f
    16a0:	98 a3       	std	Y+32, r25	; 0x20
	/*Define Variables*/
	char Local_ch8HexaTable[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
									'A', 'B', 'C', 'D', 'E', 'F'};
    16a2:	ce 01       	movw	r24, r28
    16a4:	05 96       	adiw	r24, 0x05	; 5
    16a6:	9a a3       	std	Y+34, r25	; 0x22
    16a8:	89 a3       	std	Y+33, r24	; 0x21
    16aa:	ee e5       	ldi	r30, 0x5E	; 94
    16ac:	f3 e0       	ldi	r31, 0x03	; 3
    16ae:	fc a3       	std	Y+36, r31	; 0x24
    16b0:	eb a3       	std	Y+35, r30	; 0x23
    16b2:	f0 e1       	ldi	r31, 0x10	; 16
    16b4:	fd a3       	std	Y+37, r31	; 0x25
    16b6:	eb a1       	ldd	r30, Y+35	; 0x23
    16b8:	fc a1       	ldd	r31, Y+36	; 0x24
    16ba:	00 80       	ld	r0, Z
    16bc:	8b a1       	ldd	r24, Y+35	; 0x23
    16be:	9c a1       	ldd	r25, Y+36	; 0x24
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	9c a3       	std	Y+36, r25	; 0x24
    16c4:	8b a3       	std	Y+35, r24	; 0x23
    16c6:	e9 a1       	ldd	r30, Y+33	; 0x21
    16c8:	fa a1       	ldd	r31, Y+34	; 0x22
    16ca:	00 82       	st	Z, r0
    16cc:	89 a1       	ldd	r24, Y+33	; 0x21
    16ce:	9a a1       	ldd	r25, Y+34	; 0x22
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	9a a3       	std	Y+34, r25	; 0x22
    16d4:	89 a3       	std	Y+33, r24	; 0x21
    16d6:	9d a1       	ldd	r25, Y+37	; 0x25
    16d8:	91 50       	subi	r25, 0x01	; 1
    16da:	9d a3       	std	Y+37, r25	; 0x25
    16dc:	ed a1       	ldd	r30, Y+37	; 0x25
    16de:	ee 23       	and	r30, r30
    16e0:	51 f7       	brne	.-44     	; 0x16b6 <CLCD_voidSendHexaNumber+0x30>
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    16e2:	1b 82       	std	Y+3, r1	; 0x03
    16e4:	20 c0       	rjmp	.+64     	; 0x1726 <CLCD_voidSendHexaNumber+0xa0>
	{
		/*Get the least for bits of the number*/
		Local_u8LeastFourBits = Copy_s32Number & 0x0f;
    16e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16e8:	8f 70       	andi	r24, 0x0F	; 15
    16ea:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number = Copy_s32Number >> 4;
    16ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16f0:	af 8d       	ldd	r26, Y+31	; 0x1f
    16f2:	b8 a1       	ldd	r27, Y+32	; 0x20
    16f4:	68 94       	set
    16f6:	13 f8       	bld	r1, 3
    16f8:	b5 95       	asr	r27
    16fa:	a7 95       	ror	r26
    16fc:	97 95       	ror	r25
    16fe:	87 95       	ror	r24
    1700:	16 94       	lsr	r1
    1702:	d1 f7       	brne	.-12     	; 0x16f8 <CLCD_voidSendHexaNumber+0x72>
    1704:	8d 8f       	std	Y+29, r24	; 0x1d
    1706:	9e 8f       	std	Y+30, r25	; 0x1e
    1708:	af 8f       	std	Y+31, r26	; 0x1f
    170a:	b8 a3       	std	Y+32, r27	; 0x20

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	ce 01       	movw	r24, r28
    1714:	45 96       	adiw	r24, 0x15	; 21
    1716:	fc 01       	movw	r30, r24
    1718:	e2 0f       	add	r30, r18
    171a:	f3 1f       	adc	r31, r19
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	80 83       	st	Z, r24
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	8b 83       	std	Y+3, r24	; 0x03
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	88 30       	cpi	r24, 0x08	; 8
    172a:	e8 f2       	brcs	.-70     	; 0x16e6 <CLCD_voidSendHexaNumber+0x60>

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
	}

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");
    172c:	83 e6       	ldi	r24, 0x63	; 99
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    1734:	87 e0       	ldi	r24, 0x07	; 7
    1736:	8c 83       	std	Y+4, r24	; 0x04
    1738:	1a c0       	rjmp	.+52     	; 0x176e <CLCD_voidSendHexaNumber+0xe8>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	28 2f       	mov	r18, r24
    173e:	33 27       	eor	r19, r19
    1740:	27 fd       	sbrc	r18, 7
    1742:	30 95       	com	r19
    1744:	ce 01       	movw	r24, r28
    1746:	45 96       	adiw	r24, 0x15	; 21
    1748:	fc 01       	movw	r30, r24
    174a:	e2 0f       	add	r30, r18
    174c:	f3 1f       	adc	r31, r19
    174e:	80 81       	ld	r24, Z
    1750:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	ce 01       	movw	r24, r28
    175a:	05 96       	adiw	r24, 0x05	; 5
    175c:	fc 01       	movw	r30, r24
    175e:	e2 0f       	add	r30, r18
    1760:	f3 1f       	adc	r31, r19
    1762:	80 81       	ld	r24, Z
    1764:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	81 50       	subi	r24, 0x01	; 1
    176c:	8c 83       	std	Y+4, r24	; 0x04
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	88 23       	and	r24, r24
    1772:	1c f7       	brge	.-58     	; 0x173a <CLCD_voidSendHexaNumber+0xb4>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
	}
}
    1774:	a5 96       	adiw	r28, 0x25	; 37
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	27 97       	sbiw	r28, 0x07	; 7
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	9c 83       	std	Y+4, r25	; 0x04
    179c:	8b 83       	std	Y+3, r24	; 0x03
    179e:	6d 83       	std	Y+5, r22	; 0x05
    17a0:	4e 83       	std	Y+6, r20	; 0x06
    17a2:	2f 83       	std	Y+7, r18	; 0x07
	/*Define Variables*/
	uint8 Local_u8CGRAMAdd = Copy_u8PatternNum * 8u;
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter;

	/*Set bit 6 in CGRAMAdd for CGRAM Address command standard*/
	SET_BIT(Local_u8CGRAMAdd, 6);
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	80 64       	ori	r24, 0x40	; 64
    17bc:	8a 83       	std	Y+2, r24	; 0x02

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	0e 94 0c 09 	call	0x1218	; 0x1218 <CLCD_voidSendCmd>

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    17c4:	19 82       	std	Y+1, r1	; 0x01
    17c6:	0e c0       	rjmp	.+28     	; 0x17e4 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	fc 01       	movw	r30, r24
    17d4:	e2 0f       	add	r30, r18
    17d6:	f3 1f       	adc	r31, r19
    17d8:	80 81       	ld	r24, Z
    17da:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	88 30       	cpi	r24, 0x08	; 8
    17e8:	78 f3       	brcs	.-34     	; 0x17c8 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}

	/*Go to DDRAM Address to display the pattern*/
	CLCD_u8GoToXY(Copy_u8XPos, Copy_u8YPos);
    17ea:	8e 81       	ldd	r24, Y+6	; 0x06
    17ec:	6f 81       	ldd	r22, Y+7	; 0x07
    17ee:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>

	/*Display the pattern from CGRAM to DDRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>
}
    17f8:	27 96       	adiw	r28, 0x07	; 7
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <CLCD_u8GoToXY>:

uint8 CLCD_u8GoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <CLCD_u8GoToXY+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <CLCD_u8GoToXY+0x8>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    181a:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8DDRamAdd;

	/*Configure the address of DDRam*/
	if(Copy_u8YPos == 0u)
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	88 23       	and	r24, r24
    1820:	19 f4       	brne	.+6      	; 0x1828 <CLCD_u8GoToXY+0x1e>
	{
		Local_u8DDRamAdd = Copy_u8XPos;
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	09 c0       	rjmp	.+18     	; 0x183a <CLCD_u8GoToXY+0x30>
	}
	else if(Copy_u8YPos == 1u)
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	21 f4       	brne	.+8      	; 0x1836 <CLCD_u8GoToXY+0x2c>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	80 5c       	subi	r24, 0xC0	; 192
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	02 c0       	rjmp	.+4      	; 0x183a <CLCD_u8GoToXY+0x30>
	}
	else
	{
		Local_u8ErrorState = NOK;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Send DDRam Set Address command to lcd*/
	SET_BIT(Local_u8DDRamAdd,7);
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	80 68       	ori	r24, 0x80	; 128
    183e:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	0e 94 0c 09 	call	0x1218	; 0x1218 <CLCD_voidSendCmd>

	return Local_u8ErrorState;
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	28 97       	sbiw	r28, 0x08	; 8
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	8a 83       	std	Y+2, r24	; 0x02
    186c:	6b 83       	std	Y+3, r22	; 0x03
    186e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
    1870:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	88 30       	cpi	r24, 0x08	; 8
    1876:	08 f0       	brcs	.+2      	; 0x187a <DIO_u8SetPinDirection+0x24>
    1878:	f4 c0       	rjmp	.+488    	; 0x1a62 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	09 f0       	breq	.+2      	; 0x1882 <DIO_u8SetPinDirection+0x2c>
    1880:	72 c0       	rjmp	.+228    	; 0x1966 <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	38 87       	std	Y+8, r19	; 0x08
    188a:	2f 83       	std	Y+7, r18	; 0x07
    188c:	8f 81       	ldd	r24, Y+7	; 0x07
    188e:	98 85       	ldd	r25, Y+8	; 0x08
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 05       	cpc	r25, r1
    1894:	49 f1       	breq	.+82     	; 0x18e8 <DIO_u8SetPinDirection+0x92>
    1896:	2f 81       	ldd	r18, Y+7	; 0x07
    1898:	38 85       	ldd	r19, Y+8	; 0x08
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	2c f4       	brge	.+10     	; 0x18aa <DIO_u8SetPinDirection+0x54>
    18a0:	8f 81       	ldd	r24, Y+7	; 0x07
    18a2:	98 85       	ldd	r25, Y+8	; 0x08
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <DIO_u8SetPinDirection+0x6a>
    18a8:	5b c0       	rjmp	.+182    	; 0x1960 <DIO_u8SetPinDirection+0x10a>
    18aa:	2f 81       	ldd	r18, Y+7	; 0x07
    18ac:	38 85       	ldd	r19, Y+8	; 0x08
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	71 f1       	breq	.+92     	; 0x1910 <DIO_u8SetPinDirection+0xba>
    18b4:	8f 81       	ldd	r24, Y+7	; 0x07
    18b6:	98 85       	ldd	r25, Y+8	; 0x08
    18b8:	83 30       	cpi	r24, 0x03	; 3
    18ba:	91 05       	cpc	r25, r1
    18bc:	e9 f1       	breq	.+122    	; 0x1938 <DIO_u8SetPinDirection+0xe2>
    18be:	50 c0       	rjmp	.+160    	; 0x1960 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
    18c0:	aa e3       	ldi	r26, 0x3A	; 58
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ea e3       	ldi	r30, 0x3A	; 58
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_u8SetPinDirection+0x88>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_u8SetPinDirection+0x84>
    18e2:	84 2b       	or	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	bf c0       	rjmp	.+382    	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
    18e8:	a7 e3       	ldi	r26, 0x37	; 55
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e7 e3       	ldi	r30, 0x37	; 55
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_u8SetPinDirection+0xb0>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_u8SetPinDirection+0xac>
    190a:	84 2b       	or	r24, r20
    190c:	8c 93       	st	X, r24
    190e:	ab c0       	rjmp	.+342    	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
    1910:	a4 e3       	ldi	r26, 0x34	; 52
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e4 e3       	ldi	r30, 0x34	; 52
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_u8SetPinDirection+0xd8>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <DIO_u8SetPinDirection+0xd4>
    1932:	84 2b       	or	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	97 c0       	rjmp	.+302    	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
    1938:	a1 e3       	ldi	r26, 0x31	; 49
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e1 e3       	ldi	r30, 0x31	; 49
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_u8SetPinDirection+0x100>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_u8SetPinDirection+0xfc>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	83 c0       	rjmp	.+262    	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	80 c0       	rjmp	.+256    	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	88 23       	and	r24, r24
    196a:	09 f0       	breq	.+2      	; 0x196e <DIO_u8SetPinDirection+0x118>
    196c:	77 c0       	rjmp	.+238    	; 0x1a5c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3e 83       	std	Y+6, r19	; 0x06
    1976:	2d 83       	std	Y+5, r18	; 0x05
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	91 05       	cpc	r25, r1
    1980:	59 f1       	breq	.+86     	; 0x19d8 <DIO_u8SetPinDirection+0x182>
    1982:	2d 81       	ldd	r18, Y+5	; 0x05
    1984:	3e 81       	ldd	r19, Y+6	; 0x06
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	2c f4       	brge	.+10     	; 0x1996 <DIO_u8SetPinDirection+0x140>
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	69 f0       	breq	.+26     	; 0x19ae <DIO_u8SetPinDirection+0x158>
    1994:	60 c0       	rjmp	.+192    	; 0x1a56 <DIO_u8SetPinDirection+0x200>
    1996:	2d 81       	ldd	r18, Y+5	; 0x05
    1998:	3e 81       	ldd	r19, Y+6	; 0x06
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	89 f1       	breq	.+98     	; 0x1a02 <DIO_u8SetPinDirection+0x1ac>
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	83 30       	cpi	r24, 0x03	; 3
    19a6:	91 05       	cpc	r25, r1
    19a8:	09 f4       	brne	.+2      	; 0x19ac <DIO_u8SetPinDirection+0x156>
    19aa:	40 c0       	rjmp	.+128    	; 0x1a2c <DIO_u8SetPinDirection+0x1d6>
    19ac:	54 c0       	rjmp	.+168    	; 0x1a56 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
    19ae:	aa e3       	ldi	r26, 0x3A	; 58
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	ea e3       	ldi	r30, 0x3A	; 58
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <DIO_u8SetPinDirection+0x176>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <DIO_u8SetPinDirection+0x172>
    19d0:	80 95       	com	r24
    19d2:	84 23       	and	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	47 c0       	rjmp	.+142    	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
    19d8:	a7 e3       	ldi	r26, 0x37	; 55
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e7 e3       	ldi	r30, 0x37	; 55
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_u8SetPinDirection+0x1a0>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_u8SetPinDirection+0x19c>
    19fa:	80 95       	com	r24
    19fc:	84 23       	and	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	32 c0       	rjmp	.+100    	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
    1a02:	a4 e3       	ldi	r26, 0x34	; 52
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e4 e3       	ldi	r30, 0x34	; 52
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <DIO_u8SetPinDirection+0x1ca>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <DIO_u8SetPinDirection+0x1c6>
    1a24:	80 95       	com	r24
    1a26:	84 23       	and	r24, r20
    1a28:	8c 93       	st	X, r24
    1a2a:	1d c0       	rjmp	.+58     	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    1a2c:	a1 e3       	ldi	r26, 0x31	; 49
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e1 e3       	ldi	r30, 0x31	; 49
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <DIO_u8SetPinDirection+0x1f4>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <DIO_u8SetPinDirection+0x1f0>
    1a4e:	80 95       	com	r24
    1a50:	84 23       	and	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	08 c0       	rjmp	.+16     	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	05 c0       	rjmp	.+10     	; 0x1a66 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a68:	28 96       	adiw	r28, 0x08	; 8
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	28 97       	sbiw	r28, 0x08	; 8
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	8a 83       	std	Y+2, r24	; 0x02
    1a90:	6b 83       	std	Y+3, r22	; 0x03
    1a92:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1a94:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	88 30       	cpi	r24, 0x08	; 8
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <DIO_u8SetPinValue+0x24>
    1a9c:	f4 c0       	rjmp	.+488    	; 0x1c86 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <DIO_u8SetPinValue+0x2c>
    1aa4:	72 c0       	rjmp	.+228    	; 0x1b8a <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	38 87       	std	Y+8, r19	; 0x08
    1aae:	2f 83       	std	Y+7, r18	; 0x07
    1ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab2:	98 85       	ldd	r25, Y+8	; 0x08
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	49 f1       	breq	.+82     	; 0x1b0c <DIO_u8SetPinValue+0x92>
    1aba:	2f 81       	ldd	r18, Y+7	; 0x07
    1abc:	38 85       	ldd	r19, Y+8	; 0x08
    1abe:	22 30       	cpi	r18, 0x02	; 2
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	2c f4       	brge	.+10     	; 0x1ace <DIO_u8SetPinValue+0x54>
    1ac4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac6:	98 85       	ldd	r25, Y+8	; 0x08
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	61 f0       	breq	.+24     	; 0x1ae4 <DIO_u8SetPinValue+0x6a>
    1acc:	5b c0       	rjmp	.+182    	; 0x1b84 <DIO_u8SetPinValue+0x10a>
    1ace:	2f 81       	ldd	r18, Y+7	; 0x07
    1ad0:	38 85       	ldd	r19, Y+8	; 0x08
    1ad2:	22 30       	cpi	r18, 0x02	; 2
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	71 f1       	breq	.+92     	; 0x1b34 <DIO_u8SetPinValue+0xba>
    1ad8:	8f 81       	ldd	r24, Y+7	; 0x07
    1ada:	98 85       	ldd	r25, Y+8	; 0x08
    1adc:	83 30       	cpi	r24, 0x03	; 3
    1ade:	91 05       	cpc	r25, r1
    1ae0:	e9 f1       	breq	.+122    	; 0x1b5c <DIO_u8SetPinValue+0xe2>
    1ae2:	50 c0       	rjmp	.+160    	; 0x1b84 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    1ae4:	ab e3       	ldi	r26, 0x3B	; 59
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	eb e3       	ldi	r30, 0x3B	; 59
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	48 2f       	mov	r20, r24
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	02 2e       	mov	r0, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <DIO_u8SetPinValue+0x88>
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	0a 94       	dec	r0
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <DIO_u8SetPinValue+0x84>
    1b06:	84 2b       	or	r24, r20
    1b08:	8c 93       	st	X, r24
    1b0a:	bf c0       	rjmp	.+382    	; 0x1c8a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    1b0c:	a8 e3       	ldi	r26, 0x38	; 56
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e8 e3       	ldi	r30, 0x38	; 56
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	48 2f       	mov	r20, r24
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	02 2e       	mov	r0, r18
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <DIO_u8SetPinValue+0xb0>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	0a 94       	dec	r0
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <DIO_u8SetPinValue+0xac>
    1b2e:	84 2b       	or	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	ab c0       	rjmp	.+342    	; 0x1c8a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    1b34:	a5 e3       	ldi	r26, 0x35	; 53
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e5 e3       	ldi	r30, 0x35	; 53
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	02 2e       	mov	r0, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <DIO_u8SetPinValue+0xd8>
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <DIO_u8SetPinValue+0xd4>
    1b56:	84 2b       	or	r24, r20
    1b58:	8c 93       	st	X, r24
    1b5a:	97 c0       	rjmp	.+302    	; 0x1c8a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    1b5c:	a2 e3       	ldi	r26, 0x32	; 50
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e2 e3       	ldi	r30, 0x32	; 50
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <DIO_u8SetPinValue+0x100>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <DIO_u8SetPinValue+0xfc>
    1b7e:	84 2b       	or	r24, r20
    1b80:	8c 93       	st	X, r24
    1b82:	83 c0       	rjmp	.+262    	; 0x1c8a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	80 c0       	rjmp	.+256    	; 0x1c8a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	88 23       	and	r24, r24
    1b8e:	09 f0       	breq	.+2      	; 0x1b92 <DIO_u8SetPinValue+0x118>
    1b90:	77 c0       	rjmp	.+238    	; 0x1c80 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3e 83       	std	Y+6, r19	; 0x06
    1b9a:	2d 83       	std	Y+5, r18	; 0x05
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	59 f1       	breq	.+86     	; 0x1bfc <DIO_u8SetPinValue+0x182>
    1ba6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ba8:	3e 81       	ldd	r19, Y+6	; 0x06
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	2c f4       	brge	.+10     	; 0x1bba <DIO_u8SetPinValue+0x140>
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	69 f0       	breq	.+26     	; 0x1bd2 <DIO_u8SetPinValue+0x158>
    1bb8:	60 c0       	rjmp	.+192    	; 0x1c7a <DIO_u8SetPinValue+0x200>
    1bba:	2d 81       	ldd	r18, Y+5	; 0x05
    1bbc:	3e 81       	ldd	r19, Y+6	; 0x06
    1bbe:	22 30       	cpi	r18, 0x02	; 2
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	89 f1       	breq	.+98     	; 0x1c26 <DIO_u8SetPinValue+0x1ac>
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <DIO_u8SetPinValue+0x156>
    1bce:	40 c0       	rjmp	.+128    	; 0x1c50 <DIO_u8SetPinValue+0x1d6>
    1bd0:	54 c0       	rjmp	.+168    	; 0x1c7a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    1bd2:	ab e3       	ldi	r26, 0x3B	; 59
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	eb e3       	ldi	r30, 0x3B	; 59
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_u8SetPinValue+0x176>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_u8SetPinValue+0x172>
    1bf4:	80 95       	com	r24
    1bf6:	84 23       	and	r24, r20
    1bf8:	8c 93       	st	X, r24
    1bfa:	47 c0       	rjmp	.+142    	; 0x1c8a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    1bfc:	a8 e3       	ldi	r26, 0x38	; 56
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e8 e3       	ldi	r30, 0x38	; 56
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_u8SetPinValue+0x1a0>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_u8SetPinValue+0x19c>
    1c1e:	80 95       	com	r24
    1c20:	84 23       	and	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	32 c0       	rjmp	.+100    	; 0x1c8a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    1c26:	a5 e3       	ldi	r26, 0x35	; 53
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e5 e3       	ldi	r30, 0x35	; 53
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <DIO_u8SetPinValue+0x1ca>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <DIO_u8SetPinValue+0x1c6>
    1c48:	80 95       	com	r24
    1c4a:	84 23       	and	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	1d c0       	rjmp	.+58     	; 0x1c8a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    1c50:	a2 e3       	ldi	r26, 0x32	; 50
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e2 e3       	ldi	r30, 0x32	; 50
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_u8SetPinValue+0x1f4>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <DIO_u8SetPinValue+0x1f0>
    1c72:	80 95       	com	r24
    1c74:	84 23       	and	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	08 c0       	rjmp	.+16     	; 0x1c8a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8c:	28 96       	adiw	r28, 0x08	; 8
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <DIO_u8TogglePinValue+0x6>
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <DIO_u8TogglePinValue+0x8>
    1ca6:	0f 92       	push	r0
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	8a 83       	std	Y+2, r24	; 0x02
    1cae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1cb0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	88 30       	cpi	r24, 0x08	; 8
    1cb6:	08 f0       	brcs	.+2      	; 0x1cba <DIO_u8TogglePinValue+0x1c>
    1cb8:	72 c0       	rjmp	.+228    	; 0x1d9e <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	3d 83       	std	Y+5, r19	; 0x05
    1cc2:	2c 83       	std	Y+4, r18	; 0x04
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	91 05       	cpc	r25, r1
    1ccc:	49 f1       	breq	.+82     	; 0x1d20 <DIO_u8TogglePinValue+0x82>
    1cce:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd2:	22 30       	cpi	r18, 0x02	; 2
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <DIO_u8TogglePinValue+0x44>
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	61 f0       	breq	.+24     	; 0x1cf8 <DIO_u8TogglePinValue+0x5a>
    1ce0:	5b c0       	rjmp	.+182    	; 0x1d98 <DIO_u8TogglePinValue+0xfa>
    1ce2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce6:	22 30       	cpi	r18, 0x02	; 2
    1ce8:	31 05       	cpc	r19, r1
    1cea:	71 f1       	breq	.+92     	; 0x1d48 <DIO_u8TogglePinValue+0xaa>
    1cec:	8c 81       	ldd	r24, Y+4	; 0x04
    1cee:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf0:	83 30       	cpi	r24, 0x03	; 3
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	e9 f1       	breq	.+122    	; 0x1d70 <DIO_u8TogglePinValue+0xd2>
    1cf6:	50 c0       	rjmp	.+160    	; 0x1d98 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    1cf8:	ab e3       	ldi	r26, 0x3B	; 59
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	eb e3       	ldi	r30, 0x3B	; 59
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_u8TogglePinValue+0x78>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_u8TogglePinValue+0x74>
    1d1a:	84 27       	eor	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	41 c0       	rjmp	.+130    	; 0x1da2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    1d20:	a8 e3       	ldi	r26, 0x38	; 56
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e8 e3       	ldi	r30, 0x38	; 56
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 2e       	mov	r0, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <DIO_u8TogglePinValue+0xa0>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	0a 94       	dec	r0
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <DIO_u8TogglePinValue+0x9c>
    1d42:	84 27       	eor	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	2d c0       	rjmp	.+90     	; 0x1da2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    1d48:	a5 e3       	ldi	r26, 0x35	; 53
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e5 e3       	ldi	r30, 0x35	; 53
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_u8TogglePinValue+0xc8>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_u8TogglePinValue+0xc4>
    1d6a:	84 27       	eor	r24, r20
    1d6c:	8c 93       	st	X, r24
    1d6e:	19 c0       	rjmp	.+50     	; 0x1da2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    1d70:	a2 e3       	ldi	r26, 0x32	; 50
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e2 e3       	ldi	r30, 0x32	; 50
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 2e       	mov	r0, r18
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <DIO_u8TogglePinValue+0xf0>
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	0a 94       	dec	r0
    1d90:	e2 f7       	brpl	.-8      	; 0x1d8a <DIO_u8TogglePinValue+0xec>
    1d92:	84 27       	eor	r24, r20
    1d94:	8c 93       	st	X, r24
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	27 97       	sbiw	r28, 0x07	; 7
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	8a 83       	std	Y+2, r24	; 0x02
    1dca:	6b 83       	std	Y+3, r22	; 0x03
    1dcc:	5d 83       	std	Y+5, r21	; 0x05
    1dce:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1dd0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	88 30       	cpi	r24, 0x08	; 8
    1dd6:	08 f0       	brcs	.+2      	; 0x1dda <DIO_u8GetPinValue+0x26>
    1dd8:	74 c0       	rjmp	.+232    	; 0x1ec2 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	3f 83       	std	Y+7, r19	; 0x07
    1de2:	2e 83       	std	Y+6, r18	; 0x06
    1de4:	4e 81       	ldd	r20, Y+6	; 0x06
    1de6:	5f 81       	ldd	r21, Y+7	; 0x07
    1de8:	41 30       	cpi	r20, 0x01	; 1
    1dea:	51 05       	cpc	r21, r1
    1dec:	59 f1       	breq	.+86     	; 0x1e44 <DIO_u8GetPinValue+0x90>
    1dee:	8e 81       	ldd	r24, Y+6	; 0x06
    1df0:	9f 81       	ldd	r25, Y+7	; 0x07
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	91 05       	cpc	r25, r1
    1df6:	34 f4       	brge	.+12     	; 0x1e04 <DIO_u8GetPinValue+0x50>
    1df8:	2e 81       	ldd	r18, Y+6	; 0x06
    1dfa:	3f 81       	ldd	r19, Y+7	; 0x07
    1dfc:	21 15       	cp	r18, r1
    1dfe:	31 05       	cpc	r19, r1
    1e00:	69 f0       	breq	.+26     	; 0x1e1c <DIO_u8GetPinValue+0x68>
    1e02:	5c c0       	rjmp	.+184    	; 0x1ebc <DIO_u8GetPinValue+0x108>
    1e04:	4e 81       	ldd	r20, Y+6	; 0x06
    1e06:	5f 81       	ldd	r21, Y+7	; 0x07
    1e08:	42 30       	cpi	r20, 0x02	; 2
    1e0a:	51 05       	cpc	r21, r1
    1e0c:	79 f1       	breq	.+94     	; 0x1e6c <DIO_u8GetPinValue+0xb8>
    1e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e10:	9f 81       	ldd	r25, Y+7	; 0x07
    1e12:	83 30       	cpi	r24, 0x03	; 3
    1e14:	91 05       	cpc	r25, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <DIO_u8GetPinValue+0x66>
    1e18:	3d c0       	rjmp	.+122    	; 0x1e94 <DIO_u8GetPinValue+0xe0>
    1e1a:	50 c0       	rjmp	.+160    	; 0x1ebc <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    1e1c:	e9 e3       	ldi	r30, 0x39	; 57
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a9 01       	movw	r20, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <DIO_u8GetPinValue+0x80>
    1e30:	55 95       	asr	r21
    1e32:	47 95       	ror	r20
    1e34:	8a 95       	dec	r24
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <DIO_u8GetPinValue+0x7c>
    1e38:	ca 01       	movw	r24, r20
    1e3a:	81 70       	andi	r24, 0x01	; 1
    1e3c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e3e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e40:	80 83       	st	Z, r24
    1e42:	41 c0       	rjmp	.+130    	; 0x1ec6 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    1e44:	e6 e3       	ldi	r30, 0x36	; 54
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a9 01       	movw	r20, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <DIO_u8GetPinValue+0xa8>
    1e58:	55 95       	asr	r21
    1e5a:	47 95       	ror	r20
    1e5c:	8a 95       	dec	r24
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <DIO_u8GetPinValue+0xa4>
    1e60:	ca 01       	movw	r24, r20
    1e62:	81 70       	andi	r24, 0x01	; 1
    1e64:	ec 81       	ldd	r30, Y+4	; 0x04
    1e66:	fd 81       	ldd	r31, Y+5	; 0x05
    1e68:	80 83       	st	Z, r24
    1e6a:	2d c0       	rjmp	.+90     	; 0x1ec6 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    1e6c:	e3 e3       	ldi	r30, 0x33	; 51
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a9 01       	movw	r20, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <DIO_u8GetPinValue+0xd0>
    1e80:	55 95       	asr	r21
    1e82:	47 95       	ror	r20
    1e84:	8a 95       	dec	r24
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <DIO_u8GetPinValue+0xcc>
    1e88:	ca 01       	movw	r24, r20
    1e8a:	81 70       	andi	r24, 0x01	; 1
    1e8c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e90:	80 83       	st	Z, r24
    1e92:	19 c0       	rjmp	.+50     	; 0x1ec6 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    1e94:	e0 e3       	ldi	r30, 0x30	; 48
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a9 01       	movw	r20, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_u8GetPinValue+0xf8>
    1ea8:	55 95       	asr	r21
    1eaa:	47 95       	ror	r20
    1eac:	8a 95       	dec	r24
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_u8GetPinValue+0xf4>
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	81 70       	andi	r24, 0x01	; 1
    1eb4:	ec 81       	ldd	r30, Y+4	; 0x04
    1eb6:	fd 81       	ldd	r31, Y+5	; 0x05
    1eb8:	80 83       	st	Z, r24
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec8:	27 96       	adiw	r28, 0x07	; 7
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <DIO_u8SetPortDirection+0x6>
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <DIO_u8SetPortDirection+0x8>
    1ee2:	0f 92       	push	r0
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
    1eea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1eec:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	3d 83       	std	Y+5, r19	; 0x05
    1ef6:	2c 83       	std	Y+4, r18	; 0x04
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	9d 81       	ldd	r25, Y+5	; 0x05
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	91 05       	cpc	r25, r1
    1f00:	d1 f0       	breq	.+52     	; 0x1f36 <DIO_u8SetPortDirection+0x5c>
    1f02:	2c 81       	ldd	r18, Y+4	; 0x04
    1f04:	3d 81       	ldd	r19, Y+5	; 0x05
    1f06:	22 30       	cpi	r18, 0x02	; 2
    1f08:	31 05       	cpc	r19, r1
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <DIO_u8SetPortDirection+0x3c>
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <DIO_u8SetPortDirection+0x52>
    1f14:	1f c0       	rjmp	.+62     	; 0x1f54 <DIO_u8SetPortDirection+0x7a>
    1f16:	2c 81       	ldd	r18, Y+4	; 0x04
    1f18:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	81 f0       	breq	.+32     	; 0x1f40 <DIO_u8SetPortDirection+0x66>
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	9d 81       	ldd	r25, Y+5	; 0x05
    1f24:	83 30       	cpi	r24, 0x03	; 3
    1f26:	91 05       	cpc	r25, r1
    1f28:	81 f0       	breq	.+32     	; 0x1f4a <DIO_u8SetPortDirection+0x70>
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    1f2c:	ea e3       	ldi	r30, 0x3A	; 58
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	80 83       	st	Z, r24
    1f34:	11 c0       	rjmp	.+34     	; 0x1f58 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    1f36:	e7 e3       	ldi	r30, 0x37	; 55
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	80 83       	st	Z, r24
    1f3e:	0c c0       	rjmp	.+24     	; 0x1f58 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    1f40:	e4 e3       	ldi	r30, 0x34	; 52
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	80 83       	st	Z, r24
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    1f4a:	e1 e3       	ldi	r30, 0x31	; 49
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	80 83       	st	Z, r24
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <DIO_u8SetPortValue+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <DIO_u8SetPortValue+0x8>
    1f72:	0f 92       	push	r0
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1f7c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	3d 83       	std	Y+5, r19	; 0x05
    1f86:	2c 83       	std	Y+4, r18	; 0x04
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8c:	81 30       	cpi	r24, 0x01	; 1
    1f8e:	91 05       	cpc	r25, r1
    1f90:	d1 f0       	breq	.+52     	; 0x1fc6 <DIO_u8SetPortValue+0x5c>
    1f92:	2c 81       	ldd	r18, Y+4	; 0x04
    1f94:	3d 81       	ldd	r19, Y+5	; 0x05
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	31 05       	cpc	r19, r1
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <DIO_u8SetPortValue+0x3c>
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	61 f0       	breq	.+24     	; 0x1fbc <DIO_u8SetPortValue+0x52>
    1fa4:	1f c0       	rjmp	.+62     	; 0x1fe4 <DIO_u8SetPortValue+0x7a>
    1fa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	81 f0       	breq	.+32     	; 0x1fd0 <DIO_u8SetPortValue+0x66>
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb4:	83 30       	cpi	r24, 0x03	; 3
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	81 f0       	breq	.+32     	; 0x1fda <DIO_u8SetPortValue+0x70>
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    1fbc:	eb e3       	ldi	r30, 0x3B	; 59
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	80 83       	st	Z, r24
    1fc4:	11 c0       	rjmp	.+34     	; 0x1fe8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    1fc6:	e8 e3       	ldi	r30, 0x38	; 56
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	80 83       	st	Z, r24
    1fce:	0c c0       	rjmp	.+24     	; 0x1fe8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    1fd0:	e5 e3       	ldi	r30, 0x35	; 53
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	80 83       	st	Z, r24
    1fd8:	07 c0       	rjmp	.+14     	; 0x1fe8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    1fda:	e2 e3       	ldi	r30, 0x32	; 50
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	80 83       	st	Z, r24
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <EXTI_voidInit>:

/**
 * @brief Function to initialize external interrupt channels with prebuild configuration.
 */
void EXTI_voidInit(void)
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
#error	wrong configuration for INT0 sense control

#endif

#elif INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
    2002:	ab e5       	ldi	r26, 0x5B	; 91
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	eb e5       	ldi	r30, 0x5B	; 91
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8f 7b       	andi	r24, 0xBF	; 191
    200e:	8c 93       	st	X, r24
#error	wrong configuration for INT0 initial state
#endif

	/*INT1 Channel initialization*/
#if	INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
    2010:	ab e5       	ldi	r26, 0x5B	; 91
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	eb e5       	ldi	r30, 0x5B	; 91
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	80 68       	ori	r24, 0x80	; 128
    201c:	8c 93       	st	X, r24
#elif INT1_SENSE_CTRL == EXTI_u8ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE_CTRL == EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    201e:	a5 e5       	ldi	r26, 0x55	; 85
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e5 e5       	ldi	r30, 0x55	; 85
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	8b 7f       	andi	r24, 0xFB	; 251
    202a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    202c:	a5 e5       	ldi	r26, 0x55	; 85
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e5 e5       	ldi	r30, 0x55	; 85
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	88 60       	ori	r24, 0x08	; 8
    2038:	8c 93       	st	X, r24
#error	wrong configuration for INT2 sense control

#endif

#elif INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT2);
    203a:	ab e5       	ldi	r26, 0x5B	; 91
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	eb e5       	ldi	r30, 0x5B	; 91
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	8f 7d       	andi	r24, 0xDF	; 223
    2046:	8c 93       	st	X, r24

#else
#error	wrong configuration for INT2 initial state
#endif
}
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <EXTI_u8SetSenseCtrl>:
 * @param Copy_u8IntNum	Interrupt Channel Number.
 * @param Copy_u8Sense	Interrupt Sense Control.
 * @return	Error State.
 */
uint8 EXTI_u8SetSenseCtrl(uint8 Copy_u8IntNum, uint8 Copy_u8Sense)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	2b 97       	sbiw	r28, 0x0b	; 11
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2066:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt channel*/
	switch(Copy_u8IntNum)
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	3b 87       	std	Y+11, r19	; 0x0b
    2070:	2a 87       	std	Y+10, r18	; 0x0a
    2072:	8a 85       	ldd	r24, Y+10	; 0x0a
    2074:	9b 85       	ldd	r25, Y+11	; 0x0b
    2076:	82 30       	cpi	r24, 0x02	; 2
    2078:	91 05       	cpc	r25, r1
    207a:	09 f4       	brne	.+2      	; 0x207e <EXTI_u8SetSenseCtrl+0x30>
    207c:	6b c0       	rjmp	.+214    	; 0x2154 <EXTI_u8SetSenseCtrl+0x106>
    207e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2080:	3b 85       	ldd	r19, Y+11	; 0x0b
    2082:	23 30       	cpi	r18, 0x03	; 3
    2084:	31 05       	cpc	r19, r1
    2086:	09 f4       	brne	.+2      	; 0x208a <EXTI_u8SetSenseCtrl+0x3c>
    2088:	c4 c0       	rjmp	.+392    	; 0x2212 <EXTI_u8SetSenseCtrl+0x1c4>
    208a:	8a 85       	ldd	r24, Y+10	; 0x0a
    208c:	9b 85       	ldd	r25, Y+11	; 0x0b
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	91 05       	cpc	r25, r1
    2092:	09 f0       	breq	.+2      	; 0x2096 <EXTI_u8SetSenseCtrl+0x48>
    2094:	ef c0       	rjmp	.+478    	; 0x2274 <EXTI_u8SetSenseCtrl+0x226>
	{
	case EXTI_u8INT0:
		/*Switch the sense control for INT0*/
		switch(Copy_u8Sense)
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	39 87       	std	Y+9, r19	; 0x09
    209e:	28 87       	std	Y+8, r18	; 0x08
    20a0:	88 85       	ldd	r24, Y+8	; 0x08
    20a2:	99 85       	ldd	r25, Y+9	; 0x09
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	91 05       	cpc	r25, r1
    20a8:	29 f1       	breq	.+74     	; 0x20f4 <EXTI_u8SetSenseCtrl+0xa6>
    20aa:	28 85       	ldd	r18, Y+8	; 0x08
    20ac:	39 85       	ldd	r19, Y+9	; 0x09
    20ae:	23 30       	cpi	r18, 0x03	; 3
    20b0:	31 05       	cpc	r19, r1
    20b2:	34 f4       	brge	.+12     	; 0x20c0 <EXTI_u8SetSenseCtrl+0x72>
    20b4:	88 85       	ldd	r24, Y+8	; 0x08
    20b6:	99 85       	ldd	r25, Y+9	; 0x09
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	91 05       	cpc	r25, r1
    20bc:	61 f0       	breq	.+24     	; 0x20d6 <EXTI_u8SetSenseCtrl+0x88>
    20be:	47 c0       	rjmp	.+142    	; 0x214e <EXTI_u8SetSenseCtrl+0x100>
    20c0:	28 85       	ldd	r18, Y+8	; 0x08
    20c2:	39 85       	ldd	r19, Y+9	; 0x09
    20c4:	23 30       	cpi	r18, 0x03	; 3
    20c6:	31 05       	cpc	r19, r1
    20c8:	21 f1       	breq	.+72     	; 0x2112 <EXTI_u8SetSenseCtrl+0xc4>
    20ca:	88 85       	ldd	r24, Y+8	; 0x08
    20cc:	99 85       	ldd	r25, Y+9	; 0x09
    20ce:	84 30       	cpi	r24, 0x04	; 4
    20d0:	91 05       	cpc	r25, r1
    20d2:	71 f1       	breq	.+92     	; 0x2130 <EXTI_u8SetSenseCtrl+0xe2>
    20d4:	3c c0       	rjmp	.+120    	; 0x214e <EXTI_u8SetSenseCtrl+0x100>
		{
		case EXTI_u8LOW_LEVEL	:	CLR_BIT(MCUCR,MCUCR_ISC00);	CLR_BIT(MCUCR,MCUCR_ISC01);	break;
    20d6:	a5 e5       	ldi	r26, 0x55	; 85
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e5 e5       	ldi	r30, 0x55	; 85
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	8e 7f       	andi	r24, 0xFE	; 254
    20e2:	8c 93       	st	X, r24
    20e4:	a5 e5       	ldi	r26, 0x55	; 85
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e5 e5       	ldi	r30, 0x55	; 85
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8d 7f       	andi	r24, 0xFD	; 253
    20f0:	8c 93       	st	X, r24
    20f2:	c2 c0       	rjmp	.+388    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		case EXTI_u8ON_CHANGE	: 	SET_BIT(MCUCR,MCUCR_ISC00);	CLR_BIT(MCUCR,MCUCR_ISC01);	break;
    20f4:	a5 e5       	ldi	r26, 0x55	; 85
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e5 e5       	ldi	r30, 0x55	; 85
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	81 60       	ori	r24, 0x01	; 1
    2100:	8c 93       	st	X, r24
    2102:	a5 e5       	ldi	r26, 0x55	; 85
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e5 e5       	ldi	r30, 0x55	; 85
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	8d 7f       	andi	r24, 0xFD	; 253
    210e:	8c 93       	st	X, r24
    2110:	b3 c0       	rjmp	.+358    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		case EXTI_u8FALLING_EDGE: 	CLR_BIT(MCUCR,MCUCR_ISC00);	SET_BIT(MCUCR,MCUCR_ISC01);	break;
    2112:	a5 e5       	ldi	r26, 0x55	; 85
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e5 e5       	ldi	r30, 0x55	; 85
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	8e 7f       	andi	r24, 0xFE	; 254
    211e:	8c 93       	st	X, r24
    2120:	a5 e5       	ldi	r26, 0x55	; 85
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e5 e5       	ldi	r30, 0x55	; 85
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	82 60       	ori	r24, 0x02	; 2
    212c:	8c 93       	st	X, r24
    212e:	a4 c0       	rjmp	.+328    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		case EXTI_u8RISING_EDGE	: 	SET_BIT(MCUCR,MCUCR_ISC00);	SET_BIT(MCUCR,MCUCR_ISC01);	break;
    2130:	a5 e5       	ldi	r26, 0x55	; 85
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e5 e5       	ldi	r30, 0x55	; 85
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	81 60       	ori	r24, 0x01	; 1
    213c:	8c 93       	st	X, r24
    213e:	a5 e5       	ldi	r26, 0x55	; 85
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e5 e5       	ldi	r30, 0x55	; 85
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	82 60       	ori	r24, 0x02	; 2
    214a:	8c 93       	st	X, r24
    214c:	95 c0       	rjmp	.+298    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		default: Local_u8ErrorState = NOK;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	92 c0       	rjmp	.+292    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		}
		break;

	case EXTI_u8INT1:
		/*Switch the sense control for INT1*/
		switch(Copy_u8Sense)
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	3f 83       	std	Y+7, r19	; 0x07
    215c:	2e 83       	std	Y+6, r18	; 0x06
    215e:	8e 81       	ldd	r24, Y+6	; 0x06
    2160:	9f 81       	ldd	r25, Y+7	; 0x07
    2162:	82 30       	cpi	r24, 0x02	; 2
    2164:	91 05       	cpc	r25, r1
    2166:	29 f1       	breq	.+74     	; 0x21b2 <EXTI_u8SetSenseCtrl+0x164>
    2168:	2e 81       	ldd	r18, Y+6	; 0x06
    216a:	3f 81       	ldd	r19, Y+7	; 0x07
    216c:	23 30       	cpi	r18, 0x03	; 3
    216e:	31 05       	cpc	r19, r1
    2170:	34 f4       	brge	.+12     	; 0x217e <EXTI_u8SetSenseCtrl+0x130>
    2172:	8e 81       	ldd	r24, Y+6	; 0x06
    2174:	9f 81       	ldd	r25, Y+7	; 0x07
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	91 05       	cpc	r25, r1
    217a:	61 f0       	breq	.+24     	; 0x2194 <EXTI_u8SetSenseCtrl+0x146>
    217c:	47 c0       	rjmp	.+142    	; 0x220c <EXTI_u8SetSenseCtrl+0x1be>
    217e:	2e 81       	ldd	r18, Y+6	; 0x06
    2180:	3f 81       	ldd	r19, Y+7	; 0x07
    2182:	23 30       	cpi	r18, 0x03	; 3
    2184:	31 05       	cpc	r19, r1
    2186:	21 f1       	breq	.+72     	; 0x21d0 <EXTI_u8SetSenseCtrl+0x182>
    2188:	8e 81       	ldd	r24, Y+6	; 0x06
    218a:	9f 81       	ldd	r25, Y+7	; 0x07
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	91 05       	cpc	r25, r1
    2190:	71 f1       	breq	.+92     	; 0x21ee <EXTI_u8SetSenseCtrl+0x1a0>
    2192:	3c c0       	rjmp	.+120    	; 0x220c <EXTI_u8SetSenseCtrl+0x1be>
		{
		case EXTI_u8LOW_LEVEL	:	CLR_BIT(MCUCR,MCUCR_ISC10);	CLR_BIT(MCUCR,MCUCR_ISC11);	break;
    2194:	a5 e5       	ldi	r26, 0x55	; 85
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e5 e5       	ldi	r30, 0x55	; 85
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	8b 7f       	andi	r24, 0xFB	; 251
    21a0:	8c 93       	st	X, r24
    21a2:	a5 e5       	ldi	r26, 0x55	; 85
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e5 e5       	ldi	r30, 0x55	; 85
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	87 7f       	andi	r24, 0xF7	; 247
    21ae:	8c 93       	st	X, r24
    21b0:	63 c0       	rjmp	.+198    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		case EXTI_u8ON_CHANGE	: 	SET_BIT(MCUCR,MCUCR_ISC10);	CLR_BIT(MCUCR,MCUCR_ISC11);	break;
    21b2:	a5 e5       	ldi	r26, 0x55	; 85
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e5 e5       	ldi	r30, 0x55	; 85
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	84 60       	ori	r24, 0x04	; 4
    21be:	8c 93       	st	X, r24
    21c0:	a5 e5       	ldi	r26, 0x55	; 85
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e5 e5       	ldi	r30, 0x55	; 85
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	87 7f       	andi	r24, 0xF7	; 247
    21cc:	8c 93       	st	X, r24
    21ce:	54 c0       	rjmp	.+168    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		case EXTI_u8FALLING_EDGE: 	CLR_BIT(MCUCR,MCUCR_ISC10);	SET_BIT(MCUCR,MCUCR_ISC11);	break;
    21d0:	a5 e5       	ldi	r26, 0x55	; 85
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e5 e5       	ldi	r30, 0x55	; 85
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	8b 7f       	andi	r24, 0xFB	; 251
    21dc:	8c 93       	st	X, r24
    21de:	a5 e5       	ldi	r26, 0x55	; 85
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e5 e5       	ldi	r30, 0x55	; 85
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	88 60       	ori	r24, 0x08	; 8
    21ea:	8c 93       	st	X, r24
    21ec:	45 c0       	rjmp	.+138    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		case EXTI_u8RISING_EDGE	: 	SET_BIT(MCUCR,MCUCR_ISC10);	SET_BIT(MCUCR,MCUCR_ISC11);	break;
    21ee:	a5 e5       	ldi	r26, 0x55	; 85
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e5 e5       	ldi	r30, 0x55	; 85
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	84 60       	ori	r24, 0x04	; 4
    21fa:	8c 93       	st	X, r24
    21fc:	a5 e5       	ldi	r26, 0x55	; 85
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e5 e5       	ldi	r30, 0x55	; 85
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	88 60       	ori	r24, 0x08	; 8
    2208:	8c 93       	st	X, r24
    220a:	36 c0       	rjmp	.+108    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		default: Local_u8ErrorState = NOK;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	33 c0       	rjmp	.+102    	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		}
		break;

	case EXTI_u8INT2:
		/*Switch the sense control for INT2*/
		switch(Copy_u8Sense)
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	3d 83       	std	Y+5, r19	; 0x05
    221a:	2c 83       	std	Y+4, r18	; 0x04
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	9d 81       	ldd	r25, Y+5	; 0x05
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	91 05       	cpc	r25, r1
    2224:	31 f0       	breq	.+12     	; 0x2232 <EXTI_u8SetSenseCtrl+0x1e4>
    2226:	2c 81       	ldd	r18, Y+4	; 0x04
    2228:	3d 81       	ldd	r19, Y+5	; 0x05
    222a:	24 30       	cpi	r18, 0x04	; 4
    222c:	31 05       	cpc	r19, r1
    222e:	81 f0       	breq	.+32     	; 0x2250 <EXTI_u8SetSenseCtrl+0x202>
    2230:	1e c0       	rjmp	.+60     	; 0x226e <EXTI_u8SetSenseCtrl+0x220>
		{
		case EXTI_u8FALLING_EDGE: 	CLR_BIT(MCUCSR,MCUCSR_ISC2);	SET_BIT(MCUCSR,MCUCSR_ISC2);	break;
    2232:	a4 e5       	ldi	r26, 0x54	; 84
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e4 e5       	ldi	r30, 0x54	; 84
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	8f 7b       	andi	r24, 0xBF	; 191
    223e:	8c 93       	st	X, r24
    2240:	a4 e5       	ldi	r26, 0x54	; 84
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e4 e5       	ldi	r30, 0x54	; 84
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	80 64       	ori	r24, 0x40	; 64
    224c:	8c 93       	st	X, r24
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		case EXTI_u8RISING_EDGE	: 	SET_BIT(MCUCSR,MCUCSR_ISC2);	SET_BIT(MCUCSR,MCUCSR_ISC2);	break;
    2250:	a4 e5       	ldi	r26, 0x54	; 84
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e4 e5       	ldi	r30, 0x54	; 84
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 64       	ori	r24, 0x40	; 64
    225c:	8c 93       	st	X, r24
    225e:	a4 e5       	ldi	r26, 0x54	; 84
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e4 e5       	ldi	r30, 0x54	; 84
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	80 64       	ori	r24, 0x40	; 64
    226a:	8c 93       	st	X, r24
    226c:	05 c0       	rjmp	.+10     	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		default: Local_u8ErrorState = NOK;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <EXTI_u8SetSenseCtrl+0x22a>
		}
		break;

	default: Local_u8ErrorState = NOK;	break;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
}
    227a:	2b 96       	adiw	r28, 0x0b	; 11
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <EXTI_u8IntEnable>:
 * @brief Function to enable an interrupt channel.
 * @param Copy_u8IntNum	Interrupt Channel Number.
 * @return	Error State.
 */
uint8 EXTI_u8IntEnable(uint8 Copy_u8IntNum)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <EXTI_u8IntEnable+0x6>
    2292:	00 d0       	rcall	.+0      	; 0x2294 <EXTI_u8IntEnable+0x8>
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    229a:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt channel*/
	switch(Copy_u8IntNum)
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	3c 83       	std	Y+4, r19	; 0x04
    22a4:	2b 83       	std	Y+3, r18	; 0x03
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	91 05       	cpc	r25, r1
    22ae:	91 f0       	breq	.+36     	; 0x22d4 <EXTI_u8IntEnable+0x48>
    22b0:	2b 81       	ldd	r18, Y+3	; 0x03
    22b2:	3c 81       	ldd	r19, Y+4	; 0x04
    22b4:	23 30       	cpi	r18, 0x03	; 3
    22b6:	31 05       	cpc	r19, r1
    22b8:	a9 f0       	breq	.+42     	; 0x22e4 <EXTI_u8IntEnable+0x58>
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	81 30       	cpi	r24, 0x01	; 1
    22c0:	91 05       	cpc	r25, r1
    22c2:	c1 f4       	brne	.+48     	; 0x22f4 <EXTI_u8IntEnable+0x68>
	{
	case EXTI_u8INT0: SET_BIT(GICR,GICR_INT0);	break;
    22c4:	ab e5       	ldi	r26, 0x5B	; 91
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	eb e5       	ldi	r30, 0x5B	; 91
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	80 64       	ori	r24, 0x40	; 64
    22d0:	8c 93       	st	X, r24
    22d2:	12 c0       	rjmp	.+36     	; 0x22f8 <EXTI_u8IntEnable+0x6c>
	case EXTI_u8INT1: SET_BIT(GICR,GICR_INT1);	break;
    22d4:	ab e5       	ldi	r26, 0x5B	; 91
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	eb e5       	ldi	r30, 0x5B	; 91
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	80 68       	ori	r24, 0x80	; 128
    22e0:	8c 93       	st	X, r24
    22e2:	0a c0       	rjmp	.+20     	; 0x22f8 <EXTI_u8IntEnable+0x6c>
	case EXTI_u8INT2: SET_BIT(GICR,GICR_INT2);	break;
    22e4:	ab e5       	ldi	r26, 0x5B	; 91
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	eb e5       	ldi	r30, 0x5B	; 91
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	80 62       	ori	r24, 0x20	; 32
    22f0:	8c 93       	st	X, r24
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <EXTI_u8IntEnable+0x6c>
	default: Local_u8ErrorState = NOK;	break;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <EXTI_u8IntDisable>:
 * @brief Function to disable an interrupt channel.
 * @param Copy_u8IntNum	Interrupt Channel Number.
 * @return	Error State.
 */
uint8 EXTI_u8IntDisable(uint8 Copy_u8IntNum)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <EXTI_u8IntDisable+0x6>
    230e:	00 d0       	rcall	.+0      	; 0x2310 <EXTI_u8IntDisable+0x8>
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2316:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt channel*/
	switch(Copy_u8IntNum)
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	3c 83       	std	Y+4, r19	; 0x04
    2320:	2b 83       	std	Y+3, r18	; 0x03
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	82 30       	cpi	r24, 0x02	; 2
    2328:	91 05       	cpc	r25, r1
    232a:	91 f0       	breq	.+36     	; 0x2350 <EXTI_u8IntDisable+0x48>
    232c:	2b 81       	ldd	r18, Y+3	; 0x03
    232e:	3c 81       	ldd	r19, Y+4	; 0x04
    2330:	23 30       	cpi	r18, 0x03	; 3
    2332:	31 05       	cpc	r19, r1
    2334:	a9 f0       	breq	.+42     	; 0x2360 <EXTI_u8IntDisable+0x58>
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	91 05       	cpc	r25, r1
    233e:	c1 f4       	brne	.+48     	; 0x2370 <EXTI_u8IntDisable+0x68>
	{
	case EXTI_u8INT0: CLR_BIT(GICR,GICR_INT0);	break;
    2340:	ab e5       	ldi	r26, 0x5B	; 91
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	eb e5       	ldi	r30, 0x5B	; 91
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	8f 7b       	andi	r24, 0xBF	; 191
    234c:	8c 93       	st	X, r24
    234e:	12 c0       	rjmp	.+36     	; 0x2374 <EXTI_u8IntDisable+0x6c>
	case EXTI_u8INT1: CLR_BIT(GICR,GICR_INT1);	break;
    2350:	ab e5       	ldi	r26, 0x5B	; 91
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	eb e5       	ldi	r30, 0x5B	; 91
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8f 77       	andi	r24, 0x7F	; 127
    235c:	8c 93       	st	X, r24
    235e:	0a c0       	rjmp	.+20     	; 0x2374 <EXTI_u8IntDisable+0x6c>
	case EXTI_u8INT2: CLR_BIT(GICR,GICR_INT2);	break;
    2360:	ab e5       	ldi	r26, 0x5B	; 91
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	eb e5       	ldi	r30, 0x5B	; 91
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	8f 7d       	andi	r24, 0xDF	; 223
    236c:	8c 93       	st	X, r24
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <EXTI_u8IntDisable+0x6c>
	default: Local_u8ErrorState = NOK;	break;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2374:	89 81       	ldd	r24, Y+1	; 0x01
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <EXTI_u8SetCallBack>:
 * @param Copy_u8IntNum	Interrupt Channel Number.
 * @param Copy_pfFunctionPtr Pointer to the ISR function that is needed to set.
 * @return Error State.
 */
uint8 EXTI_u8SetCallBack(uint8 Copy_u8IntNum, void (* Copy_pfFunctionPtr)(void))
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <EXTI_u8SetCallBack+0x6>
    238a:	00 d0       	rcall	.+0      	; 0x238c <EXTI_u8SetCallBack+0x8>
    238c:	00 d0       	rcall	.+0      	; 0x238e <EXTI_u8SetCallBack+0xa>
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	8a 83       	std	Y+2, r24	; 0x02
    2394:	7c 83       	std	Y+4, r23	; 0x04
    2396:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2398:	19 82       	std	Y+1, r1	; 0x01

	/*Check the pointer to function*/
	if(Copy_pfFunctionPtr != NULL)
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	61 f1       	breq	.+88     	; 0x23fa <EXTI_u8SetCallBack+0x76>
	{
		/*Switch the interrupt channel*/
		switch(Copy_u8IntNum)
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	3e 83       	std	Y+6, r19	; 0x06
    23aa:	2d 83       	std	Y+5, r18	; 0x05
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	82 30       	cpi	r24, 0x02	; 2
    23b2:	91 05       	cpc	r25, r1
    23b4:	89 f0       	breq	.+34     	; 0x23d8 <EXTI_u8SetCallBack+0x54>
    23b6:	2d 81       	ldd	r18, Y+5	; 0x05
    23b8:	3e 81       	ldd	r19, Y+6	; 0x06
    23ba:	23 30       	cpi	r18, 0x03	; 3
    23bc:	31 05       	cpc	r19, r1
    23be:	99 f0       	breq	.+38     	; 0x23e6 <EXTI_u8SetCallBack+0x62>
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	91 05       	cpc	r25, r1
    23c8:	a9 f4       	brne	.+42     	; 0x23f4 <EXTI_u8SetCallBack+0x70>
		{
		case EXTI_u8INT0: EXTI_pfIsrFunction[0] = Copy_pfFunctionPtr;	break;
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	90 93 73 03 	sts	0x0373, r25
    23d2:	80 93 72 03 	sts	0x0372, r24
    23d6:	13 c0       	rjmp	.+38     	; 0x23fe <EXTI_u8SetCallBack+0x7a>
		case EXTI_u8INT1: EXTI_pfIsrFunction[1] = Copy_pfFunctionPtr;	break;
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	90 93 75 03 	sts	0x0375, r25
    23e0:	80 93 74 03 	sts	0x0374, r24
    23e4:	0c c0       	rjmp	.+24     	; 0x23fe <EXTI_u8SetCallBack+0x7a>
		case EXTI_u8INT2: EXTI_pfIsrFunction[2] = Copy_pfFunctionPtr;	break;
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	90 93 77 03 	sts	0x0377, r25
    23ee:	80 93 76 03 	sts	0x0376, r24
    23f2:	05 c0       	rjmp	.+10     	; 0x23fe <EXTI_u8SetCallBack+0x7a>
		default: Local_u8ErrorState = NOK;
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <EXTI_u8SetCallBack+0x7a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    23fa:	82 e0       	ldi	r24, 0x02	; 2
    23fc:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2400:	26 96       	adiw	r28, 0x06	; 6
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <__vector_1>:
/**
 * @brief Int0 ISR.
 */
void __vector_1 (void) __attribute((signal));
void __vector_1 (void)
{
    2412:	1f 92       	push	r1
    2414:	0f 92       	push	r0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	0f 92       	push	r0
    241a:	11 24       	eor	r1, r1
    241c:	2f 93       	push	r18
    241e:	3f 93       	push	r19
    2420:	4f 93       	push	r20
    2422:	5f 93       	push	r21
    2424:	6f 93       	push	r22
    2426:	7f 93       	push	r23
    2428:	8f 93       	push	r24
    242a:	9f 93       	push	r25
    242c:	af 93       	push	r26
    242e:	bf 93       	push	r27
    2430:	ef 93       	push	r30
    2432:	ff 93       	push	r31
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIsrFunction[0] != NULL)
    243c:	80 91 72 03 	lds	r24, 0x0372
    2440:	90 91 73 03 	lds	r25, 0x0373
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	29 f0       	breq	.+10     	; 0x2452 <__vector_1+0x40>
	{
		EXTI_pfIsrFunction[0]();
    2448:	e0 91 72 03 	lds	r30, 0x0372
    244c:	f0 91 73 03 	lds	r31, 0x0373
    2450:	09 95       	icall
	}
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	ff 91       	pop	r31
    2458:	ef 91       	pop	r30
    245a:	bf 91       	pop	r27
    245c:	af 91       	pop	r26
    245e:	9f 91       	pop	r25
    2460:	8f 91       	pop	r24
    2462:	7f 91       	pop	r23
    2464:	6f 91       	pop	r22
    2466:	5f 91       	pop	r21
    2468:	4f 91       	pop	r20
    246a:	3f 91       	pop	r19
    246c:	2f 91       	pop	r18
    246e:	0f 90       	pop	r0
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	0f 90       	pop	r0
    2474:	1f 90       	pop	r1
    2476:	18 95       	reti

00002478 <__vector_2>:
/**
 * @brief Int1 ISR.
 */
void __vector_2 (void) __attribute((signal));
void __vector_2 (void)
{
    2478:	1f 92       	push	r1
    247a:	0f 92       	push	r0
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	0f 92       	push	r0
    2480:	11 24       	eor	r1, r1
    2482:	2f 93       	push	r18
    2484:	3f 93       	push	r19
    2486:	4f 93       	push	r20
    2488:	5f 93       	push	r21
    248a:	6f 93       	push	r22
    248c:	7f 93       	push	r23
    248e:	8f 93       	push	r24
    2490:	9f 93       	push	r25
    2492:	af 93       	push	r26
    2494:	bf 93       	push	r27
    2496:	ef 93       	push	r30
    2498:	ff 93       	push	r31
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIsrFunction[1] != NULL)
    24a2:	80 91 74 03 	lds	r24, 0x0374
    24a6:	90 91 75 03 	lds	r25, 0x0375
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	29 f0       	breq	.+10     	; 0x24b8 <__vector_2+0x40>
	{
		EXTI_pfIsrFunction[1]();
    24ae:	e0 91 74 03 	lds	r30, 0x0374
    24b2:	f0 91 75 03 	lds	r31, 0x0375
    24b6:	09 95       	icall
	}
}
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	ff 91       	pop	r31
    24be:	ef 91       	pop	r30
    24c0:	bf 91       	pop	r27
    24c2:	af 91       	pop	r26
    24c4:	9f 91       	pop	r25
    24c6:	8f 91       	pop	r24
    24c8:	7f 91       	pop	r23
    24ca:	6f 91       	pop	r22
    24cc:	5f 91       	pop	r21
    24ce:	4f 91       	pop	r20
    24d0:	3f 91       	pop	r19
    24d2:	2f 91       	pop	r18
    24d4:	0f 90       	pop	r0
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	0f 90       	pop	r0
    24da:	1f 90       	pop	r1
    24dc:	18 95       	reti

000024de <__vector_3>:
/**
 * @brief Int2 ISR.
 */
void __vector_3 (void) __attribute((signal));
void __vector_3 (void)
{
    24de:	1f 92       	push	r1
    24e0:	0f 92       	push	r0
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	0f 92       	push	r0
    24e6:	11 24       	eor	r1, r1
    24e8:	2f 93       	push	r18
    24ea:	3f 93       	push	r19
    24ec:	4f 93       	push	r20
    24ee:	5f 93       	push	r21
    24f0:	6f 93       	push	r22
    24f2:	7f 93       	push	r23
    24f4:	8f 93       	push	r24
    24f6:	9f 93       	push	r25
    24f8:	af 93       	push	r26
    24fa:	bf 93       	push	r27
    24fc:	ef 93       	push	r30
    24fe:	ff 93       	push	r31
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfIsrFunction[2] != NULL)
    2508:	80 91 76 03 	lds	r24, 0x0376
    250c:	90 91 77 03 	lds	r25, 0x0377
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	29 f0       	breq	.+10     	; 0x251e <__vector_3+0x40>
	{
		EXTI_pfIsrFunction[2]();
    2514:	e0 91 76 03 	lds	r30, 0x0376
    2518:	f0 91 77 03 	lds	r31, 0x0377
    251c:	09 95       	icall
	}
}
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	ff 91       	pop	r31
    2524:	ef 91       	pop	r30
    2526:	bf 91       	pop	r27
    2528:	af 91       	pop	r26
    252a:	9f 91       	pop	r25
    252c:	8f 91       	pop	r24
    252e:	7f 91       	pop	r23
    2530:	6f 91       	pop	r22
    2532:	5f 91       	pop	r21
    2534:	4f 91       	pop	r20
    2536:	3f 91       	pop	r19
    2538:	2f 91       	pop	r18
    253a:	0f 90       	pop	r0
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	0f 90       	pop	r0
    2540:	1f 90       	pop	r1
    2542:	18 95       	reti

00002544 <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
    254c:	78 94       	sei
}
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
    255c:	f8 94       	cli
}
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_private.h"
#include "KEYPAD_interface.h"


uint8 KEYPAD_u8GetPressedKey(void)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	00 d0       	rcall	.+0      	; 0x256a <KEYPAD_u8GetPressedKey+0x6>
    256a:	00 d0       	rcall	.+0      	; 0x256c <KEYPAD_u8GetPressedKey+0x8>
    256c:	0f 92       	push	r0
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8ColumnCounter;
	uint8 Local_u8RowCounter;
	uint8 Local_u8KeyState;
	uint8 Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    2572:	8f ef       	ldi	r24, 0xFF	; 255
    2574:	89 83       	std	Y+1, r24	; 0x01
	static uint8 Local_u8ColumnArr[KEYPAD_u8COLUMN_NUM] = {KEYPAD_u8COLUMN1_PIN, KEYPAD_u8COLUMN2_PIN, KEYPAD_u8COLUMN3_PIN, KEYPAD_u8COLUMN4_PIN};
	static uint8 Local_u8RowArr[KEYPAD_u8ROW_NUM] = {KEYPAD_u8ROW1_PIN, KEYPAD_u8ROW2_PIN, KEYPAD_u8ROW3_PIN, KEYPAD_u8ROW4_PIN};
	static uint8 Local_u8KeypadArr[KEYPAD_u8ROW_NUM][KEYPAD_u8COLUMN_NUM] = KEYPAD_u8BUTTON_ARR;

	/*Activate column pins and read the rows*/
	for(Local_u8ColumnCounter = 0; Local_u8ColumnCounter < KEYPAD_u8COLUMN_NUM; Local_u8ColumnCounter++)
    2576:	1b 82       	std	Y+3, r1	; 0x03
    2578:	6a c0       	rjmp	.+212    	; 0x264e <KEYPAD_u8GetPressedKey+0xea>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_LOW);
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	fc 01       	movw	r30, r24
    2582:	e0 57       	subi	r30, 0x70	; 112
    2584:	fd 4f       	sbci	r31, 0xFD	; 253
    2586:	90 81       	ld	r25, Z
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	69 2f       	mov	r22, r25
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>

		/*Get values of rows and check for signals from them*/
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KEYPAD_u8ROW_NUM; Local_u8RowCounter++)
    2592:	1a 82       	std	Y+2, r1	; 0x02
    2594:	49 c0       	rjmp	.+146    	; 0x2628 <KEYPAD_u8GetPressedKey+0xc4>
		{
			/*Get the value of the current row*/
			DIO_u8GetPinValue(KEYPAD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	fc 01       	movw	r30, r24
    259e:	e4 57       	subi	r30, 0x74	; 116
    25a0:	fd 4f       	sbci	r31, 0xFD	; 253
    25a2:	90 81       	ld	r25, Z
    25a4:	9e 01       	movw	r18, r28
    25a6:	2c 5f       	subi	r18, 0xFC	; 252
    25a8:	3f 4f       	sbci	r19, 0xFF	; 255
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	69 2f       	mov	r22, r25
    25ae:	a9 01       	movw	r20, r18
    25b0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_u8GetPinValue>

			/*If the current row is low, then button is pressed*/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
    25b4:	8c 81       	ldd	r24, Y+4	; 0x04
    25b6:	88 23       	and	r24, r24
    25b8:	a1 f5       	brne	.+104    	; 0x2622 <KEYPAD_u8GetPressedKey+0xbe>
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <KEYPAD_u8GetPressedKey+0x76>
			{
				/*Wait until the key is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KEYPAD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	88 2f       	mov	r24, r24
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	fc 01       	movw	r30, r24
    25c4:	e4 57       	subi	r30, 0x74	; 116
    25c6:	fd 4f       	sbci	r31, 0xFD	; 253
    25c8:	90 81       	ld	r25, Z
    25ca:	9e 01       	movw	r18, r28
    25cc:	2c 5f       	subi	r18, 0xFC	; 252
    25ce:	3f 4f       	sbci	r19, 0xFF	; 255
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	69 2f       	mov	r22, r25
    25d4:	a9 01       	movw	r20, r18
    25d6:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <DIO_u8GetPinValue>

			/*If the current row is low, then button is pressed*/
			if(Local_u8KeyState == DIO_u8PIN_LOW)
			{
				/*Wait until the key is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
    25da:	8c 81       	ldd	r24, Y+4	; 0x04
    25dc:	88 23       	and	r24, r24
    25de:	71 f3       	breq	.-36     	; 0x25bc <KEYPAD_u8GetPressedKey+0x58>
				{
					DIO_u8GetPinValue(KEYPAD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
				}

				/*Return the corresponding value of the key from the buttons array*/
				Local_u8PressedKey = Local_u8KeypadArr[Local_u8RowCounter][Local_u8ColumnCounter];
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	48 2f       	mov	r20, r24
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	ca 01       	movw	r24, r20
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	82 0f       	add	r24, r18
    25f8:	93 1f       	adc	r25, r19
    25fa:	fc 01       	movw	r30, r24
    25fc:	e4 58       	subi	r30, 0x84	; 132
    25fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2600:	80 81       	ld	r24, Z
    2602:	89 83       	std	Y+1, r24	; 0x01

				/*Deactivate the current column*/
				DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_HIGH);
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	fc 01       	movw	r30, r24
    260c:	e0 57       	subi	r30, 0x70	; 112
    260e:	fd 4f       	sbci	r31, 0xFD	; 253
    2610:	90 81       	ld	r25, Z
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	69 2f       	mov	r22, r25
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>

				/*Return the pressed key*/
				return Local_u8PressedKey;
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	1c c0       	rjmp	.+56     	; 0x265a <KEYPAD_u8GetPressedKey+0xf6>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_LOW);

		/*Get values of rows and check for signals from them*/
		for(Local_u8RowCounter = 0; Local_u8RowCounter < KEYPAD_u8ROW_NUM; Local_u8RowCounter++)
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	8f 5f       	subi	r24, 0xFF	; 255
    2626:	8a 83       	std	Y+2, r24	; 0x02
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	84 30       	cpi	r24, 0x04	; 4
    262c:	08 f4       	brcc	.+2      	; 0x2630 <KEYPAD_u8GetPressedKey+0xcc>
    262e:	b3 cf       	rjmp	.-154    	; 0x2596 <KEYPAD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_HIGH);
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	fc 01       	movw	r30, r24
    2638:	e0 57       	subi	r30, 0x70	; 112
    263a:	fd 4f       	sbci	r31, 0xFD	; 253
    263c:	90 81       	ld	r25, Z
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	69 2f       	mov	r22, r25
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
	static uint8 Local_u8ColumnArr[KEYPAD_u8COLUMN_NUM] = {KEYPAD_u8COLUMN1_PIN, KEYPAD_u8COLUMN2_PIN, KEYPAD_u8COLUMN3_PIN, KEYPAD_u8COLUMN4_PIN};
	static uint8 Local_u8RowArr[KEYPAD_u8ROW_NUM] = {KEYPAD_u8ROW1_PIN, KEYPAD_u8ROW2_PIN, KEYPAD_u8ROW3_PIN, KEYPAD_u8ROW4_PIN};
	static uint8 Local_u8KeypadArr[KEYPAD_u8ROW_NUM][KEYPAD_u8COLUMN_NUM] = KEYPAD_u8BUTTON_ARR;

	/*Activate column pins and read the rows*/
	for(Local_u8ColumnCounter = 0; Local_u8ColumnCounter < KEYPAD_u8COLUMN_NUM; Local_u8ColumnCounter++)
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	8f 5f       	subi	r24, 0xFF	; 255
    264c:	8b 83       	std	Y+3, r24	; 0x03
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	84 30       	cpi	r24, 0x04	; 4
    2652:	08 f4       	brcc	.+2      	; 0x2656 <KEYPAD_u8GetPressedKey+0xf2>
    2654:	92 cf       	rjmp	.-220    	; 0x257a <KEYPAD_u8GetPressedKey+0x16>
		/*Deactivate the current column*/
		DIO_u8SetPinValue(KEYPAD_u8COLUMN_PORT, Local_u8ColumnArr[Local_u8ColumnCounter], DIO_u8PIN_HIGH);
	}

	/*Return that is no pressed key*/
	return Local_u8PressedKey;
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <LIBRARY_s32Mapping>:
 * @param Copy_s32InputValue	Input value.
 * @return	Output Value
 */
sint32 LIBRARY_s32Mapping(sint32 Copy_s32InputRangeMin, sint32 Copy_s32InputRangeMax,
		sint32 Copy_s32OutputRangeMin, sint32 Copy_s32OutputRangeMax, sint32 Copy_s32InputValue)
{
    266c:	af 92       	push	r10
    266e:	bf 92       	push	r11
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	64 97       	sbiw	r28, 0x14	; 20
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	6d 83       	std	Y+5, r22	; 0x05
    2692:	7e 83       	std	Y+6, r23	; 0x06
    2694:	8f 83       	std	Y+7, r24	; 0x07
    2696:	98 87       	std	Y+8, r25	; 0x08
    2698:	29 87       	std	Y+9, r18	; 0x09
    269a:	3a 87       	std	Y+10, r19	; 0x0a
    269c:	4b 87       	std	Y+11, r20	; 0x0b
    269e:	5c 87       	std	Y+12, r21	; 0x0c
    26a0:	ed 86       	std	Y+13, r14	; 0x0d
    26a2:	fe 86       	std	Y+14, r15	; 0x0e
    26a4:	0f 87       	std	Y+15, r16	; 0x0f
    26a6:	18 8b       	std	Y+16, r17	; 0x10
    26a8:	a9 8a       	std	Y+17, r10	; 0x11
    26aa:	ba 8a       	std	Y+18, r11	; 0x12
    26ac:	cb 8a       	std	Y+19, r12	; 0x13
    26ae:	dc 8a       	std	Y+20, r13	; 0x14
	/*Define Variables*/
	sint32 Local_s32OutputValue = 0;
    26b0:	19 82       	std	Y+1, r1	; 0x01
    26b2:	1a 82       	std	Y+2, r1	; 0x02
    26b4:	1b 82       	std	Y+3, r1	; 0x03
    26b6:	1c 82       	std	Y+4, r1	; 0x04

	/*Calculate the output value*/
	Local_s32OutputValue = (Copy_s32OutputRangeMax - Copy_s32OutputRangeMin) * (Copy_s32InputValue - Copy_s32InputRangeMin);
    26b8:	29 89       	ldd	r18, Y+17	; 0x11
    26ba:	3a 89       	ldd	r19, Y+18	; 0x12
    26bc:	4b 89       	ldd	r20, Y+19	; 0x13
    26be:	5c 89       	ldd	r21, Y+20	; 0x14
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	af 85       	ldd	r26, Y+15	; 0x0f
    26c6:	b8 89       	ldd	r27, Y+16	; 0x10
    26c8:	79 01       	movw	r14, r18
    26ca:	8a 01       	movw	r16, r20
    26cc:	e8 1a       	sub	r14, r24
    26ce:	f9 0a       	sbc	r15, r25
    26d0:	0a 0b       	sbc	r16, r26
    26d2:	1b 0b       	sbc	r17, r27
    26d4:	29 a1       	ldd	r18, Y+33	; 0x21
    26d6:	3a a1       	ldd	r19, Y+34	; 0x22
    26d8:	4b a1       	ldd	r20, Y+35	; 0x23
    26da:	5c a1       	ldd	r21, Y+36	; 0x24
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	af 81       	ldd	r26, Y+7	; 0x07
    26e2:	b8 85       	ldd	r27, Y+8	; 0x08
    26e4:	28 1b       	sub	r18, r24
    26e6:	39 0b       	sbc	r19, r25
    26e8:	4a 0b       	sbc	r20, r26
    26ea:	5b 0b       	sbc	r21, r27
    26ec:	c8 01       	movw	r24, r16
    26ee:	b7 01       	movw	r22, r14
    26f0:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <__mulsi3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	89 83       	std	Y+1, r24	; 0x01
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	ab 83       	std	Y+3, r26	; 0x03
    26fe:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue / (Copy_s32InputRangeMax - Copy_s32InputRangeMin);
    2700:	29 85       	ldd	r18, Y+9	; 0x09
    2702:	3a 85       	ldd	r19, Y+10	; 0x0a
    2704:	4b 85       	ldd	r20, Y+11	; 0x0b
    2706:	5c 85       	ldd	r21, Y+12	; 0x0c
    2708:	8d 81       	ldd	r24, Y+5	; 0x05
    270a:	9e 81       	ldd	r25, Y+6	; 0x06
    270c:	af 81       	ldd	r26, Y+7	; 0x07
    270e:	b8 85       	ldd	r27, Y+8	; 0x08
    2710:	28 1b       	sub	r18, r24
    2712:	39 0b       	sbc	r19, r25
    2714:	4a 0b       	sbc	r20, r26
    2716:	5b 0b       	sbc	r21, r27
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	9a 81       	ldd	r25, Y+2	; 0x02
    271c:	ab 81       	ldd	r26, Y+3	; 0x03
    271e:	bc 81       	ldd	r27, Y+4	; 0x04
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <__divmodsi4>
    2728:	da 01       	movw	r26, r20
    272a:	c9 01       	movw	r24, r18
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	ab 83       	std	Y+3, r26	; 0x03
    2732:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputValue = Local_s32OutputValue + Copy_s32OutputRangeMin;
    2734:	29 81       	ldd	r18, Y+1	; 0x01
    2736:	3a 81       	ldd	r19, Y+2	; 0x02
    2738:	4b 81       	ldd	r20, Y+3	; 0x03
    273a:	5c 81       	ldd	r21, Y+4	; 0x04
    273c:	8d 85       	ldd	r24, Y+13	; 0x0d
    273e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2740:	af 85       	ldd	r26, Y+15	; 0x0f
    2742:	b8 89       	ldd	r27, Y+16	; 0x10
    2744:	82 0f       	add	r24, r18
    2746:	93 1f       	adc	r25, r19
    2748:	a4 1f       	adc	r26, r20
    274a:	b5 1f       	adc	r27, r21
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	ab 83       	std	Y+3, r26	; 0x03
    2752:	bc 83       	std	Y+4, r27	; 0x04

	return Local_s32OutputValue;
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	9a 81       	ldd	r25, Y+2	; 0x02
    2758:	ab 81       	ldd	r26, Y+3	; 0x03
    275a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	64 96       	adiw	r28, 0x14	; 20
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	df 90       	pop	r13
    277a:	cf 90       	pop	r12
    277c:	bf 90       	pop	r11
    277e:	af 90       	pop	r10
    2780:	08 95       	ret

00002782 <MOTOR_u8RotateCW>:
#include "MOTOR_private.h"
#include "MOTOR_interface.h"


uint8 MOTOR_u8RotateCW(const MOTOR_t *Copy_pmotortMotorInfo)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	00 d0       	rcall	.+0      	; 0x2788 <MOTOR_u8RotateCW+0x6>
    2788:	0f 92       	push	r0
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	9b 83       	std	Y+3, r25	; 0x03
    2790:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2792:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	9b 81       	ldd	r25, Y+3	; 0x03
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	a9 f0       	breq	.+42     	; 0x27c6 <MOTOR_u8RotateCW+0x44>
	{
		/*Set pin 1 as low, pin 2 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_LOW);
    279c:	ea 81       	ldd	r30, Y+2	; 0x02
    279e:	fb 81       	ldd	r31, Y+3	; 0x03
    27a0:	80 81       	ld	r24, Z
    27a2:	ea 81       	ldd	r30, Y+2	; 0x02
    27a4:	fb 81       	ldd	r31, Y+3	; 0x03
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	69 2f       	mov	r22, r25
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_HIGH);
    27b0:	ea 81       	ldd	r30, Y+2	; 0x02
    27b2:	fb 81       	ldd	r31, Y+3	; 0x03
    27b4:	80 81       	ld	r24, Z
    27b6:	ea 81       	ldd	r30, Y+2	; 0x02
    27b8:	fb 81       	ldd	r31, Y+3	; 0x03
    27ba:	92 81       	ldd	r25, Z+2	; 0x02
    27bc:	69 2f       	mov	r22, r25
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <MOTOR_u8RotateCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    27c6:	82 e0       	ldi	r24, 0x02	; 2
    27c8:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <MOTOR_u8RotateCCW>:

uint8 MOTOR_u8RotateCCW(const MOTOR_t *Copy_pmotortMotorInfo)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	00 d0       	rcall	.+0      	; 0x27de <MOTOR_u8RotateCCW+0x6>
    27de:	0f 92       	push	r0
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	9b 83       	std	Y+3, r25	; 0x03
    27e6:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    27e8:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	9b 81       	ldd	r25, Y+3	; 0x03
    27ee:	00 97       	sbiw	r24, 0x00	; 0
    27f0:	a9 f0       	breq	.+42     	; 0x281c <MOTOR_u8RotateCCW+0x44>
	{
		/*Set pin 2 as low, pin 1 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_LOW);
    27f2:	ea 81       	ldd	r30, Y+2	; 0x02
    27f4:	fb 81       	ldd	r31, Y+3	; 0x03
    27f6:	80 81       	ld	r24, Z
    27f8:	ea 81       	ldd	r30, Y+2	; 0x02
    27fa:	fb 81       	ldd	r31, Y+3	; 0x03
    27fc:	92 81       	ldd	r25, Z+2	; 0x02
    27fe:	69 2f       	mov	r22, r25
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_HIGH);
    2806:	ea 81       	ldd	r30, Y+2	; 0x02
    2808:	fb 81       	ldd	r31, Y+3	; 0x03
    280a:	80 81       	ld	r24, Z
    280c:	ea 81       	ldd	r30, Y+2	; 0x02
    280e:	fb 81       	ldd	r31, Y+3	; 0x03
    2810:	91 81       	ldd	r25, Z+1	; 0x01
    2812:	69 2f       	mov	r22, r25
    2814:	41 e0       	ldi	r20, 0x01	; 1
    2816:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <MOTOR_u8RotateCCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    2820:	89 81       	ldd	r24, Y+1	; 0x01
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <MOTOR_u8Stop>:

uint8 MOTOR_u8Stop(const MOTOR_t *Copy_pmotortMotorInfo)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	00 d0       	rcall	.+0      	; 0x2834 <MOTOR_u8Stop+0x6>
    2834:	0f 92       	push	r0
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	9b 83       	std	Y+3, r25	; 0x03
    283c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    283e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	9b 81       	ldd	r25, Y+3	; 0x03
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	a9 f0       	breq	.+42     	; 0x2872 <MOTOR_u8Stop+0x44>
	{
		/*Set pin 1 and 2 as low*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_LOW);
    2848:	ea 81       	ldd	r30, Y+2	; 0x02
    284a:	fb 81       	ldd	r31, Y+3	; 0x03
    284c:	80 81       	ld	r24, Z
    284e:	ea 81       	ldd	r30, Y+2	; 0x02
    2850:	fb 81       	ldd	r31, Y+3	; 0x03
    2852:	92 81       	ldd	r25, Z+2	; 0x02
    2854:	69 2f       	mov	r22, r25
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_LOW);
    285c:	ea 81       	ldd	r30, Y+2	; 0x02
    285e:	fb 81       	ldd	r31, Y+3	; 0x03
    2860:	80 81       	ld	r24, Z
    2862:	ea 81       	ldd	r30, Y+2	; 0x02
    2864:	fb 81       	ldd	r31, Y+3	; 0x03
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	69 2f       	mov	r22, r25
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <MOTOR_u8Stop+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2872:	82 e0       	ldi	r24, 0x02	; 2
    2874:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    2876:	89 81       	ldd	r24, Y+1	; 0x01
}
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    288c:	ea e3       	ldi	r30, 0x3A	; 58
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	8f e7       	ldi	r24, 0x7F	; 127
    2892:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2894:	e7 e3       	ldi	r30, 0x37	; 55
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 ef       	ldi	r24, 0xF0	; 240
    289a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    289c:	e4 e3       	ldi	r30, 0x34	; 52
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	8f ef       	ldi	r24, 0xFF	; 255
    28a2:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    28a4:	e1 e3       	ldi	r30, 0x31	; 49
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	87 ef       	ldi	r24, 0xF7	; 247
    28aa:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
    28ac:	eb e3       	ldi	r30, 0x3B	; 59
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    28b2:	e8 e3       	ldi	r30, 0x38	; 56
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	8f e0       	ldi	r24, 0x0F	; 15
    28b8:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    28ba:	e5 e3       	ldi	r30, 0x35	; 53
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    28c0:	e2 e3       	ldi	r30, 0x32	; 50
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	88 e0       	ldi	r24, 0x08	; 8
    28c6:	80 83       	st	Z, r24
}
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <SSD_u8SetNumber>:
//	uint8 LedPin;
//	uint8 EnablePort;
//	uint8 EnablePin;

uint8 SSD_u8SetNumber(const SSD_t *Copy_pssdtSSDInformation, uint8 Copy_u8Number)
{
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <SSD_u8SetNumber+0x6>
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <SSD_u8SetNumber+0x8>
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	9b 83       	std	Y+3, r25	; 0x03
    28dc:	8a 83       	std	Y+2, r24	; 0x02
    28de:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    28e0:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pssdtSSDInformation != NULL)
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	09 f4       	brne	.+2      	; 0x28ec <SSD_u8SetNumber+0x1e>
    28ea:	81 c0       	rjmp	.+258    	; 0x29ee <SSD_u8SetNumber+0x120>
	{

		/*Set the number to the SSD according to the type of it*/
		if(Copy_pssdtSSDInformation -> Type == SSD_u8CATHODE)
    28ec:	ea 81       	ldd	r30, Y+2	; 0x02
    28ee:	fb 81       	ldd	r31, Y+3	; 0x03
    28f0:	80 81       	ld	r24, Z
    28f2:	82 30       	cpi	r24, 0x02	; 2
    28f4:	b9 f5       	brne	.+110    	; 0x2964 <SSD_u8SetNumber+0x96>
		{
			/*Set enable pin to LOW*/
			DIO_u8SetPinValue(Copy_pssdtSSDInformation -> EnablePort, Copy_pssdtSSDInformation -> EnablePin, DIO_u8PIN_LOW);
    28f6:	ea 81       	ldd	r30, Y+2	; 0x02
    28f8:	fb 81       	ldd	r31, Y+3	; 0x03
    28fa:	83 81       	ldd	r24, Z+3	; 0x03
    28fc:	ea 81       	ldd	r30, Y+2	; 0x02
    28fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2900:	94 81       	ldd	r25, Z+4	; 0x04
    2902:	69 2f       	mov	r22, r25
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>

			/*Set the first of the pins*/
			if(Copy_pssdtSSDInformation -> LedPin == 0)
    290a:	ea 81       	ldd	r30, Y+2	; 0x02
    290c:	fb 81       	ldd	r31, Y+3	; 0x03
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	88 23       	and	r24, r24
    2912:	79 f4       	brne	.+30     	; 0x2932 <SSD_u8SetNumber+0x64>
			{
				DIO_u8SetPortValue(Copy_pssdtSSDInformation -> Port, SSD_u8NumbersArray[Copy_u8Number]);
    2914:	ea 81       	ldd	r30, Y+2	; 0x02
    2916:	fb 81       	ldd	r31, Y+3	; 0x03
    2918:	21 81       	ldd	r18, Z+1	; 0x01
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	fc 01       	movw	r30, r24
    2922:	ec 56       	subi	r30, 0x6C	; 108
    2924:	fd 4f       	sbci	r31, 0xFD	; 253
    2926:	90 81       	ld	r25, Z
    2928:	82 2f       	mov	r24, r18
    292a:	69 2f       	mov	r22, r25
    292c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <DIO_u8SetPortValue>
    2930:	60 c0       	rjmp	.+192    	; 0x29f2 <SSD_u8SetNumber+0x124>
			}
			else if(Copy_pssdtSSDInformation -> LedPin == 1)
    2932:	ea 81       	ldd	r30, Y+2	; 0x02
    2934:	fb 81       	ldd	r31, Y+3	; 0x03
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	89 f4       	brne	.+34     	; 0x295e <SSD_u8SetNumber+0x90>
			{
				DIO_u8SetPortValue(Copy_pssdtSSDInformation -> Port, (SSD_u8NumbersArray[Copy_u8Number] << 1));
    293c:	ea 81       	ldd	r30, Y+2	; 0x02
    293e:	fb 81       	ldd	r31, Y+3	; 0x03
    2940:	21 81       	ldd	r18, Z+1	; 0x01
    2942:	8c 81       	ldd	r24, Y+4	; 0x04
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	fc 01       	movw	r30, r24
    294a:	ec 56       	subi	r30, 0x6C	; 108
    294c:	fd 4f       	sbci	r31, 0xFD	; 253
    294e:	80 81       	ld	r24, Z
    2950:	98 2f       	mov	r25, r24
    2952:	99 0f       	add	r25, r25
    2954:	82 2f       	mov	r24, r18
    2956:	69 2f       	mov	r22, r25
    2958:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <DIO_u8SetPortValue>
    295c:	4a c0       	rjmp	.+148    	; 0x29f2 <SSD_u8SetNumber+0x124>
			}
			else
			{
				Local_u8ErrorState = NOK;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	47 c0       	rjmp	.+142    	; 0x29f2 <SSD_u8SetNumber+0x124>
			}
		}
		else if(Copy_pssdtSSDInformation -> Type == SSD_u8ANODE)
    2964:	ea 81       	ldd	r30, Y+2	; 0x02
    2966:	fb 81       	ldd	r31, Y+3	; 0x03
    2968:	80 81       	ld	r24, Z
    296a:	81 30       	cpi	r24, 0x01	; 1
    296c:	e9 f5       	brne	.+122    	; 0x29e8 <SSD_u8SetNumber+0x11a>
		{
			/*Set enable pin to HIGH*/
			DIO_u8SetPinValue(Copy_pssdtSSDInformation -> EnablePort, Copy_pssdtSSDInformation -> EnablePin, DIO_u8PIN_HIGH);
    296e:	ea 81       	ldd	r30, Y+2	; 0x02
    2970:	fb 81       	ldd	r31, Y+3	; 0x03
    2972:	83 81       	ldd	r24, Z+3	; 0x03
    2974:	ea 81       	ldd	r30, Y+2	; 0x02
    2976:	fb 81       	ldd	r31, Y+3	; 0x03
    2978:	94 81       	ldd	r25, Z+4	; 0x04
    297a:	69 2f       	mov	r22, r25
    297c:	41 e0       	ldi	r20, 0x01	; 1
    297e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>

			/*Set the first of the pins*/
			if(Copy_pssdtSSDInformation -> LedPin == 0)
    2982:	ea 81       	ldd	r30, Y+2	; 0x02
    2984:	fb 81       	ldd	r31, Y+3	; 0x03
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	88 23       	and	r24, r24
    298a:	89 f4       	brne	.+34     	; 0x29ae <SSD_u8SetNumber+0xe0>
			{
				DIO_u8SetPortValue(Copy_pssdtSSDInformation -> Port, ~SSD_u8NumbersArray[Copy_u8Number]);
    298c:	ea 81       	ldd	r30, Y+2	; 0x02
    298e:	fb 81       	ldd	r31, Y+3	; 0x03
    2990:	21 81       	ldd	r18, Z+1	; 0x01
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	88 2f       	mov	r24, r24
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	fc 01       	movw	r30, r24
    299a:	ec 56       	subi	r30, 0x6C	; 108
    299c:	fd 4f       	sbci	r31, 0xFD	; 253
    299e:	80 81       	ld	r24, Z
    29a0:	98 2f       	mov	r25, r24
    29a2:	90 95       	com	r25
    29a4:	82 2f       	mov	r24, r18
    29a6:	69 2f       	mov	r22, r25
    29a8:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <DIO_u8SetPortValue>
    29ac:	22 c0       	rjmp	.+68     	; 0x29f2 <SSD_u8SetNumber+0x124>
			}
			else if(Copy_pssdtSSDInformation -> LedPin == 1)
    29ae:	ea 81       	ldd	r30, Y+2	; 0x02
    29b0:	fb 81       	ldd	r31, Y+3	; 0x03
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	a9 f4       	brne	.+42     	; 0x29e2 <SSD_u8SetNumber+0x114>
			{
				DIO_u8SetPortValue(Copy_pssdtSSDInformation -> Port, ~(SSD_u8NumbersArray[Copy_u8Number] << 1));
    29b8:	ea 81       	ldd	r30, Y+2	; 0x02
    29ba:	fb 81       	ldd	r31, Y+3	; 0x03
    29bc:	21 81       	ldd	r18, Z+1	; 0x01
    29be:	8c 81       	ldd	r24, Y+4	; 0x04
    29c0:	88 2f       	mov	r24, r24
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	fc 01       	movw	r30, r24
    29c6:	ec 56       	subi	r30, 0x6C	; 108
    29c8:	fd 4f       	sbci	r31, 0xFD	; 253
    29ca:	80 81       	ld	r24, Z
    29cc:	88 2f       	mov	r24, r24
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	88 0f       	add	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	98 2f       	mov	r25, r24
    29d6:	90 95       	com	r25
    29d8:	82 2f       	mov	r24, r18
    29da:	69 2f       	mov	r22, r25
    29dc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <DIO_u8SetPortValue>
    29e0:	08 c0       	rjmp	.+16     	; 0x29f2 <SSD_u8SetNumber+0x124>
			}
			else
			{
				Local_u8ErrorState = NOK;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	05 c0       	rjmp	.+10     	; 0x29f2 <SSD_u8SetNumber+0x124>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <SSD_u8SetNumber+0x124>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <SSD_u8Disable>:


uint8 SSD_u8Disable(const SSD_t *Copy_pssdtSSDInformation)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <SSD_u8Disable+0x6>
    2a08:	0f 92       	push	r0
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	9b 83       	std	Y+3, r25	; 0x03
    2a10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    2a12:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pssdtSSDInformation != NULL)
    2a14:	8a 81       	ldd	r24, Y+2	; 0x02
    2a16:	9b 81       	ldd	r25, Y+3	; 0x03
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	19 f1       	breq	.+70     	; 0x2a62 <SSD_u8Disable+0x60>
	{
		if(Copy_pssdtSSDInformation -> Type == SSD_u8CATHODE)
    2a1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2a20:	80 81       	ld	r24, Z
    2a22:	82 30       	cpi	r24, 0x02	; 2
    2a24:	59 f4       	brne	.+22     	; 0x2a3c <SSD_u8Disable+0x3a>
		{
			DIO_u8SetPinValue(Copy_pssdtSSDInformation -> EnablePort, Copy_pssdtSSDInformation -> EnablePin, DIO_u8PIN_HIGH);
    2a26:	ea 81       	ldd	r30, Y+2	; 0x02
    2a28:	fb 81       	ldd	r31, Y+3	; 0x03
    2a2a:	83 81       	ldd	r24, Z+3	; 0x03
    2a2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2a30:	94 81       	ldd	r25, Z+4	; 0x04
    2a32:	69 2f       	mov	r22, r25
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2a3a:	15 c0       	rjmp	.+42     	; 0x2a66 <SSD_u8Disable+0x64>
		}
		else if(Copy_pssdtSSDInformation -> Type == SSD_u8ANODE)
    2a3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2a40:	80 81       	ld	r24, Z
    2a42:	81 30       	cpi	r24, 0x01	; 1
    2a44:	59 f4       	brne	.+22     	; 0x2a5c <SSD_u8Disable+0x5a>
		{
			DIO_u8SetPinValue(Copy_pssdtSSDInformation -> EnablePort, Copy_pssdtSSDInformation -> EnablePin, DIO_u8PIN_LOW);
    2a46:	ea 81       	ldd	r30, Y+2	; 0x02
    2a48:	fb 81       	ldd	r31, Y+3	; 0x03
    2a4a:	83 81       	ldd	r24, Z+3	; 0x03
    2a4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2a50:	94 81       	ldd	r25, Z+4	; 0x04
    2a52:	69 2f       	mov	r22, r25
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2a5a:	05 c0       	rjmp	.+10     	; 0x2a66 <SSD_u8Disable+0x64>
		}
		else
		{
			Local_u8ErrorState = NOK;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <SSD_u8Disable+0x64>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2a62:	82 e0       	ldi	r24, 0x02	; 2
    2a64:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <STEPPER_u8RotateWithFixedSpeed>:
#include "STEPPER_config.h"
#include "STEPPER_private.h"
#include "STEPPER_interface.h"

uint8 STEPPER_u8RotateWithFixedSpeed(const STEPPER_t *Copy_psteppertMotorInfo, uint16 Copy_u16Angle, uint8 Copy_u8Direction)
{
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	ae 97       	sbiw	r28, 0x2e	; 46
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	9b a3       	std	Y+35, r25	; 0x23
    2a8a:	8a a3       	std	Y+34, r24	; 0x22
    2a8c:	7d a3       	std	Y+37, r23	; 0x25
    2a8e:	6c a3       	std	Y+36, r22	; 0x24
    2a90:	4e a3       	std	Y+38, r20	; 0x26
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2a92:	19 a2       	std	Y+33, r1	; 0x21
	uint16 Local_u16FullSteps;
	uint16 Local_u16Counter;

	/*Validate the pointer address*/
	if(Copy_psteppertMotorInfo != NULL)
    2a94:	8a a1       	ldd	r24, Y+34	; 0x22
    2a96:	9b a1       	ldd	r25, Y+35	; 0x23
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <STEPPER_u8RotateWithFixedSpeed+0x2a>
    2a9c:	de c2       	rjmp	.+1468   	; 0x305a <STEPPER_u8RotateWithFixedSpeed+0x5e6>
	{
		/*Calculating the full steps to take*/
		Local_u16FullSteps = (uint16) ((((uint32) Copy_u16Angle) * 2048UL) / 360UL);
    2a9e:	8c a1       	ldd	r24, Y+36	; 0x24
    2aa0:	9d a1       	ldd	r25, Y+37	; 0x25
    2aa2:	cc 01       	movw	r24, r24
    2aa4:	a0 e0       	ldi	r26, 0x00	; 0
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	07 2e       	mov	r0, r23
    2aaa:	7b e0       	ldi	r23, 0x0B	; 11
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	aa 1f       	adc	r26, r26
    2ab2:	bb 1f       	adc	r27, r27
    2ab4:	7a 95       	dec	r23
    2ab6:	d1 f7       	brne	.-12     	; 0x2aac <STEPPER_u8RotateWithFixedSpeed+0x38>
    2ab8:	70 2d       	mov	r23, r0
    2aba:	28 e6       	ldi	r18, 0x68	; 104
    2abc:	31 e0       	ldi	r19, 0x01	; 1
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	0e 94 3f 35 	call	0x6a7e	; 0x6a7e <__udivmodsi4>
    2aca:	da 01       	movw	r26, r20
    2acc:	c9 01       	movw	r24, r18
    2ace:	98 a3       	std	Y+32, r25	; 0x20
    2ad0:	8f 8f       	std	Y+31, r24	; 0x1f

		/*Taking the steps inside for loop, every loop move for 1 step*/
		if(Copy_u8Direction == STEPPER_u8ROTATE_CCW)
    2ad2:	8e a1       	ldd	r24, Y+38	; 0x26
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	09 f0       	breq	.+2      	; 0x2ada <STEPPER_u8RotateWithFixedSpeed+0x66>
    2ad8:	5d c1       	rjmp	.+698    	; 0x2d94 <STEPPER_u8RotateWithFixedSpeed+0x320>
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u16FullSteps; Local_u16Counter++)
    2ada:	1e 8e       	std	Y+30, r1	; 0x1e
    2adc:	1d 8e       	std	Y+29, r1	; 0x1d
    2ade:	51 c1       	rjmp	.+674    	; 0x2d82 <STEPPER_u8RotateWithFixedSpeed+0x30e>
			{
				switch(Local_u16Counter % 4UL)
    2ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ae2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ae4:	cc 01       	movw	r24, r24
    2ae6:	a0 e0       	ldi	r26, 0x00	; 0
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	9c 01       	movw	r18, r24
    2aec:	ad 01       	movw	r20, r26
    2aee:	23 70       	andi	r18, 0x03	; 3
    2af0:	30 70       	andi	r19, 0x00	; 0
    2af2:	40 70       	andi	r20, 0x00	; 0
    2af4:	50 70       	andi	r21, 0x00	; 0
    2af6:	2b a7       	std	Y+43, r18	; 0x2b
    2af8:	3c a7       	std	Y+44, r19	; 0x2c
    2afa:	4d a7       	std	Y+45, r20	; 0x2d
    2afc:	5e a7       	std	Y+46, r21	; 0x2e
    2afe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b00:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b02:	ad a5       	ldd	r26, Y+45	; 0x2d
    2b04:	be a5       	ldd	r27, Y+46	; 0x2e
    2b06:	81 30       	cpi	r24, 0x01	; 1
    2b08:	91 05       	cpc	r25, r1
    2b0a:	a1 05       	cpc	r26, r1
    2b0c:	b1 05       	cpc	r27, r1
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <STEPPER_u8RotateWithFixedSpeed+0x9e>
    2b10:	47 c0       	rjmp	.+142    	; 0x2ba0 <STEPPER_u8RotateWithFixedSpeed+0x12c>
    2b12:	2b a5       	ldd	r18, Y+43	; 0x2b
    2b14:	3c a5       	ldd	r19, Y+44	; 0x2c
    2b16:	4d a5       	ldd	r20, Y+45	; 0x2d
    2b18:	5e a5       	ldd	r21, Y+46	; 0x2e
    2b1a:	21 30       	cpi	r18, 0x01	; 1
    2b1c:	31 05       	cpc	r19, r1
    2b1e:	41 05       	cpc	r20, r1
    2b20:	51 05       	cpc	r21, r1
    2b22:	a8 f0       	brcs	.+42     	; 0x2b4e <STEPPER_u8RotateWithFixedSpeed+0xda>
    2b24:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b26:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b28:	ad a5       	ldd	r26, Y+45	; 0x2d
    2b2a:	be a5       	ldd	r27, Y+46	; 0x2e
    2b2c:	82 30       	cpi	r24, 0x02	; 2
    2b2e:	91 05       	cpc	r25, r1
    2b30:	a1 05       	cpc	r26, r1
    2b32:	b1 05       	cpc	r27, r1
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <STEPPER_u8RotateWithFixedSpeed+0xc4>
    2b36:	5d c0       	rjmp	.+186    	; 0x2bf2 <STEPPER_u8RotateWithFixedSpeed+0x17e>
    2b38:	2b a5       	ldd	r18, Y+43	; 0x2b
    2b3a:	3c a5       	ldd	r19, Y+44	; 0x2c
    2b3c:	4d a5       	ldd	r20, Y+45	; 0x2d
    2b3e:	5e a5       	ldd	r21, Y+46	; 0x2e
    2b40:	23 30       	cpi	r18, 0x03	; 3
    2b42:	31 05       	cpc	r19, r1
    2b44:	41 05       	cpc	r20, r1
    2b46:	51 05       	cpc	r21, r1
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <STEPPER_u8RotateWithFixedSpeed+0xd8>
    2b4a:	7c c0       	rjmp	.+248    	; 0x2c44 <STEPPER_u8RotateWithFixedSpeed+0x1d0>
    2b4c:	a3 c0       	rjmp	.+326    	; 0x2c94 <STEPPER_u8RotateWithFixedSpeed+0x220>
				{
				case 0:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_LOW);
    2b4e:	ea a1       	ldd	r30, Y+34	; 0x22
    2b50:	fb a1       	ldd	r31, Y+35	; 0x23
    2b52:	80 81       	ld	r24, Z
    2b54:	ea a1       	ldd	r30, Y+34	; 0x22
    2b56:	fb a1       	ldd	r31, Y+35	; 0x23
    2b58:	91 81       	ldd	r25, Z+1	; 0x01
    2b5a:	69 2f       	mov	r22, r25
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    2b62:	ea a1       	ldd	r30, Y+34	; 0x22
    2b64:	fb a1       	ldd	r31, Y+35	; 0x23
    2b66:	80 81       	ld	r24, Z
    2b68:	ea a1       	ldd	r30, Y+34	; 0x22
    2b6a:	fb a1       	ldd	r31, Y+35	; 0x23
    2b6c:	92 81       	ldd	r25, Z+2	; 0x02
    2b6e:	69 2f       	mov	r22, r25
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    2b76:	ea a1       	ldd	r30, Y+34	; 0x22
    2b78:	fb a1       	ldd	r31, Y+35	; 0x23
    2b7a:	80 81       	ld	r24, Z
    2b7c:	ea a1       	ldd	r30, Y+34	; 0x22
    2b7e:	fb a1       	ldd	r31, Y+35	; 0x23
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	69 2f       	mov	r22, r25
    2b84:	41 e0       	ldi	r20, 0x01	; 1
    2b86:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    2b8a:	ea a1       	ldd	r30, Y+34	; 0x22
    2b8c:	fb a1       	ldd	r31, Y+35	; 0x23
    2b8e:	80 81       	ld	r24, Z
    2b90:	ea a1       	ldd	r30, Y+34	; 0x22
    2b92:	fb a1       	ldd	r31, Y+35	; 0x23
    2b94:	94 81       	ldd	r25, Z+4	; 0x04
    2b96:	69 2f       	mov	r22, r25
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2b9e:	7a c0       	rjmp	.+244    	; 0x2c94 <STEPPER_u8RotateWithFixedSpeed+0x220>
					break;

				case 1:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    2ba0:	ea a1       	ldd	r30, Y+34	; 0x22
    2ba2:	fb a1       	ldd	r31, Y+35	; 0x23
    2ba4:	80 81       	ld	r24, Z
    2ba6:	ea a1       	ldd	r30, Y+34	; 0x22
    2ba8:	fb a1       	ldd	r31, Y+35	; 0x23
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	69 2f       	mov	r22, r25
    2bae:	41 e0       	ldi	r20, 0x01	; 1
    2bb0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_LOW);
    2bb4:	ea a1       	ldd	r30, Y+34	; 0x22
    2bb6:	fb a1       	ldd	r31, Y+35	; 0x23
    2bb8:	80 81       	ld	r24, Z
    2bba:	ea a1       	ldd	r30, Y+34	; 0x22
    2bbc:	fb a1       	ldd	r31, Y+35	; 0x23
    2bbe:	92 81       	ldd	r25, Z+2	; 0x02
    2bc0:	69 2f       	mov	r22, r25
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    2bc8:	ea a1       	ldd	r30, Y+34	; 0x22
    2bca:	fb a1       	ldd	r31, Y+35	; 0x23
    2bcc:	80 81       	ld	r24, Z
    2bce:	ea a1       	ldd	r30, Y+34	; 0x22
    2bd0:	fb a1       	ldd	r31, Y+35	; 0x23
    2bd2:	93 81       	ldd	r25, Z+3	; 0x03
    2bd4:	69 2f       	mov	r22, r25
    2bd6:	41 e0       	ldi	r20, 0x01	; 1
    2bd8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    2bdc:	ea a1       	ldd	r30, Y+34	; 0x22
    2bde:	fb a1       	ldd	r31, Y+35	; 0x23
    2be0:	80 81       	ld	r24, Z
    2be2:	ea a1       	ldd	r30, Y+34	; 0x22
    2be4:	fb a1       	ldd	r31, Y+35	; 0x23
    2be6:	94 81       	ldd	r25, Z+4	; 0x04
    2be8:	69 2f       	mov	r22, r25
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2bf0:	51 c0       	rjmp	.+162    	; 0x2c94 <STEPPER_u8RotateWithFixedSpeed+0x220>
					break;

				case 2:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    2bf2:	ea a1       	ldd	r30, Y+34	; 0x22
    2bf4:	fb a1       	ldd	r31, Y+35	; 0x23
    2bf6:	80 81       	ld	r24, Z
    2bf8:	ea a1       	ldd	r30, Y+34	; 0x22
    2bfa:	fb a1       	ldd	r31, Y+35	; 0x23
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	69 2f       	mov	r22, r25
    2c00:	41 e0       	ldi	r20, 0x01	; 1
    2c02:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    2c06:	ea a1       	ldd	r30, Y+34	; 0x22
    2c08:	fb a1       	ldd	r31, Y+35	; 0x23
    2c0a:	80 81       	ld	r24, Z
    2c0c:	ea a1       	ldd	r30, Y+34	; 0x22
    2c0e:	fb a1       	ldd	r31, Y+35	; 0x23
    2c10:	92 81       	ldd	r25, Z+2	; 0x02
    2c12:	69 2f       	mov	r22, r25
    2c14:	41 e0       	ldi	r20, 0x01	; 1
    2c16:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_LOW);
    2c1a:	ea a1       	ldd	r30, Y+34	; 0x22
    2c1c:	fb a1       	ldd	r31, Y+35	; 0x23
    2c1e:	80 81       	ld	r24, Z
    2c20:	ea a1       	ldd	r30, Y+34	; 0x22
    2c22:	fb a1       	ldd	r31, Y+35	; 0x23
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	69 2f       	mov	r22, r25
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    2c2e:	ea a1       	ldd	r30, Y+34	; 0x22
    2c30:	fb a1       	ldd	r31, Y+35	; 0x23
    2c32:	80 81       	ld	r24, Z
    2c34:	ea a1       	ldd	r30, Y+34	; 0x22
    2c36:	fb a1       	ldd	r31, Y+35	; 0x23
    2c38:	94 81       	ldd	r25, Z+4	; 0x04
    2c3a:	69 2f       	mov	r22, r25
    2c3c:	41 e0       	ldi	r20, 0x01	; 1
    2c3e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2c42:	28 c0       	rjmp	.+80     	; 0x2c94 <STEPPER_u8RotateWithFixedSpeed+0x220>
					break;

				case 3:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    2c44:	ea a1       	ldd	r30, Y+34	; 0x22
    2c46:	fb a1       	ldd	r31, Y+35	; 0x23
    2c48:	80 81       	ld	r24, Z
    2c4a:	ea a1       	ldd	r30, Y+34	; 0x22
    2c4c:	fb a1       	ldd	r31, Y+35	; 0x23
    2c4e:	91 81       	ldd	r25, Z+1	; 0x01
    2c50:	69 2f       	mov	r22, r25
    2c52:	41 e0       	ldi	r20, 0x01	; 1
    2c54:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    2c58:	ea a1       	ldd	r30, Y+34	; 0x22
    2c5a:	fb a1       	ldd	r31, Y+35	; 0x23
    2c5c:	80 81       	ld	r24, Z
    2c5e:	ea a1       	ldd	r30, Y+34	; 0x22
    2c60:	fb a1       	ldd	r31, Y+35	; 0x23
    2c62:	92 81       	ldd	r25, Z+2	; 0x02
    2c64:	69 2f       	mov	r22, r25
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    2c6c:	ea a1       	ldd	r30, Y+34	; 0x22
    2c6e:	fb a1       	ldd	r31, Y+35	; 0x23
    2c70:	80 81       	ld	r24, Z
    2c72:	ea a1       	ldd	r30, Y+34	; 0x22
    2c74:	fb a1       	ldd	r31, Y+35	; 0x23
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	69 2f       	mov	r22, r25
    2c7a:	41 e0       	ldi	r20, 0x01	; 1
    2c7c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_LOW);
    2c80:	ea a1       	ldd	r30, Y+34	; 0x22
    2c82:	fb a1       	ldd	r31, Y+35	; 0x23
    2c84:	80 81       	ld	r24, Z
    2c86:	ea a1       	ldd	r30, Y+34	; 0x22
    2c88:	fb a1       	ldd	r31, Y+35	; 0x23
    2c8a:	94 81       	ldd	r25, Z+4	; 0x04
    2c8c:	69 2f       	mov	r22, r25
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a0 ec       	ldi	r26, 0xC0	; 192
    2c9a:	b0 e4       	ldi	r27, 0x40	; 64
    2c9c:	89 8f       	std	Y+25, r24	; 0x19
    2c9e:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ca2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a ef       	ldi	r20, 0xFA	; 250
    2cb2:	54 e4       	ldi	r21, 0x44	; 68
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	8d 8b       	std	Y+21, r24	; 0x15
    2cbe:	9e 8b       	std	Y+22, r25	; 0x16
    2cc0:	af 8b       	std	Y+23, r26	; 0x17
    2cc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cca:	98 8d       	ldd	r25, Y+24	; 0x18
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	2c f4       	brge	.+10     	; 0x2ce6 <STEPPER_u8RotateWithFixedSpeed+0x272>
		__ticks = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9c 8b       	std	Y+20, r25	; 0x14
    2ce2:	8b 8b       	std	Y+19, r24	; 0x13
    2ce4:	3f c0       	rjmp	.+126    	; 0x2d64 <STEPPER_u8RotateWithFixedSpeed+0x2f0>
	else if (__tmp > 65535)
    2ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cea:	8f 89       	ldd	r24, Y+23	; 0x17
    2cec:	98 8d       	ldd	r25, Y+24	; 0x18
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	4c f5       	brge	.+82     	; 0x2d50 <STEPPER_u8RotateWithFixedSpeed+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfe:	69 8d       	ldd	r22, Y+25	; 0x19
    2d00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e2       	ldi	r20, 0x20	; 32
    2d0c:	51 e4       	ldi	r21, 0x41	; 65
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	9c 8b       	std	Y+20, r25	; 0x14
    2d24:	8b 8b       	std	Y+19, r24	; 0x13
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <STEPPER_u8RotateWithFixedSpeed+0x2d2>
    2d28:	88 ec       	ldi	r24, 0xC8	; 200
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9a 8b       	std	Y+18, r25	; 0x12
    2d2e:	89 8b       	std	Y+17, r24	; 0x11
    2d30:	89 89       	ldd	r24, Y+17	; 0x11
    2d32:	9a 89       	ldd	r25, Y+18	; 0x12
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <STEPPER_u8RotateWithFixedSpeed+0x2c0>
    2d38:	9a 8b       	std	Y+18, r25	; 0x12
    2d3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	9c 8b       	std	Y+20, r25	; 0x14
    2d44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d46:	8b 89       	ldd	r24, Y+19	; 0x13
    2d48:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	69 f7       	brne	.-38     	; 0x2d28 <STEPPER_u8RotateWithFixedSpeed+0x2b4>
    2d4e:	14 c0       	rjmp	.+40     	; 0x2d78 <STEPPER_u8RotateWithFixedSpeed+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d50:	6d 89       	ldd	r22, Y+21	; 0x15
    2d52:	7e 89       	ldd	r23, Y+22	; 0x16
    2d54:	8f 89       	ldd	r24, Y+23	; 0x17
    2d56:	98 8d       	ldd	r25, Y+24	; 0x18
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9c 8b       	std	Y+20, r25	; 0x14
    2d62:	8b 8b       	std	Y+19, r24	; 0x13
    2d64:	8b 89       	ldd	r24, Y+19	; 0x13
    2d66:	9c 89       	ldd	r25, Y+20	; 0x14
    2d68:	98 8b       	std	Y+16, r25	; 0x10
    2d6a:	8f 87       	std	Y+15, r24	; 0x0f
    2d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d6e:	98 89       	ldd	r25, Y+16	; 0x10
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <STEPPER_u8RotateWithFixedSpeed+0x2fc>
    2d74:	98 8b       	std	Y+16, r25	; 0x10
    2d76:	8f 87       	std	Y+15, r24	; 0x0f
		Local_u16FullSteps = (uint16) ((((uint32) Copy_u16Angle) * 2048UL) / 360UL);

		/*Taking the steps inside for loop, every loop move for 1 step*/
		if(Copy_u8Direction == STEPPER_u8ROTATE_CCW)
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u16FullSteps; Local_u16Counter++)
    2d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d7c:	01 96       	adiw	r24, 0x01	; 1
    2d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d80:	8d 8f       	std	Y+29, r24	; 0x1d
    2d82:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2d84:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2d86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d88:	98 a1       	ldd	r25, Y+32	; 0x20
    2d8a:	28 17       	cp	r18, r24
    2d8c:	39 07       	cpc	r19, r25
    2d8e:	08 f4       	brcc	.+2      	; 0x2d92 <STEPPER_u8RotateWithFixedSpeed+0x31e>
    2d90:	a7 ce       	rjmp	.-690    	; 0x2ae0 <STEPPER_u8RotateWithFixedSpeed+0x6c>
    2d92:	65 c1       	rjmp	.+714    	; 0x305e <STEPPER_u8RotateWithFixedSpeed+0x5ea>
					break;
				}
				_delay_ms(STEPPER_u8SPEED_MEDIUM);
			}
		}
		else if(Copy_u8Direction == STEPPER_u8ROTATE_CW)
    2d94:	8e a1       	ldd	r24, Y+38	; 0x26
    2d96:	81 30       	cpi	r24, 0x01	; 1
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <STEPPER_u8RotateWithFixedSpeed+0x328>
    2d9a:	5c c1       	rjmp	.+696    	; 0x3054 <STEPPER_u8RotateWithFixedSpeed+0x5e0>
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u16FullSteps; Local_u16Counter++)
    2d9c:	1e 8e       	std	Y+30, r1	; 0x1e
    2d9e:	1d 8e       	std	Y+29, r1	; 0x1d
    2da0:	50 c1       	rjmp	.+672    	; 0x3042 <STEPPER_u8RotateWithFixedSpeed+0x5ce>
			{
				switch(Local_u16Counter % 4UL)
    2da2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2da4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2da6:	cc 01       	movw	r24, r24
    2da8:	a0 e0       	ldi	r26, 0x00	; 0
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	9c 01       	movw	r18, r24
    2dae:	ad 01       	movw	r20, r26
    2db0:	23 70       	andi	r18, 0x03	; 3
    2db2:	30 70       	andi	r19, 0x00	; 0
    2db4:	40 70       	andi	r20, 0x00	; 0
    2db6:	50 70       	andi	r21, 0x00	; 0
    2db8:	2f a3       	std	Y+39, r18	; 0x27
    2dba:	38 a7       	std	Y+40, r19	; 0x28
    2dbc:	49 a7       	std	Y+41, r20	; 0x29
    2dbe:	5a a7       	std	Y+42, r21	; 0x2a
    2dc0:	8f a1       	ldd	r24, Y+39	; 0x27
    2dc2:	98 a5       	ldd	r25, Y+40	; 0x28
    2dc4:	a9 a5       	ldd	r26, Y+41	; 0x29
    2dc6:	ba a5       	ldd	r27, Y+42	; 0x2a
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	91 05       	cpc	r25, r1
    2dcc:	a1 05       	cpc	r26, r1
    2dce:	b1 05       	cpc	r27, r1
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <STEPPER_u8RotateWithFixedSpeed+0x360>
    2dd2:	6f c0       	rjmp	.+222    	; 0x2eb2 <STEPPER_u8RotateWithFixedSpeed+0x43e>
    2dd4:	2f a1       	ldd	r18, Y+39	; 0x27
    2dd6:	38 a5       	ldd	r19, Y+40	; 0x28
    2dd8:	49 a5       	ldd	r20, Y+41	; 0x29
    2dda:	5a a5       	ldd	r21, Y+42	; 0x2a
    2ddc:	21 30       	cpi	r18, 0x01	; 1
    2dde:	31 05       	cpc	r19, r1
    2de0:	41 05       	cpc	r20, r1
    2de2:	51 05       	cpc	r21, r1
    2de4:	08 f4       	brcc	.+2      	; 0x2de8 <STEPPER_u8RotateWithFixedSpeed+0x374>
    2de6:	8e c0       	rjmp	.+284    	; 0x2f04 <STEPPER_u8RotateWithFixedSpeed+0x490>
    2de8:	8f a1       	ldd	r24, Y+39	; 0x27
    2dea:	98 a5       	ldd	r25, Y+40	; 0x28
    2dec:	a9 a5       	ldd	r26, Y+41	; 0x29
    2dee:	ba a5       	ldd	r27, Y+42	; 0x2a
    2df0:	82 30       	cpi	r24, 0x02	; 2
    2df2:	91 05       	cpc	r25, r1
    2df4:	a1 05       	cpc	r26, r1
    2df6:	b1 05       	cpc	r27, r1
    2df8:	99 f1       	breq	.+102    	; 0x2e60 <STEPPER_u8RotateWithFixedSpeed+0x3ec>
    2dfa:	2f a1       	ldd	r18, Y+39	; 0x27
    2dfc:	38 a5       	ldd	r19, Y+40	; 0x28
    2dfe:	49 a5       	ldd	r20, Y+41	; 0x29
    2e00:	5a a5       	ldd	r21, Y+42	; 0x2a
    2e02:	23 30       	cpi	r18, 0x03	; 3
    2e04:	31 05       	cpc	r19, r1
    2e06:	41 05       	cpc	r20, r1
    2e08:	51 05       	cpc	r21, r1
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <STEPPER_u8RotateWithFixedSpeed+0x39a>
    2e0c:	a3 c0       	rjmp	.+326    	; 0x2f54 <STEPPER_u8RotateWithFixedSpeed+0x4e0>
				{
				case 3:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_LOW);
    2e0e:	ea a1       	ldd	r30, Y+34	; 0x22
    2e10:	fb a1       	ldd	r31, Y+35	; 0x23
    2e12:	80 81       	ld	r24, Z
    2e14:	ea a1       	ldd	r30, Y+34	; 0x22
    2e16:	fb a1       	ldd	r31, Y+35	; 0x23
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	69 2f       	mov	r22, r25
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    2e22:	ea a1       	ldd	r30, Y+34	; 0x22
    2e24:	fb a1       	ldd	r31, Y+35	; 0x23
    2e26:	80 81       	ld	r24, Z
    2e28:	ea a1       	ldd	r30, Y+34	; 0x22
    2e2a:	fb a1       	ldd	r31, Y+35	; 0x23
    2e2c:	92 81       	ldd	r25, Z+2	; 0x02
    2e2e:	69 2f       	mov	r22, r25
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    2e36:	ea a1       	ldd	r30, Y+34	; 0x22
    2e38:	fb a1       	ldd	r31, Y+35	; 0x23
    2e3a:	80 81       	ld	r24, Z
    2e3c:	ea a1       	ldd	r30, Y+34	; 0x22
    2e3e:	fb a1       	ldd	r31, Y+35	; 0x23
    2e40:	93 81       	ldd	r25, Z+3	; 0x03
    2e42:	69 2f       	mov	r22, r25
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    2e4a:	ea a1       	ldd	r30, Y+34	; 0x22
    2e4c:	fb a1       	ldd	r31, Y+35	; 0x23
    2e4e:	80 81       	ld	r24, Z
    2e50:	ea a1       	ldd	r30, Y+34	; 0x22
    2e52:	fb a1       	ldd	r31, Y+35	; 0x23
    2e54:	94 81       	ldd	r25, Z+4	; 0x04
    2e56:	69 2f       	mov	r22, r25
    2e58:	41 e0       	ldi	r20, 0x01	; 1
    2e5a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2e5e:	7a c0       	rjmp	.+244    	; 0x2f54 <STEPPER_u8RotateWithFixedSpeed+0x4e0>
					break;

				case 2:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    2e60:	ea a1       	ldd	r30, Y+34	; 0x22
    2e62:	fb a1       	ldd	r31, Y+35	; 0x23
    2e64:	80 81       	ld	r24, Z
    2e66:	ea a1       	ldd	r30, Y+34	; 0x22
    2e68:	fb a1       	ldd	r31, Y+35	; 0x23
    2e6a:	91 81       	ldd	r25, Z+1	; 0x01
    2e6c:	69 2f       	mov	r22, r25
    2e6e:	41 e0       	ldi	r20, 0x01	; 1
    2e70:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_LOW);
    2e74:	ea a1       	ldd	r30, Y+34	; 0x22
    2e76:	fb a1       	ldd	r31, Y+35	; 0x23
    2e78:	80 81       	ld	r24, Z
    2e7a:	ea a1       	ldd	r30, Y+34	; 0x22
    2e7c:	fb a1       	ldd	r31, Y+35	; 0x23
    2e7e:	92 81       	ldd	r25, Z+2	; 0x02
    2e80:	69 2f       	mov	r22, r25
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    2e88:	ea a1       	ldd	r30, Y+34	; 0x22
    2e8a:	fb a1       	ldd	r31, Y+35	; 0x23
    2e8c:	80 81       	ld	r24, Z
    2e8e:	ea a1       	ldd	r30, Y+34	; 0x22
    2e90:	fb a1       	ldd	r31, Y+35	; 0x23
    2e92:	93 81       	ldd	r25, Z+3	; 0x03
    2e94:	69 2f       	mov	r22, r25
    2e96:	41 e0       	ldi	r20, 0x01	; 1
    2e98:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    2e9c:	ea a1       	ldd	r30, Y+34	; 0x22
    2e9e:	fb a1       	ldd	r31, Y+35	; 0x23
    2ea0:	80 81       	ld	r24, Z
    2ea2:	ea a1       	ldd	r30, Y+34	; 0x22
    2ea4:	fb a1       	ldd	r31, Y+35	; 0x23
    2ea6:	94 81       	ldd	r25, Z+4	; 0x04
    2ea8:	69 2f       	mov	r22, r25
    2eaa:	41 e0       	ldi	r20, 0x01	; 1
    2eac:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2eb0:	51 c0       	rjmp	.+162    	; 0x2f54 <STEPPER_u8RotateWithFixedSpeed+0x4e0>
					break;

				case 1:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    2eb2:	ea a1       	ldd	r30, Y+34	; 0x22
    2eb4:	fb a1       	ldd	r31, Y+35	; 0x23
    2eb6:	80 81       	ld	r24, Z
    2eb8:	ea a1       	ldd	r30, Y+34	; 0x22
    2eba:	fb a1       	ldd	r31, Y+35	; 0x23
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	69 2f       	mov	r22, r25
    2ec0:	41 e0       	ldi	r20, 0x01	; 1
    2ec2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    2ec6:	ea a1       	ldd	r30, Y+34	; 0x22
    2ec8:	fb a1       	ldd	r31, Y+35	; 0x23
    2eca:	80 81       	ld	r24, Z
    2ecc:	ea a1       	ldd	r30, Y+34	; 0x22
    2ece:	fb a1       	ldd	r31, Y+35	; 0x23
    2ed0:	92 81       	ldd	r25, Z+2	; 0x02
    2ed2:	69 2f       	mov	r22, r25
    2ed4:	41 e0       	ldi	r20, 0x01	; 1
    2ed6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_LOW);
    2eda:	ea a1       	ldd	r30, Y+34	; 0x22
    2edc:	fb a1       	ldd	r31, Y+35	; 0x23
    2ede:	80 81       	ld	r24, Z
    2ee0:	ea a1       	ldd	r30, Y+34	; 0x22
    2ee2:	fb a1       	ldd	r31, Y+35	; 0x23
    2ee4:	93 81       	ldd	r25, Z+3	; 0x03
    2ee6:	69 2f       	mov	r22, r25
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    2eee:	ea a1       	ldd	r30, Y+34	; 0x22
    2ef0:	fb a1       	ldd	r31, Y+35	; 0x23
    2ef2:	80 81       	ld	r24, Z
    2ef4:	ea a1       	ldd	r30, Y+34	; 0x22
    2ef6:	fb a1       	ldd	r31, Y+35	; 0x23
    2ef8:	94 81       	ldd	r25, Z+4	; 0x04
    2efa:	69 2f       	mov	r22, r25
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2f02:	28 c0       	rjmp	.+80     	; 0x2f54 <STEPPER_u8RotateWithFixedSpeed+0x4e0>
					break;

				case 0:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    2f04:	ea a1       	ldd	r30, Y+34	; 0x22
    2f06:	fb a1       	ldd	r31, Y+35	; 0x23
    2f08:	80 81       	ld	r24, Z
    2f0a:	ea a1       	ldd	r30, Y+34	; 0x22
    2f0c:	fb a1       	ldd	r31, Y+35	; 0x23
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	69 2f       	mov	r22, r25
    2f12:	41 e0       	ldi	r20, 0x01	; 1
    2f14:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    2f18:	ea a1       	ldd	r30, Y+34	; 0x22
    2f1a:	fb a1       	ldd	r31, Y+35	; 0x23
    2f1c:	80 81       	ld	r24, Z
    2f1e:	ea a1       	ldd	r30, Y+34	; 0x22
    2f20:	fb a1       	ldd	r31, Y+35	; 0x23
    2f22:	92 81       	ldd	r25, Z+2	; 0x02
    2f24:	69 2f       	mov	r22, r25
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    2f2c:	ea a1       	ldd	r30, Y+34	; 0x22
    2f2e:	fb a1       	ldd	r31, Y+35	; 0x23
    2f30:	80 81       	ld	r24, Z
    2f32:	ea a1       	ldd	r30, Y+34	; 0x22
    2f34:	fb a1       	ldd	r31, Y+35	; 0x23
    2f36:	93 81       	ldd	r25, Z+3	; 0x03
    2f38:	69 2f       	mov	r22, r25
    2f3a:	41 e0       	ldi	r20, 0x01	; 1
    2f3c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_LOW);
    2f40:	ea a1       	ldd	r30, Y+34	; 0x22
    2f42:	fb a1       	ldd	r31, Y+35	; 0x23
    2f44:	80 81       	ld	r24, Z
    2f46:	ea a1       	ldd	r30, Y+34	; 0x22
    2f48:	fb a1       	ldd	r31, Y+35	; 0x23
    2f4a:	94 81       	ldd	r25, Z+4	; 0x04
    2f4c:	69 2f       	mov	r22, r25
    2f4e:	40 e0       	ldi	r20, 0x00	; 0
    2f50:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 ec       	ldi	r26, 0xC0	; 192
    2f5a:	b0 e4       	ldi	r27, 0x40	; 64
    2f5c:	8b 87       	std	Y+11, r24	; 0x0b
    2f5e:	9c 87       	std	Y+12, r25	; 0x0c
    2f60:	ad 87       	std	Y+13, r26	; 0x0d
    2f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	4a ef       	ldi	r20, 0xFA	; 250
    2f72:	54 e4       	ldi	r21, 0x44	; 68
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	8f 83       	std	Y+7, r24	; 0x07
    2f7e:	98 87       	std	Y+8, r25	; 0x08
    2f80:	a9 87       	std	Y+9, r26	; 0x09
    2f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f84:	6f 81       	ldd	r22, Y+7	; 0x07
    2f86:	78 85       	ldd	r23, Y+8	; 0x08
    2f88:	89 85       	ldd	r24, Y+9	; 0x09
    2f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e8       	ldi	r20, 0x80	; 128
    2f92:	5f e3       	ldi	r21, 0x3F	; 63
    2f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f98:	88 23       	and	r24, r24
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <STEPPER_u8RotateWithFixedSpeed+0x532>
		__ticks = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	3f c0       	rjmp	.+126    	; 0x3024 <STEPPER_u8RotateWithFixedSpeed+0x5b0>
	else if (__tmp > 65535)
    2fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa8:	78 85       	ldd	r23, Y+8	; 0x08
    2faa:	89 85       	ldd	r24, Y+9	; 0x09
    2fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <STEPPER_u8RotateWithFixedSpeed+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	51 e4       	ldi	r21, 0x41	; 65
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
    2fe6:	0f c0       	rjmp	.+30     	; 0x3006 <STEPPER_u8RotateWithFixedSpeed+0x592>
    2fe8:	88 ec       	ldi	r24, 0xC8	; 200
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <STEPPER_u8RotateWithFixedSpeed+0x580>
    2ff8:	9c 83       	std	Y+4, r25	; 0x04
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	9e 83       	std	Y+6, r25	; 0x06
    3004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	8d 81       	ldd	r24, Y+5	; 0x05
    3008:	9e 81       	ldd	r25, Y+6	; 0x06
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	69 f7       	brne	.-38     	; 0x2fe8 <STEPPER_u8RotateWithFixedSpeed+0x574>
    300e:	14 c0       	rjmp	.+40     	; 0x3038 <STEPPER_u8RotateWithFixedSpeed+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3010:	6f 81       	ldd	r22, Y+7	; 0x07
    3012:	78 85       	ldd	r23, Y+8	; 0x08
    3014:	89 85       	ldd	r24, Y+9	; 0x09
    3016:	9a 85       	ldd	r25, Y+10	; 0x0a
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	8d 83       	std	Y+5, r24	; 0x05
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	9e 81       	ldd	r25, Y+6	; 0x06
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <STEPPER_u8RotateWithFixedSpeed+0x5bc>
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(STEPPER_u8SPEED_MEDIUM);
			}
		}
		else if(Copy_u8Direction == STEPPER_u8ROTATE_CW)
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u16FullSteps; Local_u16Counter++)
    3038:	8d 8d       	ldd	r24, Y+29	; 0x1d
    303a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    303c:	01 96       	adiw	r24, 0x01	; 1
    303e:	9e 8f       	std	Y+30, r25	; 0x1e
    3040:	8d 8f       	std	Y+29, r24	; 0x1d
    3042:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3044:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3046:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3048:	98 a1       	ldd	r25, Y+32	; 0x20
    304a:	28 17       	cp	r18, r24
    304c:	39 07       	cpc	r19, r25
    304e:	08 f4       	brcc	.+2      	; 0x3052 <STEPPER_u8RotateWithFixedSpeed+0x5de>
    3050:	a8 ce       	rjmp	.-688    	; 0x2da2 <STEPPER_u8RotateWithFixedSpeed+0x32e>
    3052:	05 c0       	rjmp	.+10     	; 0x305e <STEPPER_u8RotateWithFixedSpeed+0x5ea>
				_delay_ms(STEPPER_u8SPEED_MEDIUM);
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	89 a3       	std	Y+33, r24	; 0x21
    3058:	02 c0       	rjmp	.+4      	; 0x305e <STEPPER_u8RotateWithFixedSpeed+0x5ea>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    305a:	82 e0       	ldi	r24, 0x02	; 2
    305c:	89 a3       	std	Y+33, r24	; 0x21
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    305e:	89 a1       	ldd	r24, Y+33	; 0x21
}
    3060:	ae 96       	adiw	r28, 0x2e	; 46
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	08 95       	ret

00003072 <STEPPER_u8RotateWithAngle>:

uint8 STEPPER_u8RotateWithAngle(const STEPPER_t *Copy_psteppertMotorInfo, uint16 Copy_u16Angle, uint8 Copy_u8Direction, uint8 Copy_u8Speed)
{
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	af 97       	sbiw	r28, 0x2f	; 47
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	9b a3       	std	Y+35, r25	; 0x23
    3088:	8a a3       	std	Y+34, r24	; 0x22
    308a:	7d a3       	std	Y+37, r23	; 0x25
    308c:	6c a3       	std	Y+36, r22	; 0x24
    308e:	4e a3       	std	Y+38, r20	; 0x26
    3090:	2f a3       	std	Y+39, r18	; 0x27
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3092:	19 a2       	std	Y+33, r1	; 0x21
	uint16 Local_u16FullSteps;
	uint16 Local_u16Counter;

	/*Validate the pointer address*/
	if(Copy_psteppertMotorInfo != NULL)
    3094:	8a a1       	ldd	r24, Y+34	; 0x22
    3096:	9b a1       	ldd	r25, Y+35	; 0x23
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	09 f4       	brne	.+2      	; 0x309e <STEPPER_u8RotateWithAngle+0x2c>
    309c:	ec c2       	rjmp	.+1496   	; 0x3676 <STEPPER_u8RotateWithAngle+0x604>
	{
		/*Calculating the full steps to take*/
		Local_u16FullSteps = (uint16) ((((uint32) Copy_u16Angle) * 2048UL) / 360UL);
    309e:	8c a1       	ldd	r24, Y+36	; 0x24
    30a0:	9d a1       	ldd	r25, Y+37	; 0x25
    30a2:	cc 01       	movw	r24, r24
    30a4:	a0 e0       	ldi	r26, 0x00	; 0
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	07 2e       	mov	r0, r23
    30aa:	7b e0       	ldi	r23, 0x0B	; 11
    30ac:	88 0f       	add	r24, r24
    30ae:	99 1f       	adc	r25, r25
    30b0:	aa 1f       	adc	r26, r26
    30b2:	bb 1f       	adc	r27, r27
    30b4:	7a 95       	dec	r23
    30b6:	d1 f7       	brne	.-12     	; 0x30ac <STEPPER_u8RotateWithAngle+0x3a>
    30b8:	70 2d       	mov	r23, r0
    30ba:	28 e6       	ldi	r18, 0x68	; 104
    30bc:	31 e0       	ldi	r19, 0x01	; 1
    30be:	40 e0       	ldi	r20, 0x00	; 0
    30c0:	50 e0       	ldi	r21, 0x00	; 0
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 3f 35 	call	0x6a7e	; 0x6a7e <__udivmodsi4>
    30ca:	da 01       	movw	r26, r20
    30cc:	c9 01       	movw	r24, r18
    30ce:	98 a3       	std	Y+32, r25	; 0x20
    30d0:	8f 8f       	std	Y+31, r24	; 0x1f

		/*Taking the steps inside for loop, every loop move for 1 step*/
		if(Copy_u8Direction == STEPPER_u8ROTATE_CCW)
    30d2:	8e a1       	ldd	r24, Y+38	; 0x26
    30d4:	82 30       	cpi	r24, 0x02	; 2
    30d6:	09 f0       	breq	.+2      	; 0x30da <STEPPER_u8RotateWithAngle+0x68>
    30d8:	64 c1       	rjmp	.+712    	; 0x33a2 <STEPPER_u8RotateWithAngle+0x330>
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u16FullSteps; Local_u16Counter++)
    30da:	1e 8e       	std	Y+30, r1	; 0x1e
    30dc:	1d 8e       	std	Y+29, r1	; 0x1d
    30de:	58 c1       	rjmp	.+688    	; 0x3390 <STEPPER_u8RotateWithAngle+0x31e>
			{
				switch(Local_u16Counter % 4UL)
    30e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30e4:	cc 01       	movw	r24, r24
    30e6:	a0 e0       	ldi	r26, 0x00	; 0
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	9c 01       	movw	r18, r24
    30ec:	ad 01       	movw	r20, r26
    30ee:	23 70       	andi	r18, 0x03	; 3
    30f0:	30 70       	andi	r19, 0x00	; 0
    30f2:	40 70       	andi	r20, 0x00	; 0
    30f4:	50 70       	andi	r21, 0x00	; 0
    30f6:	2c a7       	std	Y+44, r18	; 0x2c
    30f8:	3d a7       	std	Y+45, r19	; 0x2d
    30fa:	4e a7       	std	Y+46, r20	; 0x2e
    30fc:	5f a7       	std	Y+47, r21	; 0x2f
    30fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    3100:	9d a5       	ldd	r25, Y+45	; 0x2d
    3102:	ae a5       	ldd	r26, Y+46	; 0x2e
    3104:	bf a5       	ldd	r27, Y+47	; 0x2f
    3106:	81 30       	cpi	r24, 0x01	; 1
    3108:	91 05       	cpc	r25, r1
    310a:	a1 05       	cpc	r26, r1
    310c:	b1 05       	cpc	r27, r1
    310e:	09 f4       	brne	.+2      	; 0x3112 <STEPPER_u8RotateWithAngle+0xa0>
    3110:	47 c0       	rjmp	.+142    	; 0x31a0 <STEPPER_u8RotateWithAngle+0x12e>
    3112:	2c a5       	ldd	r18, Y+44	; 0x2c
    3114:	3d a5       	ldd	r19, Y+45	; 0x2d
    3116:	4e a5       	ldd	r20, Y+46	; 0x2e
    3118:	5f a5       	ldd	r21, Y+47	; 0x2f
    311a:	21 30       	cpi	r18, 0x01	; 1
    311c:	31 05       	cpc	r19, r1
    311e:	41 05       	cpc	r20, r1
    3120:	51 05       	cpc	r21, r1
    3122:	a8 f0       	brcs	.+42     	; 0x314e <STEPPER_u8RotateWithAngle+0xdc>
    3124:	8c a5       	ldd	r24, Y+44	; 0x2c
    3126:	9d a5       	ldd	r25, Y+45	; 0x2d
    3128:	ae a5       	ldd	r26, Y+46	; 0x2e
    312a:	bf a5       	ldd	r27, Y+47	; 0x2f
    312c:	82 30       	cpi	r24, 0x02	; 2
    312e:	91 05       	cpc	r25, r1
    3130:	a1 05       	cpc	r26, r1
    3132:	b1 05       	cpc	r27, r1
    3134:	09 f4       	brne	.+2      	; 0x3138 <STEPPER_u8RotateWithAngle+0xc6>
    3136:	5d c0       	rjmp	.+186    	; 0x31f2 <STEPPER_u8RotateWithAngle+0x180>
    3138:	2c a5       	ldd	r18, Y+44	; 0x2c
    313a:	3d a5       	ldd	r19, Y+45	; 0x2d
    313c:	4e a5       	ldd	r20, Y+46	; 0x2e
    313e:	5f a5       	ldd	r21, Y+47	; 0x2f
    3140:	23 30       	cpi	r18, 0x03	; 3
    3142:	31 05       	cpc	r19, r1
    3144:	41 05       	cpc	r20, r1
    3146:	51 05       	cpc	r21, r1
    3148:	09 f4       	brne	.+2      	; 0x314c <STEPPER_u8RotateWithAngle+0xda>
    314a:	7c c0       	rjmp	.+248    	; 0x3244 <STEPPER_u8RotateWithAngle+0x1d2>
    314c:	a3 c0       	rjmp	.+326    	; 0x3294 <STEPPER_u8RotateWithAngle+0x222>
				{
				case 0:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_LOW);
    314e:	ea a1       	ldd	r30, Y+34	; 0x22
    3150:	fb a1       	ldd	r31, Y+35	; 0x23
    3152:	80 81       	ld	r24, Z
    3154:	ea a1       	ldd	r30, Y+34	; 0x22
    3156:	fb a1       	ldd	r31, Y+35	; 0x23
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	69 2f       	mov	r22, r25
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3162:	ea a1       	ldd	r30, Y+34	; 0x22
    3164:	fb a1       	ldd	r31, Y+35	; 0x23
    3166:	80 81       	ld	r24, Z
    3168:	ea a1       	ldd	r30, Y+34	; 0x22
    316a:	fb a1       	ldd	r31, Y+35	; 0x23
    316c:	92 81       	ldd	r25, Z+2	; 0x02
    316e:	69 2f       	mov	r22, r25
    3170:	41 e0       	ldi	r20, 0x01	; 1
    3172:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    3176:	ea a1       	ldd	r30, Y+34	; 0x22
    3178:	fb a1       	ldd	r31, Y+35	; 0x23
    317a:	80 81       	ld	r24, Z
    317c:	ea a1       	ldd	r30, Y+34	; 0x22
    317e:	fb a1       	ldd	r31, Y+35	; 0x23
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	69 2f       	mov	r22, r25
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    318a:	ea a1       	ldd	r30, Y+34	; 0x22
    318c:	fb a1       	ldd	r31, Y+35	; 0x23
    318e:	80 81       	ld	r24, Z
    3190:	ea a1       	ldd	r30, Y+34	; 0x22
    3192:	fb a1       	ldd	r31, Y+35	; 0x23
    3194:	94 81       	ldd	r25, Z+4	; 0x04
    3196:	69 2f       	mov	r22, r25
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    319e:	7a c0       	rjmp	.+244    	; 0x3294 <STEPPER_u8RotateWithAngle+0x222>
					break;

				case 1:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    31a0:	ea a1       	ldd	r30, Y+34	; 0x22
    31a2:	fb a1       	ldd	r31, Y+35	; 0x23
    31a4:	80 81       	ld	r24, Z
    31a6:	ea a1       	ldd	r30, Y+34	; 0x22
    31a8:	fb a1       	ldd	r31, Y+35	; 0x23
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	69 2f       	mov	r22, r25
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_LOW);
    31b4:	ea a1       	ldd	r30, Y+34	; 0x22
    31b6:	fb a1       	ldd	r31, Y+35	; 0x23
    31b8:	80 81       	ld	r24, Z
    31ba:	ea a1       	ldd	r30, Y+34	; 0x22
    31bc:	fb a1       	ldd	r31, Y+35	; 0x23
    31be:	92 81       	ldd	r25, Z+2	; 0x02
    31c0:	69 2f       	mov	r22, r25
    31c2:	40 e0       	ldi	r20, 0x00	; 0
    31c4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    31c8:	ea a1       	ldd	r30, Y+34	; 0x22
    31ca:	fb a1       	ldd	r31, Y+35	; 0x23
    31cc:	80 81       	ld	r24, Z
    31ce:	ea a1       	ldd	r30, Y+34	; 0x22
    31d0:	fb a1       	ldd	r31, Y+35	; 0x23
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	69 2f       	mov	r22, r25
    31d6:	41 e0       	ldi	r20, 0x01	; 1
    31d8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    31dc:	ea a1       	ldd	r30, Y+34	; 0x22
    31de:	fb a1       	ldd	r31, Y+35	; 0x23
    31e0:	80 81       	ld	r24, Z
    31e2:	ea a1       	ldd	r30, Y+34	; 0x22
    31e4:	fb a1       	ldd	r31, Y+35	; 0x23
    31e6:	94 81       	ldd	r25, Z+4	; 0x04
    31e8:	69 2f       	mov	r22, r25
    31ea:	41 e0       	ldi	r20, 0x01	; 1
    31ec:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    31f0:	51 c0       	rjmp	.+162    	; 0x3294 <STEPPER_u8RotateWithAngle+0x222>
					break;

				case 2:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    31f2:	ea a1       	ldd	r30, Y+34	; 0x22
    31f4:	fb a1       	ldd	r31, Y+35	; 0x23
    31f6:	80 81       	ld	r24, Z
    31f8:	ea a1       	ldd	r30, Y+34	; 0x22
    31fa:	fb a1       	ldd	r31, Y+35	; 0x23
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	69 2f       	mov	r22, r25
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3206:	ea a1       	ldd	r30, Y+34	; 0x22
    3208:	fb a1       	ldd	r31, Y+35	; 0x23
    320a:	80 81       	ld	r24, Z
    320c:	ea a1       	ldd	r30, Y+34	; 0x22
    320e:	fb a1       	ldd	r31, Y+35	; 0x23
    3210:	92 81       	ldd	r25, Z+2	; 0x02
    3212:	69 2f       	mov	r22, r25
    3214:	41 e0       	ldi	r20, 0x01	; 1
    3216:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_LOW);
    321a:	ea a1       	ldd	r30, Y+34	; 0x22
    321c:	fb a1       	ldd	r31, Y+35	; 0x23
    321e:	80 81       	ld	r24, Z
    3220:	ea a1       	ldd	r30, Y+34	; 0x22
    3222:	fb a1       	ldd	r31, Y+35	; 0x23
    3224:	93 81       	ldd	r25, Z+3	; 0x03
    3226:	69 2f       	mov	r22, r25
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    322e:	ea a1       	ldd	r30, Y+34	; 0x22
    3230:	fb a1       	ldd	r31, Y+35	; 0x23
    3232:	80 81       	ld	r24, Z
    3234:	ea a1       	ldd	r30, Y+34	; 0x22
    3236:	fb a1       	ldd	r31, Y+35	; 0x23
    3238:	94 81       	ldd	r25, Z+4	; 0x04
    323a:	69 2f       	mov	r22, r25
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    3242:	28 c0       	rjmp	.+80     	; 0x3294 <STEPPER_u8RotateWithAngle+0x222>
					break;

				case 3:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    3244:	ea a1       	ldd	r30, Y+34	; 0x22
    3246:	fb a1       	ldd	r31, Y+35	; 0x23
    3248:	80 81       	ld	r24, Z
    324a:	ea a1       	ldd	r30, Y+34	; 0x22
    324c:	fb a1       	ldd	r31, Y+35	; 0x23
    324e:	91 81       	ldd	r25, Z+1	; 0x01
    3250:	69 2f       	mov	r22, r25
    3252:	41 e0       	ldi	r20, 0x01	; 1
    3254:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3258:	ea a1       	ldd	r30, Y+34	; 0x22
    325a:	fb a1       	ldd	r31, Y+35	; 0x23
    325c:	80 81       	ld	r24, Z
    325e:	ea a1       	ldd	r30, Y+34	; 0x22
    3260:	fb a1       	ldd	r31, Y+35	; 0x23
    3262:	92 81       	ldd	r25, Z+2	; 0x02
    3264:	69 2f       	mov	r22, r25
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    326c:	ea a1       	ldd	r30, Y+34	; 0x22
    326e:	fb a1       	ldd	r31, Y+35	; 0x23
    3270:	80 81       	ld	r24, Z
    3272:	ea a1       	ldd	r30, Y+34	; 0x22
    3274:	fb a1       	ldd	r31, Y+35	; 0x23
    3276:	93 81       	ldd	r25, Z+3	; 0x03
    3278:	69 2f       	mov	r22, r25
    327a:	41 e0       	ldi	r20, 0x01	; 1
    327c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_LOW);
    3280:	ea a1       	ldd	r30, Y+34	; 0x22
    3282:	fb a1       	ldd	r31, Y+35	; 0x23
    3284:	80 81       	ld	r24, Z
    3286:	ea a1       	ldd	r30, Y+34	; 0x22
    3288:	fb a1       	ldd	r31, Y+35	; 0x23
    328a:	94 81       	ldd	r25, Z+4	; 0x04
    328c:	69 2f       	mov	r22, r25
    328e:	40 e0       	ldi	r20, 0x00	; 0
    3290:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					break;
				}
				_delay_ms(Copy_u8Speed);
    3294:	8f a1       	ldd	r24, Y+39	; 0x27
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	a0 e0       	ldi	r26, 0x00	; 0
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	bc 01       	movw	r22, r24
    32a0:	cd 01       	movw	r24, r26
    32a2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	89 8f       	std	Y+25, r24	; 0x19
    32ac:	9a 8f       	std	Y+26, r25	; 0x1a
    32ae:	ab 8f       	std	Y+27, r26	; 0x1b
    32b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b2:	69 8d       	ldd	r22, Y+25	; 0x19
    32b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	4a ef       	ldi	r20, 0xFA	; 250
    32c0:	54 e4       	ldi	r21, 0x44	; 68
    32c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	8d 8b       	std	Y+21, r24	; 0x15
    32cc:	9e 8b       	std	Y+22, r25	; 0x16
    32ce:	af 8b       	std	Y+23, r26	; 0x17
    32d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32d2:	6d 89       	ldd	r22, Y+21	; 0x15
    32d4:	7e 89       	ldd	r23, Y+22	; 0x16
    32d6:	8f 89       	ldd	r24, Y+23	; 0x17
    32d8:	98 8d       	ldd	r25, Y+24	; 0x18
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	40 e8       	ldi	r20, 0x80	; 128
    32e0:	5f e3       	ldi	r21, 0x3F	; 63
    32e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e6:	88 23       	and	r24, r24
    32e8:	2c f4       	brge	.+10     	; 0x32f4 <STEPPER_u8RotateWithAngle+0x282>
		__ticks = 1;
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	9c 8b       	std	Y+20, r25	; 0x14
    32f0:	8b 8b       	std	Y+19, r24	; 0x13
    32f2:	3f c0       	rjmp	.+126    	; 0x3372 <STEPPER_u8RotateWithAngle+0x300>
	else if (__tmp > 65535)
    32f4:	6d 89       	ldd	r22, Y+21	; 0x15
    32f6:	7e 89       	ldd	r23, Y+22	; 0x16
    32f8:	8f 89       	ldd	r24, Y+23	; 0x17
    32fa:	98 8d       	ldd	r25, Y+24	; 0x18
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	3f ef       	ldi	r19, 0xFF	; 255
    3300:	4f e7       	ldi	r20, 0x7F	; 127
    3302:	57 e4       	ldi	r21, 0x47	; 71
    3304:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3308:	18 16       	cp	r1, r24
    330a:	4c f5       	brge	.+82     	; 0x335e <STEPPER_u8RotateWithAngle+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330c:	69 8d       	ldd	r22, Y+25	; 0x19
    330e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	40 e2       	ldi	r20, 0x20	; 32
    331a:	51 e4       	ldi	r21, 0x41	; 65
    331c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	bc 01       	movw	r22, r24
    3326:	cd 01       	movw	r24, r26
    3328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	9c 8b       	std	Y+20, r25	; 0x14
    3332:	8b 8b       	std	Y+19, r24	; 0x13
    3334:	0f c0       	rjmp	.+30     	; 0x3354 <STEPPER_u8RotateWithAngle+0x2e2>
    3336:	88 ec       	ldi	r24, 0xC8	; 200
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	9a 8b       	std	Y+18, r25	; 0x12
    333c:	89 8b       	std	Y+17, r24	; 0x11
    333e:	89 89       	ldd	r24, Y+17	; 0x11
    3340:	9a 89       	ldd	r25, Y+18	; 0x12
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	f1 f7       	brne	.-4      	; 0x3342 <STEPPER_u8RotateWithAngle+0x2d0>
    3346:	9a 8b       	std	Y+18, r25	; 0x12
    3348:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334a:	8b 89       	ldd	r24, Y+19	; 0x13
    334c:	9c 89       	ldd	r25, Y+20	; 0x14
    334e:	01 97       	sbiw	r24, 0x01	; 1
    3350:	9c 8b       	std	Y+20, r25	; 0x14
    3352:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3354:	8b 89       	ldd	r24, Y+19	; 0x13
    3356:	9c 89       	ldd	r25, Y+20	; 0x14
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	69 f7       	brne	.-38     	; 0x3336 <STEPPER_u8RotateWithAngle+0x2c4>
    335c:	14 c0       	rjmp	.+40     	; 0x3386 <STEPPER_u8RotateWithAngle+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335e:	6d 89       	ldd	r22, Y+21	; 0x15
    3360:	7e 89       	ldd	r23, Y+22	; 0x16
    3362:	8f 89       	ldd	r24, Y+23	; 0x17
    3364:	98 8d       	ldd	r25, Y+24	; 0x18
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	9c 8b       	std	Y+20, r25	; 0x14
    3370:	8b 8b       	std	Y+19, r24	; 0x13
    3372:	8b 89       	ldd	r24, Y+19	; 0x13
    3374:	9c 89       	ldd	r25, Y+20	; 0x14
    3376:	98 8b       	std	Y+16, r25	; 0x10
    3378:	8f 87       	std	Y+15, r24	; 0x0f
    337a:	8f 85       	ldd	r24, Y+15	; 0x0f
    337c:	98 89       	ldd	r25, Y+16	; 0x10
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	f1 f7       	brne	.-4      	; 0x337e <STEPPER_u8RotateWithAngle+0x30c>
    3382:	98 8b       	std	Y+16, r25	; 0x10
    3384:	8f 87       	std	Y+15, r24	; 0x0f
		Local_u16FullSteps = (uint16) ((((uint32) Copy_u16Angle) * 2048UL) / 360UL);

		/*Taking the steps inside for loop, every loop move for 1 step*/
		if(Copy_u8Direction == STEPPER_u8ROTATE_CCW)
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u16FullSteps; Local_u16Counter++)
    3386:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3388:	9e 8d       	ldd	r25, Y+30	; 0x1e
    338a:	01 96       	adiw	r24, 0x01	; 1
    338c:	9e 8f       	std	Y+30, r25	; 0x1e
    338e:	8d 8f       	std	Y+29, r24	; 0x1d
    3390:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3392:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3394:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3396:	98 a1       	ldd	r25, Y+32	; 0x20
    3398:	28 17       	cp	r18, r24
    339a:	39 07       	cpc	r19, r25
    339c:	08 f4       	brcc	.+2      	; 0x33a0 <STEPPER_u8RotateWithAngle+0x32e>
    339e:	a0 ce       	rjmp	.-704    	; 0x30e0 <STEPPER_u8RotateWithAngle+0x6e>
    33a0:	6c c1       	rjmp	.+728    	; 0x367a <STEPPER_u8RotateWithAngle+0x608>
					break;
				}
				_delay_ms(Copy_u8Speed);
			}
		}
		else if(Copy_u8Direction == STEPPER_u8ROTATE_CW)
    33a2:	8e a1       	ldd	r24, Y+38	; 0x26
    33a4:	81 30       	cpi	r24, 0x01	; 1
    33a6:	09 f0       	breq	.+2      	; 0x33aa <STEPPER_u8RotateWithAngle+0x338>
    33a8:	63 c1       	rjmp	.+710    	; 0x3670 <STEPPER_u8RotateWithAngle+0x5fe>
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u16FullSteps; Local_u16Counter++)
    33aa:	1e 8e       	std	Y+30, r1	; 0x1e
    33ac:	1d 8e       	std	Y+29, r1	; 0x1d
    33ae:	57 c1       	rjmp	.+686    	; 0x365e <STEPPER_u8RotateWithAngle+0x5ec>
			{
				switch(Local_u16Counter % 4UL)
    33b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33b4:	cc 01       	movw	r24, r24
    33b6:	a0 e0       	ldi	r26, 0x00	; 0
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	9c 01       	movw	r18, r24
    33bc:	ad 01       	movw	r20, r26
    33be:	23 70       	andi	r18, 0x03	; 3
    33c0:	30 70       	andi	r19, 0x00	; 0
    33c2:	40 70       	andi	r20, 0x00	; 0
    33c4:	50 70       	andi	r21, 0x00	; 0
    33c6:	28 a7       	std	Y+40, r18	; 0x28
    33c8:	39 a7       	std	Y+41, r19	; 0x29
    33ca:	4a a7       	std	Y+42, r20	; 0x2a
    33cc:	5b a7       	std	Y+43, r21	; 0x2b
    33ce:	88 a5       	ldd	r24, Y+40	; 0x28
    33d0:	99 a5       	ldd	r25, Y+41	; 0x29
    33d2:	aa a5       	ldd	r26, Y+42	; 0x2a
    33d4:	bb a5       	ldd	r27, Y+43	; 0x2b
    33d6:	81 30       	cpi	r24, 0x01	; 1
    33d8:	91 05       	cpc	r25, r1
    33da:	a1 05       	cpc	r26, r1
    33dc:	b1 05       	cpc	r27, r1
    33de:	09 f4       	brne	.+2      	; 0x33e2 <STEPPER_u8RotateWithAngle+0x370>
    33e0:	6f c0       	rjmp	.+222    	; 0x34c0 <STEPPER_u8RotateWithAngle+0x44e>
    33e2:	28 a5       	ldd	r18, Y+40	; 0x28
    33e4:	39 a5       	ldd	r19, Y+41	; 0x29
    33e6:	4a a5       	ldd	r20, Y+42	; 0x2a
    33e8:	5b a5       	ldd	r21, Y+43	; 0x2b
    33ea:	21 30       	cpi	r18, 0x01	; 1
    33ec:	31 05       	cpc	r19, r1
    33ee:	41 05       	cpc	r20, r1
    33f0:	51 05       	cpc	r21, r1
    33f2:	08 f4       	brcc	.+2      	; 0x33f6 <STEPPER_u8RotateWithAngle+0x384>
    33f4:	8e c0       	rjmp	.+284    	; 0x3512 <STEPPER_u8RotateWithAngle+0x4a0>
    33f6:	88 a5       	ldd	r24, Y+40	; 0x28
    33f8:	99 a5       	ldd	r25, Y+41	; 0x29
    33fa:	aa a5       	ldd	r26, Y+42	; 0x2a
    33fc:	bb a5       	ldd	r27, Y+43	; 0x2b
    33fe:	82 30       	cpi	r24, 0x02	; 2
    3400:	91 05       	cpc	r25, r1
    3402:	a1 05       	cpc	r26, r1
    3404:	b1 05       	cpc	r27, r1
    3406:	99 f1       	breq	.+102    	; 0x346e <STEPPER_u8RotateWithAngle+0x3fc>
    3408:	28 a5       	ldd	r18, Y+40	; 0x28
    340a:	39 a5       	ldd	r19, Y+41	; 0x29
    340c:	4a a5       	ldd	r20, Y+42	; 0x2a
    340e:	5b a5       	ldd	r21, Y+43	; 0x2b
    3410:	23 30       	cpi	r18, 0x03	; 3
    3412:	31 05       	cpc	r19, r1
    3414:	41 05       	cpc	r20, r1
    3416:	51 05       	cpc	r21, r1
    3418:	09 f0       	breq	.+2      	; 0x341c <STEPPER_u8RotateWithAngle+0x3aa>
    341a:	a3 c0       	rjmp	.+326    	; 0x3562 <STEPPER_u8RotateWithAngle+0x4f0>
				{
				case 3:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_LOW);
    341c:	ea a1       	ldd	r30, Y+34	; 0x22
    341e:	fb a1       	ldd	r31, Y+35	; 0x23
    3420:	80 81       	ld	r24, Z
    3422:	ea a1       	ldd	r30, Y+34	; 0x22
    3424:	fb a1       	ldd	r31, Y+35	; 0x23
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	69 2f       	mov	r22, r25
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3430:	ea a1       	ldd	r30, Y+34	; 0x22
    3432:	fb a1       	ldd	r31, Y+35	; 0x23
    3434:	80 81       	ld	r24, Z
    3436:	ea a1       	ldd	r30, Y+34	; 0x22
    3438:	fb a1       	ldd	r31, Y+35	; 0x23
    343a:	92 81       	ldd	r25, Z+2	; 0x02
    343c:	69 2f       	mov	r22, r25
    343e:	41 e0       	ldi	r20, 0x01	; 1
    3440:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    3444:	ea a1       	ldd	r30, Y+34	; 0x22
    3446:	fb a1       	ldd	r31, Y+35	; 0x23
    3448:	80 81       	ld	r24, Z
    344a:	ea a1       	ldd	r30, Y+34	; 0x22
    344c:	fb a1       	ldd	r31, Y+35	; 0x23
    344e:	93 81       	ldd	r25, Z+3	; 0x03
    3450:	69 2f       	mov	r22, r25
    3452:	41 e0       	ldi	r20, 0x01	; 1
    3454:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    3458:	ea a1       	ldd	r30, Y+34	; 0x22
    345a:	fb a1       	ldd	r31, Y+35	; 0x23
    345c:	80 81       	ld	r24, Z
    345e:	ea a1       	ldd	r30, Y+34	; 0x22
    3460:	fb a1       	ldd	r31, Y+35	; 0x23
    3462:	94 81       	ldd	r25, Z+4	; 0x04
    3464:	69 2f       	mov	r22, r25
    3466:	41 e0       	ldi	r20, 0x01	; 1
    3468:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    346c:	7a c0       	rjmp	.+244    	; 0x3562 <STEPPER_u8RotateWithAngle+0x4f0>
					break;

				case 2:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    346e:	ea a1       	ldd	r30, Y+34	; 0x22
    3470:	fb a1       	ldd	r31, Y+35	; 0x23
    3472:	80 81       	ld	r24, Z
    3474:	ea a1       	ldd	r30, Y+34	; 0x22
    3476:	fb a1       	ldd	r31, Y+35	; 0x23
    3478:	91 81       	ldd	r25, Z+1	; 0x01
    347a:	69 2f       	mov	r22, r25
    347c:	41 e0       	ldi	r20, 0x01	; 1
    347e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_LOW);
    3482:	ea a1       	ldd	r30, Y+34	; 0x22
    3484:	fb a1       	ldd	r31, Y+35	; 0x23
    3486:	80 81       	ld	r24, Z
    3488:	ea a1       	ldd	r30, Y+34	; 0x22
    348a:	fb a1       	ldd	r31, Y+35	; 0x23
    348c:	92 81       	ldd	r25, Z+2	; 0x02
    348e:	69 2f       	mov	r22, r25
    3490:	40 e0       	ldi	r20, 0x00	; 0
    3492:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    3496:	ea a1       	ldd	r30, Y+34	; 0x22
    3498:	fb a1       	ldd	r31, Y+35	; 0x23
    349a:	80 81       	ld	r24, Z
    349c:	ea a1       	ldd	r30, Y+34	; 0x22
    349e:	fb a1       	ldd	r31, Y+35	; 0x23
    34a0:	93 81       	ldd	r25, Z+3	; 0x03
    34a2:	69 2f       	mov	r22, r25
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    34aa:	ea a1       	ldd	r30, Y+34	; 0x22
    34ac:	fb a1       	ldd	r31, Y+35	; 0x23
    34ae:	80 81       	ld	r24, Z
    34b0:	ea a1       	ldd	r30, Y+34	; 0x22
    34b2:	fb a1       	ldd	r31, Y+35	; 0x23
    34b4:	94 81       	ldd	r25, Z+4	; 0x04
    34b6:	69 2f       	mov	r22, r25
    34b8:	41 e0       	ldi	r20, 0x01	; 1
    34ba:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    34be:	51 c0       	rjmp	.+162    	; 0x3562 <STEPPER_u8RotateWithAngle+0x4f0>
					break;

				case 1:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    34c0:	ea a1       	ldd	r30, Y+34	; 0x22
    34c2:	fb a1       	ldd	r31, Y+35	; 0x23
    34c4:	80 81       	ld	r24, Z
    34c6:	ea a1       	ldd	r30, Y+34	; 0x22
    34c8:	fb a1       	ldd	r31, Y+35	; 0x23
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	69 2f       	mov	r22, r25
    34ce:	41 e0       	ldi	r20, 0x01	; 1
    34d0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    34d4:	ea a1       	ldd	r30, Y+34	; 0x22
    34d6:	fb a1       	ldd	r31, Y+35	; 0x23
    34d8:	80 81       	ld	r24, Z
    34da:	ea a1       	ldd	r30, Y+34	; 0x22
    34dc:	fb a1       	ldd	r31, Y+35	; 0x23
    34de:	92 81       	ldd	r25, Z+2	; 0x02
    34e0:	69 2f       	mov	r22, r25
    34e2:	41 e0       	ldi	r20, 0x01	; 1
    34e4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_LOW);
    34e8:	ea a1       	ldd	r30, Y+34	; 0x22
    34ea:	fb a1       	ldd	r31, Y+35	; 0x23
    34ec:	80 81       	ld	r24, Z
    34ee:	ea a1       	ldd	r30, Y+34	; 0x22
    34f0:	fb a1       	ldd	r31, Y+35	; 0x23
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	69 2f       	mov	r22, r25
    34f6:	40 e0       	ldi	r20, 0x00	; 0
    34f8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    34fc:	ea a1       	ldd	r30, Y+34	; 0x22
    34fe:	fb a1       	ldd	r31, Y+35	; 0x23
    3500:	80 81       	ld	r24, Z
    3502:	ea a1       	ldd	r30, Y+34	; 0x22
    3504:	fb a1       	ldd	r31, Y+35	; 0x23
    3506:	94 81       	ldd	r25, Z+4	; 0x04
    3508:	69 2f       	mov	r22, r25
    350a:	41 e0       	ldi	r20, 0x01	; 1
    350c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    3510:	28 c0       	rjmp	.+80     	; 0x3562 <STEPPER_u8RotateWithAngle+0x4f0>
					break;

				case 0:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    3512:	ea a1       	ldd	r30, Y+34	; 0x22
    3514:	fb a1       	ldd	r31, Y+35	; 0x23
    3516:	80 81       	ld	r24, Z
    3518:	ea a1       	ldd	r30, Y+34	; 0x22
    351a:	fb a1       	ldd	r31, Y+35	; 0x23
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	69 2f       	mov	r22, r25
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3526:	ea a1       	ldd	r30, Y+34	; 0x22
    3528:	fb a1       	ldd	r31, Y+35	; 0x23
    352a:	80 81       	ld	r24, Z
    352c:	ea a1       	ldd	r30, Y+34	; 0x22
    352e:	fb a1       	ldd	r31, Y+35	; 0x23
    3530:	92 81       	ldd	r25, Z+2	; 0x02
    3532:	69 2f       	mov	r22, r25
    3534:	41 e0       	ldi	r20, 0x01	; 1
    3536:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    353a:	ea a1       	ldd	r30, Y+34	; 0x22
    353c:	fb a1       	ldd	r31, Y+35	; 0x23
    353e:	80 81       	ld	r24, Z
    3540:	ea a1       	ldd	r30, Y+34	; 0x22
    3542:	fb a1       	ldd	r31, Y+35	; 0x23
    3544:	93 81       	ldd	r25, Z+3	; 0x03
    3546:	69 2f       	mov	r22, r25
    3548:	41 e0       	ldi	r20, 0x01	; 1
    354a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_LOW);
    354e:	ea a1       	ldd	r30, Y+34	; 0x22
    3550:	fb a1       	ldd	r31, Y+35	; 0x23
    3552:	80 81       	ld	r24, Z
    3554:	ea a1       	ldd	r30, Y+34	; 0x22
    3556:	fb a1       	ldd	r31, Y+35	; 0x23
    3558:	94 81       	ldd	r25, Z+4	; 0x04
    355a:	69 2f       	mov	r22, r25
    355c:	40 e0       	ldi	r20, 0x00	; 0
    355e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					break;
				}
				_delay_ms(Copy_u8Speed);
    3562:	8f a1       	ldd	r24, Y+39	; 0x27
    3564:	88 2f       	mov	r24, r24
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	a0 e0       	ldi	r26, 0x00	; 0
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	bc 01       	movw	r22, r24
    356e:	cd 01       	movw	r24, r26
    3570:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	8b 87       	std	Y+11, r24	; 0x0b
    357a:	9c 87       	std	Y+12, r25	; 0x0c
    357c:	ad 87       	std	Y+13, r26	; 0x0d
    357e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3580:	6b 85       	ldd	r22, Y+11	; 0x0b
    3582:	7c 85       	ldd	r23, Y+12	; 0x0c
    3584:	8d 85       	ldd	r24, Y+13	; 0x0d
    3586:	9e 85       	ldd	r25, Y+14	; 0x0e
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	4a ef       	ldi	r20, 0xFA	; 250
    358e:	54 e4       	ldi	r21, 0x44	; 68
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	8f 83       	std	Y+7, r24	; 0x07
    359a:	98 87       	std	Y+8, r25	; 0x08
    359c:	a9 87       	std	Y+9, r26	; 0x09
    359e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a0:	6f 81       	ldd	r22, Y+7	; 0x07
    35a2:	78 85       	ldd	r23, Y+8	; 0x08
    35a4:	89 85       	ldd	r24, Y+9	; 0x09
    35a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	40 e8       	ldi	r20, 0x80	; 128
    35ae:	5f e3       	ldi	r21, 0x3F	; 63
    35b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35b4:	88 23       	and	r24, r24
    35b6:	2c f4       	brge	.+10     	; 0x35c2 <STEPPER_u8RotateWithAngle+0x550>
		__ticks = 1;
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	3f c0       	rjmp	.+126    	; 0x3640 <STEPPER_u8RotateWithAngle+0x5ce>
	else if (__tmp > 65535)
    35c2:	6f 81       	ldd	r22, Y+7	; 0x07
    35c4:	78 85       	ldd	r23, Y+8	; 0x08
    35c6:	89 85       	ldd	r24, Y+9	; 0x09
    35c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	3f ef       	ldi	r19, 0xFF	; 255
    35ce:	4f e7       	ldi	r20, 0x7F	; 127
    35d0:	57 e4       	ldi	r21, 0x47	; 71
    35d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d6:	18 16       	cp	r1, r24
    35d8:	4c f5       	brge	.+82     	; 0x362c <STEPPER_u8RotateWithAngle+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35da:	6b 85       	ldd	r22, Y+11	; 0x0b
    35dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    35de:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e2       	ldi	r20, 0x20	; 32
    35e8:	51 e4       	ldi	r21, 0x41	; 65
    35ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	bc 01       	movw	r22, r24
    35f4:	cd 01       	movw	r24, r26
    35f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	9e 83       	std	Y+6, r25	; 0x06
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	0f c0       	rjmp	.+30     	; 0x3622 <STEPPER_u8RotateWithAngle+0x5b0>
    3604:	88 ec       	ldi	r24, 0xC8	; 200
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	9c 83       	std	Y+4, r25	; 0x04
    360a:	8b 83       	std	Y+3, r24	; 0x03
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	9c 81       	ldd	r25, Y+4	; 0x04
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <STEPPER_u8RotateWithAngle+0x59e>
    3614:	9c 83       	std	Y+4, r25	; 0x04
    3616:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3618:	8d 81       	ldd	r24, Y+5	; 0x05
    361a:	9e 81       	ldd	r25, Y+6	; 0x06
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	9e 83       	std	Y+6, r25	; 0x06
    3620:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3622:	8d 81       	ldd	r24, Y+5	; 0x05
    3624:	9e 81       	ldd	r25, Y+6	; 0x06
    3626:	00 97       	sbiw	r24, 0x00	; 0
    3628:	69 f7       	brne	.-38     	; 0x3604 <STEPPER_u8RotateWithAngle+0x592>
    362a:	14 c0       	rjmp	.+40     	; 0x3654 <STEPPER_u8RotateWithAngle+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362c:	6f 81       	ldd	r22, Y+7	; 0x07
    362e:	78 85       	ldd	r23, Y+8	; 0x08
    3630:	89 85       	ldd	r24, Y+9	; 0x09
    3632:	9a 85       	ldd	r25, Y+10	; 0x0a
    3634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	9e 83       	std	Y+6, r25	; 0x06
    363e:	8d 83       	std	Y+5, r24	; 0x05
    3640:	8d 81       	ldd	r24, Y+5	; 0x05
    3642:	9e 81       	ldd	r25, Y+6	; 0x06
    3644:	9a 83       	std	Y+2, r25	; 0x02
    3646:	89 83       	std	Y+1, r24	; 0x01
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	9a 81       	ldd	r25, Y+2	; 0x02
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	f1 f7       	brne	.-4      	; 0x364c <STEPPER_u8RotateWithAngle+0x5da>
    3650:	9a 83       	std	Y+2, r25	; 0x02
    3652:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(Copy_u8Speed);
			}
		}
		else if(Copy_u8Direction == STEPPER_u8ROTATE_CW)
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u16FullSteps; Local_u16Counter++)
    3654:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3656:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	9e 8f       	std	Y+30, r25	; 0x1e
    365c:	8d 8f       	std	Y+29, r24	; 0x1d
    365e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3660:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3662:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3664:	98 a1       	ldd	r25, Y+32	; 0x20
    3666:	28 17       	cp	r18, r24
    3668:	39 07       	cpc	r19, r25
    366a:	08 f4       	brcc	.+2      	; 0x366e <STEPPER_u8RotateWithAngle+0x5fc>
    366c:	a1 ce       	rjmp	.-702    	; 0x33b0 <STEPPER_u8RotateWithAngle+0x33e>
    366e:	05 c0       	rjmp	.+10     	; 0x367a <STEPPER_u8RotateWithAngle+0x608>
				_delay_ms(Copy_u8Speed);
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	89 a3       	std	Y+33, r24	; 0x21
    3674:	02 c0       	rjmp	.+4      	; 0x367a <STEPPER_u8RotateWithAngle+0x608>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3676:	82 e0       	ldi	r24, 0x02	; 2
    3678:	89 a3       	std	Y+33, r24	; 0x21
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    367a:	89 a1       	ldd	r24, Y+33	; 0x21
}
    367c:	af 96       	adiw	r28, 0x2f	; 47
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <STEPPER_u8RotateWithRolls>:

uint8 STEPPER_u8RotateWithRolls(const STEPPER_t *Copy_psteppertMotorInfo, uint8 Copy_u8RollsNumber, uint8 Copy_u8Direction, uint8 Copy_u8Speed)
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	e0 97       	sbiw	r28, 0x30	; 48
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	9d a3       	std	Y+37, r25	; 0x25
    36a4:	8c a3       	std	Y+36, r24	; 0x24
    36a6:	6e a3       	std	Y+38, r22	; 0x26
    36a8:	4f a3       	std	Y+39, r20	; 0x27
    36aa:	28 a7       	std	Y+40, r18	; 0x28
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    36ac:	1b a2       	std	Y+35, r1	; 0x23
	uint16 Local_u16Counter;
	uint32 Local_u32FullSteps;

	/*Validate the pointer address*/
	if(Copy_psteppertMotorInfo != NULL)
    36ae:	8c a1       	ldd	r24, Y+36	; 0x24
    36b0:	9d a1       	ldd	r25, Y+37	; 0x25
    36b2:	00 97       	sbiw	r24, 0x00	; 0
    36b4:	09 f4       	brne	.+2      	; 0x36b8 <STEPPER_u8RotateWithRolls+0x2a>
    36b6:	f2 c2       	rjmp	.+1508   	; 0x3c9c <STEPPER_u8RotateWithRolls+0x60e>
	{
		/*Calculating the full steps to take*/
		Local_u32FullSteps = (uint32) Copy_u8RollsNumber * 2048UL;
    36b8:	8e a1       	ldd	r24, Y+38	; 0x26
    36ba:	88 2f       	mov	r24, r24
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	a0 e0       	ldi	r26, 0x00	; 0
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	07 2e       	mov	r0, r23
    36c4:	7b e0       	ldi	r23, 0x0B	; 11
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	aa 1f       	adc	r26, r26
    36cc:	bb 1f       	adc	r27, r27
    36ce:	7a 95       	dec	r23
    36d0:	d1 f7       	brne	.-12     	; 0x36c6 <STEPPER_u8RotateWithRolls+0x38>
    36d2:	70 2d       	mov	r23, r0
    36d4:	8d 8f       	std	Y+29, r24	; 0x1d
    36d6:	9e 8f       	std	Y+30, r25	; 0x1e
    36d8:	af 8f       	std	Y+31, r26	; 0x1f
    36da:	b8 a3       	std	Y+32, r27	; 0x20

		/*Taking the steps inside for loop, every loop move for 1 step*/
		if(Copy_u8Direction == STEPPER_u8ROTATE_CCW)
    36dc:	8f a1       	ldd	r24, Y+39	; 0x27
    36de:	82 30       	cpi	r24, 0x02	; 2
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <STEPPER_u8RotateWithRolls+0x56>
    36e2:	6b c1       	rjmp	.+726    	; 0x39ba <STEPPER_u8RotateWithRolls+0x32c>
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u32FullSteps; Local_u16Counter++)
    36e4:	1a a2       	std	Y+34, r1	; 0x22
    36e6:	19 a2       	std	Y+33, r1	; 0x21
    36e8:	58 c1       	rjmp	.+688    	; 0x399a <STEPPER_u8RotateWithRolls+0x30c>
			{
				switch(Local_u16Counter % 4UL)
    36ea:	89 a1       	ldd	r24, Y+33	; 0x21
    36ec:	9a a1       	ldd	r25, Y+34	; 0x22
    36ee:	cc 01       	movw	r24, r24
    36f0:	a0 e0       	ldi	r26, 0x00	; 0
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	9c 01       	movw	r18, r24
    36f6:	ad 01       	movw	r20, r26
    36f8:	23 70       	andi	r18, 0x03	; 3
    36fa:	30 70       	andi	r19, 0x00	; 0
    36fc:	40 70       	andi	r20, 0x00	; 0
    36fe:	50 70       	andi	r21, 0x00	; 0
    3700:	2d a7       	std	Y+45, r18	; 0x2d
    3702:	3e a7       	std	Y+46, r19	; 0x2e
    3704:	4f a7       	std	Y+47, r20	; 0x2f
    3706:	58 ab       	std	Y+48, r21	; 0x30
    3708:	8d a5       	ldd	r24, Y+45	; 0x2d
    370a:	9e a5       	ldd	r25, Y+46	; 0x2e
    370c:	af a5       	ldd	r26, Y+47	; 0x2f
    370e:	b8 a9       	ldd	r27, Y+48	; 0x30
    3710:	81 30       	cpi	r24, 0x01	; 1
    3712:	91 05       	cpc	r25, r1
    3714:	a1 05       	cpc	r26, r1
    3716:	b1 05       	cpc	r27, r1
    3718:	09 f4       	brne	.+2      	; 0x371c <STEPPER_u8RotateWithRolls+0x8e>
    371a:	47 c0       	rjmp	.+142    	; 0x37aa <STEPPER_u8RotateWithRolls+0x11c>
    371c:	2d a5       	ldd	r18, Y+45	; 0x2d
    371e:	3e a5       	ldd	r19, Y+46	; 0x2e
    3720:	4f a5       	ldd	r20, Y+47	; 0x2f
    3722:	58 a9       	ldd	r21, Y+48	; 0x30
    3724:	21 30       	cpi	r18, 0x01	; 1
    3726:	31 05       	cpc	r19, r1
    3728:	41 05       	cpc	r20, r1
    372a:	51 05       	cpc	r21, r1
    372c:	a8 f0       	brcs	.+42     	; 0x3758 <STEPPER_u8RotateWithRolls+0xca>
    372e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3730:	9e a5       	ldd	r25, Y+46	; 0x2e
    3732:	af a5       	ldd	r26, Y+47	; 0x2f
    3734:	b8 a9       	ldd	r27, Y+48	; 0x30
    3736:	82 30       	cpi	r24, 0x02	; 2
    3738:	91 05       	cpc	r25, r1
    373a:	a1 05       	cpc	r26, r1
    373c:	b1 05       	cpc	r27, r1
    373e:	09 f4       	brne	.+2      	; 0x3742 <STEPPER_u8RotateWithRolls+0xb4>
    3740:	5d c0       	rjmp	.+186    	; 0x37fc <STEPPER_u8RotateWithRolls+0x16e>
    3742:	2d a5       	ldd	r18, Y+45	; 0x2d
    3744:	3e a5       	ldd	r19, Y+46	; 0x2e
    3746:	4f a5       	ldd	r20, Y+47	; 0x2f
    3748:	58 a9       	ldd	r21, Y+48	; 0x30
    374a:	23 30       	cpi	r18, 0x03	; 3
    374c:	31 05       	cpc	r19, r1
    374e:	41 05       	cpc	r20, r1
    3750:	51 05       	cpc	r21, r1
    3752:	09 f4       	brne	.+2      	; 0x3756 <STEPPER_u8RotateWithRolls+0xc8>
    3754:	7c c0       	rjmp	.+248    	; 0x384e <STEPPER_u8RotateWithRolls+0x1c0>
    3756:	a3 c0       	rjmp	.+326    	; 0x389e <STEPPER_u8RotateWithRolls+0x210>
				{
				case 0:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_LOW);
    3758:	ec a1       	ldd	r30, Y+36	; 0x24
    375a:	fd a1       	ldd	r31, Y+37	; 0x25
    375c:	80 81       	ld	r24, Z
    375e:	ec a1       	ldd	r30, Y+36	; 0x24
    3760:	fd a1       	ldd	r31, Y+37	; 0x25
    3762:	91 81       	ldd	r25, Z+1	; 0x01
    3764:	69 2f       	mov	r22, r25
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    376c:	ec a1       	ldd	r30, Y+36	; 0x24
    376e:	fd a1       	ldd	r31, Y+37	; 0x25
    3770:	80 81       	ld	r24, Z
    3772:	ec a1       	ldd	r30, Y+36	; 0x24
    3774:	fd a1       	ldd	r31, Y+37	; 0x25
    3776:	92 81       	ldd	r25, Z+2	; 0x02
    3778:	69 2f       	mov	r22, r25
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    3780:	ec a1       	ldd	r30, Y+36	; 0x24
    3782:	fd a1       	ldd	r31, Y+37	; 0x25
    3784:	80 81       	ld	r24, Z
    3786:	ec a1       	ldd	r30, Y+36	; 0x24
    3788:	fd a1       	ldd	r31, Y+37	; 0x25
    378a:	93 81       	ldd	r25, Z+3	; 0x03
    378c:	69 2f       	mov	r22, r25
    378e:	41 e0       	ldi	r20, 0x01	; 1
    3790:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    3794:	ec a1       	ldd	r30, Y+36	; 0x24
    3796:	fd a1       	ldd	r31, Y+37	; 0x25
    3798:	80 81       	ld	r24, Z
    379a:	ec a1       	ldd	r30, Y+36	; 0x24
    379c:	fd a1       	ldd	r31, Y+37	; 0x25
    379e:	94 81       	ldd	r25, Z+4	; 0x04
    37a0:	69 2f       	mov	r22, r25
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    37a8:	7a c0       	rjmp	.+244    	; 0x389e <STEPPER_u8RotateWithRolls+0x210>
					break;

				case 1:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    37aa:	ec a1       	ldd	r30, Y+36	; 0x24
    37ac:	fd a1       	ldd	r31, Y+37	; 0x25
    37ae:	80 81       	ld	r24, Z
    37b0:	ec a1       	ldd	r30, Y+36	; 0x24
    37b2:	fd a1       	ldd	r31, Y+37	; 0x25
    37b4:	91 81       	ldd	r25, Z+1	; 0x01
    37b6:	69 2f       	mov	r22, r25
    37b8:	41 e0       	ldi	r20, 0x01	; 1
    37ba:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_LOW);
    37be:	ec a1       	ldd	r30, Y+36	; 0x24
    37c0:	fd a1       	ldd	r31, Y+37	; 0x25
    37c2:	80 81       	ld	r24, Z
    37c4:	ec a1       	ldd	r30, Y+36	; 0x24
    37c6:	fd a1       	ldd	r31, Y+37	; 0x25
    37c8:	92 81       	ldd	r25, Z+2	; 0x02
    37ca:	69 2f       	mov	r22, r25
    37cc:	40 e0       	ldi	r20, 0x00	; 0
    37ce:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    37d2:	ec a1       	ldd	r30, Y+36	; 0x24
    37d4:	fd a1       	ldd	r31, Y+37	; 0x25
    37d6:	80 81       	ld	r24, Z
    37d8:	ec a1       	ldd	r30, Y+36	; 0x24
    37da:	fd a1       	ldd	r31, Y+37	; 0x25
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	69 2f       	mov	r22, r25
    37e0:	41 e0       	ldi	r20, 0x01	; 1
    37e2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    37e6:	ec a1       	ldd	r30, Y+36	; 0x24
    37e8:	fd a1       	ldd	r31, Y+37	; 0x25
    37ea:	80 81       	ld	r24, Z
    37ec:	ec a1       	ldd	r30, Y+36	; 0x24
    37ee:	fd a1       	ldd	r31, Y+37	; 0x25
    37f0:	94 81       	ldd	r25, Z+4	; 0x04
    37f2:	69 2f       	mov	r22, r25
    37f4:	41 e0       	ldi	r20, 0x01	; 1
    37f6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    37fa:	51 c0       	rjmp	.+162    	; 0x389e <STEPPER_u8RotateWithRolls+0x210>
					break;

				case 2:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    37fc:	ec a1       	ldd	r30, Y+36	; 0x24
    37fe:	fd a1       	ldd	r31, Y+37	; 0x25
    3800:	80 81       	ld	r24, Z
    3802:	ec a1       	ldd	r30, Y+36	; 0x24
    3804:	fd a1       	ldd	r31, Y+37	; 0x25
    3806:	91 81       	ldd	r25, Z+1	; 0x01
    3808:	69 2f       	mov	r22, r25
    380a:	41 e0       	ldi	r20, 0x01	; 1
    380c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3810:	ec a1       	ldd	r30, Y+36	; 0x24
    3812:	fd a1       	ldd	r31, Y+37	; 0x25
    3814:	80 81       	ld	r24, Z
    3816:	ec a1       	ldd	r30, Y+36	; 0x24
    3818:	fd a1       	ldd	r31, Y+37	; 0x25
    381a:	92 81       	ldd	r25, Z+2	; 0x02
    381c:	69 2f       	mov	r22, r25
    381e:	41 e0       	ldi	r20, 0x01	; 1
    3820:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_LOW);
    3824:	ec a1       	ldd	r30, Y+36	; 0x24
    3826:	fd a1       	ldd	r31, Y+37	; 0x25
    3828:	80 81       	ld	r24, Z
    382a:	ec a1       	ldd	r30, Y+36	; 0x24
    382c:	fd a1       	ldd	r31, Y+37	; 0x25
    382e:	93 81       	ldd	r25, Z+3	; 0x03
    3830:	69 2f       	mov	r22, r25
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    3838:	ec a1       	ldd	r30, Y+36	; 0x24
    383a:	fd a1       	ldd	r31, Y+37	; 0x25
    383c:	80 81       	ld	r24, Z
    383e:	ec a1       	ldd	r30, Y+36	; 0x24
    3840:	fd a1       	ldd	r31, Y+37	; 0x25
    3842:	94 81       	ldd	r25, Z+4	; 0x04
    3844:	69 2f       	mov	r22, r25
    3846:	41 e0       	ldi	r20, 0x01	; 1
    3848:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    384c:	28 c0       	rjmp	.+80     	; 0x389e <STEPPER_u8RotateWithRolls+0x210>
					break;

				case 3:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    384e:	ec a1       	ldd	r30, Y+36	; 0x24
    3850:	fd a1       	ldd	r31, Y+37	; 0x25
    3852:	80 81       	ld	r24, Z
    3854:	ec a1       	ldd	r30, Y+36	; 0x24
    3856:	fd a1       	ldd	r31, Y+37	; 0x25
    3858:	91 81       	ldd	r25, Z+1	; 0x01
    385a:	69 2f       	mov	r22, r25
    385c:	41 e0       	ldi	r20, 0x01	; 1
    385e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3862:	ec a1       	ldd	r30, Y+36	; 0x24
    3864:	fd a1       	ldd	r31, Y+37	; 0x25
    3866:	80 81       	ld	r24, Z
    3868:	ec a1       	ldd	r30, Y+36	; 0x24
    386a:	fd a1       	ldd	r31, Y+37	; 0x25
    386c:	92 81       	ldd	r25, Z+2	; 0x02
    386e:	69 2f       	mov	r22, r25
    3870:	41 e0       	ldi	r20, 0x01	; 1
    3872:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    3876:	ec a1       	ldd	r30, Y+36	; 0x24
    3878:	fd a1       	ldd	r31, Y+37	; 0x25
    387a:	80 81       	ld	r24, Z
    387c:	ec a1       	ldd	r30, Y+36	; 0x24
    387e:	fd a1       	ldd	r31, Y+37	; 0x25
    3880:	93 81       	ldd	r25, Z+3	; 0x03
    3882:	69 2f       	mov	r22, r25
    3884:	41 e0       	ldi	r20, 0x01	; 1
    3886:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_LOW);
    388a:	ec a1       	ldd	r30, Y+36	; 0x24
    388c:	fd a1       	ldd	r31, Y+37	; 0x25
    388e:	80 81       	ld	r24, Z
    3890:	ec a1       	ldd	r30, Y+36	; 0x24
    3892:	fd a1       	ldd	r31, Y+37	; 0x25
    3894:	94 81       	ldd	r25, Z+4	; 0x04
    3896:	69 2f       	mov	r22, r25
    3898:	40 e0       	ldi	r20, 0x00	; 0
    389a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					break;
				}
				_delay_ms(Copy_u8Speed);
    389e:	88 a5       	ldd	r24, Y+40	; 0x28
    38a0:	88 2f       	mov	r24, r24
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	a0 e0       	ldi	r26, 0x00	; 0
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	bc 01       	movw	r22, r24
    38aa:	cd 01       	movw	r24, r26
    38ac:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	89 8f       	std	Y+25, r24	; 0x19
    38b6:	9a 8f       	std	Y+26, r25	; 0x1a
    38b8:	ab 8f       	std	Y+27, r26	; 0x1b
    38ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38bc:	69 8d       	ldd	r22, Y+25	; 0x19
    38be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	4a ef       	ldi	r20, 0xFA	; 250
    38ca:	54 e4       	ldi	r21, 0x44	; 68
    38cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	8d 8b       	std	Y+21, r24	; 0x15
    38d6:	9e 8b       	std	Y+22, r25	; 0x16
    38d8:	af 8b       	std	Y+23, r26	; 0x17
    38da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38dc:	6d 89       	ldd	r22, Y+21	; 0x15
    38de:	7e 89       	ldd	r23, Y+22	; 0x16
    38e0:	8f 89       	ldd	r24, Y+23	; 0x17
    38e2:	98 8d       	ldd	r25, Y+24	; 0x18
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e8       	ldi	r20, 0x80	; 128
    38ea:	5f e3       	ldi	r21, 0x3F	; 63
    38ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f0:	88 23       	and	r24, r24
    38f2:	2c f4       	brge	.+10     	; 0x38fe <STEPPER_u8RotateWithRolls+0x270>
		__ticks = 1;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	9c 8b       	std	Y+20, r25	; 0x14
    38fa:	8b 8b       	std	Y+19, r24	; 0x13
    38fc:	3f c0       	rjmp	.+126    	; 0x397c <STEPPER_u8RotateWithRolls+0x2ee>
	else if (__tmp > 65535)
    38fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3900:	7e 89       	ldd	r23, Y+22	; 0x16
    3902:	8f 89       	ldd	r24, Y+23	; 0x17
    3904:	98 8d       	ldd	r25, Y+24	; 0x18
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	3f ef       	ldi	r19, 0xFF	; 255
    390a:	4f e7       	ldi	r20, 0x7F	; 127
    390c:	57 e4       	ldi	r21, 0x47	; 71
    390e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3912:	18 16       	cp	r1, r24
    3914:	4c f5       	brge	.+82     	; 0x3968 <STEPPER_u8RotateWithRolls+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3916:	69 8d       	ldd	r22, Y+25	; 0x19
    3918:	7a 8d       	ldd	r23, Y+26	; 0x1a
    391a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    391c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e2       	ldi	r20, 0x20	; 32
    3924:	51 e4       	ldi	r21, 0x41	; 65
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	bc 01       	movw	r22, r24
    3930:	cd 01       	movw	r24, r26
    3932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	9c 8b       	std	Y+20, r25	; 0x14
    393c:	8b 8b       	std	Y+19, r24	; 0x13
    393e:	0f c0       	rjmp	.+30     	; 0x395e <STEPPER_u8RotateWithRolls+0x2d0>
    3940:	88 ec       	ldi	r24, 0xC8	; 200
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	9a 8b       	std	Y+18, r25	; 0x12
    3946:	89 8b       	std	Y+17, r24	; 0x11
    3948:	89 89       	ldd	r24, Y+17	; 0x11
    394a:	9a 89       	ldd	r25, Y+18	; 0x12
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <STEPPER_u8RotateWithRolls+0x2be>
    3950:	9a 8b       	std	Y+18, r25	; 0x12
    3952:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3954:	8b 89       	ldd	r24, Y+19	; 0x13
    3956:	9c 89       	ldd	r25, Y+20	; 0x14
    3958:	01 97       	sbiw	r24, 0x01	; 1
    395a:	9c 8b       	std	Y+20, r25	; 0x14
    395c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395e:	8b 89       	ldd	r24, Y+19	; 0x13
    3960:	9c 89       	ldd	r25, Y+20	; 0x14
    3962:	00 97       	sbiw	r24, 0x00	; 0
    3964:	69 f7       	brne	.-38     	; 0x3940 <STEPPER_u8RotateWithRolls+0x2b2>
    3966:	14 c0       	rjmp	.+40     	; 0x3990 <STEPPER_u8RotateWithRolls+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3968:	6d 89       	ldd	r22, Y+21	; 0x15
    396a:	7e 89       	ldd	r23, Y+22	; 0x16
    396c:	8f 89       	ldd	r24, Y+23	; 0x17
    396e:	98 8d       	ldd	r25, Y+24	; 0x18
    3970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	9c 8b       	std	Y+20, r25	; 0x14
    397a:	8b 8b       	std	Y+19, r24	; 0x13
    397c:	8b 89       	ldd	r24, Y+19	; 0x13
    397e:	9c 89       	ldd	r25, Y+20	; 0x14
    3980:	98 8b       	std	Y+16, r25	; 0x10
    3982:	8f 87       	std	Y+15, r24	; 0x0f
    3984:	8f 85       	ldd	r24, Y+15	; 0x0f
    3986:	98 89       	ldd	r25, Y+16	; 0x10
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <STEPPER_u8RotateWithRolls+0x2fa>
    398c:	98 8b       	std	Y+16, r25	; 0x10
    398e:	8f 87       	std	Y+15, r24	; 0x0f
		Local_u32FullSteps = (uint32) Copy_u8RollsNumber * 2048UL;

		/*Taking the steps inside for loop, every loop move for 1 step*/
		if(Copy_u8Direction == STEPPER_u8ROTATE_CCW)
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u32FullSteps; Local_u16Counter++)
    3990:	89 a1       	ldd	r24, Y+33	; 0x21
    3992:	9a a1       	ldd	r25, Y+34	; 0x22
    3994:	01 96       	adiw	r24, 0x01	; 1
    3996:	9a a3       	std	Y+34, r25	; 0x22
    3998:	89 a3       	std	Y+33, r24	; 0x21
    399a:	89 a1       	ldd	r24, Y+33	; 0x21
    399c:	9a a1       	ldd	r25, Y+34	; 0x22
    399e:	9c 01       	movw	r18, r24
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39a8:	af 8d       	ldd	r26, Y+31	; 0x1f
    39aa:	b8 a1       	ldd	r27, Y+32	; 0x20
    39ac:	28 17       	cp	r18, r24
    39ae:	39 07       	cpc	r19, r25
    39b0:	4a 07       	cpc	r20, r26
    39b2:	5b 07       	cpc	r21, r27
    39b4:	08 f4       	brcc	.+2      	; 0x39b8 <STEPPER_u8RotateWithRolls+0x32a>
    39b6:	99 ce       	rjmp	.-718    	; 0x36ea <STEPPER_u8RotateWithRolls+0x5c>
    39b8:	73 c1       	rjmp	.+742    	; 0x3ca0 <STEPPER_u8RotateWithRolls+0x612>
					break;
				}
				_delay_ms(Copy_u8Speed);
			}
		}
		else if(Copy_u8Direction == STEPPER_u8ROTATE_CW)
    39ba:	8f a1       	ldd	r24, Y+39	; 0x27
    39bc:	81 30       	cpi	r24, 0x01	; 1
    39be:	09 f0       	breq	.+2      	; 0x39c2 <STEPPER_u8RotateWithRolls+0x334>
    39c0:	6a c1       	rjmp	.+724    	; 0x3c96 <STEPPER_u8RotateWithRolls+0x608>
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u32FullSteps; Local_u16Counter++)
    39c2:	1a a2       	std	Y+34, r1	; 0x22
    39c4:	19 a2       	std	Y+33, r1	; 0x21
    39c6:	57 c1       	rjmp	.+686    	; 0x3c76 <STEPPER_u8RotateWithRolls+0x5e8>
			{
				switch(Local_u16Counter % 4UL)
    39c8:	89 a1       	ldd	r24, Y+33	; 0x21
    39ca:	9a a1       	ldd	r25, Y+34	; 0x22
    39cc:	cc 01       	movw	r24, r24
    39ce:	a0 e0       	ldi	r26, 0x00	; 0
    39d0:	b0 e0       	ldi	r27, 0x00	; 0
    39d2:	9c 01       	movw	r18, r24
    39d4:	ad 01       	movw	r20, r26
    39d6:	23 70       	andi	r18, 0x03	; 3
    39d8:	30 70       	andi	r19, 0x00	; 0
    39da:	40 70       	andi	r20, 0x00	; 0
    39dc:	50 70       	andi	r21, 0x00	; 0
    39de:	29 a7       	std	Y+41, r18	; 0x29
    39e0:	3a a7       	std	Y+42, r19	; 0x2a
    39e2:	4b a7       	std	Y+43, r20	; 0x2b
    39e4:	5c a7       	std	Y+44, r21	; 0x2c
    39e6:	89 a5       	ldd	r24, Y+41	; 0x29
    39e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    39ea:	ab a5       	ldd	r26, Y+43	; 0x2b
    39ec:	bc a5       	ldd	r27, Y+44	; 0x2c
    39ee:	81 30       	cpi	r24, 0x01	; 1
    39f0:	91 05       	cpc	r25, r1
    39f2:	a1 05       	cpc	r26, r1
    39f4:	b1 05       	cpc	r27, r1
    39f6:	09 f4       	brne	.+2      	; 0x39fa <STEPPER_u8RotateWithRolls+0x36c>
    39f8:	6f c0       	rjmp	.+222    	; 0x3ad8 <STEPPER_u8RotateWithRolls+0x44a>
    39fa:	29 a5       	ldd	r18, Y+41	; 0x29
    39fc:	3a a5       	ldd	r19, Y+42	; 0x2a
    39fe:	4b a5       	ldd	r20, Y+43	; 0x2b
    3a00:	5c a5       	ldd	r21, Y+44	; 0x2c
    3a02:	21 30       	cpi	r18, 0x01	; 1
    3a04:	31 05       	cpc	r19, r1
    3a06:	41 05       	cpc	r20, r1
    3a08:	51 05       	cpc	r21, r1
    3a0a:	08 f4       	brcc	.+2      	; 0x3a0e <STEPPER_u8RotateWithRolls+0x380>
    3a0c:	8e c0       	rjmp	.+284    	; 0x3b2a <STEPPER_u8RotateWithRolls+0x49c>
    3a0e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a10:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a12:	ab a5       	ldd	r26, Y+43	; 0x2b
    3a14:	bc a5       	ldd	r27, Y+44	; 0x2c
    3a16:	82 30       	cpi	r24, 0x02	; 2
    3a18:	91 05       	cpc	r25, r1
    3a1a:	a1 05       	cpc	r26, r1
    3a1c:	b1 05       	cpc	r27, r1
    3a1e:	99 f1       	breq	.+102    	; 0x3a86 <STEPPER_u8RotateWithRolls+0x3f8>
    3a20:	29 a5       	ldd	r18, Y+41	; 0x29
    3a22:	3a a5       	ldd	r19, Y+42	; 0x2a
    3a24:	4b a5       	ldd	r20, Y+43	; 0x2b
    3a26:	5c a5       	ldd	r21, Y+44	; 0x2c
    3a28:	23 30       	cpi	r18, 0x03	; 3
    3a2a:	31 05       	cpc	r19, r1
    3a2c:	41 05       	cpc	r20, r1
    3a2e:	51 05       	cpc	r21, r1
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <STEPPER_u8RotateWithRolls+0x3a6>
    3a32:	a3 c0       	rjmp	.+326    	; 0x3b7a <STEPPER_u8RotateWithRolls+0x4ec>
				{
				case 3:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_LOW);
    3a34:	ec a1       	ldd	r30, Y+36	; 0x24
    3a36:	fd a1       	ldd	r31, Y+37	; 0x25
    3a38:	80 81       	ld	r24, Z
    3a3a:	ec a1       	ldd	r30, Y+36	; 0x24
    3a3c:	fd a1       	ldd	r31, Y+37	; 0x25
    3a3e:	91 81       	ldd	r25, Z+1	; 0x01
    3a40:	69 2f       	mov	r22, r25
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3a48:	ec a1       	ldd	r30, Y+36	; 0x24
    3a4a:	fd a1       	ldd	r31, Y+37	; 0x25
    3a4c:	80 81       	ld	r24, Z
    3a4e:	ec a1       	ldd	r30, Y+36	; 0x24
    3a50:	fd a1       	ldd	r31, Y+37	; 0x25
    3a52:	92 81       	ldd	r25, Z+2	; 0x02
    3a54:	69 2f       	mov	r22, r25
    3a56:	41 e0       	ldi	r20, 0x01	; 1
    3a58:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    3a5c:	ec a1       	ldd	r30, Y+36	; 0x24
    3a5e:	fd a1       	ldd	r31, Y+37	; 0x25
    3a60:	80 81       	ld	r24, Z
    3a62:	ec a1       	ldd	r30, Y+36	; 0x24
    3a64:	fd a1       	ldd	r31, Y+37	; 0x25
    3a66:	93 81       	ldd	r25, Z+3	; 0x03
    3a68:	69 2f       	mov	r22, r25
    3a6a:	41 e0       	ldi	r20, 0x01	; 1
    3a6c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    3a70:	ec a1       	ldd	r30, Y+36	; 0x24
    3a72:	fd a1       	ldd	r31, Y+37	; 0x25
    3a74:	80 81       	ld	r24, Z
    3a76:	ec a1       	ldd	r30, Y+36	; 0x24
    3a78:	fd a1       	ldd	r31, Y+37	; 0x25
    3a7a:	94 81       	ldd	r25, Z+4	; 0x04
    3a7c:	69 2f       	mov	r22, r25
    3a7e:	41 e0       	ldi	r20, 0x01	; 1
    3a80:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    3a84:	7a c0       	rjmp	.+244    	; 0x3b7a <STEPPER_u8RotateWithRolls+0x4ec>
					break;

				case 2:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    3a86:	ec a1       	ldd	r30, Y+36	; 0x24
    3a88:	fd a1       	ldd	r31, Y+37	; 0x25
    3a8a:	80 81       	ld	r24, Z
    3a8c:	ec a1       	ldd	r30, Y+36	; 0x24
    3a8e:	fd a1       	ldd	r31, Y+37	; 0x25
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	69 2f       	mov	r22, r25
    3a94:	41 e0       	ldi	r20, 0x01	; 1
    3a96:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_LOW);
    3a9a:	ec a1       	ldd	r30, Y+36	; 0x24
    3a9c:	fd a1       	ldd	r31, Y+37	; 0x25
    3a9e:	80 81       	ld	r24, Z
    3aa0:	ec a1       	ldd	r30, Y+36	; 0x24
    3aa2:	fd a1       	ldd	r31, Y+37	; 0x25
    3aa4:	92 81       	ldd	r25, Z+2	; 0x02
    3aa6:	69 2f       	mov	r22, r25
    3aa8:	40 e0       	ldi	r20, 0x00	; 0
    3aaa:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    3aae:	ec a1       	ldd	r30, Y+36	; 0x24
    3ab0:	fd a1       	ldd	r31, Y+37	; 0x25
    3ab2:	80 81       	ld	r24, Z
    3ab4:	ec a1       	ldd	r30, Y+36	; 0x24
    3ab6:	fd a1       	ldd	r31, Y+37	; 0x25
    3ab8:	93 81       	ldd	r25, Z+3	; 0x03
    3aba:	69 2f       	mov	r22, r25
    3abc:	41 e0       	ldi	r20, 0x01	; 1
    3abe:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    3ac2:	ec a1       	ldd	r30, Y+36	; 0x24
    3ac4:	fd a1       	ldd	r31, Y+37	; 0x25
    3ac6:	80 81       	ld	r24, Z
    3ac8:	ec a1       	ldd	r30, Y+36	; 0x24
    3aca:	fd a1       	ldd	r31, Y+37	; 0x25
    3acc:	94 81       	ldd	r25, Z+4	; 0x04
    3ace:	69 2f       	mov	r22, r25
    3ad0:	41 e0       	ldi	r20, 0x01	; 1
    3ad2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    3ad6:	51 c0       	rjmp	.+162    	; 0x3b7a <STEPPER_u8RotateWithRolls+0x4ec>
					break;

				case 1:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    3ad8:	ec a1       	ldd	r30, Y+36	; 0x24
    3ada:	fd a1       	ldd	r31, Y+37	; 0x25
    3adc:	80 81       	ld	r24, Z
    3ade:	ec a1       	ldd	r30, Y+36	; 0x24
    3ae0:	fd a1       	ldd	r31, Y+37	; 0x25
    3ae2:	91 81       	ldd	r25, Z+1	; 0x01
    3ae4:	69 2f       	mov	r22, r25
    3ae6:	41 e0       	ldi	r20, 0x01	; 1
    3ae8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3aec:	ec a1       	ldd	r30, Y+36	; 0x24
    3aee:	fd a1       	ldd	r31, Y+37	; 0x25
    3af0:	80 81       	ld	r24, Z
    3af2:	ec a1       	ldd	r30, Y+36	; 0x24
    3af4:	fd a1       	ldd	r31, Y+37	; 0x25
    3af6:	92 81       	ldd	r25, Z+2	; 0x02
    3af8:	69 2f       	mov	r22, r25
    3afa:	41 e0       	ldi	r20, 0x01	; 1
    3afc:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_LOW);
    3b00:	ec a1       	ldd	r30, Y+36	; 0x24
    3b02:	fd a1       	ldd	r31, Y+37	; 0x25
    3b04:	80 81       	ld	r24, Z
    3b06:	ec a1       	ldd	r30, Y+36	; 0x24
    3b08:	fd a1       	ldd	r31, Y+37	; 0x25
    3b0a:	93 81       	ldd	r25, Z+3	; 0x03
    3b0c:	69 2f       	mov	r22, r25
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_HIGH);
    3b14:	ec a1       	ldd	r30, Y+36	; 0x24
    3b16:	fd a1       	ldd	r31, Y+37	; 0x25
    3b18:	80 81       	ld	r24, Z
    3b1a:	ec a1       	ldd	r30, Y+36	; 0x24
    3b1c:	fd a1       	ldd	r31, Y+37	; 0x25
    3b1e:	94 81       	ldd	r25, Z+4	; 0x04
    3b20:	69 2f       	mov	r22, r25
    3b22:	41 e0       	ldi	r20, 0x01	; 1
    3b24:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
    3b28:	28 c0       	rjmp	.+80     	; 0x3b7a <STEPPER_u8RotateWithRolls+0x4ec>
					break;

				case 0:
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> BluePin, DIO_u8PIN_HIGH);
    3b2a:	ec a1       	ldd	r30, Y+36	; 0x24
    3b2c:	fd a1       	ldd	r31, Y+37	; 0x25
    3b2e:	80 81       	ld	r24, Z
    3b30:	ec a1       	ldd	r30, Y+36	; 0x24
    3b32:	fd a1       	ldd	r31, Y+37	; 0x25
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	69 2f       	mov	r22, r25
    3b38:	41 e0       	ldi	r20, 0x01	; 1
    3b3a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> PinkPin, DIO_u8PIN_HIGH);
    3b3e:	ec a1       	ldd	r30, Y+36	; 0x24
    3b40:	fd a1       	ldd	r31, Y+37	; 0x25
    3b42:	80 81       	ld	r24, Z
    3b44:	ec a1       	ldd	r30, Y+36	; 0x24
    3b46:	fd a1       	ldd	r31, Y+37	; 0x25
    3b48:	92 81       	ldd	r25, Z+2	; 0x02
    3b4a:	69 2f       	mov	r22, r25
    3b4c:	41 e0       	ldi	r20, 0x01	; 1
    3b4e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> YellowPin, DIO_u8PIN_HIGH);
    3b52:	ec a1       	ldd	r30, Y+36	; 0x24
    3b54:	fd a1       	ldd	r31, Y+37	; 0x25
    3b56:	80 81       	ld	r24, Z
    3b58:	ec a1       	ldd	r30, Y+36	; 0x24
    3b5a:	fd a1       	ldd	r31, Y+37	; 0x25
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	69 2f       	mov	r22, r25
    3b60:	41 e0       	ldi	r20, 0x01	; 1
    3b62:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					DIO_u8SetPinValue(Copy_psteppertMotorInfo -> Port, Copy_psteppertMotorInfo -> OrangePin, DIO_u8PIN_LOW);
    3b66:	ec a1       	ldd	r30, Y+36	; 0x24
    3b68:	fd a1       	ldd	r31, Y+37	; 0x25
    3b6a:	80 81       	ld	r24, Z
    3b6c:	ec a1       	ldd	r30, Y+36	; 0x24
    3b6e:	fd a1       	ldd	r31, Y+37	; 0x25
    3b70:	94 81       	ldd	r25, Z+4	; 0x04
    3b72:	69 2f       	mov	r22, r25
    3b74:	40 e0       	ldi	r20, 0x00	; 0
    3b76:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <DIO_u8SetPinValue>
					break;
				}
				_delay_ms(Copy_u8Speed);
    3b7a:	88 a5       	ldd	r24, Y+40	; 0x28
    3b7c:	88 2f       	mov	r24, r24
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	a0 e0       	ldi	r26, 0x00	; 0
    3b82:	b0 e0       	ldi	r27, 0x00	; 0
    3b84:	bc 01       	movw	r22, r24
    3b86:	cd 01       	movw	r24, r26
    3b88:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	8b 87       	std	Y+11, r24	; 0x0b
    3b92:	9c 87       	std	Y+12, r25	; 0x0c
    3b94:	ad 87       	std	Y+13, r26	; 0x0d
    3b96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	4a ef       	ldi	r20, 0xFA	; 250
    3ba6:	54 e4       	ldi	r21, 0x44	; 68
    3ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	8f 83       	std	Y+7, r24	; 0x07
    3bb2:	98 87       	std	Y+8, r25	; 0x08
    3bb4:	a9 87       	std	Y+9, r26	; 0x09
    3bb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bba:	78 85       	ldd	r23, Y+8	; 0x08
    3bbc:	89 85       	ldd	r24, Y+9	; 0x09
    3bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	40 e8       	ldi	r20, 0x80	; 128
    3bc6:	5f e3       	ldi	r21, 0x3F	; 63
    3bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bcc:	88 23       	and	r24, r24
    3bce:	2c f4       	brge	.+10     	; 0x3bda <STEPPER_u8RotateWithRolls+0x54c>
		__ticks = 1;
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	9e 83       	std	Y+6, r25	; 0x06
    3bd6:	8d 83       	std	Y+5, r24	; 0x05
    3bd8:	3f c0       	rjmp	.+126    	; 0x3c58 <STEPPER_u8RotateWithRolls+0x5ca>
	else if (__tmp > 65535)
    3bda:	6f 81       	ldd	r22, Y+7	; 0x07
    3bdc:	78 85       	ldd	r23, Y+8	; 0x08
    3bde:	89 85       	ldd	r24, Y+9	; 0x09
    3be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	3f ef       	ldi	r19, 0xFF	; 255
    3be6:	4f e7       	ldi	r20, 0x7F	; 127
    3be8:	57 e4       	ldi	r21, 0x47	; 71
    3bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bee:	18 16       	cp	r1, r24
    3bf0:	4c f5       	brge	.+82     	; 0x3c44 <STEPPER_u8RotateWithRolls+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	40 e2       	ldi	r20, 0x20	; 32
    3c00:	51 e4       	ldi	r21, 0x41	; 65
    3c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22
    3c0a:	bc 01       	movw	r22, r24
    3c0c:	cd 01       	movw	r24, r26
    3c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	9e 83       	std	Y+6, r25	; 0x06
    3c18:	8d 83       	std	Y+5, r24	; 0x05
    3c1a:	0f c0       	rjmp	.+30     	; 0x3c3a <STEPPER_u8RotateWithRolls+0x5ac>
    3c1c:	88 ec       	ldi	r24, 0xC8	; 200
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	9c 83       	std	Y+4, r25	; 0x04
    3c22:	8b 83       	std	Y+3, r24	; 0x03
    3c24:	8b 81       	ldd	r24, Y+3	; 0x03
    3c26:	9c 81       	ldd	r25, Y+4	; 0x04
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <STEPPER_u8RotateWithRolls+0x59a>
    3c2c:	9c 83       	std	Y+4, r25	; 0x04
    3c2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c30:	8d 81       	ldd	r24, Y+5	; 0x05
    3c32:	9e 81       	ldd	r25, Y+6	; 0x06
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	9e 83       	std	Y+6, r25	; 0x06
    3c38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3e:	00 97       	sbiw	r24, 0x00	; 0
    3c40:	69 f7       	brne	.-38     	; 0x3c1c <STEPPER_u8RotateWithRolls+0x58e>
    3c42:	14 c0       	rjmp	.+40     	; 0x3c6c <STEPPER_u8RotateWithRolls+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c44:	6f 81       	ldd	r22, Y+7	; 0x07
    3c46:	78 85       	ldd	r23, Y+8	; 0x08
    3c48:	89 85       	ldd	r24, Y+9	; 0x09
    3c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	9e 83       	std	Y+6, r25	; 0x06
    3c56:	8d 83       	std	Y+5, r24	; 0x05
    3c58:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5c:	9a 83       	std	Y+2, r25	; 0x02
    3c5e:	89 83       	std	Y+1, r24	; 0x01
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
    3c62:	9a 81       	ldd	r25, Y+2	; 0x02
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	f1 f7       	brne	.-4      	; 0x3c64 <STEPPER_u8RotateWithRolls+0x5d6>
    3c68:	9a 83       	std	Y+2, r25	; 0x02
    3c6a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(Copy_u8Speed);
			}
		}
		else if(Copy_u8Direction == STEPPER_u8ROTATE_CW)
		{
			for(Local_u16Counter = 0; Local_u16Counter < Local_u32FullSteps; Local_u16Counter++)
    3c6c:	89 a1       	ldd	r24, Y+33	; 0x21
    3c6e:	9a a1       	ldd	r25, Y+34	; 0x22
    3c70:	01 96       	adiw	r24, 0x01	; 1
    3c72:	9a a3       	std	Y+34, r25	; 0x22
    3c74:	89 a3       	std	Y+33, r24	; 0x21
    3c76:	89 a1       	ldd	r24, Y+33	; 0x21
    3c78:	9a a1       	ldd	r25, Y+34	; 0x22
    3c7a:	9c 01       	movw	r18, r24
    3c7c:	40 e0       	ldi	r20, 0x00	; 0
    3c7e:	50 e0       	ldi	r21, 0x00	; 0
    3c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c84:	af 8d       	ldd	r26, Y+31	; 0x1f
    3c86:	b8 a1       	ldd	r27, Y+32	; 0x20
    3c88:	28 17       	cp	r18, r24
    3c8a:	39 07       	cpc	r19, r25
    3c8c:	4a 07       	cpc	r20, r26
    3c8e:	5b 07       	cpc	r21, r27
    3c90:	08 f4       	brcc	.+2      	; 0x3c94 <STEPPER_u8RotateWithRolls+0x606>
    3c92:	9a ce       	rjmp	.-716    	; 0x39c8 <STEPPER_u8RotateWithRolls+0x33a>
    3c94:	05 c0       	rjmp	.+10     	; 0x3ca0 <STEPPER_u8RotateWithRolls+0x612>
				_delay_ms(Copy_u8Speed);
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	8b a3       	std	Y+35, r24	; 0x23
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <STEPPER_u8RotateWithRolls+0x612>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3c9c:	82 e0       	ldi	r24, 0x02	; 2
    3c9e:	8b a3       	std	Y+35, r24	; 0x23
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    3ca0:	8b a1       	ldd	r24, Y+35	; 0x23
}
    3ca2:	e0 96       	adiw	r28, 0x30	; 48
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	cf 91       	pop	r28
    3cb0:	df 91       	pop	r29
    3cb2:	08 95       	ret

00003cb4 <TIMER0_voidInit>:
#include "TIMERS_register.h"

static void (* TIMERS_pvCallBackFuncArr[8])(void);

void TIMER0_voidInit(void)
{
    3cb4:	df 93       	push	r29
    3cb6:	cf 93       	push	r28
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
	/*Select Wave Generation Mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
    3cbc:	a3 e5       	ldi	r26, 0x53	; 83
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	e3 e5       	ldi	r30, 0x53	; 83
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	80 64       	ori	r24, 0x40	; 64
    3cc8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    3cca:	a3 e5       	ldi	r26, 0x53	; 83
    3ccc:	b0 e0       	ldi	r27, 0x00	; 0
    3cce:	e3 e5       	ldi	r30, 0x53	; 83
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	80 81       	ld	r24, Z
    3cd4:	88 60       	ori	r24, 0x08	; 8
    3cd6:	8c 93       	st	X, r24

	/*Select Compare Match Output Mode*/
	CLR_BIT(TCCR0,TCCR0_COM00);
    3cd8:	a3 e5       	ldi	r26, 0x53	; 83
    3cda:	b0 e0       	ldi	r27, 0x00	; 0
    3cdc:	e3 e5       	ldi	r30, 0x53	; 83
    3cde:	f0 e0       	ldi	r31, 0x00	; 0
    3ce0:	80 81       	ld	r24, Z
    3ce2:	8f 7e       	andi	r24, 0xEF	; 239
    3ce4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    3ce6:	a3 e5       	ldi	r26, 0x53	; 83
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	e3 e5       	ldi	r30, 0x53	; 83
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	80 81       	ld	r24, Z
    3cf0:	80 62       	ori	r24, 0x20	; 32
    3cf2:	8c 93       	st	X, r24

	/*Select Prescaler*/
	TCCR0 &= PRESCALER_MASK;
    3cf4:	a3 e5       	ldi	r26, 0x53	; 83
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e3 e5       	ldi	r30, 0x53	; 83
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 81       	ld	r24, Z
    3cfe:	88 7f       	andi	r24, 0xF8	; 248
    3d00:	8c 93       	st	X, r24
	TCCR0 |= DIVISION_BY_8;
    3d02:	a3 e5       	ldi	r26, 0x53	; 83
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	e3 e5       	ldi	r30, 0x53	; 83
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	80 81       	ld	r24, Z
    3d0c:	83 60       	ori	r24, 0x03	; 3
    3d0e:	8c 93       	st	X, r24
}
    3d10:	cf 91       	pop	r28
    3d12:	df 91       	pop	r29
    3d14:	08 95       	ret

00003d16 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    3d16:	df 93       	push	r29
    3d18:	cf 93       	push	r28
    3d1a:	cd b7       	in	r28, 0x3d	; 61
    3d1c:	de b7       	in	r29, 0x3e	; 62
	/*Select Wave Generation Mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3d1e:	af e4       	ldi	r26, 0x4F	; 79
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	ef e4       	ldi	r30, 0x4F	; 79
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	8e 7f       	andi	r24, 0xFE	; 254
    3d2a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    3d2c:	af e4       	ldi	r26, 0x4F	; 79
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	ef e4       	ldi	r30, 0x4F	; 79
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	82 60       	ori	r24, 0x02	; 2
    3d38:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    3d3a:	ae e4       	ldi	r26, 0x4E	; 78
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	ee e4       	ldi	r30, 0x4E	; 78
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	80 81       	ld	r24, Z
    3d44:	88 60       	ori	r24, 0x08	; 8
    3d46:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    3d48:	ae e4       	ldi	r26, 0x4E	; 78
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	ee e4       	ldi	r30, 0x4E	; 78
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	80 61       	ori	r24, 0x10	; 16
    3d54:	8c 93       	st	X, r24

	/*Select Compare Match Output Mode*/
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3d56:	af e4       	ldi	r26, 0x4F	; 79
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	ef e4       	ldi	r30, 0x4F	; 79
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	8f 7b       	andi	r24, 0xBF	; 191
    3d62:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3d64:	af e4       	ldi	r26, 0x4F	; 79
    3d66:	b0 e0       	ldi	r27, 0x00	; 0
    3d68:	ef e4       	ldi	r30, 0x4F	; 79
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	80 81       	ld	r24, Z
    3d6e:	80 68       	ori	r24, 0x80	; 128
    3d70:	8c 93       	st	X, r24

	/*Select Prescaler*/
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    3d72:	ae e4       	ldi	r26, 0x4E	; 78
    3d74:	b0 e0       	ldi	r27, 0x00	; 0
    3d76:	ee e4       	ldi	r30, 0x4E	; 78
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	80 81       	ld	r24, Z
    3d7c:	8e 7f       	andi	r24, 0xFE	; 254
    3d7e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    3d80:	ae e4       	ldi	r26, 0x4E	; 78
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
    3d84:	ee e4       	ldi	r30, 0x4E	; 78
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	80 81       	ld	r24, Z
    3d8a:	82 60       	ori	r24, 0x02	; 2
    3d8c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    3d8e:	ae e4       	ldi	r26, 0x4E	; 78
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	ee e4       	ldi	r30, 0x4E	; 78
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
    3d98:	8b 7f       	andi	r24, 0xFB	; 251
    3d9a:	8c 93       	st	X, r24

	/*Set the top value*/
	ICR1 = 20000;
    3d9c:	e6 e4       	ldi	r30, 0x46	; 70
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 e2       	ldi	r24, 0x20	; 32
    3da2:	9e e4       	ldi	r25, 0x4E	; 78
    3da4:	91 83       	std	Z+1, r25	; 0x01
    3da6:	80 83       	st	Z, r24
}
    3da8:	cf 91       	pop	r28
    3daa:	df 91       	pop	r29
    3dac:	08 95       	ret

00003dae <TIMER1_voidDisable>:
void TIMER1_voidDisable(void)
{
    3dae:	df 93       	push	r29
    3db0:	cf 93       	push	r28
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
	/*Select Prescaler*/
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    3db6:	ae e4       	ldi	r26, 0x4E	; 78
    3db8:	b0 e0       	ldi	r27, 0x00	; 0
    3dba:	ee e4       	ldi	r30, 0x4E	; 78
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	80 81       	ld	r24, Z
    3dc0:	8e 7f       	andi	r24, 0xFE	; 254
    3dc2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    3dc4:	ae e4       	ldi	r26, 0x4E	; 78
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	ee e4       	ldi	r30, 0x4E	; 78
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
    3dce:	8d 7f       	andi	r24, 0xFD	; 253
    3dd0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    3dd2:	ae e4       	ldi	r26, 0x4E	; 78
    3dd4:	b0 e0       	ldi	r27, 0x00	; 0
    3dd6:	ee e4       	ldi	r30, 0x4E	; 78
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	80 81       	ld	r24, Z
    3ddc:	8b 7f       	andi	r24, 0xFB	; 251
    3dde:	8c 93       	st	X, r24
}
    3de0:	cf 91       	pop	r28
    3de2:	df 91       	pop	r29
    3de4:	08 95       	ret

00003de6 <TIMER0_voidSetCompValue>:

void TIMER0_voidSetCompValue(uint8 Copy_u8Value)
{
    3de6:	df 93       	push	r29
    3de8:	cf 93       	push	r28
    3dea:	0f 92       	push	r0
    3dec:	cd b7       	in	r28, 0x3d	; 61
    3dee:	de b7       	in	r29, 0x3e	; 62
    3df0:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Compare Match Value*/
	OCR0 = Copy_u8Value;
    3df2:	ec e5       	ldi	r30, 0x5C	; 92
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	89 81       	ldd	r24, Y+1	; 0x01
    3df8:	80 83       	st	Z, r24
}
    3dfa:	0f 90       	pop	r0
    3dfc:	cf 91       	pop	r28
    3dfe:	df 91       	pop	r29
    3e00:	08 95       	ret

00003e02 <TIMER1_voidSetCompValue>:

void TIMER1_voidSetCompValue(uint16 Copy_u16Value)
{
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	00 d0       	rcall	.+0      	; 0x3e08 <TIMER1_voidSetCompValue+0x6>
    3e08:	cd b7       	in	r28, 0x3d	; 61
    3e0a:	de b7       	in	r29, 0x3e	; 62
    3e0c:	9a 83       	std	Y+2, r25	; 0x02
    3e0e:	89 83       	std	Y+1, r24	; 0x01
	/*Set the Compare Match Value*/
	OCR1A = Copy_u16Value;
    3e10:	ea e4       	ldi	r30, 0x4A	; 74
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	89 81       	ldd	r24, Y+1	; 0x01
    3e16:	9a 81       	ldd	r25, Y+2	; 0x02
    3e18:	91 83       	std	Z+1, r25	; 0x01
    3e1a:	80 83       	st	Z, r24
}
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	08 95       	ret

00003e26 <TIMERS_u8SetCallBack>:

uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_u8TimerIntSource, void (* Copy_pvCallBackFunc)(void))
{
    3e26:	df 93       	push	r29
    3e28:	cf 93       	push	r28
    3e2a:	00 d0       	rcall	.+0      	; 0x3e2c <TIMERS_u8SetCallBack+0x6>
    3e2c:	00 d0       	rcall	.+0      	; 0x3e2e <TIMERS_u8SetCallBack+0x8>
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
    3e32:	8a 83       	std	Y+2, r24	; 0x02
    3e34:	7c 83       	std	Y+4, r23	; 0x04
    3e36:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3e38:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer of function*/
	if(Copy_pvCallBackFunc != NULL)
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3e:	00 97       	sbiw	r24, 0x00	; 0
    3e40:	69 f0       	breq	.+26     	; 0x3e5c <TIMERS_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource] = Copy_pvCallBackFunc;
    3e42:	8a 81       	ldd	r24, Y+2	; 0x02
    3e44:	88 2f       	mov	r24, r24
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	88 0f       	add	r24, r24
    3e4a:	99 1f       	adc	r25, r25
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	e8 58       	subi	r30, 0x88	; 136
    3e50:	fc 4f       	sbci	r31, 0xFC	; 252
    3e52:	8b 81       	ldd	r24, Y+3	; 0x03
    3e54:	9c 81       	ldd	r25, Y+4	; 0x04
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	80 83       	st	Z, r24
    3e5a:	02 c0       	rjmp	.+4      	; 0x3e60 <TIMERS_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3e5c:	82 e0       	ldi	r24, 0x02	; 2
    3e5e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3e60:	89 81       	ldd	r24, Y+1	; 0x01

}
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	cf 91       	pop	r28
    3e6c:	df 91       	pop	r29
    3e6e:	08 95       	ret

00003e70 <__vector_11>:

/*OverFlow Event ISR*/
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
    3e70:	1f 92       	push	r1
    3e72:	0f 92       	push	r0
    3e74:	0f b6       	in	r0, 0x3f	; 63
    3e76:	0f 92       	push	r0
    3e78:	11 24       	eor	r1, r1
    3e7a:	2f 93       	push	r18
    3e7c:	3f 93       	push	r19
    3e7e:	4f 93       	push	r20
    3e80:	5f 93       	push	r21
    3e82:	6f 93       	push	r22
    3e84:	7f 93       	push	r23
    3e86:	8f 93       	push	r24
    3e88:	9f 93       	push	r25
    3e8a:	af 93       	push	r26
    3e8c:	bf 93       	push	r27
    3e8e:	ef 93       	push	r30
    3e90:	ff 93       	push	r31
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    3e9a:	80 91 78 03 	lds	r24, 0x0378
    3e9e:	90 91 79 03 	lds	r25, 0x0379
    3ea2:	00 97       	sbiw	r24, 0x00	; 0
    3ea4:	29 f0       	breq	.+10     	; 0x3eb0 <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_OVF]();
    3ea6:	e0 91 78 03 	lds	r30, 0x0378
    3eaa:	f0 91 79 03 	lds	r31, 0x0379
    3eae:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3eb0:	cf 91       	pop	r28
    3eb2:	df 91       	pop	r29
    3eb4:	ff 91       	pop	r31
    3eb6:	ef 91       	pop	r30
    3eb8:	bf 91       	pop	r27
    3eba:	af 91       	pop	r26
    3ebc:	9f 91       	pop	r25
    3ebe:	8f 91       	pop	r24
    3ec0:	7f 91       	pop	r23
    3ec2:	6f 91       	pop	r22
    3ec4:	5f 91       	pop	r21
    3ec6:	4f 91       	pop	r20
    3ec8:	3f 91       	pop	r19
    3eca:	2f 91       	pop	r18
    3ecc:	0f 90       	pop	r0
    3ece:	0f be       	out	0x3f, r0	; 63
    3ed0:	0f 90       	pop	r0
    3ed2:	1f 90       	pop	r1
    3ed4:	18 95       	reti

00003ed6 <__vector_10>:


/*Compare Match Event ISR*/
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
    3ed6:	1f 92       	push	r1
    3ed8:	0f 92       	push	r0
    3eda:	0f b6       	in	r0, 0x3f	; 63
    3edc:	0f 92       	push	r0
    3ede:	11 24       	eor	r1, r1
    3ee0:	2f 93       	push	r18
    3ee2:	3f 93       	push	r19
    3ee4:	4f 93       	push	r20
    3ee6:	5f 93       	push	r21
    3ee8:	6f 93       	push	r22
    3eea:	7f 93       	push	r23
    3eec:	8f 93       	push	r24
    3eee:	9f 93       	push	r25
    3ef0:	af 93       	push	r26
    3ef2:	bf 93       	push	r27
    3ef4:	ef 93       	push	r30
    3ef6:	ff 93       	push	r31
    3ef8:	df 93       	push	r29
    3efa:	cf 93       	push	r28
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    3f00:	80 91 7a 03 	lds	r24, 0x037A
    3f04:	90 91 7b 03 	lds	r25, 0x037B
    3f08:	00 97       	sbiw	r24, 0x00	; 0
    3f0a:	29 f0       	breq	.+10     	; 0x3f16 <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    3f0c:	e0 91 7a 03 	lds	r30, 0x037A
    3f10:	f0 91 7b 03 	lds	r31, 0x037B
    3f14:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3f16:	cf 91       	pop	r28
    3f18:	df 91       	pop	r29
    3f1a:	ff 91       	pop	r31
    3f1c:	ef 91       	pop	r30
    3f1e:	bf 91       	pop	r27
    3f20:	af 91       	pop	r26
    3f22:	9f 91       	pop	r25
    3f24:	8f 91       	pop	r24
    3f26:	7f 91       	pop	r23
    3f28:	6f 91       	pop	r22
    3f2a:	5f 91       	pop	r21
    3f2c:	4f 91       	pop	r20
    3f2e:	3f 91       	pop	r19
    3f30:	2f 91       	pop	r18
    3f32:	0f 90       	pop	r0
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	0f 90       	pop	r0
    3f38:	1f 90       	pop	r1
    3f3a:	18 95       	reti

00003f3c <main>:

uint8 Main_u8SystemIndicator;

/*It is the main*/
void main(void)
{
    3f3c:	af 92       	push	r10
    3f3e:	bf 92       	push	r11
    3f40:	cf 92       	push	r12
    3f42:	df 92       	push	r13
    3f44:	ef 92       	push	r14
    3f46:	ff 92       	push	r15
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    3f4c:	df 93       	push	r29
    3f4e:	cf 93       	push	r28
    3f50:	cd b7       	in	r28, 0x3d	; 61
    3f52:	de b7       	in	r29, 0x3e	; 62
    3f54:	c3 55       	subi	r28, 0x53	; 83
    3f56:	d1 40       	sbci	r29, 0x01	; 1
    3f58:	0f b6       	in	r0, 0x3f	; 63
    3f5a:	f8 94       	cli
    3f5c:	de bf       	out	0x3e, r29	; 62
    3f5e:	0f be       	out	0x3f, r0	; 63
    3f60:	cd bf       	out	0x3d, r28	; 61
	 * MOTOR connections are defined on line 57 on main file.
	 * Connect DIO_u8PIN3 with a button to the ground for INTERRUPT 1.
	 * */

	/*Peripherals Initialization*/
	PORT_voidInit();
    3f62:	0e 94 42 14 	call	0x2884	; 0x2884 <PORT_voidInit>
	GIE_voidEnable();
    3f66:	0e 94 a2 12 	call	0x2544	; 0x2544 <GIE_voidEnable>
	EXTI_voidInit();
    3f6a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <EXTI_voidInit>
	CLCD_voidInit();
    3f6e:	0e 94 4c 09 	call	0x1298	; 0x1298 <CLCD_voidInit>
	ADC_voidInit();
    3f72:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_voidInit>

	EXTI_u8SetCallBack(EXTI_u8INT1, &Main_voidInt0ISR);
    3f76:	23 e0       	ldi	r18, 0x03	; 3
    3f78:	35 e3       	ldi	r19, 0x35	; 53
    3f7a:	82 e0       	ldi	r24, 0x02	; 2
    3f7c:	b9 01       	movw	r22, r18
    3f7e:	0e 94 c2 11 	call	0x2384	; 0x2384 <EXTI_u8SetCallBack>

	/*Define variables*/
	uint8 Local_u8Iterator = 0;
    3f82:	fe 01       	movw	r30, r28
    3f84:	e4 5c       	subi	r30, 0xC4	; 196
    3f86:	fe 4f       	sbci	r31, 0xFE	; 254
    3f88:	10 82       	st	Z, r1
	uint8 Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	e5 5c       	subi	r30, 0xC5	; 197
    3f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f90:	8f ef       	ldi	r24, 0xFF	; 255
    3f92:	80 83       	st	Z, r24
	uint8 Local_u8IDIterator = 0;
    3f94:	fe 01       	movw	r30, r28
    3f96:	e6 5c       	subi	r30, 0xC6	; 198
    3f98:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9a:	10 82       	st	Z, r1
	uint8 Local_u8SevenSegmentIterator = 3;
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e7 5c       	subi	r30, 0xC7	; 199
    3fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa2:	83 e0       	ldi	r24, 0x03	; 3
    3fa4:	80 83       	st	Z, r24
	uint8 Local_u8LoginFlag = 0;
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	e8 5c       	subi	r30, 0xC8	; 200
    3faa:	fe 4f       	sbci	r31, 0xFE	; 254
    3fac:	10 82       	st	Z, r1

	uint8 Local_u8DCMotorManage = 0;
    3fae:	fe 01       	movw	r30, r28
    3fb0:	e9 5c       	subi	r30, 0xC9	; 201
    3fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fb4:	10 82       	st	Z, r1
	uint8 Local_u8StepperMotorManage = 0;
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	ea 5c       	subi	r30, 0xCA	; 202
    3fba:	fe 4f       	sbci	r31, 0xFE	; 254
    3fbc:	10 82       	st	Z, r1
	uint8 Local_u8ServoMotorManage = 0;
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	eb 5c       	subi	r30, 0xCB	; 203
    3fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc4:	10 82       	st	Z, r1

	uint8 Local_u8DCMotorDir = 0;
    3fc6:	fe 01       	movw	r30, r28
    3fc8:	ec 5c       	subi	r30, 0xCC	; 204
    3fca:	fe 4f       	sbci	r31, 0xFE	; 254
    3fcc:	10 82       	st	Z, r1
	uint8 Local_u8StepperDir = 0;
    3fce:	fe 01       	movw	r30, r28
    3fd0:	ed 5c       	subi	r30, 0xCD	; 205
    3fd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fd4:	10 82       	st	Z, r1

	uint16 Local_u16StepperAngle = 0;
    3fd6:	fe 01       	movw	r30, r28
    3fd8:	ef 5c       	subi	r30, 0xCF	; 207
    3fda:	fe 4f       	sbci	r31, 0xFE	; 254
    3fdc:	11 82       	std	Z+1, r1	; 0x01
    3fde:	10 82       	st	Z, r1
	uint16 Local_u16ServoAngle = 0;
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	e1 5d       	subi	r30, 0xD1	; 209
    3fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe6:	11 82       	std	Z+1, r1	; 0x01
    3fe8:	10 82       	st	Z, r1
	uint16 Local_u16ServoAngleTicks = 0;
    3fea:	fe 01       	movw	r30, r28
    3fec:	e3 5d       	subi	r30, 0xD3	; 211
    3fee:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff0:	11 82       	std	Z+1, r1	; 0x01
    3ff2:	10 82       	st	Z, r1


	uint16 Local_u16ID = 0;
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	e5 5d       	subi	r30, 0xD5	; 213
    3ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    3ffa:	11 82       	std	Z+1, r1	; 0x01
    3ffc:	10 82       	st	Z, r1
	uint16 Local_u16Password = 0;
    3ffe:	fe 01       	movw	r30, r28
    4000:	e7 5d       	subi	r30, 0xD7	; 215
    4002:	fe 4f       	sbci	r31, 0xFE	; 254
    4004:	11 82       	std	Z+1, r1	; 0x01
    4006:	10 82       	st	Z, r1
	uint16 Local_u16ReversedID = 0;
    4008:	fe 01       	movw	r30, r28
    400a:	e9 5d       	subi	r30, 0xD9	; 217
    400c:	fe 4f       	sbci	r31, 0xFE	; 254
    400e:	11 82       	std	Z+1, r1	; 0x01
    4010:	10 82       	st	Z, r1

	uint16 Local_u16PotentiometerVoltage = 0;
    4012:	fe 01       	movw	r30, r28
    4014:	e3 5c       	subi	r30, 0xC3	; 195
    4016:	fe 4f       	sbci	r31, 0xFE	; 254
    4018:	11 82       	std	Z+1, r1	; 0x01
    401a:	10 82       	st	Z, r1
	uint16 Local_u16TimerTicks = 0;
    401c:	fe 01       	movw	r30, r28
    401e:	eb 5d       	subi	r30, 0xDB	; 219
    4020:	fe 4f       	sbci	r31, 0xFE	; 254
    4022:	11 82       	std	Z+1, r1	; 0x01
    4024:	10 82       	st	Z, r1

	SSD_t Local_ssdtLoginCounter;
	Local_ssdtLoginCounter.Port = DIO_u8PORTC;
    4026:	fe 01       	movw	r30, r28
    4028:	e1 5c       	subi	r30, 0xC1	; 193
    402a:	fe 4f       	sbci	r31, 0xFE	; 254
    402c:	82 e0       	ldi	r24, 0x02	; 2
    402e:	81 83       	std	Z+1, r24	; 0x01
	Local_ssdtLoginCounter.EnablePort = DIO_u8PORTD;
    4030:	fe 01       	movw	r30, r28
    4032:	e1 5c       	subi	r30, 0xC1	; 193
    4034:	fe 4f       	sbci	r31, 0xFE	; 254
    4036:	83 e0       	ldi	r24, 0x03	; 3
    4038:	83 83       	std	Z+3, r24	; 0x03
	Local_ssdtLoginCounter.EnablePin = DIO_u8PIN6;
    403a:	fe 01       	movw	r30, r28
    403c:	e1 5c       	subi	r30, 0xC1	; 193
    403e:	fe 4f       	sbci	r31, 0xFE	; 254
    4040:	86 e0       	ldi	r24, 0x06	; 6
    4042:	84 83       	std	Z+4, r24	; 0x04
	Local_ssdtLoginCounter.LedPin = DIO_u8PIN0;
    4044:	fe 01       	movw	r30, r28
    4046:	e1 5c       	subi	r30, 0xC1	; 193
    4048:	fe 4f       	sbci	r31, 0xFE	; 254
    404a:	12 82       	std	Z+2, r1	; 0x02
	Local_ssdtLoginCounter.Type = SSD_u8CATHODE;
    404c:	fe 01       	movw	r30, r28
    404e:	e1 5c       	subi	r30, 0xC1	; 193
    4050:	fe 4f       	sbci	r31, 0xFE	; 254
    4052:	82 e0       	ldi	r24, 0x02	; 2
    4054:	80 83       	st	Z, r24

	MOTOR_t Local_motortSystemMotor;
	Local_motortSystemMotor.Port = DIO_u8PORTD;
    4056:	fe 01       	movw	r30, r28
    4058:	ec 5b       	subi	r30, 0xBC	; 188
    405a:	fe 4f       	sbci	r31, 0xFE	; 254
    405c:	83 e0       	ldi	r24, 0x03	; 3
    405e:	80 83       	st	Z, r24
	Local_motortSystemMotor.Pin1 = DIO_u8PIN6;
    4060:	fe 01       	movw	r30, r28
    4062:	ec 5b       	subi	r30, 0xBC	; 188
    4064:	fe 4f       	sbci	r31, 0xFE	; 254
    4066:	86 e0       	ldi	r24, 0x06	; 6
    4068:	81 83       	std	Z+1, r24	; 0x01
	Local_motortSystemMotor.Pin2 = DIO_u8PIN7;
    406a:	fe 01       	movw	r30, r28
    406c:	ec 5b       	subi	r30, 0xBC	; 188
    406e:	fe 4f       	sbci	r31, 0xFE	; 254
    4070:	87 e0       	ldi	r24, 0x07	; 7
    4072:	82 83       	std	Z+2, r24	; 0x02
	MOTOR_u8Stop(&Local_motortSystemMotor);
    4074:	ce 01       	movw	r24, r28
    4076:	8c 5b       	subi	r24, 0xBC	; 188
    4078:	9e 4f       	sbci	r25, 0xFE	; 254
    407a:	0e 94 17 14 	call	0x282e	; 0x282e <MOTOR_u8Stop>

	STEPPER_t Local_steppertMain;
	Local_steppertMain.Port = DIO_u8PORTD;
    407e:	fe 01       	movw	r30, r28
    4080:	e9 5b       	subi	r30, 0xB9	; 185
    4082:	fe 4f       	sbci	r31, 0xFE	; 254
    4084:	83 e0       	ldi	r24, 0x03	; 3
    4086:	80 83       	st	Z, r24
	Local_steppertMain.PinkPin = DIO_u8PIN4;
    4088:	fe 01       	movw	r30, r28
    408a:	e9 5b       	subi	r30, 0xB9	; 185
    408c:	fe 4f       	sbci	r31, 0xFE	; 254
    408e:	84 e0       	ldi	r24, 0x04	; 4
    4090:	82 83       	std	Z+2, r24	; 0x02
	Local_steppertMain.BluePin = DIO_u8PIN2;
    4092:	fe 01       	movw	r30, r28
    4094:	e9 5b       	subi	r30, 0xB9	; 185
    4096:	fe 4f       	sbci	r31, 0xFE	; 254
    4098:	82 e0       	ldi	r24, 0x02	; 2
    409a:	81 83       	std	Z+1, r24	; 0x01
	Local_steppertMain.YellowPin = DIO_u8PIN1;
    409c:	fe 01       	movw	r30, r28
    409e:	e9 5b       	subi	r30, 0xB9	; 185
    40a0:	fe 4f       	sbci	r31, 0xFE	; 254
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	83 83       	std	Z+3, r24	; 0x03
	Local_steppertMain.OrangePin = DIO_u8PIN0;
    40a6:	fe 01       	movw	r30, r28
    40a8:	e9 5b       	subi	r30, 0xB9	; 185
    40aa:	fe 4f       	sbci	r31, 0xFE	; 254
    40ac:	14 82       	std	Z+4, r1	; 0x04

	/*Hamoksha welcome the user*/
	for(Local_u8Iterator = 0; Local_u8Iterator < 16; Local_u8Iterator++)
    40ae:	fe 01       	movw	r30, r28
    40b0:	e4 5c       	subi	r30, 0xC4	; 196
    40b2:	fe 4f       	sbci	r31, 0xFE	; 254
    40b4:	10 82       	st	Z, r1
    40b6:	d2 c0       	rjmp	.+420    	; 0x425c <main+0x320>
	{
		CLCD_voidClearDisplay();
    40b8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
		CLCD_voidSendSpecialCharacter(Local_u8Hamoksha1, 0, Local_u8Iterator, 0);
    40bc:	8e ec       	ldi	r24, 0xCE	; 206
    40be:	92 e0       	ldi	r25, 0x02	; 2
    40c0:	fe 01       	movw	r30, r28
    40c2:	e4 5c       	subi	r30, 0xC4	; 196
    40c4:	fe 4f       	sbci	r31, 0xFE	; 254
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	40 81       	ld	r20, Z
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	0e 94 c3 0b 	call	0x1786	; 0x1786 <CLCD_voidSendSpecialCharacter>
		CLCD_voidSendSpecialCharacter(Local_u8Hamoksha2, 1, Local_u8Iterator, 1);
    40d0:	86 ed       	ldi	r24, 0xD6	; 214
    40d2:	92 e0       	ldi	r25, 0x02	; 2
    40d4:	fe 01       	movw	r30, r28
    40d6:	e4 5c       	subi	r30, 0xC4	; 196
    40d8:	fe 4f       	sbci	r31, 0xFE	; 254
    40da:	61 e0       	ldi	r22, 0x01	; 1
    40dc:	40 81       	ld	r20, Z
    40de:	21 e0       	ldi	r18, 0x01	; 1
    40e0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <CLCD_voidSendSpecialCharacter>
    40e4:	fe 01       	movw	r30, r28
    40e6:	ef 5d       	subi	r30, 0xDF	; 223
    40e8:	fe 4f       	sbci	r31, 0xFE	; 254
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	a8 ec       	ldi	r26, 0xC8	; 200
    40f0:	b2 e4       	ldi	r27, 0x42	; 66
    40f2:	80 83       	st	Z, r24
    40f4:	91 83       	std	Z+1, r25	; 0x01
    40f6:	a2 83       	std	Z+2, r26	; 0x02
    40f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40fa:	8e 01       	movw	r16, r28
    40fc:	03 5e       	subi	r16, 0xE3	; 227
    40fe:	1e 4f       	sbci	r17, 0xFE	; 254
    4100:	fe 01       	movw	r30, r28
    4102:	ef 5d       	subi	r30, 0xDF	; 223
    4104:	fe 4f       	sbci	r31, 0xFE	; 254
    4106:	60 81       	ld	r22, Z
    4108:	71 81       	ldd	r23, Z+1	; 0x01
    410a:	82 81       	ldd	r24, Z+2	; 0x02
    410c:	93 81       	ldd	r25, Z+3	; 0x03
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	4a ef       	ldi	r20, 0xFA	; 250
    4114:	54 e4       	ldi	r21, 0x44	; 68
    4116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411a:	dc 01       	movw	r26, r24
    411c:	cb 01       	movw	r24, r22
    411e:	f8 01       	movw	r30, r16
    4120:	80 83       	st	Z, r24
    4122:	91 83       	std	Z+1, r25	; 0x01
    4124:	a2 83       	std	Z+2, r26	; 0x02
    4126:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4128:	fe 01       	movw	r30, r28
    412a:	e3 5e       	subi	r30, 0xE3	; 227
    412c:	fe 4f       	sbci	r31, 0xFE	; 254
    412e:	60 81       	ld	r22, Z
    4130:	71 81       	ldd	r23, Z+1	; 0x01
    4132:	82 81       	ldd	r24, Z+2	; 0x02
    4134:	93 81       	ldd	r25, Z+3	; 0x03
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	40 e8       	ldi	r20, 0x80	; 128
    413c:	5f e3       	ldi	r21, 0x3F	; 63
    413e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4142:	88 23       	and	r24, r24
    4144:	44 f4       	brge	.+16     	; 0x4156 <main+0x21a>
		__ticks = 1;
    4146:	fe 01       	movw	r30, r28
    4148:	e5 5e       	subi	r30, 0xE5	; 229
    414a:	fe 4f       	sbci	r31, 0xFE	; 254
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	91 83       	std	Z+1, r25	; 0x01
    4152:	80 83       	st	Z, r24
    4154:	64 c0       	rjmp	.+200    	; 0x421e <main+0x2e2>
	else if (__tmp > 65535)
    4156:	fe 01       	movw	r30, r28
    4158:	e3 5e       	subi	r30, 0xE3	; 227
    415a:	fe 4f       	sbci	r31, 0xFE	; 254
    415c:	60 81       	ld	r22, Z
    415e:	71 81       	ldd	r23, Z+1	; 0x01
    4160:	82 81       	ldd	r24, Z+2	; 0x02
    4162:	93 81       	ldd	r25, Z+3	; 0x03
    4164:	20 e0       	ldi	r18, 0x00	; 0
    4166:	3f ef       	ldi	r19, 0xFF	; 255
    4168:	4f e7       	ldi	r20, 0x7F	; 127
    416a:	57 e4       	ldi	r21, 0x47	; 71
    416c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4170:	18 16       	cp	r1, r24
    4172:	0c f0       	brlt	.+2      	; 0x4176 <main+0x23a>
    4174:	43 c0       	rjmp	.+134    	; 0x41fc <main+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4176:	fe 01       	movw	r30, r28
    4178:	ef 5d       	subi	r30, 0xDF	; 223
    417a:	fe 4f       	sbci	r31, 0xFE	; 254
    417c:	60 81       	ld	r22, Z
    417e:	71 81       	ldd	r23, Z+1	; 0x01
    4180:	82 81       	ldd	r24, Z+2	; 0x02
    4182:	93 81       	ldd	r25, Z+3	; 0x03
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	40 e2       	ldi	r20, 0x20	; 32
    418a:	51 e4       	ldi	r21, 0x41	; 65
    418c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	8e 01       	movw	r16, r28
    4196:	05 5e       	subi	r16, 0xE5	; 229
    4198:	1e 4f       	sbci	r17, 0xFE	; 254
    419a:	bc 01       	movw	r22, r24
    419c:	cd 01       	movw	r24, r26
    419e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	f8 01       	movw	r30, r16
    41a8:	91 83       	std	Z+1, r25	; 0x01
    41aa:	80 83       	st	Z, r24
    41ac:	1f c0       	rjmp	.+62     	; 0x41ec <main+0x2b0>
    41ae:	fe 01       	movw	r30, r28
    41b0:	e7 5e       	subi	r30, 0xE7	; 231
    41b2:	fe 4f       	sbci	r31, 0xFE	; 254
    41b4:	88 ec       	ldi	r24, 0xC8	; 200
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	91 83       	std	Z+1, r25	; 0x01
    41ba:	80 83       	st	Z, r24
    41bc:	fe 01       	movw	r30, r28
    41be:	e7 5e       	subi	r30, 0xE7	; 231
    41c0:	fe 4f       	sbci	r31, 0xFE	; 254
    41c2:	80 81       	ld	r24, Z
    41c4:	91 81       	ldd	r25, Z+1	; 0x01
    41c6:	01 97       	sbiw	r24, 0x01	; 1
    41c8:	f1 f7       	brne	.-4      	; 0x41c6 <main+0x28a>
    41ca:	fe 01       	movw	r30, r28
    41cc:	e7 5e       	subi	r30, 0xE7	; 231
    41ce:	fe 4f       	sbci	r31, 0xFE	; 254
    41d0:	91 83       	std	Z+1, r25	; 0x01
    41d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d4:	de 01       	movw	r26, r28
    41d6:	a5 5e       	subi	r26, 0xE5	; 229
    41d8:	be 4f       	sbci	r27, 0xFE	; 254
    41da:	fe 01       	movw	r30, r28
    41dc:	e5 5e       	subi	r30, 0xE5	; 229
    41de:	fe 4f       	sbci	r31, 0xFE	; 254
    41e0:	80 81       	ld	r24, Z
    41e2:	91 81       	ldd	r25, Z+1	; 0x01
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	11 96       	adiw	r26, 0x01	; 1
    41e8:	9c 93       	st	X, r25
    41ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ec:	fe 01       	movw	r30, r28
    41ee:	e5 5e       	subi	r30, 0xE5	; 229
    41f0:	fe 4f       	sbci	r31, 0xFE	; 254
    41f2:	80 81       	ld	r24, Z
    41f4:	91 81       	ldd	r25, Z+1	; 0x01
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	d1 f6       	brne	.-76     	; 0x41ae <main+0x272>
    41fa:	27 c0       	rjmp	.+78     	; 0x424a <main+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fc:	8e 01       	movw	r16, r28
    41fe:	05 5e       	subi	r16, 0xE5	; 229
    4200:	1e 4f       	sbci	r17, 0xFE	; 254
    4202:	fe 01       	movw	r30, r28
    4204:	e3 5e       	subi	r30, 0xE3	; 227
    4206:	fe 4f       	sbci	r31, 0xFE	; 254
    4208:	60 81       	ld	r22, Z
    420a:	71 81       	ldd	r23, Z+1	; 0x01
    420c:	82 81       	ldd	r24, Z+2	; 0x02
    420e:	93 81       	ldd	r25, Z+3	; 0x03
    4210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4214:	dc 01       	movw	r26, r24
    4216:	cb 01       	movw	r24, r22
    4218:	f8 01       	movw	r30, r16
    421a:	91 83       	std	Z+1, r25	; 0x01
    421c:	80 83       	st	Z, r24
    421e:	de 01       	movw	r26, r28
    4220:	a9 5e       	subi	r26, 0xE9	; 233
    4222:	be 4f       	sbci	r27, 0xFE	; 254
    4224:	fe 01       	movw	r30, r28
    4226:	e5 5e       	subi	r30, 0xE5	; 229
    4228:	fe 4f       	sbci	r31, 0xFE	; 254
    422a:	80 81       	ld	r24, Z
    422c:	91 81       	ldd	r25, Z+1	; 0x01
    422e:	8d 93       	st	X+, r24
    4230:	9c 93       	st	X, r25
    4232:	fe 01       	movw	r30, r28
    4234:	e9 5e       	subi	r30, 0xE9	; 233
    4236:	fe 4f       	sbci	r31, 0xFE	; 254
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	f1 f7       	brne	.-4      	; 0x423c <main+0x300>
    4240:	fe 01       	movw	r30, r28
    4242:	e9 5e       	subi	r30, 0xE9	; 233
    4244:	fe 4f       	sbci	r31, 0xFE	; 254
    4246:	91 83       	std	Z+1, r25	; 0x01
    4248:	80 83       	st	Z, r24
	Local_steppertMain.BluePin = DIO_u8PIN2;
	Local_steppertMain.YellowPin = DIO_u8PIN1;
	Local_steppertMain.OrangePin = DIO_u8PIN0;

	/*Hamoksha welcome the user*/
	for(Local_u8Iterator = 0; Local_u8Iterator < 16; Local_u8Iterator++)
    424a:	de 01       	movw	r26, r28
    424c:	a4 5c       	subi	r26, 0xC4	; 196
    424e:	be 4f       	sbci	r27, 0xFE	; 254
    4250:	fe 01       	movw	r30, r28
    4252:	e4 5c       	subi	r30, 0xC4	; 196
    4254:	fe 4f       	sbci	r31, 0xFE	; 254
    4256:	80 81       	ld	r24, Z
    4258:	8f 5f       	subi	r24, 0xFF	; 255
    425a:	8c 93       	st	X, r24
    425c:	fe 01       	movw	r30, r28
    425e:	e4 5c       	subi	r30, 0xC4	; 196
    4260:	fe 4f       	sbci	r31, 0xFE	; 254
    4262:	80 81       	ld	r24, Z
    4264:	80 31       	cpi	r24, 0x10	; 16
    4266:	08 f4       	brcc	.+2      	; 0x426a <main+0x32e>
    4268:	27 cf       	rjmp	.-434    	; 0x40b8 <main+0x17c>
		CLCD_voidClearDisplay();
		CLCD_voidSendSpecialCharacter(Local_u8Hamoksha1, 0, Local_u8Iterator, 0);
		CLCD_voidSendSpecialCharacter(Local_u8Hamoksha2, 1, Local_u8Iterator, 1);
		_delay_ms(100);
	}
	CLCD_u8GoToXY(1, 0);
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	60 e0       	ldi	r22, 0x00	; 0
    426e:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
	CLCD_u8SendString("Welcome Mido!");
    4272:	86 e6       	ldi	r24, 0x66	; 102
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
    427a:	fe 01       	movw	r30, r28
    427c:	ed 5e       	subi	r30, 0xED	; 237
    427e:	fe 4f       	sbci	r31, 0xFE	; 254
    4280:	80 e0       	ldi	r24, 0x00	; 0
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	aa e7       	ldi	r26, 0x7A	; 122
    4286:	b4 e4       	ldi	r27, 0x44	; 68
    4288:	80 83       	st	Z, r24
    428a:	91 83       	std	Z+1, r25	; 0x01
    428c:	a2 83       	std	Z+2, r26	; 0x02
    428e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4290:	8e 01       	movw	r16, r28
    4292:	01 5f       	subi	r16, 0xF1	; 241
    4294:	1e 4f       	sbci	r17, 0xFE	; 254
    4296:	fe 01       	movw	r30, r28
    4298:	ed 5e       	subi	r30, 0xED	; 237
    429a:	fe 4f       	sbci	r31, 0xFE	; 254
    429c:	60 81       	ld	r22, Z
    429e:	71 81       	ldd	r23, Z+1	; 0x01
    42a0:	82 81       	ldd	r24, Z+2	; 0x02
    42a2:	93 81       	ldd	r25, Z+3	; 0x03
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	4a ef       	ldi	r20, 0xFA	; 250
    42aa:	54 e4       	ldi	r21, 0x44	; 68
    42ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	f8 01       	movw	r30, r16
    42b6:	80 83       	st	Z, r24
    42b8:	91 83       	std	Z+1, r25	; 0x01
    42ba:	a2 83       	std	Z+2, r26	; 0x02
    42bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42be:	fe 01       	movw	r30, r28
    42c0:	e1 5f       	subi	r30, 0xF1	; 241
    42c2:	fe 4f       	sbci	r31, 0xFE	; 254
    42c4:	60 81       	ld	r22, Z
    42c6:	71 81       	ldd	r23, Z+1	; 0x01
    42c8:	82 81       	ldd	r24, Z+2	; 0x02
    42ca:	93 81       	ldd	r25, Z+3	; 0x03
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	40 e8       	ldi	r20, 0x80	; 128
    42d2:	5f e3       	ldi	r21, 0x3F	; 63
    42d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42d8:	88 23       	and	r24, r24
    42da:	44 f4       	brge	.+16     	; 0x42ec <main+0x3b0>
		__ticks = 1;
    42dc:	fe 01       	movw	r30, r28
    42de:	e3 5f       	subi	r30, 0xF3	; 243
    42e0:	fe 4f       	sbci	r31, 0xFE	; 254
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	91 83       	std	Z+1, r25	; 0x01
    42e8:	80 83       	st	Z, r24
    42ea:	64 c0       	rjmp	.+200    	; 0x43b4 <main+0x478>
	else if (__tmp > 65535)
    42ec:	fe 01       	movw	r30, r28
    42ee:	e1 5f       	subi	r30, 0xF1	; 241
    42f0:	fe 4f       	sbci	r31, 0xFE	; 254
    42f2:	60 81       	ld	r22, Z
    42f4:	71 81       	ldd	r23, Z+1	; 0x01
    42f6:	82 81       	ldd	r24, Z+2	; 0x02
    42f8:	93 81       	ldd	r25, Z+3	; 0x03
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	3f ef       	ldi	r19, 0xFF	; 255
    42fe:	4f e7       	ldi	r20, 0x7F	; 127
    4300:	57 e4       	ldi	r21, 0x47	; 71
    4302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4306:	18 16       	cp	r1, r24
    4308:	0c f0       	brlt	.+2      	; 0x430c <main+0x3d0>
    430a:	43 c0       	rjmp	.+134    	; 0x4392 <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    430c:	fe 01       	movw	r30, r28
    430e:	ed 5e       	subi	r30, 0xED	; 237
    4310:	fe 4f       	sbci	r31, 0xFE	; 254
    4312:	60 81       	ld	r22, Z
    4314:	71 81       	ldd	r23, Z+1	; 0x01
    4316:	82 81       	ldd	r24, Z+2	; 0x02
    4318:	93 81       	ldd	r25, Z+3	; 0x03
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	40 e2       	ldi	r20, 0x20	; 32
    4320:	51 e4       	ldi	r21, 0x41	; 65
    4322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	8e 01       	movw	r16, r28
    432c:	03 5f       	subi	r16, 0xF3	; 243
    432e:	1e 4f       	sbci	r17, 0xFE	; 254
    4330:	bc 01       	movw	r22, r24
    4332:	cd 01       	movw	r24, r26
    4334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	f8 01       	movw	r30, r16
    433e:	91 83       	std	Z+1, r25	; 0x01
    4340:	80 83       	st	Z, r24
    4342:	1f c0       	rjmp	.+62     	; 0x4382 <main+0x446>
    4344:	fe 01       	movw	r30, r28
    4346:	e5 5f       	subi	r30, 0xF5	; 245
    4348:	fe 4f       	sbci	r31, 0xFE	; 254
    434a:	88 ec       	ldi	r24, 0xC8	; 200
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	91 83       	std	Z+1, r25	; 0x01
    4350:	80 83       	st	Z, r24
    4352:	fe 01       	movw	r30, r28
    4354:	e5 5f       	subi	r30, 0xF5	; 245
    4356:	fe 4f       	sbci	r31, 0xFE	; 254
    4358:	80 81       	ld	r24, Z
    435a:	91 81       	ldd	r25, Z+1	; 0x01
    435c:	01 97       	sbiw	r24, 0x01	; 1
    435e:	f1 f7       	brne	.-4      	; 0x435c <main+0x420>
    4360:	fe 01       	movw	r30, r28
    4362:	e5 5f       	subi	r30, 0xF5	; 245
    4364:	fe 4f       	sbci	r31, 0xFE	; 254
    4366:	91 83       	std	Z+1, r25	; 0x01
    4368:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436a:	de 01       	movw	r26, r28
    436c:	a3 5f       	subi	r26, 0xF3	; 243
    436e:	be 4f       	sbci	r27, 0xFE	; 254
    4370:	fe 01       	movw	r30, r28
    4372:	e3 5f       	subi	r30, 0xF3	; 243
    4374:	fe 4f       	sbci	r31, 0xFE	; 254
    4376:	80 81       	ld	r24, Z
    4378:	91 81       	ldd	r25, Z+1	; 0x01
    437a:	01 97       	sbiw	r24, 0x01	; 1
    437c:	11 96       	adiw	r26, 0x01	; 1
    437e:	9c 93       	st	X, r25
    4380:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4382:	fe 01       	movw	r30, r28
    4384:	e3 5f       	subi	r30, 0xF3	; 243
    4386:	fe 4f       	sbci	r31, 0xFE	; 254
    4388:	80 81       	ld	r24, Z
    438a:	91 81       	ldd	r25, Z+1	; 0x01
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	d1 f6       	brne	.-76     	; 0x4344 <main+0x408>
    4390:	2b c4       	rjmp	.+2134   	; 0x4be8 <main+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4392:	8e 01       	movw	r16, r28
    4394:	03 5f       	subi	r16, 0xF3	; 243
    4396:	1e 4f       	sbci	r17, 0xFE	; 254
    4398:	fe 01       	movw	r30, r28
    439a:	e1 5f       	subi	r30, 0xF1	; 241
    439c:	fe 4f       	sbci	r31, 0xFE	; 254
    439e:	60 81       	ld	r22, Z
    43a0:	71 81       	ldd	r23, Z+1	; 0x01
    43a2:	82 81       	ldd	r24, Z+2	; 0x02
    43a4:	93 81       	ldd	r25, Z+3	; 0x03
    43a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	f8 01       	movw	r30, r16
    43b0:	91 83       	std	Z+1, r25	; 0x01
    43b2:	80 83       	st	Z, r24
    43b4:	de 01       	movw	r26, r28
    43b6:	a7 5f       	subi	r26, 0xF7	; 247
    43b8:	be 4f       	sbci	r27, 0xFE	; 254
    43ba:	fe 01       	movw	r30, r28
    43bc:	e3 5f       	subi	r30, 0xF3	; 243
    43be:	fe 4f       	sbci	r31, 0xFE	; 254
    43c0:	80 81       	ld	r24, Z
    43c2:	91 81       	ldd	r25, Z+1	; 0x01
    43c4:	11 96       	adiw	r26, 0x01	; 1
    43c6:	9c 93       	st	X, r25
    43c8:	8e 93       	st	-X, r24
    43ca:	fe 01       	movw	r30, r28
    43cc:	e7 5f       	subi	r30, 0xF7	; 247
    43ce:	fe 4f       	sbci	r31, 0xFE	; 254
    43d0:	80 81       	ld	r24, Z
    43d2:	91 81       	ldd	r25, Z+1	; 0x01
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	f1 f7       	brne	.-4      	; 0x43d4 <main+0x498>
    43d8:	fe 01       	movw	r30, r28
    43da:	e7 5f       	subi	r30, 0xF7	; 247
    43dc:	fe 4f       	sbci	r31, 0xFE	; 254
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	80 83       	st	Z, r24
    43e2:	02 c4       	rjmp	.+2052   	; 0x4be8 <main+0xcac>
	while(1)
	{

		while(Local_u8SevenSegmentIterator != 0)
		{
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    43e4:	fe 01       	movw	r30, r28
    43e6:	e4 5c       	subi	r30, 0xC4	; 196
    43e8:	fe 4f       	sbci	r31, 0xFE	; 254
    43ea:	10 82       	st	Z, r1
    43ec:	1d c0       	rjmp	.+58     	; 0x4428 <main+0x4ec>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
    43ee:	88 e8       	ldi	r24, 0x88	; 136
    43f0:	93 e0       	ldi	r25, 0x03	; 3
    43f2:	fe 01       	movw	r30, r28
    43f4:	e4 5c       	subi	r30, 0xC4	; 196
    43f6:	fe 4f       	sbci	r31, 0xFE	; 254
    43f8:	62 e0       	ldi	r22, 0x02	; 2
    43fa:	40 81       	ld	r20, Z
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	0e 94 c3 0b 	call	0x1786	; 0x1786 <CLCD_voidSendSpecialCharacter>
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 1);
    4402:	88 e8       	ldi	r24, 0x88	; 136
    4404:	93 e0       	ldi	r25, 0x03	; 3
    4406:	fe 01       	movw	r30, r28
    4408:	e4 5c       	subi	r30, 0xC4	; 196
    440a:	fe 4f       	sbci	r31, 0xFE	; 254
    440c:	62 e0       	ldi	r22, 0x02	; 2
    440e:	40 81       	ld	r20, Z
    4410:	21 e0       	ldi	r18, 0x01	; 1
    4412:	0e 94 c3 0b 	call	0x1786	; 0x1786 <CLCD_voidSendSpecialCharacter>
	while(1)
	{

		while(Local_u8SevenSegmentIterator != 0)
		{
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    4416:	de 01       	movw	r26, r28
    4418:	a4 5c       	subi	r26, 0xC4	; 196
    441a:	be 4f       	sbci	r27, 0xFE	; 254
    441c:	fe 01       	movw	r30, r28
    441e:	e4 5c       	subi	r30, 0xC4	; 196
    4420:	fe 4f       	sbci	r31, 0xFE	; 254
    4422:	80 81       	ld	r24, Z
    4424:	8f 5f       	subi	r24, 0xFF	; 255
    4426:	8c 93       	st	X, r24
    4428:	fe 01       	movw	r30, r28
    442a:	e4 5c       	subi	r30, 0xC4	; 196
    442c:	fe 4f       	sbci	r31, 0xFE	; 254
    442e:	80 81       	ld	r24, Z
    4430:	8e 30       	cpi	r24, 0x0E	; 14
    4432:	e8 f2       	brcs	.-70     	; 0x43ee <main+0x4b2>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 1);
			}

			CLCD_u8GoToXY(0, 0);
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	60 e0       	ldi	r22, 0x00	; 0
    4438:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
			CLCD_u8SendString("ID: ");
    443c:	84 e7       	ldi	r24, 0x74	; 116
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
			CLCD_u8GoToXY(0, 1);
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	61 e0       	ldi	r22, 0x01	; 1
    4448:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
			CLCD_u8SendString("Password: ");
    444c:	89 e7       	ldi	r24, 0x79	; 121
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

			/*Print Login times remained to seven segment*/
			SSD_u8SetNumber(&Local_ssdtLoginCounter, Local_u8SevenSegmentIterator);
    4454:	ce 01       	movw	r24, r28
    4456:	81 5c       	subi	r24, 0xC1	; 193
    4458:	9e 4f       	sbci	r25, 0xFE	; 254
    445a:	fe 01       	movw	r30, r28
    445c:	e7 5c       	subi	r30, 0xC7	; 199
    445e:	fe 4f       	sbci	r31, 0xFE	; 254
    4460:	60 81       	ld	r22, Z
    4462:	0e 94 67 14 	call	0x28ce	; 0x28ce <SSD_u8SetNumber>

			/*Scan ID from the user*/
			Local_u8IDIterator = 0;
    4466:	fe 01       	movw	r30, r28
    4468:	e6 5c       	subi	r30, 0xC6	; 198
    446a:	fe 4f       	sbci	r31, 0xFE	; 254
    446c:	10 82       	st	Z, r1
			CLCD_u8GoToXY(4, 0);
    446e:	84 e0       	ldi	r24, 0x04	; 4
    4470:	60 e0       	ldi	r22, 0x00	; 0
    4472:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
    4476:	51 c0       	rjmp	.+162    	; 0x451a <main+0x5de>

			while(Local_u8IDIterator != 4)
			{
				while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
				{
					Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    4478:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_u8GetPressedKey>
    447c:	fe 01       	movw	r30, r28
    447e:	e5 5c       	subi	r30, 0xC5	; 197
    4480:	fe 4f       	sbci	r31, 0xFE	; 254
    4482:	80 83       	st	Z, r24
			Local_u8IDIterator = 0;
			CLCD_u8GoToXY(4, 0);

			while(Local_u8IDIterator != 4)
			{
				while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    4484:	fe 01       	movw	r30, r28
    4486:	e5 5c       	subi	r30, 0xC5	; 197
    4488:	fe 4f       	sbci	r31, 0xFE	; 254
    448a:	80 81       	ld	r24, Z
    448c:	8f 3f       	cpi	r24, 0xFF	; 255
    448e:	a1 f3       	breq	.-24     	; 0x4478 <main+0x53c>
				{
					Local_u8PressedKey = KEYPAD_u8GetPressedKey();
				}

				switch(Local_u8PressedKey)
    4490:	fe 01       	movw	r30, r28
    4492:	e5 5c       	subi	r30, 0xC5	; 197
    4494:	fe 4f       	sbci	r31, 0xFE	; 254
    4496:	80 81       	ld	r24, Z
    4498:	88 2f       	mov	r24, r24
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	8b 30       	cpi	r24, 0x0B	; 11
    449e:	91 05       	cpc	r25, r1
    44a0:	b9 f1       	breq	.+110    	; 0x4510 <main+0x5d4>
				{
				default:
					CLCD_voidSendDecimalNumber(Local_u8PressedKey);
    44a2:	fe 01       	movw	r30, r28
    44a4:	e5 5c       	subi	r30, 0xC5	; 197
    44a6:	fe 4f       	sbci	r31, 0xFE	; 254
    44a8:	80 81       	ld	r24, Z
    44aa:	88 2f       	mov	r24, r24
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	a0 e0       	ldi	r26, 0x00	; 0
    44b0:	b0 e0       	ldi	r27, 0x00	; 0
    44b2:	bc 01       	movw	r22, r24
    44b4:	cd 01       	movw	r24, r26
    44b6:	0e 94 2d 0a 	call	0x145a	; 0x145a <CLCD_voidSendDecimalNumber>
					Local_u16ID = Local_u8PressedKey + Local_u16ID * 10;
    44ba:	fe 01       	movw	r30, r28
    44bc:	e5 5c       	subi	r30, 0xC5	; 197
    44be:	fe 4f       	sbci	r31, 0xFE	; 254
    44c0:	80 81       	ld	r24, Z
    44c2:	48 2f       	mov	r20, r24
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	fe 01       	movw	r30, r28
    44c8:	e5 5d       	subi	r30, 0xD5	; 213
    44ca:	fe 4f       	sbci	r31, 0xFE	; 254
    44cc:	80 81       	ld	r24, Z
    44ce:	91 81       	ldd	r25, Z+1	; 0x01
    44d0:	9c 01       	movw	r18, r24
    44d2:	22 0f       	add	r18, r18
    44d4:	33 1f       	adc	r19, r19
    44d6:	c9 01       	movw	r24, r18
    44d8:	88 0f       	add	r24, r24
    44da:	99 1f       	adc	r25, r25
    44dc:	88 0f       	add	r24, r24
    44de:	99 1f       	adc	r25, r25
    44e0:	82 0f       	add	r24, r18
    44e2:	93 1f       	adc	r25, r19
    44e4:	fe 01       	movw	r30, r28
    44e6:	e5 5d       	subi	r30, 0xD5	; 213
    44e8:	fe 4f       	sbci	r31, 0xFE	; 254
    44ea:	84 0f       	add	r24, r20
    44ec:	95 1f       	adc	r25, r21
    44ee:	91 83       	std	Z+1, r25	; 0x01
    44f0:	80 83       	st	Z, r24
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    44f2:	fe 01       	movw	r30, r28
    44f4:	e5 5c       	subi	r30, 0xC5	; 197
    44f6:	fe 4f       	sbci	r31, 0xFE	; 254
    44f8:	8f ef       	ldi	r24, 0xFF	; 255
    44fa:	80 83       	st	Z, r24
					Local_u8IDIterator++;
    44fc:	de 01       	movw	r26, r28
    44fe:	a6 5c       	subi	r26, 0xC6	; 198
    4500:	be 4f       	sbci	r27, 0xFE	; 254
    4502:	fe 01       	movw	r30, r28
    4504:	e6 5c       	subi	r30, 0xC6	; 198
    4506:	fe 4f       	sbci	r31, 0xFE	; 254
    4508:	80 81       	ld	r24, Z
    450a:	8f 5f       	subi	r24, 0xFF	; 255
    450c:	8c 93       	st	X, r24
    450e:	05 c0       	rjmp	.+10     	; 0x451a <main+0x5de>
					break;
				case 11:
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    4510:	fe 01       	movw	r30, r28
    4512:	e5 5c       	subi	r30, 0xC5	; 197
    4514:	fe 4f       	sbci	r31, 0xFE	; 254
    4516:	8f ef       	ldi	r24, 0xFF	; 255
    4518:	80 83       	st	Z, r24

			/*Scan ID from the user*/
			Local_u8IDIterator = 0;
			CLCD_u8GoToXY(4, 0);

			while(Local_u8IDIterator != 4)
    451a:	fe 01       	movw	r30, r28
    451c:	e6 5c       	subi	r30, 0xC6	; 198
    451e:	fe 4f       	sbci	r31, 0xFE	; 254
    4520:	80 81       	ld	r24, Z
    4522:	84 30       	cpi	r24, 0x04	; 4
    4524:	09 f0       	breq	.+2      	; 0x4528 <main+0x5ec>
    4526:	ae cf       	rjmp	.-164    	; 0x4484 <main+0x548>
					break;
				}
			}

			/*Scan Password from the user*/
			Local_u8IDIterator = 0;
    4528:	fe 01       	movw	r30, r28
    452a:	e6 5c       	subi	r30, 0xC6	; 198
    452c:	fe 4f       	sbci	r31, 0xFE	; 254
    452e:	10 82       	st	Z, r1
			CLCD_u8GoToXY(10, 1);
    4530:	8a e0       	ldi	r24, 0x0A	; 10
    4532:	61 e0       	ldi	r22, 0x01	; 1
    4534:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
    4538:	10 c1       	rjmp	.+544    	; 0x475a <main+0x81e>

			while(Local_u8IDIterator != 4)
			{
				while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
				{
					Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    453a:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_u8GetPressedKey>
    453e:	fe 01       	movw	r30, r28
    4540:	e5 5c       	subi	r30, 0xC5	; 197
    4542:	fe 4f       	sbci	r31, 0xFE	; 254
    4544:	80 83       	st	Z, r24
			Local_u8IDIterator = 0;
			CLCD_u8GoToXY(10, 1);

			while(Local_u8IDIterator != 4)
			{
				while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    4546:	fe 01       	movw	r30, r28
    4548:	e5 5c       	subi	r30, 0xC5	; 197
    454a:	fe 4f       	sbci	r31, 0xFE	; 254
    454c:	80 81       	ld	r24, Z
    454e:	8f 3f       	cpi	r24, 0xFF	; 255
    4550:	a1 f3       	breq	.-24     	; 0x453a <main+0x5fe>
				{
					Local_u8PressedKey = KEYPAD_u8GetPressedKey();
				}
				switch(Local_u8PressedKey)
    4552:	fe 01       	movw	r30, r28
    4554:	e5 5c       	subi	r30, 0xC5	; 197
    4556:	fe 4f       	sbci	r31, 0xFE	; 254
    4558:	80 81       	ld	r24, Z
    455a:	88 2f       	mov	r24, r24
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	8b 30       	cpi	r24, 0x0B	; 11
    4560:	91 05       	cpc	r25, r1
    4562:	09 f4       	brne	.+2      	; 0x4566 <main+0x62a>
    4564:	f5 c0       	rjmp	.+490    	; 0x4750 <main+0x814>
				{
				default:
					CLCD_voidSendDecimalNumber(Local_u8PressedKey);
    4566:	fe 01       	movw	r30, r28
    4568:	e5 5c       	subi	r30, 0xC5	; 197
    456a:	fe 4f       	sbci	r31, 0xFE	; 254
    456c:	80 81       	ld	r24, Z
    456e:	88 2f       	mov	r24, r24
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	a0 e0       	ldi	r26, 0x00	; 0
    4574:	b0 e0       	ldi	r27, 0x00	; 0
    4576:	bc 01       	movw	r22, r24
    4578:	cd 01       	movw	r24, r26
    457a:	0e 94 2d 0a 	call	0x145a	; 0x145a <CLCD_voidSendDecimalNumber>
					Local_u16Password = Local_u8PressedKey + Local_u16Password * 10;
    457e:	fe 01       	movw	r30, r28
    4580:	e5 5c       	subi	r30, 0xC5	; 197
    4582:	fe 4f       	sbci	r31, 0xFE	; 254
    4584:	80 81       	ld	r24, Z
    4586:	48 2f       	mov	r20, r24
    4588:	50 e0       	ldi	r21, 0x00	; 0
    458a:	fe 01       	movw	r30, r28
    458c:	e7 5d       	subi	r30, 0xD7	; 215
    458e:	fe 4f       	sbci	r31, 0xFE	; 254
    4590:	80 81       	ld	r24, Z
    4592:	91 81       	ldd	r25, Z+1	; 0x01
    4594:	9c 01       	movw	r18, r24
    4596:	22 0f       	add	r18, r18
    4598:	33 1f       	adc	r19, r19
    459a:	c9 01       	movw	r24, r18
    459c:	88 0f       	add	r24, r24
    459e:	99 1f       	adc	r25, r25
    45a0:	88 0f       	add	r24, r24
    45a2:	99 1f       	adc	r25, r25
    45a4:	82 0f       	add	r24, r18
    45a6:	93 1f       	adc	r25, r19
    45a8:	fe 01       	movw	r30, r28
    45aa:	e7 5d       	subi	r30, 0xD7	; 215
    45ac:	fe 4f       	sbci	r31, 0xFE	; 254
    45ae:	84 0f       	add	r24, r20
    45b0:	95 1f       	adc	r25, r21
    45b2:	91 83       	std	Z+1, r25	; 0x01
    45b4:	80 83       	st	Z, r24
					CLCD_u8GoToXY(10 + Local_u8IDIterator, 1);
    45b6:	fe 01       	movw	r30, r28
    45b8:	e6 5c       	subi	r30, 0xC6	; 198
    45ba:	fe 4f       	sbci	r31, 0xFE	; 254
    45bc:	80 81       	ld	r24, Z
    45be:	86 5f       	subi	r24, 0xF6	; 246
    45c0:	61 e0       	ldi	r22, 0x01	; 1
    45c2:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
    45c6:	fe 01       	movw	r30, r28
    45c8:	eb 5f       	subi	r30, 0xFB	; 251
    45ca:	fe 4f       	sbci	r31, 0xFE	; 254
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	aa e7       	ldi	r26, 0x7A	; 122
    45d2:	b3 e4       	ldi	r27, 0x43	; 67
    45d4:	80 83       	st	Z, r24
    45d6:	91 83       	std	Z+1, r25	; 0x01
    45d8:	a2 83       	std	Z+2, r26	; 0x02
    45da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45dc:	8e 01       	movw	r16, r28
    45de:	0f 5f       	subi	r16, 0xFF	; 255
    45e0:	1e 4f       	sbci	r17, 0xFE	; 254
    45e2:	fe 01       	movw	r30, r28
    45e4:	eb 5f       	subi	r30, 0xFB	; 251
    45e6:	fe 4f       	sbci	r31, 0xFE	; 254
    45e8:	60 81       	ld	r22, Z
    45ea:	71 81       	ldd	r23, Z+1	; 0x01
    45ec:	82 81       	ldd	r24, Z+2	; 0x02
    45ee:	93 81       	ldd	r25, Z+3	; 0x03
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	4a ef       	ldi	r20, 0xFA	; 250
    45f6:	54 e4       	ldi	r21, 0x44	; 68
    45f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	f8 01       	movw	r30, r16
    4602:	80 83       	st	Z, r24
    4604:	91 83       	std	Z+1, r25	; 0x01
    4606:	a2 83       	std	Z+2, r26	; 0x02
    4608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    460a:	fe 01       	movw	r30, r28
    460c:	ef 5f       	subi	r30, 0xFF	; 255
    460e:	fe 4f       	sbci	r31, 0xFE	; 254
    4610:	60 81       	ld	r22, Z
    4612:	71 81       	ldd	r23, Z+1	; 0x01
    4614:	82 81       	ldd	r24, Z+2	; 0x02
    4616:	93 81       	ldd	r25, Z+3	; 0x03
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	40 e8       	ldi	r20, 0x80	; 128
    461e:	5f e3       	ldi	r21, 0x3F	; 63
    4620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4624:	88 23       	and	r24, r24
    4626:	44 f4       	brge	.+16     	; 0x4638 <main+0x6fc>
		__ticks = 1;
    4628:	fe 01       	movw	r30, r28
    462a:	e1 50       	subi	r30, 0x01	; 1
    462c:	ff 4f       	sbci	r31, 0xFF	; 255
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
    4636:	64 c0       	rjmp	.+200    	; 0x4700 <main+0x7c4>
	else if (__tmp > 65535)
    4638:	fe 01       	movw	r30, r28
    463a:	ef 5f       	subi	r30, 0xFF	; 255
    463c:	fe 4f       	sbci	r31, 0xFE	; 254
    463e:	60 81       	ld	r22, Z
    4640:	71 81       	ldd	r23, Z+1	; 0x01
    4642:	82 81       	ldd	r24, Z+2	; 0x02
    4644:	93 81       	ldd	r25, Z+3	; 0x03
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	3f ef       	ldi	r19, 0xFF	; 255
    464a:	4f e7       	ldi	r20, 0x7F	; 127
    464c:	57 e4       	ldi	r21, 0x47	; 71
    464e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4652:	18 16       	cp	r1, r24
    4654:	0c f0       	brlt	.+2      	; 0x4658 <main+0x71c>
    4656:	43 c0       	rjmp	.+134    	; 0x46de <main+0x7a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4658:	fe 01       	movw	r30, r28
    465a:	eb 5f       	subi	r30, 0xFB	; 251
    465c:	fe 4f       	sbci	r31, 0xFE	; 254
    465e:	60 81       	ld	r22, Z
    4660:	71 81       	ldd	r23, Z+1	; 0x01
    4662:	82 81       	ldd	r24, Z+2	; 0x02
    4664:	93 81       	ldd	r25, Z+3	; 0x03
    4666:	20 e0       	ldi	r18, 0x00	; 0
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	40 e2       	ldi	r20, 0x20	; 32
    466c:	51 e4       	ldi	r21, 0x41	; 65
    466e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4672:	dc 01       	movw	r26, r24
    4674:	cb 01       	movw	r24, r22
    4676:	8e 01       	movw	r16, r28
    4678:	01 50       	subi	r16, 0x01	; 1
    467a:	1f 4f       	sbci	r17, 0xFF	; 255
    467c:	bc 01       	movw	r22, r24
    467e:	cd 01       	movw	r24, r26
    4680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	f8 01       	movw	r30, r16
    468a:	91 83       	std	Z+1, r25	; 0x01
    468c:	80 83       	st	Z, r24
    468e:	1f c0       	rjmp	.+62     	; 0x46ce <main+0x792>
    4690:	fe 01       	movw	r30, r28
    4692:	e3 50       	subi	r30, 0x03	; 3
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	88 ec       	ldi	r24, 0xC8	; 200
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	91 83       	std	Z+1, r25	; 0x01
    469c:	80 83       	st	Z, r24
    469e:	fe 01       	movw	r30, r28
    46a0:	e3 50       	subi	r30, 0x03	; 3
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	80 81       	ld	r24, Z
    46a6:	91 81       	ldd	r25, Z+1	; 0x01
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	f1 f7       	brne	.-4      	; 0x46a8 <main+0x76c>
    46ac:	fe 01       	movw	r30, r28
    46ae:	e3 50       	subi	r30, 0x03	; 3
    46b0:	ff 4f       	sbci	r31, 0xFF	; 255
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b6:	de 01       	movw	r26, r28
    46b8:	a1 50       	subi	r26, 0x01	; 1
    46ba:	bf 4f       	sbci	r27, 0xFF	; 255
    46bc:	fe 01       	movw	r30, r28
    46be:	e1 50       	subi	r30, 0x01	; 1
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	80 81       	ld	r24, Z
    46c4:	91 81       	ldd	r25, Z+1	; 0x01
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	11 96       	adiw	r26, 0x01	; 1
    46ca:	9c 93       	st	X, r25
    46cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ce:	fe 01       	movw	r30, r28
    46d0:	e1 50       	subi	r30, 0x01	; 1
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	80 81       	ld	r24, Z
    46d6:	91 81       	ldd	r25, Z+1	; 0x01
    46d8:	00 97       	sbiw	r24, 0x00	; 0
    46da:	d1 f6       	brne	.-76     	; 0x4690 <main+0x754>
    46dc:	27 c0       	rjmp	.+78     	; 0x472c <main+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46de:	8e 01       	movw	r16, r28
    46e0:	01 50       	subi	r16, 0x01	; 1
    46e2:	1f 4f       	sbci	r17, 0xFF	; 255
    46e4:	fe 01       	movw	r30, r28
    46e6:	ef 5f       	subi	r30, 0xFF	; 255
    46e8:	fe 4f       	sbci	r31, 0xFE	; 254
    46ea:	60 81       	ld	r22, Z
    46ec:	71 81       	ldd	r23, Z+1	; 0x01
    46ee:	82 81       	ldd	r24, Z+2	; 0x02
    46f0:	93 81       	ldd	r25, Z+3	; 0x03
    46f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f6:	dc 01       	movw	r26, r24
    46f8:	cb 01       	movw	r24, r22
    46fa:	f8 01       	movw	r30, r16
    46fc:	91 83       	std	Z+1, r25	; 0x01
    46fe:	80 83       	st	Z, r24
    4700:	de 01       	movw	r26, r28
    4702:	a5 50       	subi	r26, 0x05	; 5
    4704:	bf 4f       	sbci	r27, 0xFF	; 255
    4706:	fe 01       	movw	r30, r28
    4708:	e1 50       	subi	r30, 0x01	; 1
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	8d 93       	st	X+, r24
    4712:	9c 93       	st	X, r25
    4714:	fe 01       	movw	r30, r28
    4716:	e5 50       	subi	r30, 0x05	; 5
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	80 81       	ld	r24, Z
    471c:	91 81       	ldd	r25, Z+1	; 0x01
    471e:	01 97       	sbiw	r24, 0x01	; 1
    4720:	f1 f7       	brne	.-4      	; 0x471e <main+0x7e2>
    4722:	fe 01       	movw	r30, r28
    4724:	e5 50       	subi	r30, 0x05	; 5
    4726:	ff 4f       	sbci	r31, 0xFF	; 255
    4728:	91 83       	std	Z+1, r25	; 0x01
    472a:	80 83       	st	Z, r24
					_delay_ms(250);
					CLCD_voidSendData('*');
    472c:	8a e2       	ldi	r24, 0x2A	; 42
    472e:	0e 94 2c 09 	call	0x1258	; 0x1258 <CLCD_voidSendData>
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    4732:	fe 01       	movw	r30, r28
    4734:	e5 5c       	subi	r30, 0xC5	; 197
    4736:	fe 4f       	sbci	r31, 0xFE	; 254
    4738:	8f ef       	ldi	r24, 0xFF	; 255
    473a:	80 83       	st	Z, r24
					Local_u8IDIterator++;
    473c:	de 01       	movw	r26, r28
    473e:	a6 5c       	subi	r26, 0xC6	; 198
    4740:	be 4f       	sbci	r27, 0xFE	; 254
    4742:	fe 01       	movw	r30, r28
    4744:	e6 5c       	subi	r30, 0xC6	; 198
    4746:	fe 4f       	sbci	r31, 0xFE	; 254
    4748:	80 81       	ld	r24, Z
    474a:	8f 5f       	subi	r24, 0xFF	; 255
    474c:	8c 93       	st	X, r24
    474e:	05 c0       	rjmp	.+10     	; 0x475a <main+0x81e>
					break;
				case 11:
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    4750:	fe 01       	movw	r30, r28
    4752:	e5 5c       	subi	r30, 0xC5	; 197
    4754:	fe 4f       	sbci	r31, 0xFE	; 254
    4756:	8f ef       	ldi	r24, 0xFF	; 255
    4758:	80 83       	st	Z, r24

			/*Scan Password from the user*/
			Local_u8IDIterator = 0;
			CLCD_u8GoToXY(10, 1);

			while(Local_u8IDIterator != 4)
    475a:	fe 01       	movw	r30, r28
    475c:	e6 5c       	subi	r30, 0xC6	; 198
    475e:	fe 4f       	sbci	r31, 0xFE	; 254
    4760:	80 81       	ld	r24, Z
    4762:	84 30       	cpi	r24, 0x04	; 4
    4764:	09 f0       	breq	.+2      	; 0x4768 <main+0x82c>
    4766:	ef ce       	rjmp	.-546    	; 0x4546 <main+0x60a>
					break;
				}
			}

			/*Reverse the ID*/
			Local_u8IDIterator = 0;
    4768:	fe 01       	movw	r30, r28
    476a:	e6 5c       	subi	r30, 0xC6	; 198
    476c:	fe 4f       	sbci	r31, 0xFE	; 254
    476e:	10 82       	st	Z, r1
    4770:	3b c0       	rjmp	.+118    	; 0x47e8 <main+0x8ac>
			while(Local_u8IDIterator != 4)
			{
				Local_u8IDIterator++;
    4772:	de 01       	movw	r26, r28
    4774:	a6 5c       	subi	r26, 0xC6	; 198
    4776:	be 4f       	sbci	r27, 0xFE	; 254
    4778:	fe 01       	movw	r30, r28
    477a:	e6 5c       	subi	r30, 0xC6	; 198
    477c:	fe 4f       	sbci	r31, 0xFE	; 254
    477e:	80 81       	ld	r24, Z
    4780:	8f 5f       	subi	r24, 0xFF	; 255
    4782:	8c 93       	st	X, r24
				Local_u16ReversedID = (Local_u16ID % 10) + Local_u16ReversedID * 10;
    4784:	fe 01       	movw	r30, r28
    4786:	e5 5d       	subi	r30, 0xD5	; 213
    4788:	fe 4f       	sbci	r31, 0xFE	; 254
    478a:	80 81       	ld	r24, Z
    478c:	91 81       	ldd	r25, Z+1	; 0x01
    478e:	2a e0       	ldi	r18, 0x0A	; 10
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	b9 01       	movw	r22, r18
    4794:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <__udivmodhi4>
    4798:	ac 01       	movw	r20, r24
    479a:	fe 01       	movw	r30, r28
    479c:	e9 5d       	subi	r30, 0xD9	; 217
    479e:	fe 4f       	sbci	r31, 0xFE	; 254
    47a0:	80 81       	ld	r24, Z
    47a2:	91 81       	ldd	r25, Z+1	; 0x01
    47a4:	9c 01       	movw	r18, r24
    47a6:	22 0f       	add	r18, r18
    47a8:	33 1f       	adc	r19, r19
    47aa:	c9 01       	movw	r24, r18
    47ac:	88 0f       	add	r24, r24
    47ae:	99 1f       	adc	r25, r25
    47b0:	88 0f       	add	r24, r24
    47b2:	99 1f       	adc	r25, r25
    47b4:	82 0f       	add	r24, r18
    47b6:	93 1f       	adc	r25, r19
    47b8:	fe 01       	movw	r30, r28
    47ba:	e9 5d       	subi	r30, 0xD9	; 217
    47bc:	fe 4f       	sbci	r31, 0xFE	; 254
    47be:	84 0f       	add	r24, r20
    47c0:	95 1f       	adc	r25, r21
    47c2:	91 83       	std	Z+1, r25	; 0x01
    47c4:	80 83       	st	Z, r24
				Local_u16ID = Local_u16ID / 10;
    47c6:	8e 01       	movw	r16, r28
    47c8:	05 5d       	subi	r16, 0xD5	; 213
    47ca:	1e 4f       	sbci	r17, 0xFE	; 254
    47cc:	fe 01       	movw	r30, r28
    47ce:	e5 5d       	subi	r30, 0xD5	; 213
    47d0:	fe 4f       	sbci	r31, 0xFE	; 254
    47d2:	80 81       	ld	r24, Z
    47d4:	91 81       	ldd	r25, Z+1	; 0x01
    47d6:	2a e0       	ldi	r18, 0x0A	; 10
    47d8:	30 e0       	ldi	r19, 0x00	; 0
    47da:	b9 01       	movw	r22, r18
    47dc:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <__udivmodhi4>
    47e0:	cb 01       	movw	r24, r22
    47e2:	f8 01       	movw	r30, r16
    47e4:	91 83       	std	Z+1, r25	; 0x01
    47e6:	80 83       	st	Z, r24
				}
			}

			/*Reverse the ID*/
			Local_u8IDIterator = 0;
			while(Local_u8IDIterator != 4)
    47e8:	fe 01       	movw	r30, r28
    47ea:	e6 5c       	subi	r30, 0xC6	; 198
    47ec:	fe 4f       	sbci	r31, 0xFE	; 254
    47ee:	80 81       	ld	r24, Z
    47f0:	84 30       	cpi	r24, 0x04	; 4
    47f2:	09 f0       	breq	.+2      	; 0x47f6 <main+0x8ba>
    47f4:	be cf       	rjmp	.-132    	; 0x4772 <main+0x836>
				Local_u8IDIterator++;
				Local_u16ReversedID = (Local_u16ID % 10) + Local_u16ReversedID * 10;
				Local_u16ID = Local_u16ID / 10;
			}

			CLCD_u8GoToXY(0, 0);
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>

			/*Erase the CLCD*/
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    47fe:	fe 01       	movw	r30, r28
    4800:	e4 5c       	subi	r30, 0xC4	; 196
    4802:	fe 4f       	sbci	r31, 0xFE	; 254
    4804:	10 82       	st	Z, r1
    4806:	13 c0       	rjmp	.+38     	; 0x482e <main+0x8f2>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
    4808:	88 e8       	ldi	r24, 0x88	; 136
    480a:	93 e0       	ldi	r25, 0x03	; 3
    480c:	fe 01       	movw	r30, r28
    480e:	e4 5c       	subi	r30, 0xC4	; 196
    4810:	fe 4f       	sbci	r31, 0xFE	; 254
    4812:	62 e0       	ldi	r22, 0x02	; 2
    4814:	40 81       	ld	r20, Z
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	0e 94 c3 0b 	call	0x1786	; 0x1786 <CLCD_voidSendSpecialCharacter>
			}

			CLCD_u8GoToXY(0, 0);

			/*Erase the CLCD*/
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    481c:	de 01       	movw	r26, r28
    481e:	a4 5c       	subi	r26, 0xC4	; 196
    4820:	be 4f       	sbci	r27, 0xFE	; 254
    4822:	fe 01       	movw	r30, r28
    4824:	e4 5c       	subi	r30, 0xC4	; 196
    4826:	fe 4f       	sbci	r31, 0xFE	; 254
    4828:	80 81       	ld	r24, Z
    482a:	8f 5f       	subi	r24, 0xFF	; 255
    482c:	8c 93       	st	X, r24
    482e:	fe 01       	movw	r30, r28
    4830:	e4 5c       	subi	r30, 0xC4	; 196
    4832:	fe 4f       	sbci	r31, 0xFE	; 254
    4834:	80 81       	ld	r24, Z
    4836:	8e 30       	cpi	r24, 0x0E	; 14
    4838:	38 f3       	brcs	.-50     	; 0x4808 <main+0x8cc>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
			}
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    483a:	fe 01       	movw	r30, r28
    483c:	e4 5c       	subi	r30, 0xC4	; 196
    483e:	fe 4f       	sbci	r31, 0xFE	; 254
    4840:	10 82       	st	Z, r1
    4842:	13 c0       	rjmp	.+38     	; 0x486a <main+0x92e>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 1);
    4844:	88 e8       	ldi	r24, 0x88	; 136
    4846:	93 e0       	ldi	r25, 0x03	; 3
    4848:	fe 01       	movw	r30, r28
    484a:	e4 5c       	subi	r30, 0xC4	; 196
    484c:	fe 4f       	sbci	r31, 0xFE	; 254
    484e:	62 e0       	ldi	r22, 0x02	; 2
    4850:	40 81       	ld	r20, Z
    4852:	21 e0       	ldi	r18, 0x01	; 1
    4854:	0e 94 c3 0b 	call	0x1786	; 0x1786 <CLCD_voidSendSpecialCharacter>
			/*Erase the CLCD*/
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 0);
			}
			for(Local_u8Iterator = 0; Local_u8Iterator < 14; Local_u8Iterator++)
    4858:	de 01       	movw	r26, r28
    485a:	a4 5c       	subi	r26, 0xC4	; 196
    485c:	be 4f       	sbci	r27, 0xFE	; 254
    485e:	fe 01       	movw	r30, r28
    4860:	e4 5c       	subi	r30, 0xC4	; 196
    4862:	fe 4f       	sbci	r31, 0xFE	; 254
    4864:	80 81       	ld	r24, Z
    4866:	8f 5f       	subi	r24, 0xFF	; 255
    4868:	8c 93       	st	X, r24
    486a:	fe 01       	movw	r30, r28
    486c:	e4 5c       	subi	r30, 0xC4	; 196
    486e:	fe 4f       	sbci	r31, 0xFE	; 254
    4870:	80 81       	ld	r24, Z
    4872:	8e 30       	cpi	r24, 0x0E	; 14
    4874:	38 f3       	brcs	.-50     	; 0x4844 <main+0x908>
			{
				CLCD_voidSendSpecialCharacter(Local_u8EraseCharacter, 2, Local_u8Iterator, 1);
			}

			/*Check ID and Password*/
			if(Local_u16Password == Local_u16ReversedID)
    4876:	fe 01       	movw	r30, r28
    4878:	e7 5d       	subi	r30, 0xD7	; 215
    487a:	fe 4f       	sbci	r31, 0xFE	; 254
    487c:	de 01       	movw	r26, r28
    487e:	a9 5d       	subi	r26, 0xD9	; 217
    4880:	be 4f       	sbci	r27, 0xFE	; 254
    4882:	20 81       	ld	r18, Z
    4884:	31 81       	ldd	r19, Z+1	; 0x01
    4886:	8d 91       	ld	r24, X+
    4888:	9c 91       	ld	r25, X
    488a:	11 97       	sbiw	r26, 0x01	; 1
    488c:	28 17       	cp	r18, r24
    488e:	39 07       	cpc	r19, r25
    4890:	09 f0       	breq	.+2      	; 0x4894 <main+0x958>
    4892:	c8 c0       	rjmp	.+400    	; 0x4a24 <main+0xae8>
			{
				CLCD_u8GoToXY(4, 0);
    4894:	84 e0       	ldi	r24, 0x04	; 4
    4896:	60 e0       	ldi	r22, 0x00	; 0
    4898:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
				CLCD_u8SendString("Welcome");
    489c:	84 e8       	ldi	r24, 0x84	; 132
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
				SSD_u8SetNumber(&Local_ssdtLoginCounter, 8);
    48a4:	ce 01       	movw	r24, r28
    48a6:	81 5c       	subi	r24, 0xC1	; 193
    48a8:	9e 4f       	sbci	r25, 0xFE	; 254
    48aa:	68 e0       	ldi	r22, 0x08	; 8
    48ac:	0e 94 67 14 	call	0x28ce	; 0x28ce <SSD_u8SetNumber>
				Local_u8LoginFlag = 1;
    48b0:	fe 01       	movw	r30, r28
    48b2:	e8 5c       	subi	r30, 0xC8	; 200
    48b4:	fe 4f       	sbci	r31, 0xFE	; 254
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	80 83       	st	Z, r24
    48ba:	fe 01       	movw	r30, r28
    48bc:	e9 50       	subi	r30, 0x09	; 9
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	aa ef       	ldi	r26, 0xFA	; 250
    48c6:	b4 e4       	ldi	r27, 0x44	; 68
    48c8:	80 83       	st	Z, r24
    48ca:	91 83       	std	Z+1, r25	; 0x01
    48cc:	a2 83       	std	Z+2, r26	; 0x02
    48ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48d0:	8e 01       	movw	r16, r28
    48d2:	0d 50       	subi	r16, 0x0D	; 13
    48d4:	1f 4f       	sbci	r17, 0xFF	; 255
    48d6:	fe 01       	movw	r30, r28
    48d8:	e9 50       	subi	r30, 0x09	; 9
    48da:	ff 4f       	sbci	r31, 0xFF	; 255
    48dc:	60 81       	ld	r22, Z
    48de:	71 81       	ldd	r23, Z+1	; 0x01
    48e0:	82 81       	ldd	r24, Z+2	; 0x02
    48e2:	93 81       	ldd	r25, Z+3	; 0x03
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	4a ef       	ldi	r20, 0xFA	; 250
    48ea:	54 e4       	ldi	r21, 0x44	; 68
    48ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f0:	dc 01       	movw	r26, r24
    48f2:	cb 01       	movw	r24, r22
    48f4:	f8 01       	movw	r30, r16
    48f6:	80 83       	st	Z, r24
    48f8:	91 83       	std	Z+1, r25	; 0x01
    48fa:	a2 83       	std	Z+2, r26	; 0x02
    48fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48fe:	fe 01       	movw	r30, r28
    4900:	ed 50       	subi	r30, 0x0D	; 13
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	60 81       	ld	r22, Z
    4906:	71 81       	ldd	r23, Z+1	; 0x01
    4908:	82 81       	ldd	r24, Z+2	; 0x02
    490a:	93 81       	ldd	r25, Z+3	; 0x03
    490c:	20 e0       	ldi	r18, 0x00	; 0
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	40 e8       	ldi	r20, 0x80	; 128
    4912:	5f e3       	ldi	r21, 0x3F	; 63
    4914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4918:	88 23       	and	r24, r24
    491a:	44 f4       	brge	.+16     	; 0x492c <main+0x9f0>
		__ticks = 1;
    491c:	fe 01       	movw	r30, r28
    491e:	ef 50       	subi	r30, 0x0F	; 15
    4920:	ff 4f       	sbci	r31, 0xFF	; 255
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	91 83       	std	Z+1, r25	; 0x01
    4928:	80 83       	st	Z, r24
    492a:	64 c0       	rjmp	.+200    	; 0x49f4 <main+0xab8>
	else if (__tmp > 65535)
    492c:	fe 01       	movw	r30, r28
    492e:	ed 50       	subi	r30, 0x0D	; 13
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	60 81       	ld	r22, Z
    4934:	71 81       	ldd	r23, Z+1	; 0x01
    4936:	82 81       	ldd	r24, Z+2	; 0x02
    4938:	93 81       	ldd	r25, Z+3	; 0x03
    493a:	20 e0       	ldi	r18, 0x00	; 0
    493c:	3f ef       	ldi	r19, 0xFF	; 255
    493e:	4f e7       	ldi	r20, 0x7F	; 127
    4940:	57 e4       	ldi	r21, 0x47	; 71
    4942:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4946:	18 16       	cp	r1, r24
    4948:	0c f0       	brlt	.+2      	; 0x494c <main+0xa10>
    494a:	43 c0       	rjmp	.+134    	; 0x49d2 <main+0xa96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    494c:	fe 01       	movw	r30, r28
    494e:	e9 50       	subi	r30, 0x09	; 9
    4950:	ff 4f       	sbci	r31, 0xFF	; 255
    4952:	60 81       	ld	r22, Z
    4954:	71 81       	ldd	r23, Z+1	; 0x01
    4956:	82 81       	ldd	r24, Z+2	; 0x02
    4958:	93 81       	ldd	r25, Z+3	; 0x03
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	40 e2       	ldi	r20, 0x20	; 32
    4960:	51 e4       	ldi	r21, 0x41	; 65
    4962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	8e 01       	movw	r16, r28
    496c:	0f 50       	subi	r16, 0x0F	; 15
    496e:	1f 4f       	sbci	r17, 0xFF	; 255
    4970:	bc 01       	movw	r22, r24
    4972:	cd 01       	movw	r24, r26
    4974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	f8 01       	movw	r30, r16
    497e:	91 83       	std	Z+1, r25	; 0x01
    4980:	80 83       	st	Z, r24
    4982:	1f c0       	rjmp	.+62     	; 0x49c2 <main+0xa86>
    4984:	fe 01       	movw	r30, r28
    4986:	e1 51       	subi	r30, 0x11	; 17
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	88 ec       	ldi	r24, 0xC8	; 200
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	91 83       	std	Z+1, r25	; 0x01
    4990:	80 83       	st	Z, r24
    4992:	fe 01       	movw	r30, r28
    4994:	e1 51       	subi	r30, 0x11	; 17
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	80 81       	ld	r24, Z
    499a:	91 81       	ldd	r25, Z+1	; 0x01
    499c:	01 97       	sbiw	r24, 0x01	; 1
    499e:	f1 f7       	brne	.-4      	; 0x499c <main+0xa60>
    49a0:	fe 01       	movw	r30, r28
    49a2:	e1 51       	subi	r30, 0x11	; 17
    49a4:	ff 4f       	sbci	r31, 0xFF	; 255
    49a6:	91 83       	std	Z+1, r25	; 0x01
    49a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49aa:	de 01       	movw	r26, r28
    49ac:	af 50       	subi	r26, 0x0F	; 15
    49ae:	bf 4f       	sbci	r27, 0xFF	; 255
    49b0:	fe 01       	movw	r30, r28
    49b2:	ef 50       	subi	r30, 0x0F	; 15
    49b4:	ff 4f       	sbci	r31, 0xFF	; 255
    49b6:	80 81       	ld	r24, Z
    49b8:	91 81       	ldd	r25, Z+1	; 0x01
    49ba:	01 97       	sbiw	r24, 0x01	; 1
    49bc:	11 96       	adiw	r26, 0x01	; 1
    49be:	9c 93       	st	X, r25
    49c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c2:	fe 01       	movw	r30, r28
    49c4:	ef 50       	subi	r30, 0x0F	; 15
    49c6:	ff 4f       	sbci	r31, 0xFF	; 255
    49c8:	80 81       	ld	r24, Z
    49ca:	91 81       	ldd	r25, Z+1	; 0x01
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	d1 f6       	brne	.-76     	; 0x4984 <main+0xa48>
    49d0:	12 c1       	rjmp	.+548    	; 0x4bf6 <main+0xcba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49d2:	8e 01       	movw	r16, r28
    49d4:	0f 50       	subi	r16, 0x0F	; 15
    49d6:	1f 4f       	sbci	r17, 0xFF	; 255
    49d8:	fe 01       	movw	r30, r28
    49da:	ed 50       	subi	r30, 0x0D	; 13
    49dc:	ff 4f       	sbci	r31, 0xFF	; 255
    49de:	60 81       	ld	r22, Z
    49e0:	71 81       	ldd	r23, Z+1	; 0x01
    49e2:	82 81       	ldd	r24, Z+2	; 0x02
    49e4:	93 81       	ldd	r25, Z+3	; 0x03
    49e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ea:	dc 01       	movw	r26, r24
    49ec:	cb 01       	movw	r24, r22
    49ee:	f8 01       	movw	r30, r16
    49f0:	91 83       	std	Z+1, r25	; 0x01
    49f2:	80 83       	st	Z, r24
    49f4:	de 01       	movw	r26, r28
    49f6:	a3 51       	subi	r26, 0x13	; 19
    49f8:	bf 4f       	sbci	r27, 0xFF	; 255
    49fa:	fe 01       	movw	r30, r28
    49fc:	ef 50       	subi	r30, 0x0F	; 15
    49fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4a00:	80 81       	ld	r24, Z
    4a02:	91 81       	ldd	r25, Z+1	; 0x01
    4a04:	11 96       	adiw	r26, 0x01	; 1
    4a06:	9c 93       	st	X, r25
    4a08:	8e 93       	st	-X, r24
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e3 51       	subi	r30, 0x13	; 19
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	80 81       	ld	r24, Z
    4a12:	91 81       	ldd	r25, Z+1	; 0x01
    4a14:	01 97       	sbiw	r24, 0x01	; 1
    4a16:	f1 f7       	brne	.-4      	; 0x4a14 <main+0xad8>
    4a18:	fe 01       	movw	r30, r28
    4a1a:	e3 51       	subi	r30, 0x13	; 19
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	91 83       	std	Z+1, r25	; 0x01
    4a20:	80 83       	st	Z, r24
    4a22:	e9 c0       	rjmp	.+466    	; 0x4bf6 <main+0xcba>
				_delay_ms(2000);
				break;
			}
			else
			{
				Local_u16ID = 0;
    4a24:	fe 01       	movw	r30, r28
    4a26:	e5 5d       	subi	r30, 0xD5	; 213
    4a28:	fe 4f       	sbci	r31, 0xFE	; 254
    4a2a:	11 82       	std	Z+1, r1	; 0x01
    4a2c:	10 82       	st	Z, r1
				Local_u16Password = 0;
    4a2e:	fe 01       	movw	r30, r28
    4a30:	e7 5d       	subi	r30, 0xD7	; 215
    4a32:	fe 4f       	sbci	r31, 0xFE	; 254
    4a34:	11 82       	std	Z+1, r1	; 0x01
    4a36:	10 82       	st	Z, r1
				Local_u16ReversedID = 0;
    4a38:	fe 01       	movw	r30, r28
    4a3a:	e9 5d       	subi	r30, 0xD9	; 217
    4a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a3e:	11 82       	std	Z+1, r1	; 0x01
    4a40:	10 82       	st	Z, r1
				Local_u8SevenSegmentIterator--;
    4a42:	de 01       	movw	r26, r28
    4a44:	a7 5c       	subi	r26, 0xC7	; 199
    4a46:	be 4f       	sbci	r27, 0xFE	; 254
    4a48:	fe 01       	movw	r30, r28
    4a4a:	e7 5c       	subi	r30, 0xC7	; 199
    4a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a4e:	80 81       	ld	r24, Z
    4a50:	81 50       	subi	r24, 0x01	; 1
    4a52:	8c 93       	st	X, r24
				CLCD_u8GoToXY(1, 0);
    4a54:	81 e0       	ldi	r24, 0x01	; 1
    4a56:	60 e0       	ldi	r22, 0x00	; 0
    4a58:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
				CLCD_u8SendString("Wrong Input!");
    4a5c:	8c e8       	ldi	r24, 0x8C	; 140
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
				if(Local_u8SevenSegmentIterator > 0)
    4a64:	fe 01       	movw	r30, r28
    4a66:	e7 5c       	subi	r30, 0xC7	; 199
    4a68:	fe 4f       	sbci	r31, 0xFE	; 254
    4a6a:	80 81       	ld	r24, Z
    4a6c:	88 23       	and	r24, r24
    4a6e:	41 f0       	breq	.+16     	; 0x4a80 <main+0xb44>
				{
					CLCD_u8GoToXY(2, 1);
    4a70:	82 e0       	ldi	r24, 0x02	; 2
    4a72:	61 e0       	ldi	r22, 0x01	; 1
    4a74:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("Try again!");
    4a78:	89 e9       	ldi	r24, 0x99	; 153
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
    4a80:	fe 01       	movw	r30, r28
    4a82:	e7 51       	subi	r30, 0x17	; 23
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	80 e0       	ldi	r24, 0x00	; 0
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	aa e7       	ldi	r26, 0x7A	; 122
    4a8c:	b4 e4       	ldi	r27, 0x44	; 68
    4a8e:	80 83       	st	Z, r24
    4a90:	91 83       	std	Z+1, r25	; 0x01
    4a92:	a2 83       	std	Z+2, r26	; 0x02
    4a94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a96:	8e 01       	movw	r16, r28
    4a98:	0b 51       	subi	r16, 0x1B	; 27
    4a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	e7 51       	subi	r30, 0x17	; 23
    4aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa2:	60 81       	ld	r22, Z
    4aa4:	71 81       	ldd	r23, Z+1	; 0x01
    4aa6:	82 81       	ldd	r24, Z+2	; 0x02
    4aa8:	93 81       	ldd	r25, Z+3	; 0x03
    4aaa:	20 e0       	ldi	r18, 0x00	; 0
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	4a ef       	ldi	r20, 0xFA	; 250
    4ab0:	54 e4       	ldi	r21, 0x44	; 68
    4ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	f8 01       	movw	r30, r16
    4abc:	80 83       	st	Z, r24
    4abe:	91 83       	std	Z+1, r25	; 0x01
    4ac0:	a2 83       	std	Z+2, r26	; 0x02
    4ac2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	eb 51       	subi	r30, 0x1B	; 27
    4ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aca:	60 81       	ld	r22, Z
    4acc:	71 81       	ldd	r23, Z+1	; 0x01
    4ace:	82 81       	ldd	r24, Z+2	; 0x02
    4ad0:	93 81       	ldd	r25, Z+3	; 0x03
    4ad2:	20 e0       	ldi	r18, 0x00	; 0
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	40 e8       	ldi	r20, 0x80	; 128
    4ad8:	5f e3       	ldi	r21, 0x3F	; 63
    4ada:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ade:	88 23       	and	r24, r24
    4ae0:	44 f4       	brge	.+16     	; 0x4af2 <main+0xbb6>
		__ticks = 1;
    4ae2:	fe 01       	movw	r30, r28
    4ae4:	ed 51       	subi	r30, 0x1D	; 29
    4ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	91 83       	std	Z+1, r25	; 0x01
    4aee:	80 83       	st	Z, r24
    4af0:	64 c0       	rjmp	.+200    	; 0x4bba <main+0xc7e>
	else if (__tmp > 65535)
    4af2:	fe 01       	movw	r30, r28
    4af4:	eb 51       	subi	r30, 0x1B	; 27
    4af6:	ff 4f       	sbci	r31, 0xFF	; 255
    4af8:	60 81       	ld	r22, Z
    4afa:	71 81       	ldd	r23, Z+1	; 0x01
    4afc:	82 81       	ldd	r24, Z+2	; 0x02
    4afe:	93 81       	ldd	r25, Z+3	; 0x03
    4b00:	20 e0       	ldi	r18, 0x00	; 0
    4b02:	3f ef       	ldi	r19, 0xFF	; 255
    4b04:	4f e7       	ldi	r20, 0x7F	; 127
    4b06:	57 e4       	ldi	r21, 0x47	; 71
    4b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b0c:	18 16       	cp	r1, r24
    4b0e:	0c f0       	brlt	.+2      	; 0x4b12 <main+0xbd6>
    4b10:	43 c0       	rjmp	.+134    	; 0x4b98 <main+0xc5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b12:	fe 01       	movw	r30, r28
    4b14:	e7 51       	subi	r30, 0x17	; 23
    4b16:	ff 4f       	sbci	r31, 0xFF	; 255
    4b18:	60 81       	ld	r22, Z
    4b1a:	71 81       	ldd	r23, Z+1	; 0x01
    4b1c:	82 81       	ldd	r24, Z+2	; 0x02
    4b1e:	93 81       	ldd	r25, Z+3	; 0x03
    4b20:	20 e0       	ldi	r18, 0x00	; 0
    4b22:	30 e0       	ldi	r19, 0x00	; 0
    4b24:	40 e2       	ldi	r20, 0x20	; 32
    4b26:	51 e4       	ldi	r21, 0x41	; 65
    4b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b2c:	dc 01       	movw	r26, r24
    4b2e:	cb 01       	movw	r24, r22
    4b30:	8e 01       	movw	r16, r28
    4b32:	0d 51       	subi	r16, 0x1D	; 29
    4b34:	1f 4f       	sbci	r17, 0xFF	; 255
    4b36:	bc 01       	movw	r22, r24
    4b38:	cd 01       	movw	r24, r26
    4b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	f8 01       	movw	r30, r16
    4b44:	91 83       	std	Z+1, r25	; 0x01
    4b46:	80 83       	st	Z, r24
    4b48:	1f c0       	rjmp	.+62     	; 0x4b88 <main+0xc4c>
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	ef 51       	subi	r30, 0x1F	; 31
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	88 ec       	ldi	r24, 0xC8	; 200
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	91 83       	std	Z+1, r25	; 0x01
    4b56:	80 83       	st	Z, r24
    4b58:	fe 01       	movw	r30, r28
    4b5a:	ef 51       	subi	r30, 0x1F	; 31
    4b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5e:	80 81       	ld	r24, Z
    4b60:	91 81       	ldd	r25, Z+1	; 0x01
    4b62:	01 97       	sbiw	r24, 0x01	; 1
    4b64:	f1 f7       	brne	.-4      	; 0x4b62 <main+0xc26>
    4b66:	fe 01       	movw	r30, r28
    4b68:	ef 51       	subi	r30, 0x1F	; 31
    4b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6c:	91 83       	std	Z+1, r25	; 0x01
    4b6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b70:	de 01       	movw	r26, r28
    4b72:	ad 51       	subi	r26, 0x1D	; 29
    4b74:	bf 4f       	sbci	r27, 0xFF	; 255
    4b76:	fe 01       	movw	r30, r28
    4b78:	ed 51       	subi	r30, 0x1D	; 29
    4b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7c:	80 81       	ld	r24, Z
    4b7e:	91 81       	ldd	r25, Z+1	; 0x01
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	11 96       	adiw	r26, 0x01	; 1
    4b84:	9c 93       	st	X, r25
    4b86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b88:	fe 01       	movw	r30, r28
    4b8a:	ed 51       	subi	r30, 0x1D	; 29
    4b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8e:	80 81       	ld	r24, Z
    4b90:	91 81       	ldd	r25, Z+1	; 0x01
    4b92:	00 97       	sbiw	r24, 0x00	; 0
    4b94:	d1 f6       	brne	.-76     	; 0x4b4a <main+0xc0e>
    4b96:	28 c0       	rjmp	.+80     	; 0x4be8 <main+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b98:	8e 01       	movw	r16, r28
    4b9a:	0d 51       	subi	r16, 0x1D	; 29
    4b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b9e:	fe 01       	movw	r30, r28
    4ba0:	eb 51       	subi	r30, 0x1B	; 27
    4ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba4:	60 81       	ld	r22, Z
    4ba6:	71 81       	ldd	r23, Z+1	; 0x01
    4ba8:	82 81       	ldd	r24, Z+2	; 0x02
    4baa:	93 81       	ldd	r25, Z+3	; 0x03
    4bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb0:	dc 01       	movw	r26, r24
    4bb2:	cb 01       	movw	r24, r22
    4bb4:	f8 01       	movw	r30, r16
    4bb6:	91 83       	std	Z+1, r25	; 0x01
    4bb8:	80 83       	st	Z, r24
    4bba:	de 01       	movw	r26, r28
    4bbc:	a1 52       	subi	r26, 0x21	; 33
    4bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	ed 51       	subi	r30, 0x1D	; 29
    4bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc6:	80 81       	ld	r24, Z
    4bc8:	91 81       	ldd	r25, Z+1	; 0x01
    4bca:	11 96       	adiw	r26, 0x01	; 1
    4bcc:	9c 93       	st	X, r25
    4bce:	8e 93       	st	-X, r24
    4bd0:	fe 01       	movw	r30, r28
    4bd2:	e1 52       	subi	r30, 0x21	; 33
    4bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd6:	80 81       	ld	r24, Z
    4bd8:	91 81       	ldd	r25, Z+1	; 0x01
    4bda:	01 97       	sbiw	r24, 0x01	; 1
    4bdc:	f1 f7       	brne	.-4      	; 0x4bda <main+0xc9e>
    4bde:	fe 01       	movw	r30, r28
    4be0:	e1 52       	subi	r30, 0x21	; 33
    4be2:	ff 4f       	sbci	r31, 0xFF	; 255
    4be4:	91 83       	std	Z+1, r25	; 0x01
    4be6:	80 83       	st	Z, r24

	/*Super Loop*/
	while(1)
	{

		while(Local_u8SevenSegmentIterator != 0)
    4be8:	fe 01       	movw	r30, r28
    4bea:	e7 5c       	subi	r30, 0xC7	; 199
    4bec:	fe 4f       	sbci	r31, 0xFE	; 254
    4bee:	80 81       	ld	r24, Z
    4bf0:	88 23       	and	r24, r24
    4bf2:	09 f0       	breq	.+2      	; 0x4bf6 <main+0xcba>
    4bf4:	f7 cb       	rjmp	.-2066   	; 0x43e4 <main+0x4a8>
				_delay_ms(1000);
				continue;
			}
		}

		if(Local_u8SevenSegmentIterator == 0)
    4bf6:	fe 01       	movw	r30, r28
    4bf8:	e7 5c       	subi	r30, 0xC7	; 199
    4bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    4bfc:	80 81       	ld	r24, Z
    4bfe:	88 23       	and	r24, r24
    4c00:	89 f4       	brne	.+34     	; 0x4c24 <main+0xce8>
		{
			SSD_u8SetNumber(&Local_ssdtLoginCounter, Local_u8SevenSegmentIterator);
    4c02:	ce 01       	movw	r24, r28
    4c04:	81 5c       	subi	r24, 0xC1	; 193
    4c06:	9e 4f       	sbci	r25, 0xFE	; 254
    4c08:	fe 01       	movw	r30, r28
    4c0a:	e7 5c       	subi	r30, 0xC7	; 199
    4c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c0e:	60 81       	ld	r22, Z
    4c10:	0e 94 67 14 	call	0x28ce	; 0x28ce <SSD_u8SetNumber>
			CLCD_u8GoToXY(0, 1);
    4c14:	80 e0       	ldi	r24, 0x00	; 0
    4c16:	61 e0       	ldi	r22, 0x01	; 1
    4c18:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
			CLCD_u8SendString("Call Emergency!");
    4c1c:	84 ea       	ldi	r24, 0xA4	; 164
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
		}

		if(Local_u8LoginFlag == 1)
    4c24:	fe 01       	movw	r30, r28
    4c26:	e8 5c       	subi	r30, 0xC8	; 200
    4c28:	fe 4f       	sbci	r31, 0xFE	; 254
    4c2a:	80 81       	ld	r24, Z
    4c2c:	81 30       	cpi	r24, 0x01	; 1
    4c2e:	e1 f6       	brne	.-72     	; 0x4be8 <main+0xcac>
		{
			while(1)
			{
				/*The Main Menu of our program*/
				if(Main_u8SystemIndicator == 0)
    4c30:	80 91 90 03 	lds	r24, 0x0390
    4c34:	88 23       	and	r24, r24
    4c36:	09 f0       	breq	.+2      	; 0x4c3a <main+0xcfe>
    4c38:	18 c1       	rjmp	.+560    	; 0x4e6a <main+0xf2e>
				{
					/*Clear the display*/
					CLCD_voidClearDisplay();
    4c3a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>

					/*print the menu*/
					CLCD_u8GoToXY(0, 0);
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
    4c40:	60 e0       	ldi	r22, 0x00	; 0
    4c42:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("Choose: 1-DCM,");
    4c46:	84 eb       	ldi	r24, 0xB4	; 180
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
					CLCD_u8GoToXY(0, 1);
    4c4e:	80 e0       	ldi	r24, 0x00	; 0
    4c50:	61 e0       	ldi	r22, 0x01	; 1
    4c52:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("2-Step, 3-Servo");
    4c56:	83 ec       	ldi	r24, 0xC3	; 195
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

					/*Scan the choice from the keypad*/
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    4c5e:	fe 01       	movw	r30, r28
    4c60:	e5 5c       	subi	r30, 0xC5	; 197
    4c62:	fe 4f       	sbci	r31, 0xFE	; 254
    4c64:	8f ef       	ldi	r24, 0xFF	; 255
    4c66:	80 83       	st	Z, r24
    4c68:	06 c0       	rjmp	.+12     	; 0x4c76 <main+0xd3a>
					while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
					{
						Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    4c6a:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_u8GetPressedKey>
    4c6e:	fe 01       	movw	r30, r28
    4c70:	e5 5c       	subi	r30, 0xC5	; 197
    4c72:	fe 4f       	sbci	r31, 0xFE	; 254
    4c74:	80 83       	st	Z, r24
					CLCD_u8GoToXY(0, 1);
					CLCD_u8SendString("2-Step, 3-Servo");

					/*Scan the choice from the keypad*/
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
					while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    4c76:	fe 01       	movw	r30, r28
    4c78:	e5 5c       	subi	r30, 0xC5	; 197
    4c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c7c:	80 81       	ld	r24, Z
    4c7e:	8f 3f       	cpi	r24, 0xFF	; 255
    4c80:	a1 f3       	breq	.-24     	; 0x4c6a <main+0xd2e>
					{
						Local_u8PressedKey = KEYPAD_u8GetPressedKey();
					}

					/*Which is the pressed key*/
					switch(Local_u8PressedKey)
    4c82:	fe 01       	movw	r30, r28
    4c84:	e5 5c       	subi	r30, 0xC5	; 197
    4c86:	fe 4f       	sbci	r31, 0xFE	; 254
    4c88:	80 81       	ld	r24, Z
    4c8a:	28 2f       	mov	r18, r24
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	ce 5a       	subi	r28, 0xAE	; 174
    4c90:	de 4f       	sbci	r29, 0xFE	; 254
    4c92:	39 83       	std	Y+1, r19	; 0x01
    4c94:	28 83       	st	Y, r18
    4c96:	c2 55       	subi	r28, 0x52	; 82
    4c98:	d1 40       	sbci	r29, 0x01	; 1
    4c9a:	ce 5a       	subi	r28, 0xAE	; 174
    4c9c:	de 4f       	sbci	r29, 0xFE	; 254
    4c9e:	48 81       	ld	r20, Y
    4ca0:	59 81       	ldd	r21, Y+1	; 0x01
    4ca2:	c2 55       	subi	r28, 0x52	; 82
    4ca4:	d1 40       	sbci	r29, 0x01	; 1
    4ca6:	42 30       	cpi	r20, 0x02	; 2
    4ca8:	51 05       	cpc	r21, r1
    4caa:	b1 f0       	breq	.+44     	; 0x4cd8 <main+0xd9c>
    4cac:	ce 5a       	subi	r28, 0xAE	; 174
    4cae:	de 4f       	sbci	r29, 0xFE	; 254
    4cb0:	88 81       	ld	r24, Y
    4cb2:	99 81       	ldd	r25, Y+1	; 0x01
    4cb4:	c2 55       	subi	r28, 0x52	; 82
    4cb6:	d1 40       	sbci	r29, 0x01	; 1
    4cb8:	83 30       	cpi	r24, 0x03	; 3
    4cba:	91 05       	cpc	r25, r1
    4cbc:	89 f0       	breq	.+34     	; 0x4ce0 <main+0xda4>
    4cbe:	ce 5a       	subi	r28, 0xAE	; 174
    4cc0:	de 4f       	sbci	r29, 0xFE	; 254
    4cc2:	e8 81       	ld	r30, Y
    4cc4:	f9 81       	ldd	r31, Y+1	; 0x01
    4cc6:	c2 55       	subi	r28, 0x52	; 82
    4cc8:	d1 40       	sbci	r29, 0x01	; 1
    4cca:	e1 30       	cpi	r30, 0x01	; 1
    4ccc:	f1 05       	cpc	r31, r1
    4cce:	61 f4       	brne	.+24     	; 0x4ce8 <main+0xdac>
					{
					case 1: Main_u8SystemIndicator = 1;	break;
    4cd0:	81 e0       	ldi	r24, 0x01	; 1
    4cd2:	80 93 90 03 	sts	0x0390, r24
    4cd6:	ac cf       	rjmp	.-168    	; 0x4c30 <main+0xcf4>
					case 2:	Main_u8SystemIndicator = 2;	break;
    4cd8:	82 e0       	ldi	r24, 0x02	; 2
    4cda:	80 93 90 03 	sts	0x0390, r24
    4cde:	a8 cf       	rjmp	.-176    	; 0x4c30 <main+0xcf4>
					case 3:	Main_u8SystemIndicator = 3;	break;
    4ce0:	83 e0       	ldi	r24, 0x03	; 3
    4ce2:	80 93 90 03 	sts	0x0390, r24
    4ce6:	a4 cf       	rjmp	.-184    	; 0x4c30 <main+0xcf4>
					default:
						CLCD_voidClearDisplay();
    4ce8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
						CLCD_u8GoToXY(2, 0);
    4cec:	82 e0       	ldi	r24, 0x02	; 2
    4cee:	60 e0       	ldi	r22, 0x00	; 0
    4cf0:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
						CLCD_u8SendString("Wrong Input!");
    4cf4:	8c e8       	ldi	r24, 0x8C	; 140
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	e5 52       	subi	r30, 0x25	; 37
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	80 e0       	ldi	r24, 0x00	; 0
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	aa ef       	ldi	r26, 0xFA	; 250
    4d08:	b4 e4       	ldi	r27, 0x44	; 68
    4d0a:	80 83       	st	Z, r24
    4d0c:	91 83       	std	Z+1, r25	; 0x01
    4d0e:	a2 83       	std	Z+2, r26	; 0x02
    4d10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d12:	8e 01       	movw	r16, r28
    4d14:	09 52       	subi	r16, 0x29	; 41
    4d16:	1f 4f       	sbci	r17, 0xFF	; 255
    4d18:	fe 01       	movw	r30, r28
    4d1a:	e5 52       	subi	r30, 0x25	; 37
    4d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1e:	60 81       	ld	r22, Z
    4d20:	71 81       	ldd	r23, Z+1	; 0x01
    4d22:	82 81       	ldd	r24, Z+2	; 0x02
    4d24:	93 81       	ldd	r25, Z+3	; 0x03
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	4a ef       	ldi	r20, 0xFA	; 250
    4d2c:	54 e4       	ldi	r21, 0x44	; 68
    4d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d32:	dc 01       	movw	r26, r24
    4d34:	cb 01       	movw	r24, r22
    4d36:	f8 01       	movw	r30, r16
    4d38:	80 83       	st	Z, r24
    4d3a:	91 83       	std	Z+1, r25	; 0x01
    4d3c:	a2 83       	std	Z+2, r26	; 0x02
    4d3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d40:	fe 01       	movw	r30, r28
    4d42:	e9 52       	subi	r30, 0x29	; 41
    4d44:	ff 4f       	sbci	r31, 0xFF	; 255
    4d46:	60 81       	ld	r22, Z
    4d48:	71 81       	ldd	r23, Z+1	; 0x01
    4d4a:	82 81       	ldd	r24, Z+2	; 0x02
    4d4c:	93 81       	ldd	r25, Z+3	; 0x03
    4d4e:	20 e0       	ldi	r18, 0x00	; 0
    4d50:	30 e0       	ldi	r19, 0x00	; 0
    4d52:	40 e8       	ldi	r20, 0x80	; 128
    4d54:	5f e3       	ldi	r21, 0x3F	; 63
    4d56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d5a:	88 23       	and	r24, r24
    4d5c:	44 f4       	brge	.+16     	; 0x4d6e <main+0xe32>
		__ticks = 1;
    4d5e:	fe 01       	movw	r30, r28
    4d60:	eb 52       	subi	r30, 0x2B	; 43
    4d62:	ff 4f       	sbci	r31, 0xFF	; 255
    4d64:	81 e0       	ldi	r24, 0x01	; 1
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	91 83       	std	Z+1, r25	; 0x01
    4d6a:	80 83       	st	Z, r24
    4d6c:	64 c0       	rjmp	.+200    	; 0x4e36 <main+0xefa>
	else if (__tmp > 65535)
    4d6e:	fe 01       	movw	r30, r28
    4d70:	e9 52       	subi	r30, 0x29	; 41
    4d72:	ff 4f       	sbci	r31, 0xFF	; 255
    4d74:	60 81       	ld	r22, Z
    4d76:	71 81       	ldd	r23, Z+1	; 0x01
    4d78:	82 81       	ldd	r24, Z+2	; 0x02
    4d7a:	93 81       	ldd	r25, Z+3	; 0x03
    4d7c:	20 e0       	ldi	r18, 0x00	; 0
    4d7e:	3f ef       	ldi	r19, 0xFF	; 255
    4d80:	4f e7       	ldi	r20, 0x7F	; 127
    4d82:	57 e4       	ldi	r21, 0x47	; 71
    4d84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d88:	18 16       	cp	r1, r24
    4d8a:	0c f0       	brlt	.+2      	; 0x4d8e <main+0xe52>
    4d8c:	43 c0       	rjmp	.+134    	; 0x4e14 <main+0xed8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d8e:	fe 01       	movw	r30, r28
    4d90:	e5 52       	subi	r30, 0x25	; 37
    4d92:	ff 4f       	sbci	r31, 0xFF	; 255
    4d94:	60 81       	ld	r22, Z
    4d96:	71 81       	ldd	r23, Z+1	; 0x01
    4d98:	82 81       	ldd	r24, Z+2	; 0x02
    4d9a:	93 81       	ldd	r25, Z+3	; 0x03
    4d9c:	20 e0       	ldi	r18, 0x00	; 0
    4d9e:	30 e0       	ldi	r19, 0x00	; 0
    4da0:	40 e2       	ldi	r20, 0x20	; 32
    4da2:	51 e4       	ldi	r21, 0x41	; 65
    4da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4da8:	dc 01       	movw	r26, r24
    4daa:	cb 01       	movw	r24, r22
    4dac:	8e 01       	movw	r16, r28
    4dae:	0b 52       	subi	r16, 0x2B	; 43
    4db0:	1f 4f       	sbci	r17, 0xFF	; 255
    4db2:	bc 01       	movw	r22, r24
    4db4:	cd 01       	movw	r24, r26
    4db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dba:	dc 01       	movw	r26, r24
    4dbc:	cb 01       	movw	r24, r22
    4dbe:	f8 01       	movw	r30, r16
    4dc0:	91 83       	std	Z+1, r25	; 0x01
    4dc2:	80 83       	st	Z, r24
    4dc4:	1f c0       	rjmp	.+62     	; 0x4e04 <main+0xec8>
    4dc6:	fe 01       	movw	r30, r28
    4dc8:	ed 52       	subi	r30, 0x2D	; 45
    4dca:	ff 4f       	sbci	r31, 0xFF	; 255
    4dcc:	88 ec       	ldi	r24, 0xC8	; 200
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	91 83       	std	Z+1, r25	; 0x01
    4dd2:	80 83       	st	Z, r24
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	ed 52       	subi	r30, 0x2D	; 45
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	80 81       	ld	r24, Z
    4ddc:	91 81       	ldd	r25, Z+1	; 0x01
    4dde:	01 97       	sbiw	r24, 0x01	; 1
    4de0:	f1 f7       	brne	.-4      	; 0x4dde <main+0xea2>
    4de2:	fe 01       	movw	r30, r28
    4de4:	ed 52       	subi	r30, 0x2D	; 45
    4de6:	ff 4f       	sbci	r31, 0xFF	; 255
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dec:	de 01       	movw	r26, r28
    4dee:	ab 52       	subi	r26, 0x2B	; 43
    4df0:	bf 4f       	sbci	r27, 0xFF	; 255
    4df2:	fe 01       	movw	r30, r28
    4df4:	eb 52       	subi	r30, 0x2B	; 43
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	80 81       	ld	r24, Z
    4dfa:	91 81       	ldd	r25, Z+1	; 0x01
    4dfc:	01 97       	sbiw	r24, 0x01	; 1
    4dfe:	11 96       	adiw	r26, 0x01	; 1
    4e00:	9c 93       	st	X, r25
    4e02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e04:	fe 01       	movw	r30, r28
    4e06:	eb 52       	subi	r30, 0x2B	; 43
    4e08:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0a:	80 81       	ld	r24, Z
    4e0c:	91 81       	ldd	r25, Z+1	; 0x01
    4e0e:	00 97       	sbiw	r24, 0x00	; 0
    4e10:	d1 f6       	brne	.-76     	; 0x4dc6 <main+0xe8a>
    4e12:	28 c0       	rjmp	.+80     	; 0x4e64 <main+0xf28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e14:	8e 01       	movw	r16, r28
    4e16:	0b 52       	subi	r16, 0x2B	; 43
    4e18:	1f 4f       	sbci	r17, 0xFF	; 255
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	e9 52       	subi	r30, 0x29	; 41
    4e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e20:	60 81       	ld	r22, Z
    4e22:	71 81       	ldd	r23, Z+1	; 0x01
    4e24:	82 81       	ldd	r24, Z+2	; 0x02
    4e26:	93 81       	ldd	r25, Z+3	; 0x03
    4e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	f8 01       	movw	r30, r16
    4e32:	91 83       	std	Z+1, r25	; 0x01
    4e34:	80 83       	st	Z, r24
    4e36:	de 01       	movw	r26, r28
    4e38:	af 52       	subi	r26, 0x2F	; 47
    4e3a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e3c:	fe 01       	movw	r30, r28
    4e3e:	eb 52       	subi	r30, 0x2B	; 43
    4e40:	ff 4f       	sbci	r31, 0xFF	; 255
    4e42:	80 81       	ld	r24, Z
    4e44:	91 81       	ldd	r25, Z+1	; 0x01
    4e46:	11 96       	adiw	r26, 0x01	; 1
    4e48:	9c 93       	st	X, r25
    4e4a:	8e 93       	st	-X, r24
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	ef 52       	subi	r30, 0x2F	; 47
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	80 81       	ld	r24, Z
    4e54:	91 81       	ldd	r25, Z+1	; 0x01
    4e56:	01 97       	sbiw	r24, 0x01	; 1
    4e58:	f1 f7       	brne	.-4      	; 0x4e56 <main+0xf1a>
    4e5a:	fe 01       	movw	r30, r28
    4e5c:	ef 52       	subi	r30, 0x2F	; 47
    4e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e60:	91 83       	std	Z+1, r25	; 0x01
    4e62:	80 83       	st	Z, r24
						_delay_ms(2000);
						Main_u8SystemIndicator = 0;
    4e64:	10 92 90 03 	sts	0x0390, r1
    4e68:	e3 ce       	rjmp	.-570    	; 0x4c30 <main+0xcf4>
						break;
					}
				}
				else if(Main_u8SystemIndicator == 1)
    4e6a:	80 91 90 03 	lds	r24, 0x0390
    4e6e:	81 30       	cpi	r24, 0x01	; 1
    4e70:	11 f0       	breq	.+4      	; 0x4e76 <main+0xf3a>
    4e72:	0c 94 35 2f 	jmp	0x5e6a	; 0x5e6a <main+0x1f2e>
				{
					/*Print DC Motor Menu*/
					CLCD_voidClearDisplay();
    4e76:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
					CLCD_u8GoToXY(0, 0);
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	60 e0       	ldi	r22, 0x00	; 0
    4e7e:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("1- Max Speed");
    4e82:	83 ed       	ldi	r24, 0xD3	; 211
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
					CLCD_u8GoToXY(0, 1);
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	61 e0       	ldi	r22, 0x01	; 1
    4e8e:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("2- Map with Pot");
    4e92:	80 ee       	ldi	r24, 0xE0	; 224
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

					/*Scan the choice from the keypad*/
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	e5 5c       	subi	r30, 0xC5	; 197
    4e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ea0:	8f ef       	ldi	r24, 0xFF	; 255
    4ea2:	80 83       	st	Z, r24
    4ea4:	06 c0       	rjmp	.+12     	; 0x4eb2 <main+0xf76>
					while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
					{
						Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    4ea6:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_u8GetPressedKey>
    4eaa:	fe 01       	movw	r30, r28
    4eac:	e5 5c       	subi	r30, 0xC5	; 197
    4eae:	fe 4f       	sbci	r31, 0xFE	; 254
    4eb0:	80 83       	st	Z, r24
					CLCD_u8GoToXY(0, 1);
					CLCD_u8SendString("2- Map with Pot");

					/*Scan the choice from the keypad*/
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
					while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	e5 5c       	subi	r30, 0xC5	; 197
    4eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    4eb8:	80 81       	ld	r24, Z
    4eba:	8f 3f       	cpi	r24, 0xFF	; 255
    4ebc:	a1 f3       	breq	.-24     	; 0x4ea6 <main+0xf6a>
					{
						Local_u8PressedKey = KEYPAD_u8GetPressedKey();
					}

					/*Which is the pressed key*/
					switch(Local_u8PressedKey)
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	e5 5c       	subi	r30, 0xC5	; 197
    4ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ec4:	80 81       	ld	r24, Z
    4ec6:	28 2f       	mov	r18, r24
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	c0 5b       	subi	r28, 0xB0	; 176
    4ecc:	de 4f       	sbci	r29, 0xFE	; 254
    4ece:	39 83       	std	Y+1, r19	; 0x01
    4ed0:	28 83       	st	Y, r18
    4ed2:	c0 55       	subi	r28, 0x50	; 80
    4ed4:	d1 40       	sbci	r29, 0x01	; 1
    4ed6:	c0 5b       	subi	r28, 0xB0	; 176
    4ed8:	de 4f       	sbci	r29, 0xFE	; 254
    4eda:	48 81       	ld	r20, Y
    4edc:	59 81       	ldd	r21, Y+1	; 0x01
    4ede:	c0 55       	subi	r28, 0x50	; 80
    4ee0:	d1 40       	sbci	r29, 0x01	; 1
    4ee2:	41 30       	cpi	r20, 0x01	; 1
    4ee4:	51 05       	cpc	r21, r1
    4ee6:	51 f0       	breq	.+20     	; 0x4efc <main+0xfc0>
    4ee8:	c0 5b       	subi	r28, 0xB0	; 176
    4eea:	de 4f       	sbci	r29, 0xFE	; 254
    4eec:	88 81       	ld	r24, Y
    4eee:	99 81       	ldd	r25, Y+1	; 0x01
    4ef0:	c0 55       	subi	r28, 0x50	; 80
    4ef2:	d1 40       	sbci	r29, 0x01	; 1
    4ef4:	82 30       	cpi	r24, 0x02	; 2
    4ef6:	91 05       	cpc	r25, r1
    4ef8:	39 f0       	breq	.+14     	; 0x4f08 <main+0xfcc>
    4efa:	0c c0       	rjmp	.+24     	; 0x4f14 <main+0xfd8>
					{
					case 1: Local_u8DCMotorManage = 1;	break;
    4efc:	fe 01       	movw	r30, r28
    4efe:	e9 5c       	subi	r30, 0xC9	; 201
    4f00:	fe 4f       	sbci	r31, 0xFE	; 254
    4f02:	81 e0       	ldi	r24, 0x01	; 1
    4f04:	80 83       	st	Z, r24
    4f06:	c6 c0       	rjmp	.+396    	; 0x5094 <main+0x1158>
					case 2:	Local_u8DCMotorManage = 2;	break;
    4f08:	fe 01       	movw	r30, r28
    4f0a:	e9 5c       	subi	r30, 0xC9	; 201
    4f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4f0e:	82 e0       	ldi	r24, 0x02	; 2
    4f10:	80 83       	st	Z, r24
    4f12:	c0 c0       	rjmp	.+384    	; 0x5094 <main+0x1158>
					default:
						CLCD_voidClearDisplay();
    4f14:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
						CLCD_u8GoToXY(2, 0);
    4f18:	82 e0       	ldi	r24, 0x02	; 2
    4f1a:	60 e0       	ldi	r22, 0x00	; 0
    4f1c:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
						CLCD_u8SendString("Wrong Input!");
    4f20:	8c e8       	ldi	r24, 0x8C	; 140
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
    4f28:	fe 01       	movw	r30, r28
    4f2a:	e3 53       	subi	r30, 0x33	; 51
    4f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2e:	80 e0       	ldi	r24, 0x00	; 0
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	aa ef       	ldi	r26, 0xFA	; 250
    4f34:	b4 e4       	ldi	r27, 0x44	; 68
    4f36:	80 83       	st	Z, r24
    4f38:	91 83       	std	Z+1, r25	; 0x01
    4f3a:	a2 83       	std	Z+2, r26	; 0x02
    4f3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f3e:	8e 01       	movw	r16, r28
    4f40:	07 53       	subi	r16, 0x37	; 55
    4f42:	1f 4f       	sbci	r17, 0xFF	; 255
    4f44:	fe 01       	movw	r30, r28
    4f46:	e3 53       	subi	r30, 0x33	; 51
    4f48:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4a:	60 81       	ld	r22, Z
    4f4c:	71 81       	ldd	r23, Z+1	; 0x01
    4f4e:	82 81       	ldd	r24, Z+2	; 0x02
    4f50:	93 81       	ldd	r25, Z+3	; 0x03
    4f52:	20 e0       	ldi	r18, 0x00	; 0
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	4a ef       	ldi	r20, 0xFA	; 250
    4f58:	54 e4       	ldi	r21, 0x44	; 68
    4f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f5e:	dc 01       	movw	r26, r24
    4f60:	cb 01       	movw	r24, r22
    4f62:	f8 01       	movw	r30, r16
    4f64:	80 83       	st	Z, r24
    4f66:	91 83       	std	Z+1, r25	; 0x01
    4f68:	a2 83       	std	Z+2, r26	; 0x02
    4f6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f6c:	fe 01       	movw	r30, r28
    4f6e:	e7 53       	subi	r30, 0x37	; 55
    4f70:	ff 4f       	sbci	r31, 0xFF	; 255
    4f72:	60 81       	ld	r22, Z
    4f74:	71 81       	ldd	r23, Z+1	; 0x01
    4f76:	82 81       	ldd	r24, Z+2	; 0x02
    4f78:	93 81       	ldd	r25, Z+3	; 0x03
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	40 e8       	ldi	r20, 0x80	; 128
    4f80:	5f e3       	ldi	r21, 0x3F	; 63
    4f82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f86:	88 23       	and	r24, r24
    4f88:	44 f4       	brge	.+16     	; 0x4f9a <main+0x105e>
		__ticks = 1;
    4f8a:	fe 01       	movw	r30, r28
    4f8c:	e9 53       	subi	r30, 0x39	; 57
    4f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	91 83       	std	Z+1, r25	; 0x01
    4f96:	80 83       	st	Z, r24
    4f98:	64 c0       	rjmp	.+200    	; 0x5062 <main+0x1126>
	else if (__tmp > 65535)
    4f9a:	fe 01       	movw	r30, r28
    4f9c:	e7 53       	subi	r30, 0x37	; 55
    4f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa0:	60 81       	ld	r22, Z
    4fa2:	71 81       	ldd	r23, Z+1	; 0x01
    4fa4:	82 81       	ldd	r24, Z+2	; 0x02
    4fa6:	93 81       	ldd	r25, Z+3	; 0x03
    4fa8:	20 e0       	ldi	r18, 0x00	; 0
    4faa:	3f ef       	ldi	r19, 0xFF	; 255
    4fac:	4f e7       	ldi	r20, 0x7F	; 127
    4fae:	57 e4       	ldi	r21, 0x47	; 71
    4fb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fb4:	18 16       	cp	r1, r24
    4fb6:	0c f0       	brlt	.+2      	; 0x4fba <main+0x107e>
    4fb8:	43 c0       	rjmp	.+134    	; 0x5040 <main+0x1104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fba:	fe 01       	movw	r30, r28
    4fbc:	e3 53       	subi	r30, 0x33	; 51
    4fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc0:	60 81       	ld	r22, Z
    4fc2:	71 81       	ldd	r23, Z+1	; 0x01
    4fc4:	82 81       	ldd	r24, Z+2	; 0x02
    4fc6:	93 81       	ldd	r25, Z+3	; 0x03
    4fc8:	20 e0       	ldi	r18, 0x00	; 0
    4fca:	30 e0       	ldi	r19, 0x00	; 0
    4fcc:	40 e2       	ldi	r20, 0x20	; 32
    4fce:	51 e4       	ldi	r21, 0x41	; 65
    4fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	cb 01       	movw	r24, r22
    4fd8:	8e 01       	movw	r16, r28
    4fda:	09 53       	subi	r16, 0x39	; 57
    4fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    4fde:	bc 01       	movw	r22, r24
    4fe0:	cd 01       	movw	r24, r26
    4fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fe6:	dc 01       	movw	r26, r24
    4fe8:	cb 01       	movw	r24, r22
    4fea:	f8 01       	movw	r30, r16
    4fec:	91 83       	std	Z+1, r25	; 0x01
    4fee:	80 83       	st	Z, r24
    4ff0:	1f c0       	rjmp	.+62     	; 0x5030 <main+0x10f4>
    4ff2:	fe 01       	movw	r30, r28
    4ff4:	eb 53       	subi	r30, 0x3B	; 59
    4ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff8:	88 ec       	ldi	r24, 0xC8	; 200
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	91 83       	std	Z+1, r25	; 0x01
    4ffe:	80 83       	st	Z, r24
    5000:	fe 01       	movw	r30, r28
    5002:	eb 53       	subi	r30, 0x3B	; 59
    5004:	ff 4f       	sbci	r31, 0xFF	; 255
    5006:	80 81       	ld	r24, Z
    5008:	91 81       	ldd	r25, Z+1	; 0x01
    500a:	01 97       	sbiw	r24, 0x01	; 1
    500c:	f1 f7       	brne	.-4      	; 0x500a <main+0x10ce>
    500e:	fe 01       	movw	r30, r28
    5010:	eb 53       	subi	r30, 0x3B	; 59
    5012:	ff 4f       	sbci	r31, 0xFF	; 255
    5014:	91 83       	std	Z+1, r25	; 0x01
    5016:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5018:	de 01       	movw	r26, r28
    501a:	a9 53       	subi	r26, 0x39	; 57
    501c:	bf 4f       	sbci	r27, 0xFF	; 255
    501e:	fe 01       	movw	r30, r28
    5020:	e9 53       	subi	r30, 0x39	; 57
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	80 81       	ld	r24, Z
    5026:	91 81       	ldd	r25, Z+1	; 0x01
    5028:	01 97       	sbiw	r24, 0x01	; 1
    502a:	11 96       	adiw	r26, 0x01	; 1
    502c:	9c 93       	st	X, r25
    502e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5030:	fe 01       	movw	r30, r28
    5032:	e9 53       	subi	r30, 0x39	; 57
    5034:	ff 4f       	sbci	r31, 0xFF	; 255
    5036:	80 81       	ld	r24, Z
    5038:	91 81       	ldd	r25, Z+1	; 0x01
    503a:	00 97       	sbiw	r24, 0x00	; 0
    503c:	d1 f6       	brne	.-76     	; 0x4ff2 <main+0x10b6>
    503e:	28 c0       	rjmp	.+80     	; 0x5090 <main+0x1154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5040:	8e 01       	movw	r16, r28
    5042:	09 53       	subi	r16, 0x39	; 57
    5044:	1f 4f       	sbci	r17, 0xFF	; 255
    5046:	fe 01       	movw	r30, r28
    5048:	e7 53       	subi	r30, 0x37	; 55
    504a:	ff 4f       	sbci	r31, 0xFF	; 255
    504c:	60 81       	ld	r22, Z
    504e:	71 81       	ldd	r23, Z+1	; 0x01
    5050:	82 81       	ldd	r24, Z+2	; 0x02
    5052:	93 81       	ldd	r25, Z+3	; 0x03
    5054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5058:	dc 01       	movw	r26, r24
    505a:	cb 01       	movw	r24, r22
    505c:	f8 01       	movw	r30, r16
    505e:	91 83       	std	Z+1, r25	; 0x01
    5060:	80 83       	st	Z, r24
    5062:	de 01       	movw	r26, r28
    5064:	ad 53       	subi	r26, 0x3D	; 61
    5066:	bf 4f       	sbci	r27, 0xFF	; 255
    5068:	fe 01       	movw	r30, r28
    506a:	e9 53       	subi	r30, 0x39	; 57
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	80 81       	ld	r24, Z
    5070:	91 81       	ldd	r25, Z+1	; 0x01
    5072:	11 96       	adiw	r26, 0x01	; 1
    5074:	9c 93       	st	X, r25
    5076:	8e 93       	st	-X, r24
    5078:	fe 01       	movw	r30, r28
    507a:	ed 53       	subi	r30, 0x3D	; 61
    507c:	ff 4f       	sbci	r31, 0xFF	; 255
    507e:	80 81       	ld	r24, Z
    5080:	91 81       	ldd	r25, Z+1	; 0x01
    5082:	01 97       	sbiw	r24, 0x01	; 1
    5084:	f1 f7       	brne	.-4      	; 0x5082 <main+0x1146>
    5086:	fe 01       	movw	r30, r28
    5088:	ed 53       	subi	r30, 0x3D	; 61
    508a:	ff 4f       	sbci	r31, 0xFF	; 255
    508c:	91 83       	std	Z+1, r25	; 0x01
    508e:	80 83       	st	Z, r24
						_delay_ms(2000);
						Main_u8SystemIndicator = 0;
    5090:	10 92 90 03 	sts	0x0390, r1
						break;
					}

					if(Main_u8SystemIndicator == 1)
    5094:	80 91 90 03 	lds	r24, 0x0390
    5098:	81 30       	cpi	r24, 0x01	; 1
    509a:	09 f0       	breq	.+2      	; 0x509e <main+0x1162>
    509c:	c9 cd       	rjmp	.-1134   	; 0x4c30 <main+0xcf4>
					{
						/*Scan the direction from the user*/
						CLCD_voidClearDisplay();
    509e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
						CLCD_u8GoToXY(0, 1);
    50a2:	80 e0       	ldi	r24, 0x00	; 0
    50a4:	61 e0       	ldi	r22, 0x01	; 1
    50a6:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
						CLCD_u8SendString("1- CW, 2- CCW");
    50aa:	80 ef       	ldi	r24, 0xF0	; 240
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
						CLCD_u8GoToXY(0, 0);
    50b2:	80 e0       	ldi	r24, 0x00	; 0
    50b4:	60 e0       	ldi	r22, 0x00	; 0
    50b6:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
						CLCD_u8SendString("Enter the Dir: ");
    50ba:	8e ef       	ldi	r24, 0xFE	; 254
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

						/*Scan the choice from the keypad*/
						Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    50c2:	fe 01       	movw	r30, r28
    50c4:	e5 5c       	subi	r30, 0xC5	; 197
    50c6:	fe 4f       	sbci	r31, 0xFE	; 254
    50c8:	8f ef       	ldi	r24, 0xFF	; 255
    50ca:	80 83       	st	Z, r24
    50cc:	06 c0       	rjmp	.+12     	; 0x50da <main+0x119e>
						while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
						{
							Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    50ce:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_u8GetPressedKey>
    50d2:	fe 01       	movw	r30, r28
    50d4:	e5 5c       	subi	r30, 0xC5	; 197
    50d6:	fe 4f       	sbci	r31, 0xFE	; 254
    50d8:	80 83       	st	Z, r24
						CLCD_u8GoToXY(0, 0);
						CLCD_u8SendString("Enter the Dir: ");

						/*Scan the choice from the keypad*/
						Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
						while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    50da:	fe 01       	movw	r30, r28
    50dc:	e5 5c       	subi	r30, 0xC5	; 197
    50de:	fe 4f       	sbci	r31, 0xFE	; 254
    50e0:	80 81       	ld	r24, Z
    50e2:	8f 3f       	cpi	r24, 0xFF	; 255
    50e4:	a1 f3       	breq	.-24     	; 0x50ce <main+0x1192>
						{
							Local_u8PressedKey = KEYPAD_u8GetPressedKey();
						}

						switch(Local_u8PressedKey)
    50e6:	fe 01       	movw	r30, r28
    50e8:	e5 5c       	subi	r30, 0xC5	; 197
    50ea:	fe 4f       	sbci	r31, 0xFE	; 254
    50ec:	80 81       	ld	r24, Z
    50ee:	88 2f       	mov	r24, r24
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	01 97       	sbiw	r24, 0x01	; 1
    50f4:	82 30       	cpi	r24, 0x02	; 2
    50f6:	91 05       	cpc	r25, r1
    50f8:	48 f4       	brcc	.+18     	; 0x510c <main+0x11d0>
						{
						case 1:
						case 2:
							Local_u8DCMotorDir = Local_u8PressedKey;
    50fa:	fe 01       	movw	r30, r28
    50fc:	ec 5c       	subi	r30, 0xCC	; 204
    50fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5100:	de 01       	movw	r26, r28
    5102:	a5 5c       	subi	r26, 0xC5	; 197
    5104:	be 4f       	sbci	r27, 0xFE	; 254
    5106:	8c 91       	ld	r24, X
    5108:	80 83       	st	Z, r24
    510a:	c0 c0       	rjmp	.+384    	; 0x528c <main+0x1350>
							break;
						default:
							CLCD_voidClearDisplay();
    510c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
							CLCD_u8GoToXY(2, 0);
    5110:	82 e0       	ldi	r24, 0x02	; 2
    5112:	60 e0       	ldi	r22, 0x00	; 0
    5114:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
							CLCD_u8SendString("Wrong Input!");
    5118:	8c e8       	ldi	r24, 0x8C	; 140
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
    5120:	fe 01       	movw	r30, r28
    5122:	e1 54       	subi	r30, 0x41	; 65
    5124:	ff 4f       	sbci	r31, 0xFF	; 255
    5126:	80 e0       	ldi	r24, 0x00	; 0
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	aa ef       	ldi	r26, 0xFA	; 250
    512c:	b4 e4       	ldi	r27, 0x44	; 68
    512e:	80 83       	st	Z, r24
    5130:	91 83       	std	Z+1, r25	; 0x01
    5132:	a2 83       	std	Z+2, r26	; 0x02
    5134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5136:	8e 01       	movw	r16, r28
    5138:	05 54       	subi	r16, 0x45	; 69
    513a:	1f 4f       	sbci	r17, 0xFF	; 255
    513c:	fe 01       	movw	r30, r28
    513e:	e1 54       	subi	r30, 0x41	; 65
    5140:	ff 4f       	sbci	r31, 0xFF	; 255
    5142:	60 81       	ld	r22, Z
    5144:	71 81       	ldd	r23, Z+1	; 0x01
    5146:	82 81       	ldd	r24, Z+2	; 0x02
    5148:	93 81       	ldd	r25, Z+3	; 0x03
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	4a ef       	ldi	r20, 0xFA	; 250
    5150:	54 e4       	ldi	r21, 0x44	; 68
    5152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5156:	dc 01       	movw	r26, r24
    5158:	cb 01       	movw	r24, r22
    515a:	f8 01       	movw	r30, r16
    515c:	80 83       	st	Z, r24
    515e:	91 83       	std	Z+1, r25	; 0x01
    5160:	a2 83       	std	Z+2, r26	; 0x02
    5162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5164:	fe 01       	movw	r30, r28
    5166:	e5 54       	subi	r30, 0x45	; 69
    5168:	ff 4f       	sbci	r31, 0xFF	; 255
    516a:	60 81       	ld	r22, Z
    516c:	71 81       	ldd	r23, Z+1	; 0x01
    516e:	82 81       	ldd	r24, Z+2	; 0x02
    5170:	93 81       	ldd	r25, Z+3	; 0x03
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	40 e8       	ldi	r20, 0x80	; 128
    5178:	5f e3       	ldi	r21, 0x3F	; 63
    517a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    517e:	88 23       	and	r24, r24
    5180:	44 f4       	brge	.+16     	; 0x5192 <main+0x1256>
		__ticks = 1;
    5182:	fe 01       	movw	r30, r28
    5184:	e7 54       	subi	r30, 0x47	; 71
    5186:	ff 4f       	sbci	r31, 0xFF	; 255
    5188:	81 e0       	ldi	r24, 0x01	; 1
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	91 83       	std	Z+1, r25	; 0x01
    518e:	80 83       	st	Z, r24
    5190:	64 c0       	rjmp	.+200    	; 0x525a <main+0x131e>
	else if (__tmp > 65535)
    5192:	fe 01       	movw	r30, r28
    5194:	e5 54       	subi	r30, 0x45	; 69
    5196:	ff 4f       	sbci	r31, 0xFF	; 255
    5198:	60 81       	ld	r22, Z
    519a:	71 81       	ldd	r23, Z+1	; 0x01
    519c:	82 81       	ldd	r24, Z+2	; 0x02
    519e:	93 81       	ldd	r25, Z+3	; 0x03
    51a0:	20 e0       	ldi	r18, 0x00	; 0
    51a2:	3f ef       	ldi	r19, 0xFF	; 255
    51a4:	4f e7       	ldi	r20, 0x7F	; 127
    51a6:	57 e4       	ldi	r21, 0x47	; 71
    51a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51ac:	18 16       	cp	r1, r24
    51ae:	0c f0       	brlt	.+2      	; 0x51b2 <main+0x1276>
    51b0:	43 c0       	rjmp	.+134    	; 0x5238 <main+0x12fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51b2:	fe 01       	movw	r30, r28
    51b4:	e1 54       	subi	r30, 0x41	; 65
    51b6:	ff 4f       	sbci	r31, 0xFF	; 255
    51b8:	60 81       	ld	r22, Z
    51ba:	71 81       	ldd	r23, Z+1	; 0x01
    51bc:	82 81       	ldd	r24, Z+2	; 0x02
    51be:	93 81       	ldd	r25, Z+3	; 0x03
    51c0:	20 e0       	ldi	r18, 0x00	; 0
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	40 e2       	ldi	r20, 0x20	; 32
    51c6:	51 e4       	ldi	r21, 0x41	; 65
    51c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	8e 01       	movw	r16, r28
    51d2:	07 54       	subi	r16, 0x47	; 71
    51d4:	1f 4f       	sbci	r17, 0xFF	; 255
    51d6:	bc 01       	movw	r22, r24
    51d8:	cd 01       	movw	r24, r26
    51da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51de:	dc 01       	movw	r26, r24
    51e0:	cb 01       	movw	r24, r22
    51e2:	f8 01       	movw	r30, r16
    51e4:	91 83       	std	Z+1, r25	; 0x01
    51e6:	80 83       	st	Z, r24
    51e8:	1f c0       	rjmp	.+62     	; 0x5228 <main+0x12ec>
    51ea:	fe 01       	movw	r30, r28
    51ec:	e9 54       	subi	r30, 0x49	; 73
    51ee:	ff 4f       	sbci	r31, 0xFF	; 255
    51f0:	88 ec       	ldi	r24, 0xC8	; 200
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	91 83       	std	Z+1, r25	; 0x01
    51f6:	80 83       	st	Z, r24
    51f8:	fe 01       	movw	r30, r28
    51fa:	e9 54       	subi	r30, 0x49	; 73
    51fc:	ff 4f       	sbci	r31, 0xFF	; 255
    51fe:	80 81       	ld	r24, Z
    5200:	91 81       	ldd	r25, Z+1	; 0x01
    5202:	01 97       	sbiw	r24, 0x01	; 1
    5204:	f1 f7       	brne	.-4      	; 0x5202 <main+0x12c6>
    5206:	fe 01       	movw	r30, r28
    5208:	e9 54       	subi	r30, 0x49	; 73
    520a:	ff 4f       	sbci	r31, 0xFF	; 255
    520c:	91 83       	std	Z+1, r25	; 0x01
    520e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5210:	de 01       	movw	r26, r28
    5212:	a7 54       	subi	r26, 0x47	; 71
    5214:	bf 4f       	sbci	r27, 0xFF	; 255
    5216:	fe 01       	movw	r30, r28
    5218:	e7 54       	subi	r30, 0x47	; 71
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	80 81       	ld	r24, Z
    521e:	91 81       	ldd	r25, Z+1	; 0x01
    5220:	01 97       	sbiw	r24, 0x01	; 1
    5222:	11 96       	adiw	r26, 0x01	; 1
    5224:	9c 93       	st	X, r25
    5226:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5228:	fe 01       	movw	r30, r28
    522a:	e7 54       	subi	r30, 0x47	; 71
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	80 81       	ld	r24, Z
    5230:	91 81       	ldd	r25, Z+1	; 0x01
    5232:	00 97       	sbiw	r24, 0x00	; 0
    5234:	d1 f6       	brne	.-76     	; 0x51ea <main+0x12ae>
    5236:	28 c0       	rjmp	.+80     	; 0x5288 <main+0x134c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5238:	8e 01       	movw	r16, r28
    523a:	07 54       	subi	r16, 0x47	; 71
    523c:	1f 4f       	sbci	r17, 0xFF	; 255
    523e:	fe 01       	movw	r30, r28
    5240:	e5 54       	subi	r30, 0x45	; 69
    5242:	ff 4f       	sbci	r31, 0xFF	; 255
    5244:	60 81       	ld	r22, Z
    5246:	71 81       	ldd	r23, Z+1	; 0x01
    5248:	82 81       	ldd	r24, Z+2	; 0x02
    524a:	93 81       	ldd	r25, Z+3	; 0x03
    524c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5250:	dc 01       	movw	r26, r24
    5252:	cb 01       	movw	r24, r22
    5254:	f8 01       	movw	r30, r16
    5256:	91 83       	std	Z+1, r25	; 0x01
    5258:	80 83       	st	Z, r24
    525a:	de 01       	movw	r26, r28
    525c:	ab 54       	subi	r26, 0x4B	; 75
    525e:	bf 4f       	sbci	r27, 0xFF	; 255
    5260:	fe 01       	movw	r30, r28
    5262:	e7 54       	subi	r30, 0x47	; 71
    5264:	ff 4f       	sbci	r31, 0xFF	; 255
    5266:	80 81       	ld	r24, Z
    5268:	91 81       	ldd	r25, Z+1	; 0x01
    526a:	11 96       	adiw	r26, 0x01	; 1
    526c:	9c 93       	st	X, r25
    526e:	8e 93       	st	-X, r24
    5270:	fe 01       	movw	r30, r28
    5272:	eb 54       	subi	r30, 0x4B	; 75
    5274:	ff 4f       	sbci	r31, 0xFF	; 255
    5276:	80 81       	ld	r24, Z
    5278:	91 81       	ldd	r25, Z+1	; 0x01
    527a:	01 97       	sbiw	r24, 0x01	; 1
    527c:	f1 f7       	brne	.-4      	; 0x527a <main+0x133e>
    527e:	fe 01       	movw	r30, r28
    5280:	eb 54       	subi	r30, 0x4B	; 75
    5282:	ff 4f       	sbci	r31, 0xFF	; 255
    5284:	91 83       	std	Z+1, r25	; 0x01
    5286:	80 83       	st	Z, r24
							_delay_ms(2000);
							Main_u8SystemIndicator = 0;
    5288:	10 92 90 03 	sts	0x0390, r1
							break;
						}


						/*Open DC Motor with Max Speed*/
						if(Local_u8DCMotorManage == 1)
    528c:	fe 01       	movw	r30, r28
    528e:	e9 5c       	subi	r30, 0xC9	; 201
    5290:	fe 4f       	sbci	r31, 0xFE	; 254
    5292:	80 81       	ld	r24, Z
    5294:	81 30       	cpi	r24, 0x01	; 1
    5296:	d9 f5       	brne	.+118    	; 0x530e <main+0x13d2>
						{
							/*Print State to the LCD*/
							CLCD_voidClearDisplay();
    5298:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
							CLCD_u8GoToXY(3, 0);
    529c:	83 e0       	ldi	r24, 0x03	; 3
    529e:	60 e0       	ldi	r22, 0x00	; 0
    52a0:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
							CLCD_u8SendString("Max Speed");
    52a4:	8e e0       	ldi	r24, 0x0E	; 14
    52a6:	91 e0       	ldi	r25, 0x01	; 1
    52a8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
							CLCD_u8GoToXY(5, 1);
    52ac:	85 e0       	ldi	r24, 0x05	; 5
    52ae:	61 e0       	ldi	r22, 0x01	; 1
    52b0:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>

							if(Local_u8DCMotorDir == 1)
    52b4:	fe 01       	movw	r30, r28
    52b6:	ec 5c       	subi	r30, 0xCC	; 204
    52b8:	fe 4f       	sbci	r31, 0xFE	; 254
    52ba:	80 81       	ld	r24, Z
    52bc:	81 30       	cpi	r24, 0x01	; 1
    52be:	71 f4       	brne	.+28     	; 0x52dc <main+0x13a0>
							{
								CLCD_u8SendString("in CW");
    52c0:	88 e1       	ldi	r24, 0x18	; 24
    52c2:	91 e0       	ldi	r25, 0x01	; 1
    52c4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

								MOTOR_u8RotateCW(&Local_motortSystemMotor);
    52c8:	ce 01       	movw	r24, r28
    52ca:	8c 5b       	subi	r24, 0xBC	; 188
    52cc:	9e 4f       	sbci	r25, 0xFE	; 254
    52ce:	0e 94 c1 13 	call	0x2782	; 0x2782 <MOTOR_u8RotateCW>

								while(Main_u8SystemIndicator != 0);
    52d2:	80 91 90 03 	lds	r24, 0x0390
    52d6:	88 23       	and	r24, r24
    52d8:	e1 f7       	brne	.-8      	; 0x52d2 <main+0x1396>
    52da:	13 c0       	rjmp	.+38     	; 0x5302 <main+0x13c6>
							}
							else if(Local_u8DCMotorDir == 2)
    52dc:	fe 01       	movw	r30, r28
    52de:	ec 5c       	subi	r30, 0xCC	; 204
    52e0:	fe 4f       	sbci	r31, 0xFE	; 254
    52e2:	80 81       	ld	r24, Z
    52e4:	82 30       	cpi	r24, 0x02	; 2
    52e6:	69 f4       	brne	.+26     	; 0x5302 <main+0x13c6>
							{
								CLCD_u8SendString("in CCW");
    52e8:	8e e1       	ldi	r24, 0x1E	; 30
    52ea:	91 e0       	ldi	r25, 0x01	; 1
    52ec:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

								MOTOR_u8RotateCCW(&Local_motortSystemMotor);
    52f0:	ce 01       	movw	r24, r28
    52f2:	8c 5b       	subi	r24, 0xBC	; 188
    52f4:	9e 4f       	sbci	r25, 0xFE	; 254
    52f6:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <MOTOR_u8RotateCCW>

								while(Main_u8SystemIndicator != 0);
    52fa:	80 91 90 03 	lds	r24, 0x0390
    52fe:	88 23       	and	r24, r24
    5300:	e1 f7       	brne	.-8      	; 0x52fa <main+0x13be>
							}

							/*Close the motor*/
							MOTOR_u8Stop(&Local_motortSystemMotor);
    5302:	ce 01       	movw	r24, r28
    5304:	8c 5b       	subi	r24, 0xBC	; 188
    5306:	9e 4f       	sbci	r25, 0xFE	; 254
    5308:	0e 94 17 14 	call	0x282e	; 0x282e <MOTOR_u8Stop>
    530c:	91 cc       	rjmp	.-1758   	; 0x4c30 <main+0xcf4>
						}
						else if(Local_u8DCMotorManage == 2)
    530e:	fe 01       	movw	r30, r28
    5310:	e9 5c       	subi	r30, 0xC9	; 201
    5312:	fe 4f       	sbci	r31, 0xFE	; 254
    5314:	80 81       	ld	r24, Z
    5316:	82 30       	cpi	r24, 0x02	; 2
    5318:	09 f0       	breq	.+2      	; 0x531c <main+0x13e0>
    531a:	8a cc       	rjmp	.-1772   	; 0x4c30 <main+0xcf4>
						{
							/*Print State to the LCD*/
							CLCD_voidClearDisplay();
    531c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
							CLCD_u8GoToXY(2, 0);
    5320:	82 e0       	ldi	r24, 0x02	; 2
    5322:	60 e0       	ldi	r22, 0x00	; 0
    5324:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
							CLCD_u8SendString("Map with Pot");
    5328:	85 e2       	ldi	r24, 0x25	; 37
    532a:	91 e0       	ldi	r25, 0x01	; 1
    532c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
							CLCD_u8GoToXY(5, 1);
    5330:	85 e0       	ldi	r24, 0x05	; 5
    5332:	61 e0       	ldi	r22, 0x01	; 1
    5334:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>

							if(Local_u8DCMotorDir == 1)
    5338:	fe 01       	movw	r30, r28
    533a:	ec 5c       	subi	r30, 0xCC	; 204
    533c:	fe 4f       	sbci	r31, 0xFE	; 254
    533e:	80 81       	ld	r24, Z
    5340:	81 30       	cpi	r24, 0x01	; 1
    5342:	09 f0       	breq	.+2      	; 0x5346 <main+0x140a>
    5344:	c5 c2       	rjmp	.+1418   	; 0x58d0 <main+0x1994>
							{
								CLCD_u8SendString("in CW");
    5346:	88 e1       	ldi	r24, 0x18	; 24
    5348:	91 e0       	ldi	r25, 0x01	; 1
    534a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
								MOTOR_u8RotateCW(&Local_motortSystemMotor);
    534e:	ce 01       	movw	r24, r28
    5350:	8c 5b       	subi	r24, 0xBC	; 188
    5352:	9e 4f       	sbci	r25, 0xFE	; 254
    5354:	0e 94 c1 13 	call	0x2782	; 0x2782 <MOTOR_u8RotateCW>
    5358:	b0 c2       	rjmp	.+1376   	; 0x58ba <main+0x197e>

								while(Main_u8SystemIndicator != 0)
								{
									/*Measure the potentiometer voltage*/
									ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH7, &Local_u16PotentiometerVoltage);
    535a:	9e 01       	movw	r18, r28
    535c:	23 5c       	subi	r18, 0xC3	; 195
    535e:	3e 4f       	sbci	r19, 0xFE	; 254
    5360:	87 e0       	ldi	r24, 0x07	; 7
    5362:	b9 01       	movw	r22, r18
    5364:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_u8StartConversionSynch>

									/*Map the ADC ouput to the ticks we need to control the speed of the DC motor*/
									Local_u16TimerTicks = LIBRARY_s32Mapping(0, 1023, 0, 20000, Local_u16PotentiometerVoltage);
    5368:	fe 01       	movw	r30, r28
    536a:	e3 5c       	subi	r30, 0xC3	; 195
    536c:	fe 4f       	sbci	r31, 0xFE	; 254
    536e:	80 81       	ld	r24, Z
    5370:	91 81       	ldd	r25, Z+1	; 0x01
    5372:	cc 01       	movw	r24, r24
    5374:	a0 e0       	ldi	r26, 0x00	; 0
    5376:	b0 e0       	ldi	r27, 0x00	; 0
    5378:	00 d0       	rcall	.+0      	; 0x537a <main+0x143e>
    537a:	00 d0       	rcall	.+0      	; 0x537c <main+0x1440>
    537c:	ed b7       	in	r30, 0x3d	; 61
    537e:	fe b7       	in	r31, 0x3e	; 62
    5380:	31 96       	adiw	r30, 0x01	; 1
    5382:	80 83       	st	Z, r24
    5384:	91 83       	std	Z+1, r25	; 0x01
    5386:	a2 83       	std	Z+2, r26	; 0x02
    5388:	b3 83       	std	Z+3, r27	; 0x03
    538a:	60 e0       	ldi	r22, 0x00	; 0
    538c:	70 e0       	ldi	r23, 0x00	; 0
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	2f ef       	ldi	r18, 0xFF	; 255
    5394:	33 e0       	ldi	r19, 0x03	; 3
    5396:	40 e0       	ldi	r20, 0x00	; 0
    5398:	50 e0       	ldi	r21, 0x00	; 0
    539a:	ee 24       	eor	r14, r14
    539c:	ff 24       	eor	r15, r15
    539e:	87 01       	movw	r16, r14
    53a0:	0f 2e       	mov	r0, r31
    53a2:	f0 e2       	ldi	r31, 0x20	; 32
    53a4:	af 2e       	mov	r10, r31
    53a6:	fe e4       	ldi	r31, 0x4E	; 78
    53a8:	bf 2e       	mov	r11, r31
    53aa:	f0 e0       	ldi	r31, 0x00	; 0
    53ac:	cf 2e       	mov	r12, r31
    53ae:	f0 e0       	ldi	r31, 0x00	; 0
    53b0:	df 2e       	mov	r13, r31
    53b2:	f0 2d       	mov	r31, r0
    53b4:	0e 94 36 13 	call	0x266c	; 0x266c <LIBRARY_s32Mapping>
    53b8:	0f 90       	pop	r0
    53ba:	0f 90       	pop	r0
    53bc:	0f 90       	pop	r0
    53be:	0f 90       	pop	r0
    53c0:	dc 01       	movw	r26, r24
    53c2:	cb 01       	movw	r24, r22
    53c4:	fe 01       	movw	r30, r28
    53c6:	eb 5d       	subi	r30, 0xDB	; 219
    53c8:	fe 4f       	sbci	r31, 0xFE	; 254
    53ca:	91 83       	std	Z+1, r25	; 0x01
    53cc:	80 83       	st	Z, r24

									/*Moving Motor with delay to manage its speed*/
									_delay_us(Local_u16TimerTicks);
    53ce:	fe 01       	movw	r30, r28
    53d0:	eb 5d       	subi	r30, 0xDB	; 219
    53d2:	fe 4f       	sbci	r31, 0xFE	; 254
    53d4:	80 81       	ld	r24, Z
    53d6:	91 81       	ldd	r25, Z+1	; 0x01
    53d8:	cc 01       	movw	r24, r24
    53da:	a0 e0       	ldi	r26, 0x00	; 0
    53dc:	b0 e0       	ldi	r27, 0x00	; 0
    53de:	bc 01       	movw	r22, r24
    53e0:	cd 01       	movw	r24, r26
    53e2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    53e6:	dc 01       	movw	r26, r24
    53e8:	cb 01       	movw	r24, r22
    53ea:	fe 01       	movw	r30, r28
    53ec:	ef 54       	subi	r30, 0x4F	; 79
    53ee:	ff 4f       	sbci	r31, 0xFF	; 255
    53f0:	80 83       	st	Z, r24
    53f2:	91 83       	std	Z+1, r25	; 0x01
    53f4:	a2 83       	std	Z+2, r26	; 0x02
    53f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    53f8:	8e 01       	movw	r16, r28
    53fa:	03 55       	subi	r16, 0x53	; 83
    53fc:	1f 4f       	sbci	r17, 0xFF	; 255
    53fe:	fe 01       	movw	r30, r28
    5400:	ef 54       	subi	r30, 0x4F	; 79
    5402:	ff 4f       	sbci	r31, 0xFF	; 255
    5404:	60 81       	ld	r22, Z
    5406:	71 81       	ldd	r23, Z+1	; 0x01
    5408:	82 81       	ldd	r24, Z+2	; 0x02
    540a:	93 81       	ldd	r25, Z+3	; 0x03
    540c:	2b ea       	ldi	r18, 0xAB	; 171
    540e:	3a ea       	ldi	r19, 0xAA	; 170
    5410:	4a e2       	ldi	r20, 0x2A	; 42
    5412:	50 e4       	ldi	r21, 0x40	; 64
    5414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	f8 01       	movw	r30, r16
    541e:	80 83       	st	Z, r24
    5420:	91 83       	std	Z+1, r25	; 0x01
    5422:	a2 83       	std	Z+2, r26	; 0x02
    5424:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5426:	fe 01       	movw	r30, r28
    5428:	e3 55       	subi	r30, 0x53	; 83
    542a:	ff 4f       	sbci	r31, 0xFF	; 255
    542c:	60 81       	ld	r22, Z
    542e:	71 81       	ldd	r23, Z+1	; 0x01
    5430:	82 81       	ldd	r24, Z+2	; 0x02
    5432:	93 81       	ldd	r25, Z+3	; 0x03
    5434:	20 e0       	ldi	r18, 0x00	; 0
    5436:	30 e0       	ldi	r19, 0x00	; 0
    5438:	40 e8       	ldi	r20, 0x80	; 128
    543a:	5f e3       	ldi	r21, 0x3F	; 63
    543c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5440:	88 23       	and	r24, r24
    5442:	34 f4       	brge	.+12     	; 0x5450 <main+0x1514>
		__ticks = 1;
    5444:	fe 01       	movw	r30, r28
    5446:	e4 55       	subi	r30, 0x54	; 84
    5448:	ff 4f       	sbci	r31, 0xFF	; 255
    544a:	81 e0       	ldi	r24, 0x01	; 1
    544c:	80 83       	st	Z, r24
    544e:	e0 c0       	rjmp	.+448    	; 0x5610 <main+0x16d4>
	else if (__tmp > 255)
    5450:	fe 01       	movw	r30, r28
    5452:	e3 55       	subi	r30, 0x53	; 83
    5454:	ff 4f       	sbci	r31, 0xFF	; 255
    5456:	60 81       	ld	r22, Z
    5458:	71 81       	ldd	r23, Z+1	; 0x01
    545a:	82 81       	ldd	r24, Z+2	; 0x02
    545c:	93 81       	ldd	r25, Z+3	; 0x03
    545e:	20 e0       	ldi	r18, 0x00	; 0
    5460:	30 e0       	ldi	r19, 0x00	; 0
    5462:	4f e7       	ldi	r20, 0x7F	; 127
    5464:	53 e4       	ldi	r21, 0x43	; 67
    5466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    546a:	18 16       	cp	r1, r24
    546c:	0c f0       	brlt	.+2      	; 0x5470 <main+0x1534>
    546e:	c0 c0       	rjmp	.+384    	; 0x55f0 <main+0x16b4>
	{
		_delay_ms(__us / 1000.0);
    5470:	fe 01       	movw	r30, r28
    5472:	ef 54       	subi	r30, 0x4F	; 79
    5474:	ff 4f       	sbci	r31, 0xFF	; 255
    5476:	60 81       	ld	r22, Z
    5478:	71 81       	ldd	r23, Z+1	; 0x01
    547a:	82 81       	ldd	r24, Z+2	; 0x02
    547c:	93 81       	ldd	r25, Z+3	; 0x03
    547e:	20 e0       	ldi	r18, 0x00	; 0
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	4a e7       	ldi	r20, 0x7A	; 122
    5484:	54 e4       	ldi	r21, 0x44	; 68
    5486:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    548a:	dc 01       	movw	r26, r24
    548c:	cb 01       	movw	r24, r22
    548e:	fe 01       	movw	r30, r28
    5490:	e8 55       	subi	r30, 0x58	; 88
    5492:	ff 4f       	sbci	r31, 0xFF	; 255
    5494:	80 83       	st	Z, r24
    5496:	91 83       	std	Z+1, r25	; 0x01
    5498:	a2 83       	std	Z+2, r26	; 0x02
    549a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    549c:	8e 01       	movw	r16, r28
    549e:	0c 55       	subi	r16, 0x5C	; 92
    54a0:	1f 4f       	sbci	r17, 0xFF	; 255
    54a2:	fe 01       	movw	r30, r28
    54a4:	e8 55       	subi	r30, 0x58	; 88
    54a6:	ff 4f       	sbci	r31, 0xFF	; 255
    54a8:	60 81       	ld	r22, Z
    54aa:	71 81       	ldd	r23, Z+1	; 0x01
    54ac:	82 81       	ldd	r24, Z+2	; 0x02
    54ae:	93 81       	ldd	r25, Z+3	; 0x03
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	4a ef       	ldi	r20, 0xFA	; 250
    54b6:	54 e4       	ldi	r21, 0x44	; 68
    54b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	f8 01       	movw	r30, r16
    54c2:	80 83       	st	Z, r24
    54c4:	91 83       	std	Z+1, r25	; 0x01
    54c6:	a2 83       	std	Z+2, r26	; 0x02
    54c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54ca:	fe 01       	movw	r30, r28
    54cc:	ec 55       	subi	r30, 0x5C	; 92
    54ce:	ff 4f       	sbci	r31, 0xFF	; 255
    54d0:	60 81       	ld	r22, Z
    54d2:	71 81       	ldd	r23, Z+1	; 0x01
    54d4:	82 81       	ldd	r24, Z+2	; 0x02
    54d6:	93 81       	ldd	r25, Z+3	; 0x03
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	40 e8       	ldi	r20, 0x80	; 128
    54de:	5f e3       	ldi	r21, 0x3F	; 63
    54e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54e4:	88 23       	and	r24, r24
    54e6:	44 f4       	brge	.+16     	; 0x54f8 <main+0x15bc>
		__ticks = 1;
    54e8:	fe 01       	movw	r30, r28
    54ea:	ee 55       	subi	r30, 0x5E	; 94
    54ec:	ff 4f       	sbci	r31, 0xFF	; 255
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	91 83       	std	Z+1, r25	; 0x01
    54f4:	80 83       	st	Z, r24
    54f6:	64 c0       	rjmp	.+200    	; 0x55c0 <main+0x1684>
	else if (__tmp > 65535)
    54f8:	fe 01       	movw	r30, r28
    54fa:	ec 55       	subi	r30, 0x5C	; 92
    54fc:	ff 4f       	sbci	r31, 0xFF	; 255
    54fe:	60 81       	ld	r22, Z
    5500:	71 81       	ldd	r23, Z+1	; 0x01
    5502:	82 81       	ldd	r24, Z+2	; 0x02
    5504:	93 81       	ldd	r25, Z+3	; 0x03
    5506:	20 e0       	ldi	r18, 0x00	; 0
    5508:	3f ef       	ldi	r19, 0xFF	; 255
    550a:	4f e7       	ldi	r20, 0x7F	; 127
    550c:	57 e4       	ldi	r21, 0x47	; 71
    550e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5512:	18 16       	cp	r1, r24
    5514:	0c f0       	brlt	.+2      	; 0x5518 <main+0x15dc>
    5516:	43 c0       	rjmp	.+134    	; 0x559e <main+0x1662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5518:	fe 01       	movw	r30, r28
    551a:	e8 55       	subi	r30, 0x58	; 88
    551c:	ff 4f       	sbci	r31, 0xFF	; 255
    551e:	60 81       	ld	r22, Z
    5520:	71 81       	ldd	r23, Z+1	; 0x01
    5522:	82 81       	ldd	r24, Z+2	; 0x02
    5524:	93 81       	ldd	r25, Z+3	; 0x03
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	40 e2       	ldi	r20, 0x20	; 32
    552c:	51 e4       	ldi	r21, 0x41	; 65
    552e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5532:	dc 01       	movw	r26, r24
    5534:	cb 01       	movw	r24, r22
    5536:	8e 01       	movw	r16, r28
    5538:	0e 55       	subi	r16, 0x5E	; 94
    553a:	1f 4f       	sbci	r17, 0xFF	; 255
    553c:	bc 01       	movw	r22, r24
    553e:	cd 01       	movw	r24, r26
    5540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5544:	dc 01       	movw	r26, r24
    5546:	cb 01       	movw	r24, r22
    5548:	f8 01       	movw	r30, r16
    554a:	91 83       	std	Z+1, r25	; 0x01
    554c:	80 83       	st	Z, r24
    554e:	1f c0       	rjmp	.+62     	; 0x558e <main+0x1652>
    5550:	fe 01       	movw	r30, r28
    5552:	e0 56       	subi	r30, 0x60	; 96
    5554:	ff 4f       	sbci	r31, 0xFF	; 255
    5556:	88 ec       	ldi	r24, 0xC8	; 200
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	91 83       	std	Z+1, r25	; 0x01
    555c:	80 83       	st	Z, r24
    555e:	fe 01       	movw	r30, r28
    5560:	e0 56       	subi	r30, 0x60	; 96
    5562:	ff 4f       	sbci	r31, 0xFF	; 255
    5564:	80 81       	ld	r24, Z
    5566:	91 81       	ldd	r25, Z+1	; 0x01
    5568:	01 97       	sbiw	r24, 0x01	; 1
    556a:	f1 f7       	brne	.-4      	; 0x5568 <main+0x162c>
    556c:	fe 01       	movw	r30, r28
    556e:	e0 56       	subi	r30, 0x60	; 96
    5570:	ff 4f       	sbci	r31, 0xFF	; 255
    5572:	91 83       	std	Z+1, r25	; 0x01
    5574:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5576:	de 01       	movw	r26, r28
    5578:	ae 55       	subi	r26, 0x5E	; 94
    557a:	bf 4f       	sbci	r27, 0xFF	; 255
    557c:	fe 01       	movw	r30, r28
    557e:	ee 55       	subi	r30, 0x5E	; 94
    5580:	ff 4f       	sbci	r31, 0xFF	; 255
    5582:	80 81       	ld	r24, Z
    5584:	91 81       	ldd	r25, Z+1	; 0x01
    5586:	01 97       	sbiw	r24, 0x01	; 1
    5588:	11 96       	adiw	r26, 0x01	; 1
    558a:	9c 93       	st	X, r25
    558c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    558e:	fe 01       	movw	r30, r28
    5590:	ee 55       	subi	r30, 0x5E	; 94
    5592:	ff 4f       	sbci	r31, 0xFF	; 255
    5594:	80 81       	ld	r24, Z
    5596:	91 81       	ldd	r25, Z+1	; 0x01
    5598:	00 97       	sbiw	r24, 0x00	; 0
    559a:	d1 f6       	brne	.-76     	; 0x5550 <main+0x1614>
    559c:	4b c0       	rjmp	.+150    	; 0x5634 <main+0x16f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    559e:	8e 01       	movw	r16, r28
    55a0:	0e 55       	subi	r16, 0x5E	; 94
    55a2:	1f 4f       	sbci	r17, 0xFF	; 255
    55a4:	fe 01       	movw	r30, r28
    55a6:	ec 55       	subi	r30, 0x5C	; 92
    55a8:	ff 4f       	sbci	r31, 0xFF	; 255
    55aa:	60 81       	ld	r22, Z
    55ac:	71 81       	ldd	r23, Z+1	; 0x01
    55ae:	82 81       	ldd	r24, Z+2	; 0x02
    55b0:	93 81       	ldd	r25, Z+3	; 0x03
    55b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55b6:	dc 01       	movw	r26, r24
    55b8:	cb 01       	movw	r24, r22
    55ba:	f8 01       	movw	r30, r16
    55bc:	91 83       	std	Z+1, r25	; 0x01
    55be:	80 83       	st	Z, r24
    55c0:	de 01       	movw	r26, r28
    55c2:	a2 56       	subi	r26, 0x62	; 98
    55c4:	bf 4f       	sbci	r27, 0xFF	; 255
    55c6:	fe 01       	movw	r30, r28
    55c8:	ee 55       	subi	r30, 0x5E	; 94
    55ca:	ff 4f       	sbci	r31, 0xFF	; 255
    55cc:	80 81       	ld	r24, Z
    55ce:	91 81       	ldd	r25, Z+1	; 0x01
    55d0:	11 96       	adiw	r26, 0x01	; 1
    55d2:	9c 93       	st	X, r25
    55d4:	8e 93       	st	-X, r24
    55d6:	fe 01       	movw	r30, r28
    55d8:	e2 56       	subi	r30, 0x62	; 98
    55da:	ff 4f       	sbci	r31, 0xFF	; 255
    55dc:	80 81       	ld	r24, Z
    55de:	91 81       	ldd	r25, Z+1	; 0x01
    55e0:	01 97       	sbiw	r24, 0x01	; 1
    55e2:	f1 f7       	brne	.-4      	; 0x55e0 <main+0x16a4>
    55e4:	fe 01       	movw	r30, r28
    55e6:	e2 56       	subi	r30, 0x62	; 98
    55e8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	80 83       	st	Z, r24
    55ee:	22 c0       	rjmp	.+68     	; 0x5634 <main+0x16f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    55f0:	8e 01       	movw	r16, r28
    55f2:	04 55       	subi	r16, 0x54	; 84
    55f4:	1f 4f       	sbci	r17, 0xFF	; 255
    55f6:	fe 01       	movw	r30, r28
    55f8:	e3 55       	subi	r30, 0x53	; 83
    55fa:	ff 4f       	sbci	r31, 0xFF	; 255
    55fc:	60 81       	ld	r22, Z
    55fe:	71 81       	ldd	r23, Z+1	; 0x01
    5600:	82 81       	ldd	r24, Z+2	; 0x02
    5602:	93 81       	ldd	r25, Z+3	; 0x03
    5604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5608:	dc 01       	movw	r26, r24
    560a:	cb 01       	movw	r24, r22
    560c:	f8 01       	movw	r30, r16
    560e:	80 83       	st	Z, r24
    5610:	de 01       	movw	r26, r28
    5612:	a3 56       	subi	r26, 0x63	; 99
    5614:	bf 4f       	sbci	r27, 0xFF	; 255
    5616:	fe 01       	movw	r30, r28
    5618:	e4 55       	subi	r30, 0x54	; 84
    561a:	ff 4f       	sbci	r31, 0xFF	; 255
    561c:	80 81       	ld	r24, Z
    561e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5620:	fe 01       	movw	r30, r28
    5622:	e3 56       	subi	r30, 0x63	; 99
    5624:	ff 4f       	sbci	r31, 0xFF	; 255
    5626:	80 81       	ld	r24, Z
    5628:	8a 95       	dec	r24
    562a:	f1 f7       	brne	.-4      	; 0x5628 <main+0x16ec>
    562c:	fe 01       	movw	r30, r28
    562e:	e3 56       	subi	r30, 0x63	; 99
    5630:	ff 4f       	sbci	r31, 0xFF	; 255
    5632:	80 83       	st	Z, r24
									MOTOR_u8Stop(&Local_motortSystemMotor);
    5634:	ce 01       	movw	r24, r28
    5636:	8c 5b       	subi	r24, 0xBC	; 188
    5638:	9e 4f       	sbci	r25, 0xFE	; 254
    563a:	0e 94 17 14 	call	0x282e	; 0x282e <MOTOR_u8Stop>
									_delay_us(20000 - Local_u16TimerTicks);
    563e:	fe 01       	movw	r30, r28
    5640:	eb 5d       	subi	r30, 0xDB	; 219
    5642:	fe 4f       	sbci	r31, 0xFE	; 254
    5644:	20 e2       	ldi	r18, 0x20	; 32
    5646:	3e e4       	ldi	r19, 0x4E	; 78
    5648:	80 81       	ld	r24, Z
    564a:	91 81       	ldd	r25, Z+1	; 0x01
    564c:	a9 01       	movw	r20, r18
    564e:	48 1b       	sub	r20, r24
    5650:	59 0b       	sbc	r21, r25
    5652:	ca 01       	movw	r24, r20
    5654:	cc 01       	movw	r24, r24
    5656:	a0 e0       	ldi	r26, 0x00	; 0
    5658:	b0 e0       	ldi	r27, 0x00	; 0
    565a:	bc 01       	movw	r22, r24
    565c:	cd 01       	movw	r24, r26
    565e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    5662:	dc 01       	movw	r26, r24
    5664:	cb 01       	movw	r24, r22
    5666:	fe 01       	movw	r30, r28
    5668:	e7 56       	subi	r30, 0x67	; 103
    566a:	ff 4f       	sbci	r31, 0xFF	; 255
    566c:	80 83       	st	Z, r24
    566e:	91 83       	std	Z+1, r25	; 0x01
    5670:	a2 83       	std	Z+2, r26	; 0x02
    5672:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5674:	8e 01       	movw	r16, r28
    5676:	0b 56       	subi	r16, 0x6B	; 107
    5678:	1f 4f       	sbci	r17, 0xFF	; 255
    567a:	fe 01       	movw	r30, r28
    567c:	e7 56       	subi	r30, 0x67	; 103
    567e:	ff 4f       	sbci	r31, 0xFF	; 255
    5680:	60 81       	ld	r22, Z
    5682:	71 81       	ldd	r23, Z+1	; 0x01
    5684:	82 81       	ldd	r24, Z+2	; 0x02
    5686:	93 81       	ldd	r25, Z+3	; 0x03
    5688:	2b ea       	ldi	r18, 0xAB	; 171
    568a:	3a ea       	ldi	r19, 0xAA	; 170
    568c:	4a e2       	ldi	r20, 0x2A	; 42
    568e:	50 e4       	ldi	r21, 0x40	; 64
    5690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5694:	dc 01       	movw	r26, r24
    5696:	cb 01       	movw	r24, r22
    5698:	f8 01       	movw	r30, r16
    569a:	80 83       	st	Z, r24
    569c:	91 83       	std	Z+1, r25	; 0x01
    569e:	a2 83       	std	Z+2, r26	; 0x02
    56a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56a2:	fe 01       	movw	r30, r28
    56a4:	eb 56       	subi	r30, 0x6B	; 107
    56a6:	ff 4f       	sbci	r31, 0xFF	; 255
    56a8:	60 81       	ld	r22, Z
    56aa:	71 81       	ldd	r23, Z+1	; 0x01
    56ac:	82 81       	ldd	r24, Z+2	; 0x02
    56ae:	93 81       	ldd	r25, Z+3	; 0x03
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	40 e8       	ldi	r20, 0x80	; 128
    56b6:	5f e3       	ldi	r21, 0x3F	; 63
    56b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56bc:	88 23       	and	r24, r24
    56be:	34 f4       	brge	.+12     	; 0x56cc <main+0x1790>
		__ticks = 1;
    56c0:	fe 01       	movw	r30, r28
    56c2:	ec 56       	subi	r30, 0x6C	; 108
    56c4:	ff 4f       	sbci	r31, 0xFF	; 255
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	80 83       	st	Z, r24
    56ca:	e0 c0       	rjmp	.+448    	; 0x588c <main+0x1950>
	else if (__tmp > 255)
    56cc:	fe 01       	movw	r30, r28
    56ce:	eb 56       	subi	r30, 0x6B	; 107
    56d0:	ff 4f       	sbci	r31, 0xFF	; 255
    56d2:	60 81       	ld	r22, Z
    56d4:	71 81       	ldd	r23, Z+1	; 0x01
    56d6:	82 81       	ldd	r24, Z+2	; 0x02
    56d8:	93 81       	ldd	r25, Z+3	; 0x03
    56da:	20 e0       	ldi	r18, 0x00	; 0
    56dc:	30 e0       	ldi	r19, 0x00	; 0
    56de:	4f e7       	ldi	r20, 0x7F	; 127
    56e0:	53 e4       	ldi	r21, 0x43	; 67
    56e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56e6:	18 16       	cp	r1, r24
    56e8:	0c f0       	brlt	.+2      	; 0x56ec <main+0x17b0>
    56ea:	c0 c0       	rjmp	.+384    	; 0x586c <main+0x1930>
	{
		_delay_ms(__us / 1000.0);
    56ec:	fe 01       	movw	r30, r28
    56ee:	e7 56       	subi	r30, 0x67	; 103
    56f0:	ff 4f       	sbci	r31, 0xFF	; 255
    56f2:	60 81       	ld	r22, Z
    56f4:	71 81       	ldd	r23, Z+1	; 0x01
    56f6:	82 81       	ldd	r24, Z+2	; 0x02
    56f8:	93 81       	ldd	r25, Z+3	; 0x03
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	30 e0       	ldi	r19, 0x00	; 0
    56fe:	4a e7       	ldi	r20, 0x7A	; 122
    5700:	54 e4       	ldi	r21, 0x44	; 68
    5702:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5706:	dc 01       	movw	r26, r24
    5708:	cb 01       	movw	r24, r22
    570a:	fe 01       	movw	r30, r28
    570c:	e0 57       	subi	r30, 0x70	; 112
    570e:	ff 4f       	sbci	r31, 0xFF	; 255
    5710:	80 83       	st	Z, r24
    5712:	91 83       	std	Z+1, r25	; 0x01
    5714:	a2 83       	std	Z+2, r26	; 0x02
    5716:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5718:	8e 01       	movw	r16, r28
    571a:	04 57       	subi	r16, 0x74	; 116
    571c:	1f 4f       	sbci	r17, 0xFF	; 255
    571e:	fe 01       	movw	r30, r28
    5720:	e0 57       	subi	r30, 0x70	; 112
    5722:	ff 4f       	sbci	r31, 0xFF	; 255
    5724:	60 81       	ld	r22, Z
    5726:	71 81       	ldd	r23, Z+1	; 0x01
    5728:	82 81       	ldd	r24, Z+2	; 0x02
    572a:	93 81       	ldd	r25, Z+3	; 0x03
    572c:	20 e0       	ldi	r18, 0x00	; 0
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	4a ef       	ldi	r20, 0xFA	; 250
    5732:	54 e4       	ldi	r21, 0x44	; 68
    5734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	f8 01       	movw	r30, r16
    573e:	80 83       	st	Z, r24
    5740:	91 83       	std	Z+1, r25	; 0x01
    5742:	a2 83       	std	Z+2, r26	; 0x02
    5744:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5746:	fe 01       	movw	r30, r28
    5748:	e4 57       	subi	r30, 0x74	; 116
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	60 81       	ld	r22, Z
    574e:	71 81       	ldd	r23, Z+1	; 0x01
    5750:	82 81       	ldd	r24, Z+2	; 0x02
    5752:	93 81       	ldd	r25, Z+3	; 0x03
    5754:	20 e0       	ldi	r18, 0x00	; 0
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	40 e8       	ldi	r20, 0x80	; 128
    575a:	5f e3       	ldi	r21, 0x3F	; 63
    575c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5760:	88 23       	and	r24, r24
    5762:	44 f4       	brge	.+16     	; 0x5774 <main+0x1838>
		__ticks = 1;
    5764:	fe 01       	movw	r30, r28
    5766:	e6 57       	subi	r30, 0x76	; 118
    5768:	ff 4f       	sbci	r31, 0xFF	; 255
    576a:	81 e0       	ldi	r24, 0x01	; 1
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	91 83       	std	Z+1, r25	; 0x01
    5770:	80 83       	st	Z, r24
    5772:	64 c0       	rjmp	.+200    	; 0x583c <main+0x1900>
	else if (__tmp > 65535)
    5774:	fe 01       	movw	r30, r28
    5776:	e4 57       	subi	r30, 0x74	; 116
    5778:	ff 4f       	sbci	r31, 0xFF	; 255
    577a:	60 81       	ld	r22, Z
    577c:	71 81       	ldd	r23, Z+1	; 0x01
    577e:	82 81       	ldd	r24, Z+2	; 0x02
    5780:	93 81       	ldd	r25, Z+3	; 0x03
    5782:	20 e0       	ldi	r18, 0x00	; 0
    5784:	3f ef       	ldi	r19, 0xFF	; 255
    5786:	4f e7       	ldi	r20, 0x7F	; 127
    5788:	57 e4       	ldi	r21, 0x47	; 71
    578a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    578e:	18 16       	cp	r1, r24
    5790:	0c f0       	brlt	.+2      	; 0x5794 <main+0x1858>
    5792:	43 c0       	rjmp	.+134    	; 0x581a <main+0x18de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5794:	fe 01       	movw	r30, r28
    5796:	e0 57       	subi	r30, 0x70	; 112
    5798:	ff 4f       	sbci	r31, 0xFF	; 255
    579a:	60 81       	ld	r22, Z
    579c:	71 81       	ldd	r23, Z+1	; 0x01
    579e:	82 81       	ldd	r24, Z+2	; 0x02
    57a0:	93 81       	ldd	r25, Z+3	; 0x03
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	40 e2       	ldi	r20, 0x20	; 32
    57a8:	51 e4       	ldi	r21, 0x41	; 65
    57aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ae:	dc 01       	movw	r26, r24
    57b0:	cb 01       	movw	r24, r22
    57b2:	8e 01       	movw	r16, r28
    57b4:	06 57       	subi	r16, 0x76	; 118
    57b6:	1f 4f       	sbci	r17, 0xFF	; 255
    57b8:	bc 01       	movw	r22, r24
    57ba:	cd 01       	movw	r24, r26
    57bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57c0:	dc 01       	movw	r26, r24
    57c2:	cb 01       	movw	r24, r22
    57c4:	f8 01       	movw	r30, r16
    57c6:	91 83       	std	Z+1, r25	; 0x01
    57c8:	80 83       	st	Z, r24
    57ca:	1f c0       	rjmp	.+62     	; 0x580a <main+0x18ce>
    57cc:	fe 01       	movw	r30, r28
    57ce:	e8 57       	subi	r30, 0x78	; 120
    57d0:	ff 4f       	sbci	r31, 0xFF	; 255
    57d2:	88 ec       	ldi	r24, 0xC8	; 200
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	91 83       	std	Z+1, r25	; 0x01
    57d8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    57da:	fe 01       	movw	r30, r28
    57dc:	e8 57       	subi	r30, 0x78	; 120
    57de:	ff 4f       	sbci	r31, 0xFF	; 255
    57e0:	80 81       	ld	r24, Z
    57e2:	91 81       	ldd	r25, Z+1	; 0x01
    57e4:	01 97       	sbiw	r24, 0x01	; 1
    57e6:	f1 f7       	brne	.-4      	; 0x57e4 <main+0x18a8>
    57e8:	fe 01       	movw	r30, r28
    57ea:	e8 57       	subi	r30, 0x78	; 120
    57ec:	ff 4f       	sbci	r31, 0xFF	; 255
    57ee:	91 83       	std	Z+1, r25	; 0x01
    57f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57f2:	de 01       	movw	r26, r28
    57f4:	a6 57       	subi	r26, 0x76	; 118
    57f6:	bf 4f       	sbci	r27, 0xFF	; 255
    57f8:	fe 01       	movw	r30, r28
    57fa:	e6 57       	subi	r30, 0x76	; 118
    57fc:	ff 4f       	sbci	r31, 0xFF	; 255
    57fe:	80 81       	ld	r24, Z
    5800:	91 81       	ldd	r25, Z+1	; 0x01
    5802:	01 97       	sbiw	r24, 0x01	; 1
    5804:	11 96       	adiw	r26, 0x01	; 1
    5806:	9c 93       	st	X, r25
    5808:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    580a:	fe 01       	movw	r30, r28
    580c:	e6 57       	subi	r30, 0x76	; 118
    580e:	ff 4f       	sbci	r31, 0xFF	; 255
    5810:	80 81       	ld	r24, Z
    5812:	91 81       	ldd	r25, Z+1	; 0x01
    5814:	00 97       	sbiw	r24, 0x00	; 0
    5816:	d1 f6       	brne	.-76     	; 0x57cc <main+0x1890>
    5818:	4b c0       	rjmp	.+150    	; 0x58b0 <main+0x1974>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    581a:	8e 01       	movw	r16, r28
    581c:	06 57       	subi	r16, 0x76	; 118
    581e:	1f 4f       	sbci	r17, 0xFF	; 255
    5820:	fe 01       	movw	r30, r28
    5822:	e4 57       	subi	r30, 0x74	; 116
    5824:	ff 4f       	sbci	r31, 0xFF	; 255
    5826:	60 81       	ld	r22, Z
    5828:	71 81       	ldd	r23, Z+1	; 0x01
    582a:	82 81       	ldd	r24, Z+2	; 0x02
    582c:	93 81       	ldd	r25, Z+3	; 0x03
    582e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5832:	dc 01       	movw	r26, r24
    5834:	cb 01       	movw	r24, r22
    5836:	f8 01       	movw	r30, r16
    5838:	91 83       	std	Z+1, r25	; 0x01
    583a:	80 83       	st	Z, r24
    583c:	de 01       	movw	r26, r28
    583e:	aa 57       	subi	r26, 0x7A	; 122
    5840:	bf 4f       	sbci	r27, 0xFF	; 255
    5842:	fe 01       	movw	r30, r28
    5844:	e6 57       	subi	r30, 0x76	; 118
    5846:	ff 4f       	sbci	r31, 0xFF	; 255
    5848:	80 81       	ld	r24, Z
    584a:	91 81       	ldd	r25, Z+1	; 0x01
    584c:	11 96       	adiw	r26, 0x01	; 1
    584e:	9c 93       	st	X, r25
    5850:	8e 93       	st	-X, r24
    5852:	fe 01       	movw	r30, r28
    5854:	ea 57       	subi	r30, 0x7A	; 122
    5856:	ff 4f       	sbci	r31, 0xFF	; 255
    5858:	80 81       	ld	r24, Z
    585a:	91 81       	ldd	r25, Z+1	; 0x01
    585c:	01 97       	sbiw	r24, 0x01	; 1
    585e:	f1 f7       	brne	.-4      	; 0x585c <main+0x1920>
    5860:	fe 01       	movw	r30, r28
    5862:	ea 57       	subi	r30, 0x7A	; 122
    5864:	ff 4f       	sbci	r31, 0xFF	; 255
    5866:	91 83       	std	Z+1, r25	; 0x01
    5868:	80 83       	st	Z, r24
    586a:	22 c0       	rjmp	.+68     	; 0x58b0 <main+0x1974>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    586c:	8e 01       	movw	r16, r28
    586e:	0c 56       	subi	r16, 0x6C	; 108
    5870:	1f 4f       	sbci	r17, 0xFF	; 255
    5872:	fe 01       	movw	r30, r28
    5874:	eb 56       	subi	r30, 0x6B	; 107
    5876:	ff 4f       	sbci	r31, 0xFF	; 255
    5878:	60 81       	ld	r22, Z
    587a:	71 81       	ldd	r23, Z+1	; 0x01
    587c:	82 81       	ldd	r24, Z+2	; 0x02
    587e:	93 81       	ldd	r25, Z+3	; 0x03
    5880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5884:	dc 01       	movw	r26, r24
    5886:	cb 01       	movw	r24, r22
    5888:	f8 01       	movw	r30, r16
    588a:	80 83       	st	Z, r24
    588c:	de 01       	movw	r26, r28
    588e:	ab 57       	subi	r26, 0x7B	; 123
    5890:	bf 4f       	sbci	r27, 0xFF	; 255
    5892:	fe 01       	movw	r30, r28
    5894:	ec 56       	subi	r30, 0x6C	; 108
    5896:	ff 4f       	sbci	r31, 0xFF	; 255
    5898:	80 81       	ld	r24, Z
    589a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    589c:	fe 01       	movw	r30, r28
    589e:	eb 57       	subi	r30, 0x7B	; 123
    58a0:	ff 4f       	sbci	r31, 0xFF	; 255
    58a2:	80 81       	ld	r24, Z
    58a4:	8a 95       	dec	r24
    58a6:	f1 f7       	brne	.-4      	; 0x58a4 <main+0x1968>
    58a8:	fe 01       	movw	r30, r28
    58aa:	eb 57       	subi	r30, 0x7B	; 123
    58ac:	ff 4f       	sbci	r31, 0xFF	; 255
    58ae:	80 83       	st	Z, r24
									MOTOR_u8RotateCW(&Local_motortSystemMotor);
    58b0:	ce 01       	movw	r24, r28
    58b2:	8c 5b       	subi	r24, 0xBC	; 188
    58b4:	9e 4f       	sbci	r25, 0xFE	; 254
    58b6:	0e 94 c1 13 	call	0x2782	; 0x2782 <MOTOR_u8RotateCW>
							if(Local_u8DCMotorDir == 1)
							{
								CLCD_u8SendString("in CW");
								MOTOR_u8RotateCW(&Local_motortSystemMotor);

								while(Main_u8SystemIndicator != 0)
    58ba:	80 91 90 03 	lds	r24, 0x0390
    58be:	88 23       	and	r24, r24
    58c0:	09 f0       	breq	.+2      	; 0x58c4 <main+0x1988>
    58c2:	4b cd       	rjmp	.-1386   	; 0x535a <main+0x141e>
									_delay_us(20000 - Local_u16TimerTicks);
									MOTOR_u8RotateCW(&Local_motortSystemMotor);
								}

								/*Close the motor*/
								MOTOR_u8Stop(&Local_motortSystemMotor);
    58c4:	ce 01       	movw	r24, r28
    58c6:	8c 5b       	subi	r24, 0xBC	; 188
    58c8:	9e 4f       	sbci	r25, 0xFE	; 254
    58ca:	0e 94 17 14 	call	0x282e	; 0x282e <MOTOR_u8Stop>
    58ce:	b0 c9       	rjmp	.-3232   	; 0x4c30 <main+0xcf4>
							}
							else if(Local_u8DCMotorDir == 2)
    58d0:	fe 01       	movw	r30, r28
    58d2:	ec 5c       	subi	r30, 0xCC	; 204
    58d4:	fe 4f       	sbci	r31, 0xFE	; 254
    58d6:	80 81       	ld	r24, Z
    58d8:	82 30       	cpi	r24, 0x02	; 2
    58da:	09 f0       	breq	.+2      	; 0x58de <main+0x19a2>
    58dc:	a9 c9       	rjmp	.-3246   	; 0x4c30 <main+0xcf4>
							{
								CLCD_u8SendString("in CCW");
    58de:	8e e1       	ldi	r24, 0x1E	; 30
    58e0:	91 e0       	ldi	r25, 0x01	; 1
    58e2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

								MOTOR_u8RotateCCW(&Local_motortSystemMotor);
    58e6:	ce 01       	movw	r24, r28
    58e8:	8c 5b       	subi	r24, 0xBC	; 188
    58ea:	9e 4f       	sbci	r25, 0xFE	; 254
    58ec:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <MOTOR_u8RotateCCW>
    58f0:	b0 c2       	rjmp	.+1376   	; 0x5e52 <main+0x1f16>

								while(Main_u8SystemIndicator != 0)
								{
									/*Measure the potentiometer voltage*/
									ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH7, &Local_u16PotentiometerVoltage);
    58f2:	9e 01       	movw	r18, r28
    58f4:	23 5c       	subi	r18, 0xC3	; 195
    58f6:	3e 4f       	sbci	r19, 0xFE	; 254
    58f8:	87 e0       	ldi	r24, 0x07	; 7
    58fa:	b9 01       	movw	r22, r18
    58fc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_u8StartConversionSynch>

									/*Map the ADC ouput to the ticks we need to control the speed of the DC motor*/
									Local_u16TimerTicks = LIBRARY_s32Mapping(0, 1023, 0, 20000, Local_u16PotentiometerVoltage);
    5900:	fe 01       	movw	r30, r28
    5902:	e3 5c       	subi	r30, 0xC3	; 195
    5904:	fe 4f       	sbci	r31, 0xFE	; 254
    5906:	80 81       	ld	r24, Z
    5908:	91 81       	ldd	r25, Z+1	; 0x01
    590a:	cc 01       	movw	r24, r24
    590c:	a0 e0       	ldi	r26, 0x00	; 0
    590e:	b0 e0       	ldi	r27, 0x00	; 0
    5910:	00 d0       	rcall	.+0      	; 0x5912 <main+0x19d6>
    5912:	00 d0       	rcall	.+0      	; 0x5914 <main+0x19d8>
    5914:	ed b7       	in	r30, 0x3d	; 61
    5916:	fe b7       	in	r31, 0x3e	; 62
    5918:	31 96       	adiw	r30, 0x01	; 1
    591a:	80 83       	st	Z, r24
    591c:	91 83       	std	Z+1, r25	; 0x01
    591e:	a2 83       	std	Z+2, r26	; 0x02
    5920:	b3 83       	std	Z+3, r27	; 0x03
    5922:	60 e0       	ldi	r22, 0x00	; 0
    5924:	70 e0       	ldi	r23, 0x00	; 0
    5926:	80 e0       	ldi	r24, 0x00	; 0
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	2f ef       	ldi	r18, 0xFF	; 255
    592c:	33 e0       	ldi	r19, 0x03	; 3
    592e:	40 e0       	ldi	r20, 0x00	; 0
    5930:	50 e0       	ldi	r21, 0x00	; 0
    5932:	ee 24       	eor	r14, r14
    5934:	ff 24       	eor	r15, r15
    5936:	87 01       	movw	r16, r14
    5938:	0f 2e       	mov	r0, r31
    593a:	f0 e2       	ldi	r31, 0x20	; 32
    593c:	af 2e       	mov	r10, r31
    593e:	fe e4       	ldi	r31, 0x4E	; 78
    5940:	bf 2e       	mov	r11, r31
    5942:	f0 e0       	ldi	r31, 0x00	; 0
    5944:	cf 2e       	mov	r12, r31
    5946:	f0 e0       	ldi	r31, 0x00	; 0
    5948:	df 2e       	mov	r13, r31
    594a:	f0 2d       	mov	r31, r0
    594c:	0e 94 36 13 	call	0x266c	; 0x266c <LIBRARY_s32Mapping>
    5950:	0f 90       	pop	r0
    5952:	0f 90       	pop	r0
    5954:	0f 90       	pop	r0
    5956:	0f 90       	pop	r0
    5958:	dc 01       	movw	r26, r24
    595a:	cb 01       	movw	r24, r22
    595c:	fe 01       	movw	r30, r28
    595e:	eb 5d       	subi	r30, 0xDB	; 219
    5960:	fe 4f       	sbci	r31, 0xFE	; 254
    5962:	91 83       	std	Z+1, r25	; 0x01
    5964:	80 83       	st	Z, r24

									/*Moving Motor with delay to manage its speed*/
									_delay_us(Local_u16TimerTicks);
    5966:	fe 01       	movw	r30, r28
    5968:	eb 5d       	subi	r30, 0xDB	; 219
    596a:	fe 4f       	sbci	r31, 0xFE	; 254
    596c:	80 81       	ld	r24, Z
    596e:	91 81       	ldd	r25, Z+1	; 0x01
    5970:	cc 01       	movw	r24, r24
    5972:	a0 e0       	ldi	r26, 0x00	; 0
    5974:	b0 e0       	ldi	r27, 0x00	; 0
    5976:	bc 01       	movw	r22, r24
    5978:	cd 01       	movw	r24, r26
    597a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    597e:	dc 01       	movw	r26, r24
    5980:	cb 01       	movw	r24, r22
    5982:	fe 01       	movw	r30, r28
    5984:	ef 57       	subi	r30, 0x7F	; 127
    5986:	ff 4f       	sbci	r31, 0xFF	; 255
    5988:	80 83       	st	Z, r24
    598a:	91 83       	std	Z+1, r25	; 0x01
    598c:	a2 83       	std	Z+2, r26	; 0x02
    598e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5990:	8e 01       	movw	r16, r28
    5992:	03 58       	subi	r16, 0x83	; 131
    5994:	1f 4f       	sbci	r17, 0xFF	; 255
    5996:	fe 01       	movw	r30, r28
    5998:	ef 57       	subi	r30, 0x7F	; 127
    599a:	ff 4f       	sbci	r31, 0xFF	; 255
    599c:	60 81       	ld	r22, Z
    599e:	71 81       	ldd	r23, Z+1	; 0x01
    59a0:	82 81       	ldd	r24, Z+2	; 0x02
    59a2:	93 81       	ldd	r25, Z+3	; 0x03
    59a4:	2b ea       	ldi	r18, 0xAB	; 171
    59a6:	3a ea       	ldi	r19, 0xAA	; 170
    59a8:	4a e2       	ldi	r20, 0x2A	; 42
    59aa:	50 e4       	ldi	r21, 0x40	; 64
    59ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59b0:	dc 01       	movw	r26, r24
    59b2:	cb 01       	movw	r24, r22
    59b4:	f8 01       	movw	r30, r16
    59b6:	80 83       	st	Z, r24
    59b8:	91 83       	std	Z+1, r25	; 0x01
    59ba:	a2 83       	std	Z+2, r26	; 0x02
    59bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59be:	fe 01       	movw	r30, r28
    59c0:	e3 58       	subi	r30, 0x83	; 131
    59c2:	ff 4f       	sbci	r31, 0xFF	; 255
    59c4:	60 81       	ld	r22, Z
    59c6:	71 81       	ldd	r23, Z+1	; 0x01
    59c8:	82 81       	ldd	r24, Z+2	; 0x02
    59ca:	93 81       	ldd	r25, Z+3	; 0x03
    59cc:	20 e0       	ldi	r18, 0x00	; 0
    59ce:	30 e0       	ldi	r19, 0x00	; 0
    59d0:	40 e8       	ldi	r20, 0x80	; 128
    59d2:	5f e3       	ldi	r21, 0x3F	; 63
    59d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59d8:	88 23       	and	r24, r24
    59da:	34 f4       	brge	.+12     	; 0x59e8 <main+0x1aac>
		__ticks = 1;
    59dc:	fe 01       	movw	r30, r28
    59de:	e4 58       	subi	r30, 0x84	; 132
    59e0:	ff 4f       	sbci	r31, 0xFF	; 255
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	80 83       	st	Z, r24
    59e6:	e0 c0       	rjmp	.+448    	; 0x5ba8 <main+0x1c6c>
	else if (__tmp > 255)
    59e8:	fe 01       	movw	r30, r28
    59ea:	e3 58       	subi	r30, 0x83	; 131
    59ec:	ff 4f       	sbci	r31, 0xFF	; 255
    59ee:	60 81       	ld	r22, Z
    59f0:	71 81       	ldd	r23, Z+1	; 0x01
    59f2:	82 81       	ldd	r24, Z+2	; 0x02
    59f4:	93 81       	ldd	r25, Z+3	; 0x03
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	4f e7       	ldi	r20, 0x7F	; 127
    59fc:	53 e4       	ldi	r21, 0x43	; 67
    59fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a02:	18 16       	cp	r1, r24
    5a04:	0c f0       	brlt	.+2      	; 0x5a08 <main+0x1acc>
    5a06:	c0 c0       	rjmp	.+384    	; 0x5b88 <main+0x1c4c>
	{
		_delay_ms(__us / 1000.0);
    5a08:	fe 01       	movw	r30, r28
    5a0a:	ef 57       	subi	r30, 0x7F	; 127
    5a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a0e:	60 81       	ld	r22, Z
    5a10:	71 81       	ldd	r23, Z+1	; 0x01
    5a12:	82 81       	ldd	r24, Z+2	; 0x02
    5a14:	93 81       	ldd	r25, Z+3	; 0x03
    5a16:	20 e0       	ldi	r18, 0x00	; 0
    5a18:	30 e0       	ldi	r19, 0x00	; 0
    5a1a:	4a e7       	ldi	r20, 0x7A	; 122
    5a1c:	54 e4       	ldi	r21, 0x44	; 68
    5a1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5a22:	dc 01       	movw	r26, r24
    5a24:	cb 01       	movw	r24, r22
    5a26:	fe 01       	movw	r30, r28
    5a28:	e8 58       	subi	r30, 0x88	; 136
    5a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2c:	80 83       	st	Z, r24
    5a2e:	91 83       	std	Z+1, r25	; 0x01
    5a30:	a2 83       	std	Z+2, r26	; 0x02
    5a32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a34:	8e 01       	movw	r16, r28
    5a36:	0c 58       	subi	r16, 0x8C	; 140
    5a38:	1f 4f       	sbci	r17, 0xFF	; 255
    5a3a:	fe 01       	movw	r30, r28
    5a3c:	e8 58       	subi	r30, 0x88	; 136
    5a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a40:	60 81       	ld	r22, Z
    5a42:	71 81       	ldd	r23, Z+1	; 0x01
    5a44:	82 81       	ldd	r24, Z+2	; 0x02
    5a46:	93 81       	ldd	r25, Z+3	; 0x03
    5a48:	20 e0       	ldi	r18, 0x00	; 0
    5a4a:	30 e0       	ldi	r19, 0x00	; 0
    5a4c:	4a ef       	ldi	r20, 0xFA	; 250
    5a4e:	54 e4       	ldi	r21, 0x44	; 68
    5a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a54:	dc 01       	movw	r26, r24
    5a56:	cb 01       	movw	r24, r22
    5a58:	f8 01       	movw	r30, r16
    5a5a:	80 83       	st	Z, r24
    5a5c:	91 83       	std	Z+1, r25	; 0x01
    5a5e:	a2 83       	std	Z+2, r26	; 0x02
    5a60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a62:	fe 01       	movw	r30, r28
    5a64:	ec 58       	subi	r30, 0x8C	; 140
    5a66:	ff 4f       	sbci	r31, 0xFF	; 255
    5a68:	60 81       	ld	r22, Z
    5a6a:	71 81       	ldd	r23, Z+1	; 0x01
    5a6c:	82 81       	ldd	r24, Z+2	; 0x02
    5a6e:	93 81       	ldd	r25, Z+3	; 0x03
    5a70:	20 e0       	ldi	r18, 0x00	; 0
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	40 e8       	ldi	r20, 0x80	; 128
    5a76:	5f e3       	ldi	r21, 0x3F	; 63
    5a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a7c:	88 23       	and	r24, r24
    5a7e:	44 f4       	brge	.+16     	; 0x5a90 <main+0x1b54>
		__ticks = 1;
    5a80:	fe 01       	movw	r30, r28
    5a82:	ee 58       	subi	r30, 0x8E	; 142
    5a84:	ff 4f       	sbci	r31, 0xFF	; 255
    5a86:	81 e0       	ldi	r24, 0x01	; 1
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	91 83       	std	Z+1, r25	; 0x01
    5a8c:	80 83       	st	Z, r24
    5a8e:	64 c0       	rjmp	.+200    	; 0x5b58 <main+0x1c1c>
	else if (__tmp > 65535)
    5a90:	fe 01       	movw	r30, r28
    5a92:	ec 58       	subi	r30, 0x8C	; 140
    5a94:	ff 4f       	sbci	r31, 0xFF	; 255
    5a96:	60 81       	ld	r22, Z
    5a98:	71 81       	ldd	r23, Z+1	; 0x01
    5a9a:	82 81       	ldd	r24, Z+2	; 0x02
    5a9c:	93 81       	ldd	r25, Z+3	; 0x03
    5a9e:	20 e0       	ldi	r18, 0x00	; 0
    5aa0:	3f ef       	ldi	r19, 0xFF	; 255
    5aa2:	4f e7       	ldi	r20, 0x7F	; 127
    5aa4:	57 e4       	ldi	r21, 0x47	; 71
    5aa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5aaa:	18 16       	cp	r1, r24
    5aac:	0c f0       	brlt	.+2      	; 0x5ab0 <main+0x1b74>
    5aae:	43 c0       	rjmp	.+134    	; 0x5b36 <main+0x1bfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ab0:	fe 01       	movw	r30, r28
    5ab2:	e8 58       	subi	r30, 0x88	; 136
    5ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab6:	60 81       	ld	r22, Z
    5ab8:	71 81       	ldd	r23, Z+1	; 0x01
    5aba:	82 81       	ldd	r24, Z+2	; 0x02
    5abc:	93 81       	ldd	r25, Z+3	; 0x03
    5abe:	20 e0       	ldi	r18, 0x00	; 0
    5ac0:	30 e0       	ldi	r19, 0x00	; 0
    5ac2:	40 e2       	ldi	r20, 0x20	; 32
    5ac4:	51 e4       	ldi	r21, 0x41	; 65
    5ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aca:	dc 01       	movw	r26, r24
    5acc:	cb 01       	movw	r24, r22
    5ace:	8e 01       	movw	r16, r28
    5ad0:	0e 58       	subi	r16, 0x8E	; 142
    5ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ad4:	bc 01       	movw	r22, r24
    5ad6:	cd 01       	movw	r24, r26
    5ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5adc:	dc 01       	movw	r26, r24
    5ade:	cb 01       	movw	r24, r22
    5ae0:	f8 01       	movw	r30, r16
    5ae2:	91 83       	std	Z+1, r25	; 0x01
    5ae4:	80 83       	st	Z, r24
    5ae6:	1f c0       	rjmp	.+62     	; 0x5b26 <main+0x1bea>
    5ae8:	fe 01       	movw	r30, r28
    5aea:	e0 59       	subi	r30, 0x90	; 144
    5aec:	ff 4f       	sbci	r31, 0xFF	; 255
    5aee:	88 ec       	ldi	r24, 0xC8	; 200
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	91 83       	std	Z+1, r25	; 0x01
    5af4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5af6:	fe 01       	movw	r30, r28
    5af8:	e0 59       	subi	r30, 0x90	; 144
    5afa:	ff 4f       	sbci	r31, 0xFF	; 255
    5afc:	80 81       	ld	r24, Z
    5afe:	91 81       	ldd	r25, Z+1	; 0x01
    5b00:	01 97       	sbiw	r24, 0x01	; 1
    5b02:	f1 f7       	brne	.-4      	; 0x5b00 <main+0x1bc4>
    5b04:	fe 01       	movw	r30, r28
    5b06:	e0 59       	subi	r30, 0x90	; 144
    5b08:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0a:	91 83       	std	Z+1, r25	; 0x01
    5b0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b0e:	de 01       	movw	r26, r28
    5b10:	ae 58       	subi	r26, 0x8E	; 142
    5b12:	bf 4f       	sbci	r27, 0xFF	; 255
    5b14:	fe 01       	movw	r30, r28
    5b16:	ee 58       	subi	r30, 0x8E	; 142
    5b18:	ff 4f       	sbci	r31, 0xFF	; 255
    5b1a:	80 81       	ld	r24, Z
    5b1c:	91 81       	ldd	r25, Z+1	; 0x01
    5b1e:	01 97       	sbiw	r24, 0x01	; 1
    5b20:	11 96       	adiw	r26, 0x01	; 1
    5b22:	9c 93       	st	X, r25
    5b24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b26:	fe 01       	movw	r30, r28
    5b28:	ee 58       	subi	r30, 0x8E	; 142
    5b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2c:	80 81       	ld	r24, Z
    5b2e:	91 81       	ldd	r25, Z+1	; 0x01
    5b30:	00 97       	sbiw	r24, 0x00	; 0
    5b32:	d1 f6       	brne	.-76     	; 0x5ae8 <main+0x1bac>
    5b34:	4b c0       	rjmp	.+150    	; 0x5bcc <main+0x1c90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b36:	8e 01       	movw	r16, r28
    5b38:	0e 58       	subi	r16, 0x8E	; 142
    5b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    5b3c:	fe 01       	movw	r30, r28
    5b3e:	ec 58       	subi	r30, 0x8C	; 140
    5b40:	ff 4f       	sbci	r31, 0xFF	; 255
    5b42:	60 81       	ld	r22, Z
    5b44:	71 81       	ldd	r23, Z+1	; 0x01
    5b46:	82 81       	ldd	r24, Z+2	; 0x02
    5b48:	93 81       	ldd	r25, Z+3	; 0x03
    5b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b4e:	dc 01       	movw	r26, r24
    5b50:	cb 01       	movw	r24, r22
    5b52:	f8 01       	movw	r30, r16
    5b54:	91 83       	std	Z+1, r25	; 0x01
    5b56:	80 83       	st	Z, r24
    5b58:	de 01       	movw	r26, r28
    5b5a:	a2 59       	subi	r26, 0x92	; 146
    5b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    5b5e:	fe 01       	movw	r30, r28
    5b60:	ee 58       	subi	r30, 0x8E	; 142
    5b62:	ff 4f       	sbci	r31, 0xFF	; 255
    5b64:	80 81       	ld	r24, Z
    5b66:	91 81       	ldd	r25, Z+1	; 0x01
    5b68:	11 96       	adiw	r26, 0x01	; 1
    5b6a:	9c 93       	st	X, r25
    5b6c:	8e 93       	st	-X, r24
    5b6e:	fe 01       	movw	r30, r28
    5b70:	e2 59       	subi	r30, 0x92	; 146
    5b72:	ff 4f       	sbci	r31, 0xFF	; 255
    5b74:	80 81       	ld	r24, Z
    5b76:	91 81       	ldd	r25, Z+1	; 0x01
    5b78:	01 97       	sbiw	r24, 0x01	; 1
    5b7a:	f1 f7       	brne	.-4      	; 0x5b78 <main+0x1c3c>
    5b7c:	fe 01       	movw	r30, r28
    5b7e:	e2 59       	subi	r30, 0x92	; 146
    5b80:	ff 4f       	sbci	r31, 0xFF	; 255
    5b82:	91 83       	std	Z+1, r25	; 0x01
    5b84:	80 83       	st	Z, r24
    5b86:	22 c0       	rjmp	.+68     	; 0x5bcc <main+0x1c90>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5b88:	8e 01       	movw	r16, r28
    5b8a:	04 58       	subi	r16, 0x84	; 132
    5b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b8e:	fe 01       	movw	r30, r28
    5b90:	e3 58       	subi	r30, 0x83	; 131
    5b92:	ff 4f       	sbci	r31, 0xFF	; 255
    5b94:	60 81       	ld	r22, Z
    5b96:	71 81       	ldd	r23, Z+1	; 0x01
    5b98:	82 81       	ldd	r24, Z+2	; 0x02
    5b9a:	93 81       	ldd	r25, Z+3	; 0x03
    5b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ba0:	dc 01       	movw	r26, r24
    5ba2:	cb 01       	movw	r24, r22
    5ba4:	f8 01       	movw	r30, r16
    5ba6:	80 83       	st	Z, r24
    5ba8:	de 01       	movw	r26, r28
    5baa:	a3 59       	subi	r26, 0x93	; 147
    5bac:	bf 4f       	sbci	r27, 0xFF	; 255
    5bae:	fe 01       	movw	r30, r28
    5bb0:	e4 58       	subi	r30, 0x84	; 132
    5bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb4:	80 81       	ld	r24, Z
    5bb6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5bb8:	fe 01       	movw	r30, r28
    5bba:	e3 59       	subi	r30, 0x93	; 147
    5bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bbe:	80 81       	ld	r24, Z
    5bc0:	8a 95       	dec	r24
    5bc2:	f1 f7       	brne	.-4      	; 0x5bc0 <main+0x1c84>
    5bc4:	fe 01       	movw	r30, r28
    5bc6:	e3 59       	subi	r30, 0x93	; 147
    5bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bca:	80 83       	st	Z, r24
									MOTOR_u8Stop(&Local_motortSystemMotor);
    5bcc:	ce 01       	movw	r24, r28
    5bce:	8c 5b       	subi	r24, 0xBC	; 188
    5bd0:	9e 4f       	sbci	r25, 0xFE	; 254
    5bd2:	0e 94 17 14 	call	0x282e	; 0x282e <MOTOR_u8Stop>
									_delay_us(20000 - Local_u16TimerTicks);
    5bd6:	fe 01       	movw	r30, r28
    5bd8:	eb 5d       	subi	r30, 0xDB	; 219
    5bda:	fe 4f       	sbci	r31, 0xFE	; 254
    5bdc:	20 e2       	ldi	r18, 0x20	; 32
    5bde:	3e e4       	ldi	r19, 0x4E	; 78
    5be0:	80 81       	ld	r24, Z
    5be2:	91 81       	ldd	r25, Z+1	; 0x01
    5be4:	a9 01       	movw	r20, r18
    5be6:	48 1b       	sub	r20, r24
    5be8:	59 0b       	sbc	r21, r25
    5bea:	ca 01       	movw	r24, r20
    5bec:	cc 01       	movw	r24, r24
    5bee:	a0 e0       	ldi	r26, 0x00	; 0
    5bf0:	b0 e0       	ldi	r27, 0x00	; 0
    5bf2:	bc 01       	movw	r22, r24
    5bf4:	cd 01       	movw	r24, r26
    5bf6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    5bfa:	dc 01       	movw	r26, r24
    5bfc:	cb 01       	movw	r24, r22
    5bfe:	fe 01       	movw	r30, r28
    5c00:	e7 59       	subi	r30, 0x97	; 151
    5c02:	ff 4f       	sbci	r31, 0xFF	; 255
    5c04:	80 83       	st	Z, r24
    5c06:	91 83       	std	Z+1, r25	; 0x01
    5c08:	a2 83       	std	Z+2, r26	; 0x02
    5c0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5c0c:	8e 01       	movw	r16, r28
    5c0e:	0b 59       	subi	r16, 0x9B	; 155
    5c10:	1f 4f       	sbci	r17, 0xFF	; 255
    5c12:	fe 01       	movw	r30, r28
    5c14:	e7 59       	subi	r30, 0x97	; 151
    5c16:	ff 4f       	sbci	r31, 0xFF	; 255
    5c18:	60 81       	ld	r22, Z
    5c1a:	71 81       	ldd	r23, Z+1	; 0x01
    5c1c:	82 81       	ldd	r24, Z+2	; 0x02
    5c1e:	93 81       	ldd	r25, Z+3	; 0x03
    5c20:	2b ea       	ldi	r18, 0xAB	; 171
    5c22:	3a ea       	ldi	r19, 0xAA	; 170
    5c24:	4a e2       	ldi	r20, 0x2A	; 42
    5c26:	50 e4       	ldi	r21, 0x40	; 64
    5c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c2c:	dc 01       	movw	r26, r24
    5c2e:	cb 01       	movw	r24, r22
    5c30:	f8 01       	movw	r30, r16
    5c32:	80 83       	st	Z, r24
    5c34:	91 83       	std	Z+1, r25	; 0x01
    5c36:	a2 83       	std	Z+2, r26	; 0x02
    5c38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c3a:	fe 01       	movw	r30, r28
    5c3c:	eb 59       	subi	r30, 0x9B	; 155
    5c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c40:	60 81       	ld	r22, Z
    5c42:	71 81       	ldd	r23, Z+1	; 0x01
    5c44:	82 81       	ldd	r24, Z+2	; 0x02
    5c46:	93 81       	ldd	r25, Z+3	; 0x03
    5c48:	20 e0       	ldi	r18, 0x00	; 0
    5c4a:	30 e0       	ldi	r19, 0x00	; 0
    5c4c:	40 e8       	ldi	r20, 0x80	; 128
    5c4e:	5f e3       	ldi	r21, 0x3F	; 63
    5c50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c54:	88 23       	and	r24, r24
    5c56:	34 f4       	brge	.+12     	; 0x5c64 <main+0x1d28>
		__ticks = 1;
    5c58:	fe 01       	movw	r30, r28
    5c5a:	ec 59       	subi	r30, 0x9C	; 156
    5c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5e:	81 e0       	ldi	r24, 0x01	; 1
    5c60:	80 83       	st	Z, r24
    5c62:	e0 c0       	rjmp	.+448    	; 0x5e24 <main+0x1ee8>
	else if (__tmp > 255)
    5c64:	fe 01       	movw	r30, r28
    5c66:	eb 59       	subi	r30, 0x9B	; 155
    5c68:	ff 4f       	sbci	r31, 0xFF	; 255
    5c6a:	60 81       	ld	r22, Z
    5c6c:	71 81       	ldd	r23, Z+1	; 0x01
    5c6e:	82 81       	ldd	r24, Z+2	; 0x02
    5c70:	93 81       	ldd	r25, Z+3	; 0x03
    5c72:	20 e0       	ldi	r18, 0x00	; 0
    5c74:	30 e0       	ldi	r19, 0x00	; 0
    5c76:	4f e7       	ldi	r20, 0x7F	; 127
    5c78:	53 e4       	ldi	r21, 0x43	; 67
    5c7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c7e:	18 16       	cp	r1, r24
    5c80:	0c f0       	brlt	.+2      	; 0x5c84 <main+0x1d48>
    5c82:	c0 c0       	rjmp	.+384    	; 0x5e04 <main+0x1ec8>
	{
		_delay_ms(__us / 1000.0);
    5c84:	fe 01       	movw	r30, r28
    5c86:	e7 59       	subi	r30, 0x97	; 151
    5c88:	ff 4f       	sbci	r31, 0xFF	; 255
    5c8a:	60 81       	ld	r22, Z
    5c8c:	71 81       	ldd	r23, Z+1	; 0x01
    5c8e:	82 81       	ldd	r24, Z+2	; 0x02
    5c90:	93 81       	ldd	r25, Z+3	; 0x03
    5c92:	20 e0       	ldi	r18, 0x00	; 0
    5c94:	30 e0       	ldi	r19, 0x00	; 0
    5c96:	4a e7       	ldi	r20, 0x7A	; 122
    5c98:	54 e4       	ldi	r21, 0x44	; 68
    5c9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5c9e:	dc 01       	movw	r26, r24
    5ca0:	cb 01       	movw	r24, r22
    5ca2:	fe 01       	movw	r30, r28
    5ca4:	e0 5a       	subi	r30, 0xA0	; 160
    5ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca8:	80 83       	st	Z, r24
    5caa:	91 83       	std	Z+1, r25	; 0x01
    5cac:	a2 83       	std	Z+2, r26	; 0x02
    5cae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cb0:	8e 01       	movw	r16, r28
    5cb2:	04 5a       	subi	r16, 0xA4	; 164
    5cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    5cb6:	fe 01       	movw	r30, r28
    5cb8:	e0 5a       	subi	r30, 0xA0	; 160
    5cba:	ff 4f       	sbci	r31, 0xFF	; 255
    5cbc:	60 81       	ld	r22, Z
    5cbe:	71 81       	ldd	r23, Z+1	; 0x01
    5cc0:	82 81       	ldd	r24, Z+2	; 0x02
    5cc2:	93 81       	ldd	r25, Z+3	; 0x03
    5cc4:	20 e0       	ldi	r18, 0x00	; 0
    5cc6:	30 e0       	ldi	r19, 0x00	; 0
    5cc8:	4a ef       	ldi	r20, 0xFA	; 250
    5cca:	54 e4       	ldi	r21, 0x44	; 68
    5ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cd0:	dc 01       	movw	r26, r24
    5cd2:	cb 01       	movw	r24, r22
    5cd4:	f8 01       	movw	r30, r16
    5cd6:	80 83       	st	Z, r24
    5cd8:	91 83       	std	Z+1, r25	; 0x01
    5cda:	a2 83       	std	Z+2, r26	; 0x02
    5cdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5cde:	fe 01       	movw	r30, r28
    5ce0:	e4 5a       	subi	r30, 0xA4	; 164
    5ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce4:	60 81       	ld	r22, Z
    5ce6:	71 81       	ldd	r23, Z+1	; 0x01
    5ce8:	82 81       	ldd	r24, Z+2	; 0x02
    5cea:	93 81       	ldd	r25, Z+3	; 0x03
    5cec:	20 e0       	ldi	r18, 0x00	; 0
    5cee:	30 e0       	ldi	r19, 0x00	; 0
    5cf0:	40 e8       	ldi	r20, 0x80	; 128
    5cf2:	5f e3       	ldi	r21, 0x3F	; 63
    5cf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cf8:	88 23       	and	r24, r24
    5cfa:	44 f4       	brge	.+16     	; 0x5d0c <main+0x1dd0>
		__ticks = 1;
    5cfc:	fe 01       	movw	r30, r28
    5cfe:	e6 5a       	subi	r30, 0xA6	; 166
    5d00:	ff 4f       	sbci	r31, 0xFF	; 255
    5d02:	81 e0       	ldi	r24, 0x01	; 1
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	91 83       	std	Z+1, r25	; 0x01
    5d08:	80 83       	st	Z, r24
    5d0a:	64 c0       	rjmp	.+200    	; 0x5dd4 <main+0x1e98>
	else if (__tmp > 65535)
    5d0c:	fe 01       	movw	r30, r28
    5d0e:	e4 5a       	subi	r30, 0xA4	; 164
    5d10:	ff 4f       	sbci	r31, 0xFF	; 255
    5d12:	60 81       	ld	r22, Z
    5d14:	71 81       	ldd	r23, Z+1	; 0x01
    5d16:	82 81       	ldd	r24, Z+2	; 0x02
    5d18:	93 81       	ldd	r25, Z+3	; 0x03
    5d1a:	20 e0       	ldi	r18, 0x00	; 0
    5d1c:	3f ef       	ldi	r19, 0xFF	; 255
    5d1e:	4f e7       	ldi	r20, 0x7F	; 127
    5d20:	57 e4       	ldi	r21, 0x47	; 71
    5d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d26:	18 16       	cp	r1, r24
    5d28:	0c f0       	brlt	.+2      	; 0x5d2c <main+0x1df0>
    5d2a:	43 c0       	rjmp	.+134    	; 0x5db2 <main+0x1e76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d2c:	fe 01       	movw	r30, r28
    5d2e:	e0 5a       	subi	r30, 0xA0	; 160
    5d30:	ff 4f       	sbci	r31, 0xFF	; 255
    5d32:	60 81       	ld	r22, Z
    5d34:	71 81       	ldd	r23, Z+1	; 0x01
    5d36:	82 81       	ldd	r24, Z+2	; 0x02
    5d38:	93 81       	ldd	r25, Z+3	; 0x03
    5d3a:	20 e0       	ldi	r18, 0x00	; 0
    5d3c:	30 e0       	ldi	r19, 0x00	; 0
    5d3e:	40 e2       	ldi	r20, 0x20	; 32
    5d40:	51 e4       	ldi	r21, 0x41	; 65
    5d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d46:	dc 01       	movw	r26, r24
    5d48:	cb 01       	movw	r24, r22
    5d4a:	8e 01       	movw	r16, r28
    5d4c:	06 5a       	subi	r16, 0xA6	; 166
    5d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d50:	bc 01       	movw	r22, r24
    5d52:	cd 01       	movw	r24, r26
    5d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d58:	dc 01       	movw	r26, r24
    5d5a:	cb 01       	movw	r24, r22
    5d5c:	f8 01       	movw	r30, r16
    5d5e:	91 83       	std	Z+1, r25	; 0x01
    5d60:	80 83       	st	Z, r24
    5d62:	1f c0       	rjmp	.+62     	; 0x5da2 <main+0x1e66>
    5d64:	fe 01       	movw	r30, r28
    5d66:	e8 5a       	subi	r30, 0xA8	; 168
    5d68:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6a:	88 ec       	ldi	r24, 0xC8	; 200
    5d6c:	90 e0       	ldi	r25, 0x00	; 0
    5d6e:	91 83       	std	Z+1, r25	; 0x01
    5d70:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5d72:	fe 01       	movw	r30, r28
    5d74:	e8 5a       	subi	r30, 0xA8	; 168
    5d76:	ff 4f       	sbci	r31, 0xFF	; 255
    5d78:	80 81       	ld	r24, Z
    5d7a:	91 81       	ldd	r25, Z+1	; 0x01
    5d7c:	01 97       	sbiw	r24, 0x01	; 1
    5d7e:	f1 f7       	brne	.-4      	; 0x5d7c <main+0x1e40>
    5d80:	fe 01       	movw	r30, r28
    5d82:	e8 5a       	subi	r30, 0xA8	; 168
    5d84:	ff 4f       	sbci	r31, 0xFF	; 255
    5d86:	91 83       	std	Z+1, r25	; 0x01
    5d88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d8a:	de 01       	movw	r26, r28
    5d8c:	a6 5a       	subi	r26, 0xA6	; 166
    5d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    5d90:	fe 01       	movw	r30, r28
    5d92:	e6 5a       	subi	r30, 0xA6	; 166
    5d94:	ff 4f       	sbci	r31, 0xFF	; 255
    5d96:	80 81       	ld	r24, Z
    5d98:	91 81       	ldd	r25, Z+1	; 0x01
    5d9a:	01 97       	sbiw	r24, 0x01	; 1
    5d9c:	11 96       	adiw	r26, 0x01	; 1
    5d9e:	9c 93       	st	X, r25
    5da0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5da2:	fe 01       	movw	r30, r28
    5da4:	e6 5a       	subi	r30, 0xA6	; 166
    5da6:	ff 4f       	sbci	r31, 0xFF	; 255
    5da8:	80 81       	ld	r24, Z
    5daa:	91 81       	ldd	r25, Z+1	; 0x01
    5dac:	00 97       	sbiw	r24, 0x00	; 0
    5dae:	d1 f6       	brne	.-76     	; 0x5d64 <main+0x1e28>
    5db0:	4b c0       	rjmp	.+150    	; 0x5e48 <main+0x1f0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5db2:	8e 01       	movw	r16, r28
    5db4:	06 5a       	subi	r16, 0xA6	; 166
    5db6:	1f 4f       	sbci	r17, 0xFF	; 255
    5db8:	fe 01       	movw	r30, r28
    5dba:	e4 5a       	subi	r30, 0xA4	; 164
    5dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dbe:	60 81       	ld	r22, Z
    5dc0:	71 81       	ldd	r23, Z+1	; 0x01
    5dc2:	82 81       	ldd	r24, Z+2	; 0x02
    5dc4:	93 81       	ldd	r25, Z+3	; 0x03
    5dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dca:	dc 01       	movw	r26, r24
    5dcc:	cb 01       	movw	r24, r22
    5dce:	f8 01       	movw	r30, r16
    5dd0:	91 83       	std	Z+1, r25	; 0x01
    5dd2:	80 83       	st	Z, r24
    5dd4:	de 01       	movw	r26, r28
    5dd6:	aa 5a       	subi	r26, 0xAA	; 170
    5dd8:	bf 4f       	sbci	r27, 0xFF	; 255
    5dda:	fe 01       	movw	r30, r28
    5ddc:	e6 5a       	subi	r30, 0xA6	; 166
    5dde:	ff 4f       	sbci	r31, 0xFF	; 255
    5de0:	80 81       	ld	r24, Z
    5de2:	91 81       	ldd	r25, Z+1	; 0x01
    5de4:	11 96       	adiw	r26, 0x01	; 1
    5de6:	9c 93       	st	X, r25
    5de8:	8e 93       	st	-X, r24
    5dea:	fe 01       	movw	r30, r28
    5dec:	ea 5a       	subi	r30, 0xAA	; 170
    5dee:	ff 4f       	sbci	r31, 0xFF	; 255
    5df0:	80 81       	ld	r24, Z
    5df2:	91 81       	ldd	r25, Z+1	; 0x01
    5df4:	01 97       	sbiw	r24, 0x01	; 1
    5df6:	f1 f7       	brne	.-4      	; 0x5df4 <main+0x1eb8>
    5df8:	fe 01       	movw	r30, r28
    5dfa:	ea 5a       	subi	r30, 0xAA	; 170
    5dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfe:	91 83       	std	Z+1, r25	; 0x01
    5e00:	80 83       	st	Z, r24
    5e02:	22 c0       	rjmp	.+68     	; 0x5e48 <main+0x1f0c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5e04:	8e 01       	movw	r16, r28
    5e06:	0c 59       	subi	r16, 0x9C	; 156
    5e08:	1f 4f       	sbci	r17, 0xFF	; 255
    5e0a:	fe 01       	movw	r30, r28
    5e0c:	eb 59       	subi	r30, 0x9B	; 155
    5e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e10:	60 81       	ld	r22, Z
    5e12:	71 81       	ldd	r23, Z+1	; 0x01
    5e14:	82 81       	ldd	r24, Z+2	; 0x02
    5e16:	93 81       	ldd	r25, Z+3	; 0x03
    5e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e1c:	dc 01       	movw	r26, r24
    5e1e:	cb 01       	movw	r24, r22
    5e20:	f8 01       	movw	r30, r16
    5e22:	80 83       	st	Z, r24
    5e24:	de 01       	movw	r26, r28
    5e26:	ab 5a       	subi	r26, 0xAB	; 171
    5e28:	bf 4f       	sbci	r27, 0xFF	; 255
    5e2a:	fe 01       	movw	r30, r28
    5e2c:	ec 59       	subi	r30, 0x9C	; 156
    5e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e30:	80 81       	ld	r24, Z
    5e32:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5e34:	fe 01       	movw	r30, r28
    5e36:	eb 5a       	subi	r30, 0xAB	; 171
    5e38:	ff 4f       	sbci	r31, 0xFF	; 255
    5e3a:	80 81       	ld	r24, Z
    5e3c:	8a 95       	dec	r24
    5e3e:	f1 f7       	brne	.-4      	; 0x5e3c <main+0x1f00>
    5e40:	fe 01       	movw	r30, r28
    5e42:	eb 5a       	subi	r30, 0xAB	; 171
    5e44:	ff 4f       	sbci	r31, 0xFF	; 255
    5e46:	80 83       	st	Z, r24
									MOTOR_u8RotateCCW(&Local_motortSystemMotor);
    5e48:	ce 01       	movw	r24, r28
    5e4a:	8c 5b       	subi	r24, 0xBC	; 188
    5e4c:	9e 4f       	sbci	r25, 0xFE	; 254
    5e4e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <MOTOR_u8RotateCCW>
							{
								CLCD_u8SendString("in CCW");

								MOTOR_u8RotateCCW(&Local_motortSystemMotor);

								while(Main_u8SystemIndicator != 0)
    5e52:	80 91 90 03 	lds	r24, 0x0390
    5e56:	88 23       	and	r24, r24
    5e58:	09 f0       	breq	.+2      	; 0x5e5c <main+0x1f20>
    5e5a:	4b cd       	rjmp	.-1386   	; 0x58f2 <main+0x19b6>
									_delay_us(20000 - Local_u16TimerTicks);
									MOTOR_u8RotateCCW(&Local_motortSystemMotor);
								}

								/*Close the motor*/
								MOTOR_u8Stop(&Local_motortSystemMotor);
    5e5c:	ce 01       	movw	r24, r28
    5e5e:	8c 5b       	subi	r24, 0xBC	; 188
    5e60:	9e 4f       	sbci	r25, 0xFE	; 254
    5e62:	0e 94 17 14 	call	0x282e	; 0x282e <MOTOR_u8Stop>
    5e66:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <main+0xcf4>
							}
						}
					}
				}
				else if(Main_u8SystemIndicator == 2)
    5e6a:	80 91 90 03 	lds	r24, 0x0390
    5e6e:	82 30       	cpi	r24, 0x02	; 2
    5e70:	09 f0       	breq	.+2      	; 0x5e74 <main+0x1f38>
    5e72:	46 c2       	rjmp	.+1164   	; 0x6300 <main+0x23c4>
				{
					/*Scan the angle from the user*/
					CLCD_voidClearDisplay();
    5e74:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
					CLCD_u8GoToXY(0, 0);
    5e78:	80 e0       	ldi	r24, 0x00	; 0
    5e7a:	60 e0       	ldi	r22, 0x00	; 0
    5e7c:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("Enter Angle: ");
    5e80:	82 e3       	ldi	r24, 0x32	; 50
    5e82:	91 e0       	ldi	r25, 0x01	; 1
    5e84:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

					Local_u8IDIterator = 0;
    5e88:	fe 01       	movw	r30, r28
    5e8a:	e6 5c       	subi	r30, 0xC6	; 198
    5e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    5e8e:	10 82       	st	Z, r1
					Local_u16StepperAngle = 0;
    5e90:	fe 01       	movw	r30, r28
    5e92:	ef 5c       	subi	r30, 0xCF	; 207
    5e94:	fe 4f       	sbci	r31, 0xFE	; 254
    5e96:	11 82       	std	Z+1, r1	; 0x01
    5e98:	10 82       	st	Z, r1
    5e9a:	52 c0       	rjmp	.+164    	; 0x5f40 <main+0x2004>
					while(Local_u8IDIterator < 3)
					{
						Local_u8IDIterator++;
    5e9c:	de 01       	movw	r26, r28
    5e9e:	a6 5c       	subi	r26, 0xC6	; 198
    5ea0:	be 4f       	sbci	r27, 0xFE	; 254
    5ea2:	fe 01       	movw	r30, r28
    5ea4:	e6 5c       	subi	r30, 0xC6	; 198
    5ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ea8:	80 81       	ld	r24, Z
    5eaa:	8f 5f       	subi	r24, 0xFF	; 255
    5eac:	8c 93       	st	X, r24
						Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    5eae:	fe 01       	movw	r30, r28
    5eb0:	e5 5c       	subi	r30, 0xC5	; 197
    5eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    5eb4:	8f ef       	ldi	r24, 0xFF	; 255
    5eb6:	80 83       	st	Z, r24
    5eb8:	06 c0       	rjmp	.+12     	; 0x5ec6 <main+0x1f8a>
						while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
						{
							Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    5eba:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_u8GetPressedKey>
    5ebe:	fe 01       	movw	r30, r28
    5ec0:	e5 5c       	subi	r30, 0xC5	; 197
    5ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    5ec4:	80 83       	st	Z, r24
					Local_u16StepperAngle = 0;
					while(Local_u8IDIterator < 3)
					{
						Local_u8IDIterator++;
						Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
						while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    5ec6:	fe 01       	movw	r30, r28
    5ec8:	e5 5c       	subi	r30, 0xC5	; 197
    5eca:	fe 4f       	sbci	r31, 0xFE	; 254
    5ecc:	80 81       	ld	r24, Z
    5ece:	8f 3f       	cpi	r24, 0xFF	; 255
    5ed0:	a1 f3       	breq	.-24     	; 0x5eba <main+0x1f7e>
						{
							Local_u8PressedKey = KEYPAD_u8GetPressedKey();
						}

						switch(Local_u8PressedKey)
    5ed2:	fe 01       	movw	r30, r28
    5ed4:	e5 5c       	subi	r30, 0xC5	; 197
    5ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ed8:	80 81       	ld	r24, Z
    5eda:	88 2f       	mov	r24, r24
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	8b 30       	cpi	r24, 0x0B	; 11
    5ee0:	91 05       	cpc	r25, r1
    5ee2:	31 f4       	brne	.+12     	; 0x5ef0 <main+0x1fb4>
						{
						case 11:
							Local_u8IDIterator = 3;
    5ee4:	fe 01       	movw	r30, r28
    5ee6:	e6 5c       	subi	r30, 0xC6	; 198
    5ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    5eea:	83 e0       	ldi	r24, 0x03	; 3
    5eec:	80 83       	st	Z, r24
    5eee:	28 c0       	rjmp	.+80     	; 0x5f40 <main+0x2004>
							break;
						default:
							/*Print the number to the lcd*/
							CLCD_voidSendDecimalNumber(Local_u8PressedKey);
    5ef0:	fe 01       	movw	r30, r28
    5ef2:	e5 5c       	subi	r30, 0xC5	; 197
    5ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ef6:	80 81       	ld	r24, Z
    5ef8:	88 2f       	mov	r24, r24
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	a0 e0       	ldi	r26, 0x00	; 0
    5efe:	b0 e0       	ldi	r27, 0x00	; 0
    5f00:	bc 01       	movw	r22, r24
    5f02:	cd 01       	movw	r24, r26
    5f04:	0e 94 2d 0a 	call	0x145a	; 0x145a <CLCD_voidSendDecimalNumber>
							/*Calculate the angle*/
							Local_u16StepperAngle = Local_u16StepperAngle * 10u + (uint16) Local_u8PressedKey;
    5f08:	fe 01       	movw	r30, r28
    5f0a:	ef 5c       	subi	r30, 0xCF	; 207
    5f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f0e:	80 81       	ld	r24, Z
    5f10:	91 81       	ldd	r25, Z+1	; 0x01
    5f12:	9c 01       	movw	r18, r24
    5f14:	22 0f       	add	r18, r18
    5f16:	33 1f       	adc	r19, r19
    5f18:	c9 01       	movw	r24, r18
    5f1a:	88 0f       	add	r24, r24
    5f1c:	99 1f       	adc	r25, r25
    5f1e:	88 0f       	add	r24, r24
    5f20:	99 1f       	adc	r25, r25
    5f22:	28 0f       	add	r18, r24
    5f24:	39 1f       	adc	r19, r25
    5f26:	fe 01       	movw	r30, r28
    5f28:	e5 5c       	subi	r30, 0xC5	; 197
    5f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f2c:	80 81       	ld	r24, Z
    5f2e:	88 2f       	mov	r24, r24
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	fe 01       	movw	r30, r28
    5f34:	ef 5c       	subi	r30, 0xCF	; 207
    5f36:	fe 4f       	sbci	r31, 0xFE	; 254
    5f38:	82 0f       	add	r24, r18
    5f3a:	93 1f       	adc	r25, r19
    5f3c:	91 83       	std	Z+1, r25	; 0x01
    5f3e:	80 83       	st	Z, r24
					CLCD_u8GoToXY(0, 0);
					CLCD_u8SendString("Enter Angle: ");

					Local_u8IDIterator = 0;
					Local_u16StepperAngle = 0;
					while(Local_u8IDIterator < 3)
    5f40:	fe 01       	movw	r30, r28
    5f42:	e6 5c       	subi	r30, 0xC6	; 198
    5f44:	fe 4f       	sbci	r31, 0xFE	; 254
    5f46:	80 81       	ld	r24, Z
    5f48:	83 30       	cpi	r24, 0x03	; 3
    5f4a:	08 f4       	brcc	.+2      	; 0x5f4e <main+0x2012>
    5f4c:	a7 cf       	rjmp	.-178    	; 0x5e9c <main+0x1f60>
    5f4e:	fe 01       	movw	r30, r28
    5f50:	ef 5a       	subi	r30, 0xAF	; 175
    5f52:	ff 4f       	sbci	r31, 0xFF	; 255
    5f54:	80 e0       	ldi	r24, 0x00	; 0
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	aa e7       	ldi	r26, 0x7A	; 122
    5f5a:	b4 e4       	ldi	r27, 0x44	; 68
    5f5c:	80 83       	st	Z, r24
    5f5e:	91 83       	std	Z+1, r25	; 0x01
    5f60:	a2 83       	std	Z+2, r26	; 0x02
    5f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f64:	8e 01       	movw	r16, r28
    5f66:	03 5b       	subi	r16, 0xB3	; 179
    5f68:	1f 4f       	sbci	r17, 0xFF	; 255
    5f6a:	fe 01       	movw	r30, r28
    5f6c:	ef 5a       	subi	r30, 0xAF	; 175
    5f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f70:	60 81       	ld	r22, Z
    5f72:	71 81       	ldd	r23, Z+1	; 0x01
    5f74:	82 81       	ldd	r24, Z+2	; 0x02
    5f76:	93 81       	ldd	r25, Z+3	; 0x03
    5f78:	20 e0       	ldi	r18, 0x00	; 0
    5f7a:	30 e0       	ldi	r19, 0x00	; 0
    5f7c:	4a ef       	ldi	r20, 0xFA	; 250
    5f7e:	54 e4       	ldi	r21, 0x44	; 68
    5f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f84:	dc 01       	movw	r26, r24
    5f86:	cb 01       	movw	r24, r22
    5f88:	f8 01       	movw	r30, r16
    5f8a:	80 83       	st	Z, r24
    5f8c:	91 83       	std	Z+1, r25	; 0x01
    5f8e:	a2 83       	std	Z+2, r26	; 0x02
    5f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f92:	fe 01       	movw	r30, r28
    5f94:	e3 5b       	subi	r30, 0xB3	; 179
    5f96:	ff 4f       	sbci	r31, 0xFF	; 255
    5f98:	60 81       	ld	r22, Z
    5f9a:	71 81       	ldd	r23, Z+1	; 0x01
    5f9c:	82 81       	ldd	r24, Z+2	; 0x02
    5f9e:	93 81       	ldd	r25, Z+3	; 0x03
    5fa0:	20 e0       	ldi	r18, 0x00	; 0
    5fa2:	30 e0       	ldi	r19, 0x00	; 0
    5fa4:	40 e8       	ldi	r20, 0x80	; 128
    5fa6:	5f e3       	ldi	r21, 0x3F	; 63
    5fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fac:	88 23       	and	r24, r24
    5fae:	44 f4       	brge	.+16     	; 0x5fc0 <main+0x2084>
		__ticks = 1;
    5fb0:	fe 01       	movw	r30, r28
    5fb2:	e5 5b       	subi	r30, 0xB5	; 181
    5fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb6:	81 e0       	ldi	r24, 0x01	; 1
    5fb8:	90 e0       	ldi	r25, 0x00	; 0
    5fba:	91 83       	std	Z+1, r25	; 0x01
    5fbc:	80 83       	st	Z, r24
    5fbe:	64 c0       	rjmp	.+200    	; 0x6088 <main+0x214c>
	else if (__tmp > 65535)
    5fc0:	fe 01       	movw	r30, r28
    5fc2:	e3 5b       	subi	r30, 0xB3	; 179
    5fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc6:	60 81       	ld	r22, Z
    5fc8:	71 81       	ldd	r23, Z+1	; 0x01
    5fca:	82 81       	ldd	r24, Z+2	; 0x02
    5fcc:	93 81       	ldd	r25, Z+3	; 0x03
    5fce:	20 e0       	ldi	r18, 0x00	; 0
    5fd0:	3f ef       	ldi	r19, 0xFF	; 255
    5fd2:	4f e7       	ldi	r20, 0x7F	; 127
    5fd4:	57 e4       	ldi	r21, 0x47	; 71
    5fd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fda:	18 16       	cp	r1, r24
    5fdc:	0c f0       	brlt	.+2      	; 0x5fe0 <main+0x20a4>
    5fde:	43 c0       	rjmp	.+134    	; 0x6066 <main+0x212a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fe0:	fe 01       	movw	r30, r28
    5fe2:	ef 5a       	subi	r30, 0xAF	; 175
    5fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe6:	60 81       	ld	r22, Z
    5fe8:	71 81       	ldd	r23, Z+1	; 0x01
    5fea:	82 81       	ldd	r24, Z+2	; 0x02
    5fec:	93 81       	ldd	r25, Z+3	; 0x03
    5fee:	20 e0       	ldi	r18, 0x00	; 0
    5ff0:	30 e0       	ldi	r19, 0x00	; 0
    5ff2:	40 e2       	ldi	r20, 0x20	; 32
    5ff4:	51 e4       	ldi	r21, 0x41	; 65
    5ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ffa:	dc 01       	movw	r26, r24
    5ffc:	cb 01       	movw	r24, r22
    5ffe:	8e 01       	movw	r16, r28
    6000:	05 5b       	subi	r16, 0xB5	; 181
    6002:	1f 4f       	sbci	r17, 0xFF	; 255
    6004:	bc 01       	movw	r22, r24
    6006:	cd 01       	movw	r24, r26
    6008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    600c:	dc 01       	movw	r26, r24
    600e:	cb 01       	movw	r24, r22
    6010:	f8 01       	movw	r30, r16
    6012:	91 83       	std	Z+1, r25	; 0x01
    6014:	80 83       	st	Z, r24
    6016:	1f c0       	rjmp	.+62     	; 0x6056 <main+0x211a>
    6018:	fe 01       	movw	r30, r28
    601a:	e7 5b       	subi	r30, 0xB7	; 183
    601c:	ff 4f       	sbci	r31, 0xFF	; 255
    601e:	88 ec       	ldi	r24, 0xC8	; 200
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	91 83       	std	Z+1, r25	; 0x01
    6024:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6026:	fe 01       	movw	r30, r28
    6028:	e7 5b       	subi	r30, 0xB7	; 183
    602a:	ff 4f       	sbci	r31, 0xFF	; 255
    602c:	80 81       	ld	r24, Z
    602e:	91 81       	ldd	r25, Z+1	; 0x01
    6030:	01 97       	sbiw	r24, 0x01	; 1
    6032:	f1 f7       	brne	.-4      	; 0x6030 <main+0x20f4>
    6034:	fe 01       	movw	r30, r28
    6036:	e7 5b       	subi	r30, 0xB7	; 183
    6038:	ff 4f       	sbci	r31, 0xFF	; 255
    603a:	91 83       	std	Z+1, r25	; 0x01
    603c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    603e:	de 01       	movw	r26, r28
    6040:	a5 5b       	subi	r26, 0xB5	; 181
    6042:	bf 4f       	sbci	r27, 0xFF	; 255
    6044:	fe 01       	movw	r30, r28
    6046:	e5 5b       	subi	r30, 0xB5	; 181
    6048:	ff 4f       	sbci	r31, 0xFF	; 255
    604a:	80 81       	ld	r24, Z
    604c:	91 81       	ldd	r25, Z+1	; 0x01
    604e:	01 97       	sbiw	r24, 0x01	; 1
    6050:	11 96       	adiw	r26, 0x01	; 1
    6052:	9c 93       	st	X, r25
    6054:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6056:	fe 01       	movw	r30, r28
    6058:	e5 5b       	subi	r30, 0xB5	; 181
    605a:	ff 4f       	sbci	r31, 0xFF	; 255
    605c:	80 81       	ld	r24, Z
    605e:	91 81       	ldd	r25, Z+1	; 0x01
    6060:	00 97       	sbiw	r24, 0x00	; 0
    6062:	d1 f6       	brne	.-76     	; 0x6018 <main+0x20dc>
    6064:	27 c0       	rjmp	.+78     	; 0x60b4 <main+0x2178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6066:	8e 01       	movw	r16, r28
    6068:	05 5b       	subi	r16, 0xB5	; 181
    606a:	1f 4f       	sbci	r17, 0xFF	; 255
    606c:	fe 01       	movw	r30, r28
    606e:	e3 5b       	subi	r30, 0xB3	; 179
    6070:	ff 4f       	sbci	r31, 0xFF	; 255
    6072:	60 81       	ld	r22, Z
    6074:	71 81       	ldd	r23, Z+1	; 0x01
    6076:	82 81       	ldd	r24, Z+2	; 0x02
    6078:	93 81       	ldd	r25, Z+3	; 0x03
    607a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    607e:	dc 01       	movw	r26, r24
    6080:	cb 01       	movw	r24, r22
    6082:	f8 01       	movw	r30, r16
    6084:	91 83       	std	Z+1, r25	; 0x01
    6086:	80 83       	st	Z, r24
    6088:	de 01       	movw	r26, r28
    608a:	a9 5b       	subi	r26, 0xB9	; 185
    608c:	bf 4f       	sbci	r27, 0xFF	; 255
    608e:	fe 01       	movw	r30, r28
    6090:	e5 5b       	subi	r30, 0xB5	; 181
    6092:	ff 4f       	sbci	r31, 0xFF	; 255
    6094:	80 81       	ld	r24, Z
    6096:	91 81       	ldd	r25, Z+1	; 0x01
    6098:	8d 93       	st	X+, r24
    609a:	9c 93       	st	X, r25
    609c:	fe 01       	movw	r30, r28
    609e:	e9 5b       	subi	r30, 0xB9	; 185
    60a0:	ff 4f       	sbci	r31, 0xFF	; 255
    60a2:	80 81       	ld	r24, Z
    60a4:	91 81       	ldd	r25, Z+1	; 0x01
    60a6:	01 97       	sbiw	r24, 0x01	; 1
    60a8:	f1 f7       	brne	.-4      	; 0x60a6 <main+0x216a>
    60aa:	fe 01       	movw	r30, r28
    60ac:	e9 5b       	subi	r30, 0xB9	; 185
    60ae:	ff 4f       	sbci	r31, 0xFF	; 255
    60b0:	91 83       	std	Z+1, r25	; 0x01
    60b2:	80 83       	st	Z, r24
						}
					}

					/*Scan the direction from the user*/
					_delay_ms(1000);
					CLCD_voidClearDisplay();
    60b4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
					CLCD_u8GoToXY(0, 0);
    60b8:	80 e0       	ldi	r24, 0x00	; 0
    60ba:	60 e0       	ldi	r22, 0x00	; 0
    60bc:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>

					/*Scan the direction from the user*/
					CLCD_voidClearDisplay();
    60c0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
					CLCD_u8GoToXY(0, 1);
    60c4:	80 e0       	ldi	r24, 0x00	; 0
    60c6:	61 e0       	ldi	r22, 0x01	; 1
    60c8:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("1- CW, 2- CCW");
    60cc:	80 ef       	ldi	r24, 0xF0	; 240
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
					CLCD_u8GoToXY(0, 0);
    60d4:	80 e0       	ldi	r24, 0x00	; 0
    60d6:	60 e0       	ldi	r22, 0x00	; 0
    60d8:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("Enter the Dir: ");
    60dc:	8e ef       	ldi	r24, 0xFE	; 254
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

					/*Scan the choice from the keypad*/
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    60e4:	fe 01       	movw	r30, r28
    60e6:	e5 5c       	subi	r30, 0xC5	; 197
    60e8:	fe 4f       	sbci	r31, 0xFE	; 254
    60ea:	8f ef       	ldi	r24, 0xFF	; 255
    60ec:	80 83       	st	Z, r24
    60ee:	06 c0       	rjmp	.+12     	; 0x60fc <main+0x21c0>
					while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
					{
						Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    60f0:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_u8GetPressedKey>
    60f4:	fe 01       	movw	r30, r28
    60f6:	e5 5c       	subi	r30, 0xC5	; 197
    60f8:	fe 4f       	sbci	r31, 0xFE	; 254
    60fa:	80 83       	st	Z, r24
					CLCD_u8GoToXY(0, 0);
					CLCD_u8SendString("Enter the Dir: ");

					/*Scan the choice from the keypad*/
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
					while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    60fc:	fe 01       	movw	r30, r28
    60fe:	e5 5c       	subi	r30, 0xC5	; 197
    6100:	fe 4f       	sbci	r31, 0xFE	; 254
    6102:	80 81       	ld	r24, Z
    6104:	8f 3f       	cpi	r24, 0xFF	; 255
    6106:	a1 f3       	breq	.-24     	; 0x60f0 <main+0x21b4>
					{
						Local_u8PressedKey = KEYPAD_u8GetPressedKey();
					}

					switch(Local_u8PressedKey)
    6108:	fe 01       	movw	r30, r28
    610a:	e5 5c       	subi	r30, 0xC5	; 197
    610c:	fe 4f       	sbci	r31, 0xFE	; 254
    610e:	80 81       	ld	r24, Z
    6110:	88 2f       	mov	r24, r24
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	01 97       	sbiw	r24, 0x01	; 1
    6116:	82 30       	cpi	r24, 0x02	; 2
    6118:	91 05       	cpc	r25, r1
    611a:	48 f4       	brcc	.+18     	; 0x612e <main+0x21f2>
					{
					case 1:
					case 2:
						Local_u8StepperDir = Local_u8PressedKey;
    611c:	fe 01       	movw	r30, r28
    611e:	ed 5c       	subi	r30, 0xCD	; 205
    6120:	fe 4f       	sbci	r31, 0xFE	; 254
    6122:	de 01       	movw	r26, r28
    6124:	a5 5c       	subi	r26, 0xC5	; 197
    6126:	be 4f       	sbci	r27, 0xFE	; 254
    6128:	8c 91       	ld	r24, X
    612a:	80 83       	st	Z, r24
    612c:	91 c0       	rjmp	.+290    	; 0x6250 <main+0x2314>
						break;
					default:
						CLCD_voidClearDisplay();
    612e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
						CLCD_u8GoToXY(2, 0);
    6132:	82 e0       	ldi	r24, 0x02	; 2
    6134:	60 e0       	ldi	r22, 0x00	; 0
    6136:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
						CLCD_u8SendString("Wrong Input!");
    613a:	8c e8       	ldi	r24, 0x8C	; 140
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
    6142:	fe 01       	movw	r30, r28
    6144:	ed 5b       	subi	r30, 0xBD	; 189
    6146:	ff 4f       	sbci	r31, 0xFF	; 255
    6148:	80 e0       	ldi	r24, 0x00	; 0
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	aa ef       	ldi	r26, 0xFA	; 250
    614e:	b4 e4       	ldi	r27, 0x44	; 68
    6150:	80 83       	st	Z, r24
    6152:	91 83       	std	Z+1, r25	; 0x01
    6154:	a2 83       	std	Z+2, r26	; 0x02
    6156:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6158:	8e 01       	movw	r16, r28
    615a:	01 5c       	subi	r16, 0xC1	; 193
    615c:	1f 4f       	sbci	r17, 0xFF	; 255
    615e:	fe 01       	movw	r30, r28
    6160:	ed 5b       	subi	r30, 0xBD	; 189
    6162:	ff 4f       	sbci	r31, 0xFF	; 255
    6164:	60 81       	ld	r22, Z
    6166:	71 81       	ldd	r23, Z+1	; 0x01
    6168:	82 81       	ldd	r24, Z+2	; 0x02
    616a:	93 81       	ldd	r25, Z+3	; 0x03
    616c:	20 e0       	ldi	r18, 0x00	; 0
    616e:	30 e0       	ldi	r19, 0x00	; 0
    6170:	4a ef       	ldi	r20, 0xFA	; 250
    6172:	54 e4       	ldi	r21, 0x44	; 68
    6174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6178:	dc 01       	movw	r26, r24
    617a:	cb 01       	movw	r24, r22
    617c:	f8 01       	movw	r30, r16
    617e:	80 83       	st	Z, r24
    6180:	91 83       	std	Z+1, r25	; 0x01
    6182:	a2 83       	std	Z+2, r26	; 0x02
    6184:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6186:	fe 01       	movw	r30, r28
    6188:	ff 96       	adiw	r30, 0x3f	; 63
    618a:	60 81       	ld	r22, Z
    618c:	71 81       	ldd	r23, Z+1	; 0x01
    618e:	82 81       	ldd	r24, Z+2	; 0x02
    6190:	93 81       	ldd	r25, Z+3	; 0x03
    6192:	20 e0       	ldi	r18, 0x00	; 0
    6194:	30 e0       	ldi	r19, 0x00	; 0
    6196:	40 e8       	ldi	r20, 0x80	; 128
    6198:	5f e3       	ldi	r21, 0x3F	; 63
    619a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    619e:	88 23       	and	r24, r24
    61a0:	2c f4       	brge	.+10     	; 0x61ac <main+0x2270>
		__ticks = 1;
    61a2:	81 e0       	ldi	r24, 0x01	; 1
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	9e af       	std	Y+62, r25	; 0x3e
    61a8:	8d af       	std	Y+61, r24	; 0x3d
    61aa:	46 c0       	rjmp	.+140    	; 0x6238 <main+0x22fc>
	else if (__tmp > 65535)
    61ac:	fe 01       	movw	r30, r28
    61ae:	ff 96       	adiw	r30, 0x3f	; 63
    61b0:	60 81       	ld	r22, Z
    61b2:	71 81       	ldd	r23, Z+1	; 0x01
    61b4:	82 81       	ldd	r24, Z+2	; 0x02
    61b6:	93 81       	ldd	r25, Z+3	; 0x03
    61b8:	20 e0       	ldi	r18, 0x00	; 0
    61ba:	3f ef       	ldi	r19, 0xFF	; 255
    61bc:	4f e7       	ldi	r20, 0x7F	; 127
    61be:	57 e4       	ldi	r21, 0x47	; 71
    61c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61c4:	18 16       	cp	r1, r24
    61c6:	64 f5       	brge	.+88     	; 0x6220 <main+0x22e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61c8:	fe 01       	movw	r30, r28
    61ca:	ed 5b       	subi	r30, 0xBD	; 189
    61cc:	ff 4f       	sbci	r31, 0xFF	; 255
    61ce:	60 81       	ld	r22, Z
    61d0:	71 81       	ldd	r23, Z+1	; 0x01
    61d2:	82 81       	ldd	r24, Z+2	; 0x02
    61d4:	93 81       	ldd	r25, Z+3	; 0x03
    61d6:	20 e0       	ldi	r18, 0x00	; 0
    61d8:	30 e0       	ldi	r19, 0x00	; 0
    61da:	40 e2       	ldi	r20, 0x20	; 32
    61dc:	51 e4       	ldi	r21, 0x41	; 65
    61de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61e2:	dc 01       	movw	r26, r24
    61e4:	cb 01       	movw	r24, r22
    61e6:	bc 01       	movw	r22, r24
    61e8:	cd 01       	movw	r24, r26
    61ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61ee:	dc 01       	movw	r26, r24
    61f0:	cb 01       	movw	r24, r22
    61f2:	9e af       	std	Y+62, r25	; 0x3e
    61f4:	8d af       	std	Y+61, r24	; 0x3d
    61f6:	0f c0       	rjmp	.+30     	; 0x6216 <main+0x22da>
    61f8:	88 ec       	ldi	r24, 0xC8	; 200
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	9c af       	std	Y+60, r25	; 0x3c
    61fe:	8b af       	std	Y+59, r24	; 0x3b
    6200:	8b ad       	ldd	r24, Y+59	; 0x3b
    6202:	9c ad       	ldd	r25, Y+60	; 0x3c
    6204:	01 97       	sbiw	r24, 0x01	; 1
    6206:	f1 f7       	brne	.-4      	; 0x6204 <main+0x22c8>
    6208:	9c af       	std	Y+60, r25	; 0x3c
    620a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    620c:	8d ad       	ldd	r24, Y+61	; 0x3d
    620e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6210:	01 97       	sbiw	r24, 0x01	; 1
    6212:	9e af       	std	Y+62, r25	; 0x3e
    6214:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6216:	8d ad       	ldd	r24, Y+61	; 0x3d
    6218:	9e ad       	ldd	r25, Y+62	; 0x3e
    621a:	00 97       	sbiw	r24, 0x00	; 0
    621c:	69 f7       	brne	.-38     	; 0x61f8 <main+0x22bc>
    621e:	16 c0       	rjmp	.+44     	; 0x624c <main+0x2310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6220:	fe 01       	movw	r30, r28
    6222:	ff 96       	adiw	r30, 0x3f	; 63
    6224:	60 81       	ld	r22, Z
    6226:	71 81       	ldd	r23, Z+1	; 0x01
    6228:	82 81       	ldd	r24, Z+2	; 0x02
    622a:	93 81       	ldd	r25, Z+3	; 0x03
    622c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6230:	dc 01       	movw	r26, r24
    6232:	cb 01       	movw	r24, r22
    6234:	9e af       	std	Y+62, r25	; 0x3e
    6236:	8d af       	std	Y+61, r24	; 0x3d
    6238:	8d ad       	ldd	r24, Y+61	; 0x3d
    623a:	9e ad       	ldd	r25, Y+62	; 0x3e
    623c:	9a af       	std	Y+58, r25	; 0x3a
    623e:	89 af       	std	Y+57, r24	; 0x39
    6240:	89 ad       	ldd	r24, Y+57	; 0x39
    6242:	9a ad       	ldd	r25, Y+58	; 0x3a
    6244:	01 97       	sbiw	r24, 0x01	; 1
    6246:	f1 f7       	brne	.-4      	; 0x6244 <main+0x2308>
    6248:	9a af       	std	Y+58, r25	; 0x3a
    624a:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(2000);
						Main_u8SystemIndicator = 0;
    624c:	10 92 90 03 	sts	0x0390, r1
						break;
					}

					/*Move the stepper*/
					CLCD_voidClearDisplay();
    6250:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
					CLCD_u8GoToXY(0, 0);
    6254:	80 e0       	ldi	r24, 0x00	; 0
    6256:	60 e0       	ldi	r22, 0x00	; 0
    6258:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("Angle: ");
    625c:	80 e4       	ldi	r24, 0x40	; 64
    625e:	91 e0       	ldi	r25, 0x01	; 1
    6260:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
					CLCD_voidSendDecimalNumber(Local_u16StepperAngle);
    6264:	fe 01       	movw	r30, r28
    6266:	ef 5c       	subi	r30, 0xCF	; 207
    6268:	fe 4f       	sbci	r31, 0xFE	; 254
    626a:	80 81       	ld	r24, Z
    626c:	91 81       	ldd	r25, Z+1	; 0x01
    626e:	cc 01       	movw	r24, r24
    6270:	a0 e0       	ldi	r26, 0x00	; 0
    6272:	b0 e0       	ldi	r27, 0x00	; 0
    6274:	bc 01       	movw	r22, r24
    6276:	cd 01       	movw	r24, r26
    6278:	0e 94 2d 0a 	call	0x145a	; 0x145a <CLCD_voidSendDecimalNumber>

					if(Main_u8SystemIndicator == 2)
    627c:	80 91 90 03 	lds	r24, 0x0390
    6280:	82 30       	cpi	r24, 0x02	; 2
    6282:	11 f0       	breq	.+4      	; 0x6288 <main+0x234c>
    6284:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <main+0xcf4>
					{
						switch(Local_u8StepperDir)
    6288:	fe 01       	movw	r30, r28
    628a:	ed 5c       	subi	r30, 0xCD	; 205
    628c:	fe 4f       	sbci	r31, 0xFE	; 254
    628e:	80 81       	ld	r24, Z
    6290:	28 2f       	mov	r18, r24
    6292:	30 e0       	ldi	r19, 0x00	; 0
    6294:	c2 5b       	subi	r28, 0xB2	; 178
    6296:	de 4f       	sbci	r29, 0xFE	; 254
    6298:	39 83       	std	Y+1, r19	; 0x01
    629a:	28 83       	st	Y, r18
    629c:	ce 54       	subi	r28, 0x4E	; 78
    629e:	d1 40       	sbci	r29, 0x01	; 1
    62a0:	c2 5b       	subi	r28, 0xB2	; 178
    62a2:	de 4f       	sbci	r29, 0xFE	; 254
    62a4:	48 81       	ld	r20, Y
    62a6:	59 81       	ldd	r21, Y+1	; 0x01
    62a8:	ce 54       	subi	r28, 0x4E	; 78
    62aa:	d1 40       	sbci	r29, 0x01	; 1
    62ac:	41 30       	cpi	r20, 0x01	; 1
    62ae:	51 05       	cpc	r21, r1
    62b0:	51 f0       	breq	.+20     	; 0x62c6 <main+0x238a>
    62b2:	c2 5b       	subi	r28, 0xB2	; 178
    62b4:	de 4f       	sbci	r29, 0xFE	; 254
    62b6:	88 81       	ld	r24, Y
    62b8:	99 81       	ldd	r25, Y+1	; 0x01
    62ba:	ce 54       	subi	r28, 0x4E	; 78
    62bc:	d1 40       	sbci	r29, 0x01	; 1
    62be:	82 30       	cpi	r24, 0x02	; 2
    62c0:	91 05       	cpc	r25, r1
    62c2:	71 f0       	breq	.+28     	; 0x62e0 <main+0x23a4>
    62c4:	19 c0       	rjmp	.+50     	; 0x62f8 <main+0x23bc>
						{
						case 1:
							STEPPER_u8RotateWithFixedSpeed(&Local_steppertMain, Local_u16StepperAngle, STEPPER_u8ROTATE_CW);
    62c6:	ce 01       	movw	r24, r28
    62c8:	89 5b       	subi	r24, 0xB9	; 185
    62ca:	9e 4f       	sbci	r25, 0xFE	; 254
    62cc:	fe 01       	movw	r30, r28
    62ce:	ef 5c       	subi	r30, 0xCF	; 207
    62d0:	fe 4f       	sbci	r31, 0xFE	; 254
    62d2:	20 81       	ld	r18, Z
    62d4:	31 81       	ldd	r19, Z+1	; 0x01
    62d6:	b9 01       	movw	r22, r18
    62d8:	41 e0       	ldi	r20, 0x01	; 1
    62da:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <STEPPER_u8RotateWithFixedSpeed>
    62de:	0c c0       	rjmp	.+24     	; 0x62f8 <main+0x23bc>
							break;
						case 2:
							STEPPER_u8RotateWithFixedSpeed(&Local_steppertMain, Local_u16StepperAngle, STEPPER_u8ROTATE_CCW);
    62e0:	ce 01       	movw	r24, r28
    62e2:	89 5b       	subi	r24, 0xB9	; 185
    62e4:	9e 4f       	sbci	r25, 0xFE	; 254
    62e6:	fe 01       	movw	r30, r28
    62e8:	ef 5c       	subi	r30, 0xCF	; 207
    62ea:	fe 4f       	sbci	r31, 0xFE	; 254
    62ec:	20 81       	ld	r18, Z
    62ee:	31 81       	ldd	r19, Z+1	; 0x01
    62f0:	b9 01       	movw	r22, r18
    62f2:	42 e0       	ldi	r20, 0x02	; 2
    62f4:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <STEPPER_u8RotateWithFixedSpeed>
							break;
						}

						Main_u8SystemIndicator = 0;
    62f8:	10 92 90 03 	sts	0x0390, r1
    62fc:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <main+0xcf4>
					}
				}
				else if(Main_u8SystemIndicator == 3)
    6300:	80 91 90 03 	lds	r24, 0x0390
    6304:	83 30       	cpi	r24, 0x03	; 3
    6306:	11 f0       	breq	.+4      	; 0x630c <main+0x23d0>
    6308:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <main+0xcf4>
				{
					/*Print DC Motor Menu*/
					CLCD_voidClearDisplay();
    630c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
					CLCD_u8GoToXY(0, 0);
    6310:	80 e0       	ldi	r24, 0x00	; 0
    6312:	60 e0       	ldi	r22, 0x00	; 0
    6314:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("1- Enter Angle");
    6318:	88 e4       	ldi	r24, 0x48	; 72
    631a:	91 e0       	ldi	r25, 0x01	; 1
    631c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
					CLCD_u8GoToXY(0, 1);
    6320:	80 e0       	ldi	r24, 0x00	; 0
    6322:	61 e0       	ldi	r22, 0x01	; 1
    6324:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
					CLCD_u8SendString("2- Map with Pot");
    6328:	80 ee       	ldi	r24, 0xE0	; 224
    632a:	90 e0       	ldi	r25, 0x00	; 0
    632c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

					/*Scan the choice from the keypad*/
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    6330:	fe 01       	movw	r30, r28
    6332:	e5 5c       	subi	r30, 0xC5	; 197
    6334:	fe 4f       	sbci	r31, 0xFE	; 254
    6336:	8f ef       	ldi	r24, 0xFF	; 255
    6338:	80 83       	st	Z, r24
    633a:	06 c0       	rjmp	.+12     	; 0x6348 <main+0x240c>
					while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
					{
						Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    633c:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_u8GetPressedKey>
    6340:	fe 01       	movw	r30, r28
    6342:	e5 5c       	subi	r30, 0xC5	; 197
    6344:	fe 4f       	sbci	r31, 0xFE	; 254
    6346:	80 83       	st	Z, r24
					CLCD_u8GoToXY(0, 1);
					CLCD_u8SendString("2- Map with Pot");

					/*Scan the choice from the keypad*/
					Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
					while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    6348:	fe 01       	movw	r30, r28
    634a:	e5 5c       	subi	r30, 0xC5	; 197
    634c:	fe 4f       	sbci	r31, 0xFE	; 254
    634e:	80 81       	ld	r24, Z
    6350:	8f 3f       	cpi	r24, 0xFF	; 255
    6352:	a1 f3       	breq	.-24     	; 0x633c <main+0x2400>
					{
						Local_u8PressedKey = KEYPAD_u8GetPressedKey();
					}

					/*Which is the pressed key*/
					switch(Local_u8PressedKey)
    6354:	fe 01       	movw	r30, r28
    6356:	e5 5c       	subi	r30, 0xC5	; 197
    6358:	fe 4f       	sbci	r31, 0xFE	; 254
    635a:	80 81       	ld	r24, Z
    635c:	e8 2f       	mov	r30, r24
    635e:	f0 e0       	ldi	r31, 0x00	; 0
    6360:	c4 5b       	subi	r28, 0xB4	; 180
    6362:	de 4f       	sbci	r29, 0xFE	; 254
    6364:	f9 83       	std	Y+1, r31	; 0x01
    6366:	e8 83       	st	Y, r30
    6368:	cc 54       	subi	r28, 0x4C	; 76
    636a:	d1 40       	sbci	r29, 0x01	; 1
    636c:	c4 5b       	subi	r28, 0xB4	; 180
    636e:	de 4f       	sbci	r29, 0xFE	; 254
    6370:	28 81       	ld	r18, Y
    6372:	39 81       	ldd	r19, Y+1	; 0x01
    6374:	cc 54       	subi	r28, 0x4C	; 76
    6376:	d1 40       	sbci	r29, 0x01	; 1
    6378:	21 30       	cpi	r18, 0x01	; 1
    637a:	31 05       	cpc	r19, r1
    637c:	51 f0       	breq	.+20     	; 0x6392 <main+0x2456>
    637e:	c4 5b       	subi	r28, 0xB4	; 180
    6380:	de 4f       	sbci	r29, 0xFE	; 254
    6382:	48 81       	ld	r20, Y
    6384:	59 81       	ldd	r21, Y+1	; 0x01
    6386:	cc 54       	subi	r28, 0x4C	; 76
    6388:	d1 40       	sbci	r29, 0x01	; 1
    638a:	42 30       	cpi	r20, 0x02	; 2
    638c:	51 05       	cpc	r21, r1
    638e:	39 f0       	breq	.+14     	; 0x639e <main+0x2462>
    6390:	0c c0       	rjmp	.+24     	; 0x63aa <main+0x246e>
					{
					case 1: Local_u8ServoMotorManage = 1;	break;
    6392:	fe 01       	movw	r30, r28
    6394:	eb 5c       	subi	r30, 0xCB	; 203
    6396:	fe 4f       	sbci	r31, 0xFE	; 254
    6398:	81 e0       	ldi	r24, 0x01	; 1
    639a:	80 83       	st	Z, r24
    639c:	84 c0       	rjmp	.+264    	; 0x64a6 <main+0x256a>
					case 2:	Local_u8ServoMotorManage = 2;	break;
    639e:	fe 01       	movw	r30, r28
    63a0:	eb 5c       	subi	r30, 0xCB	; 203
    63a2:	fe 4f       	sbci	r31, 0xFE	; 254
    63a4:	82 e0       	ldi	r24, 0x02	; 2
    63a6:	80 83       	st	Z, r24
    63a8:	7e c0       	rjmp	.+252    	; 0x64a6 <main+0x256a>
					default:
						CLCD_voidClearDisplay();
    63aa:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
						CLCD_u8GoToXY(2, 0);
    63ae:	82 e0       	ldi	r24, 0x02	; 2
    63b0:	60 e0       	ldi	r22, 0x00	; 0
    63b2:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
						CLCD_u8SendString("Wrong Input!");
    63b6:	8c e8       	ldi	r24, 0x8C	; 140
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
    63be:	80 e0       	ldi	r24, 0x00	; 0
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	aa ef       	ldi	r26, 0xFA	; 250
    63c4:	b4 e4       	ldi	r27, 0x44	; 68
    63c6:	8d ab       	std	Y+53, r24	; 0x35
    63c8:	9e ab       	std	Y+54, r25	; 0x36
    63ca:	af ab       	std	Y+55, r26	; 0x37
    63cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63ce:	6d a9       	ldd	r22, Y+53	; 0x35
    63d0:	7e a9       	ldd	r23, Y+54	; 0x36
    63d2:	8f a9       	ldd	r24, Y+55	; 0x37
    63d4:	98 ad       	ldd	r25, Y+56	; 0x38
    63d6:	20 e0       	ldi	r18, 0x00	; 0
    63d8:	30 e0       	ldi	r19, 0x00	; 0
    63da:	4a ef       	ldi	r20, 0xFA	; 250
    63dc:	54 e4       	ldi	r21, 0x44	; 68
    63de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63e2:	dc 01       	movw	r26, r24
    63e4:	cb 01       	movw	r24, r22
    63e6:	89 ab       	std	Y+49, r24	; 0x31
    63e8:	9a ab       	std	Y+50, r25	; 0x32
    63ea:	ab ab       	std	Y+51, r26	; 0x33
    63ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    63ee:	69 a9       	ldd	r22, Y+49	; 0x31
    63f0:	7a a9       	ldd	r23, Y+50	; 0x32
    63f2:	8b a9       	ldd	r24, Y+51	; 0x33
    63f4:	9c a9       	ldd	r25, Y+52	; 0x34
    63f6:	20 e0       	ldi	r18, 0x00	; 0
    63f8:	30 e0       	ldi	r19, 0x00	; 0
    63fa:	40 e8       	ldi	r20, 0x80	; 128
    63fc:	5f e3       	ldi	r21, 0x3F	; 63
    63fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6402:	88 23       	and	r24, r24
    6404:	2c f4       	brge	.+10     	; 0x6410 <main+0x24d4>
		__ticks = 1;
    6406:	81 e0       	ldi	r24, 0x01	; 1
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	98 ab       	std	Y+48, r25	; 0x30
    640c:	8f a7       	std	Y+47, r24	; 0x2f
    640e:	3f c0       	rjmp	.+126    	; 0x648e <main+0x2552>
	else if (__tmp > 65535)
    6410:	69 a9       	ldd	r22, Y+49	; 0x31
    6412:	7a a9       	ldd	r23, Y+50	; 0x32
    6414:	8b a9       	ldd	r24, Y+51	; 0x33
    6416:	9c a9       	ldd	r25, Y+52	; 0x34
    6418:	20 e0       	ldi	r18, 0x00	; 0
    641a:	3f ef       	ldi	r19, 0xFF	; 255
    641c:	4f e7       	ldi	r20, 0x7F	; 127
    641e:	57 e4       	ldi	r21, 0x47	; 71
    6420:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6424:	18 16       	cp	r1, r24
    6426:	4c f5       	brge	.+82     	; 0x647a <main+0x253e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6428:	6d a9       	ldd	r22, Y+53	; 0x35
    642a:	7e a9       	ldd	r23, Y+54	; 0x36
    642c:	8f a9       	ldd	r24, Y+55	; 0x37
    642e:	98 ad       	ldd	r25, Y+56	; 0x38
    6430:	20 e0       	ldi	r18, 0x00	; 0
    6432:	30 e0       	ldi	r19, 0x00	; 0
    6434:	40 e2       	ldi	r20, 0x20	; 32
    6436:	51 e4       	ldi	r21, 0x41	; 65
    6438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    643c:	dc 01       	movw	r26, r24
    643e:	cb 01       	movw	r24, r22
    6440:	bc 01       	movw	r22, r24
    6442:	cd 01       	movw	r24, r26
    6444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6448:	dc 01       	movw	r26, r24
    644a:	cb 01       	movw	r24, r22
    644c:	98 ab       	std	Y+48, r25	; 0x30
    644e:	8f a7       	std	Y+47, r24	; 0x2f
    6450:	0f c0       	rjmp	.+30     	; 0x6470 <main+0x2534>
    6452:	88 ec       	ldi	r24, 0xC8	; 200
    6454:	90 e0       	ldi	r25, 0x00	; 0
    6456:	9e a7       	std	Y+46, r25	; 0x2e
    6458:	8d a7       	std	Y+45, r24	; 0x2d
    645a:	8d a5       	ldd	r24, Y+45	; 0x2d
    645c:	9e a5       	ldd	r25, Y+46	; 0x2e
    645e:	01 97       	sbiw	r24, 0x01	; 1
    6460:	f1 f7       	brne	.-4      	; 0x645e <main+0x2522>
    6462:	9e a7       	std	Y+46, r25	; 0x2e
    6464:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6466:	8f a5       	ldd	r24, Y+47	; 0x2f
    6468:	98 a9       	ldd	r25, Y+48	; 0x30
    646a:	01 97       	sbiw	r24, 0x01	; 1
    646c:	98 ab       	std	Y+48, r25	; 0x30
    646e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6470:	8f a5       	ldd	r24, Y+47	; 0x2f
    6472:	98 a9       	ldd	r25, Y+48	; 0x30
    6474:	00 97       	sbiw	r24, 0x00	; 0
    6476:	69 f7       	brne	.-38     	; 0x6452 <main+0x2516>
    6478:	14 c0       	rjmp	.+40     	; 0x64a2 <main+0x2566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    647a:	69 a9       	ldd	r22, Y+49	; 0x31
    647c:	7a a9       	ldd	r23, Y+50	; 0x32
    647e:	8b a9       	ldd	r24, Y+51	; 0x33
    6480:	9c a9       	ldd	r25, Y+52	; 0x34
    6482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6486:	dc 01       	movw	r26, r24
    6488:	cb 01       	movw	r24, r22
    648a:	98 ab       	std	Y+48, r25	; 0x30
    648c:	8f a7       	std	Y+47, r24	; 0x2f
    648e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6490:	98 a9       	ldd	r25, Y+48	; 0x30
    6492:	9c a7       	std	Y+44, r25	; 0x2c
    6494:	8b a7       	std	Y+43, r24	; 0x2b
    6496:	8b a5       	ldd	r24, Y+43	; 0x2b
    6498:	9c a5       	ldd	r25, Y+44	; 0x2c
    649a:	01 97       	sbiw	r24, 0x01	; 1
    649c:	f1 f7       	brne	.-4      	; 0x649a <main+0x255e>
    649e:	9c a7       	std	Y+44, r25	; 0x2c
    64a0:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(2000);
						Main_u8SystemIndicator = 0;
    64a2:	10 92 90 03 	sts	0x0390, r1
						break;
					}

					if(Main_u8SystemIndicator == 3)
    64a6:	80 91 90 03 	lds	r24, 0x0390
    64aa:	83 30       	cpi	r24, 0x03	; 3
    64ac:	11 f0       	breq	.+4      	; 0x64b2 <main+0x2576>
    64ae:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <main+0xcf4>
					{
						if(Local_u8ServoMotorManage == 1)
    64b2:	fe 01       	movw	r30, r28
    64b4:	eb 5c       	subi	r30, 0xCB	; 203
    64b6:	fe 4f       	sbci	r31, 0xFE	; 254
    64b8:	80 81       	ld	r24, Z
    64ba:	81 30       	cpi	r24, 0x01	; 1
    64bc:	09 f0       	breq	.+2      	; 0x64c0 <main+0x2584>
    64be:	3f c2       	rjmp	.+1150   	; 0x693e <main+0x2a02>
						{
							/*Scan the angle from the user*/
							CLCD_voidClearDisplay();
    64c0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
							CLCD_u8GoToXY(0, 0);
    64c4:	80 e0       	ldi	r24, 0x00	; 0
    64c6:	60 e0       	ldi	r22, 0x00	; 0
    64c8:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
							CLCD_u8SendString("Enter Angle: ");
    64cc:	82 e3       	ldi	r24, 0x32	; 50
    64ce:	91 e0       	ldi	r25, 0x01	; 1
    64d0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>

							Local_u8IDIterator = 0;
    64d4:	fe 01       	movw	r30, r28
    64d6:	e6 5c       	subi	r30, 0xC6	; 198
    64d8:	fe 4f       	sbci	r31, 0xFE	; 254
    64da:	10 82       	st	Z, r1
							Local_u16ServoAngle = 0;
    64dc:	fe 01       	movw	r30, r28
    64de:	e1 5d       	subi	r30, 0xD1	; 209
    64e0:	fe 4f       	sbci	r31, 0xFE	; 254
    64e2:	11 82       	std	Z+1, r1	; 0x01
    64e4:	10 82       	st	Z, r1
    64e6:	52 c0       	rjmp	.+164    	; 0x658c <main+0x2650>
							while(Local_u8IDIterator < 3)
							{
								Local_u8IDIterator++;
    64e8:	de 01       	movw	r26, r28
    64ea:	a6 5c       	subi	r26, 0xC6	; 198
    64ec:	be 4f       	sbci	r27, 0xFE	; 254
    64ee:	fe 01       	movw	r30, r28
    64f0:	e6 5c       	subi	r30, 0xC6	; 198
    64f2:	fe 4f       	sbci	r31, 0xFE	; 254
    64f4:	80 81       	ld	r24, Z
    64f6:	8f 5f       	subi	r24, 0xFF	; 255
    64f8:	8c 93       	st	X, r24
								Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
    64fa:	fe 01       	movw	r30, r28
    64fc:	e5 5c       	subi	r30, 0xC5	; 197
    64fe:	fe 4f       	sbci	r31, 0xFE	; 254
    6500:	8f ef       	ldi	r24, 0xFF	; 255
    6502:	80 83       	st	Z, r24
    6504:	06 c0       	rjmp	.+12     	; 0x6512 <main+0x25d6>
								while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
								{
									Local_u8PressedKey = KEYPAD_u8GetPressedKey();
    6506:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_u8GetPressedKey>
    650a:	fe 01       	movw	r30, r28
    650c:	e5 5c       	subi	r30, 0xC5	; 197
    650e:	fe 4f       	sbci	r31, 0xFE	; 254
    6510:	80 83       	st	Z, r24
							Local_u16ServoAngle = 0;
							while(Local_u8IDIterator < 3)
							{
								Local_u8IDIterator++;
								Local_u8PressedKey = KEYPAD_u8NO_PRESSED_KEY;
								while(Local_u8PressedKey == KEYPAD_u8NO_PRESSED_KEY)
    6512:	fe 01       	movw	r30, r28
    6514:	e5 5c       	subi	r30, 0xC5	; 197
    6516:	fe 4f       	sbci	r31, 0xFE	; 254
    6518:	80 81       	ld	r24, Z
    651a:	8f 3f       	cpi	r24, 0xFF	; 255
    651c:	a1 f3       	breq	.-24     	; 0x6506 <main+0x25ca>
								{
									Local_u8PressedKey = KEYPAD_u8GetPressedKey();
								}

								switch(Local_u8PressedKey)
    651e:	fe 01       	movw	r30, r28
    6520:	e5 5c       	subi	r30, 0xC5	; 197
    6522:	fe 4f       	sbci	r31, 0xFE	; 254
    6524:	80 81       	ld	r24, Z
    6526:	88 2f       	mov	r24, r24
    6528:	90 e0       	ldi	r25, 0x00	; 0
    652a:	8b 30       	cpi	r24, 0x0B	; 11
    652c:	91 05       	cpc	r25, r1
    652e:	31 f4       	brne	.+12     	; 0x653c <main+0x2600>
								{
								case 11:
									Local_u8IDIterator = 3;
    6530:	fe 01       	movw	r30, r28
    6532:	e6 5c       	subi	r30, 0xC6	; 198
    6534:	fe 4f       	sbci	r31, 0xFE	; 254
    6536:	83 e0       	ldi	r24, 0x03	; 3
    6538:	80 83       	st	Z, r24
    653a:	28 c0       	rjmp	.+80     	; 0x658c <main+0x2650>
									break;
								default:
									/*Print the number to the lcd*/
									CLCD_voidSendDecimalNumber(Local_u8PressedKey);
    653c:	fe 01       	movw	r30, r28
    653e:	e5 5c       	subi	r30, 0xC5	; 197
    6540:	fe 4f       	sbci	r31, 0xFE	; 254
    6542:	80 81       	ld	r24, Z
    6544:	88 2f       	mov	r24, r24
    6546:	90 e0       	ldi	r25, 0x00	; 0
    6548:	a0 e0       	ldi	r26, 0x00	; 0
    654a:	b0 e0       	ldi	r27, 0x00	; 0
    654c:	bc 01       	movw	r22, r24
    654e:	cd 01       	movw	r24, r26
    6550:	0e 94 2d 0a 	call	0x145a	; 0x145a <CLCD_voidSendDecimalNumber>
									/*Calculate the angle*/
									Local_u16ServoAngle = Local_u16ServoAngle * 10u + (uint16) Local_u8PressedKey;
    6554:	fe 01       	movw	r30, r28
    6556:	e1 5d       	subi	r30, 0xD1	; 209
    6558:	fe 4f       	sbci	r31, 0xFE	; 254
    655a:	80 81       	ld	r24, Z
    655c:	91 81       	ldd	r25, Z+1	; 0x01
    655e:	9c 01       	movw	r18, r24
    6560:	22 0f       	add	r18, r18
    6562:	33 1f       	adc	r19, r19
    6564:	c9 01       	movw	r24, r18
    6566:	88 0f       	add	r24, r24
    6568:	99 1f       	adc	r25, r25
    656a:	88 0f       	add	r24, r24
    656c:	99 1f       	adc	r25, r25
    656e:	28 0f       	add	r18, r24
    6570:	39 1f       	adc	r19, r25
    6572:	fe 01       	movw	r30, r28
    6574:	e5 5c       	subi	r30, 0xC5	; 197
    6576:	fe 4f       	sbci	r31, 0xFE	; 254
    6578:	80 81       	ld	r24, Z
    657a:	88 2f       	mov	r24, r24
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	fe 01       	movw	r30, r28
    6580:	e1 5d       	subi	r30, 0xD1	; 209
    6582:	fe 4f       	sbci	r31, 0xFE	; 254
    6584:	82 0f       	add	r24, r18
    6586:	93 1f       	adc	r25, r19
    6588:	91 83       	std	Z+1, r25	; 0x01
    658a:	80 83       	st	Z, r24
							CLCD_u8GoToXY(0, 0);
							CLCD_u8SendString("Enter Angle: ");

							Local_u8IDIterator = 0;
							Local_u16ServoAngle = 0;
							while(Local_u8IDIterator < 3)
    658c:	fe 01       	movw	r30, r28
    658e:	e6 5c       	subi	r30, 0xC6	; 198
    6590:	fe 4f       	sbci	r31, 0xFE	; 254
    6592:	80 81       	ld	r24, Z
    6594:	83 30       	cpi	r24, 0x03	; 3
    6596:	08 f4       	brcc	.+2      	; 0x659a <main+0x265e>
    6598:	a7 cf       	rjmp	.-178    	; 0x64e8 <main+0x25ac>
    659a:	80 e0       	ldi	r24, 0x00	; 0
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	aa e7       	ldi	r26, 0x7A	; 122
    65a0:	b4 e4       	ldi	r27, 0x44	; 68
    65a2:	8f a3       	std	Y+39, r24	; 0x27
    65a4:	98 a7       	std	Y+40, r25	; 0x28
    65a6:	a9 a7       	std	Y+41, r26	; 0x29
    65a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65aa:	6f a1       	ldd	r22, Y+39	; 0x27
    65ac:	78 a5       	ldd	r23, Y+40	; 0x28
    65ae:	89 a5       	ldd	r24, Y+41	; 0x29
    65b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    65b2:	20 e0       	ldi	r18, 0x00	; 0
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	4a ef       	ldi	r20, 0xFA	; 250
    65b8:	54 e4       	ldi	r21, 0x44	; 68
    65ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65be:	dc 01       	movw	r26, r24
    65c0:	cb 01       	movw	r24, r22
    65c2:	8b a3       	std	Y+35, r24	; 0x23
    65c4:	9c a3       	std	Y+36, r25	; 0x24
    65c6:	ad a3       	std	Y+37, r26	; 0x25
    65c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    65ca:	6b a1       	ldd	r22, Y+35	; 0x23
    65cc:	7c a1       	ldd	r23, Y+36	; 0x24
    65ce:	8d a1       	ldd	r24, Y+37	; 0x25
    65d0:	9e a1       	ldd	r25, Y+38	; 0x26
    65d2:	20 e0       	ldi	r18, 0x00	; 0
    65d4:	30 e0       	ldi	r19, 0x00	; 0
    65d6:	40 e8       	ldi	r20, 0x80	; 128
    65d8:	5f e3       	ldi	r21, 0x3F	; 63
    65da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    65de:	88 23       	and	r24, r24
    65e0:	2c f4       	brge	.+10     	; 0x65ec <main+0x26b0>
		__ticks = 1;
    65e2:	81 e0       	ldi	r24, 0x01	; 1
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    65e6:	9a a3       	std	Y+34, r25	; 0x22
    65e8:	89 a3       	std	Y+33, r24	; 0x21
    65ea:	3f c0       	rjmp	.+126    	; 0x666a <main+0x272e>
	else if (__tmp > 65535)
    65ec:	6b a1       	ldd	r22, Y+35	; 0x23
    65ee:	7c a1       	ldd	r23, Y+36	; 0x24
    65f0:	8d a1       	ldd	r24, Y+37	; 0x25
    65f2:	9e a1       	ldd	r25, Y+38	; 0x26
    65f4:	20 e0       	ldi	r18, 0x00	; 0
    65f6:	3f ef       	ldi	r19, 0xFF	; 255
    65f8:	4f e7       	ldi	r20, 0x7F	; 127
    65fa:	57 e4       	ldi	r21, 0x47	; 71
    65fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6600:	18 16       	cp	r1, r24
    6602:	4c f5       	brge	.+82     	; 0x6656 <main+0x271a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6604:	6f a1       	ldd	r22, Y+39	; 0x27
    6606:	78 a5       	ldd	r23, Y+40	; 0x28
    6608:	89 a5       	ldd	r24, Y+41	; 0x29
    660a:	9a a5       	ldd	r25, Y+42	; 0x2a
    660c:	20 e0       	ldi	r18, 0x00	; 0
    660e:	30 e0       	ldi	r19, 0x00	; 0
    6610:	40 e2       	ldi	r20, 0x20	; 32
    6612:	51 e4       	ldi	r21, 0x41	; 65
    6614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6618:	dc 01       	movw	r26, r24
    661a:	cb 01       	movw	r24, r22
    661c:	bc 01       	movw	r22, r24
    661e:	cd 01       	movw	r24, r26
    6620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6624:	dc 01       	movw	r26, r24
    6626:	cb 01       	movw	r24, r22
    6628:	9a a3       	std	Y+34, r25	; 0x22
    662a:	89 a3       	std	Y+33, r24	; 0x21
    662c:	0f c0       	rjmp	.+30     	; 0x664c <main+0x2710>
    662e:	88 ec       	ldi	r24, 0xC8	; 200
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	98 a3       	std	Y+32, r25	; 0x20
    6634:	8f 8f       	std	Y+31, r24	; 0x1f
    6636:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6638:	98 a1       	ldd	r25, Y+32	; 0x20
    663a:	01 97       	sbiw	r24, 0x01	; 1
    663c:	f1 f7       	brne	.-4      	; 0x663a <main+0x26fe>
    663e:	98 a3       	std	Y+32, r25	; 0x20
    6640:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6642:	89 a1       	ldd	r24, Y+33	; 0x21
    6644:	9a a1       	ldd	r25, Y+34	; 0x22
    6646:	01 97       	sbiw	r24, 0x01	; 1
    6648:	9a a3       	std	Y+34, r25	; 0x22
    664a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    664c:	89 a1       	ldd	r24, Y+33	; 0x21
    664e:	9a a1       	ldd	r25, Y+34	; 0x22
    6650:	00 97       	sbiw	r24, 0x00	; 0
    6652:	69 f7       	brne	.-38     	; 0x662e <main+0x26f2>
    6654:	14 c0       	rjmp	.+40     	; 0x667e <main+0x2742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6656:	6b a1       	ldd	r22, Y+35	; 0x23
    6658:	7c a1       	ldd	r23, Y+36	; 0x24
    665a:	8d a1       	ldd	r24, Y+37	; 0x25
    665c:	9e a1       	ldd	r25, Y+38	; 0x26
    665e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6662:	dc 01       	movw	r26, r24
    6664:	cb 01       	movw	r24, r22
    6666:	9a a3       	std	Y+34, r25	; 0x22
    6668:	89 a3       	std	Y+33, r24	; 0x21
    666a:	89 a1       	ldd	r24, Y+33	; 0x21
    666c:	9a a1       	ldd	r25, Y+34	; 0x22
    666e:	9e 8f       	std	Y+30, r25	; 0x1e
    6670:	8d 8f       	std	Y+29, r24	; 0x1d
    6672:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6674:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6676:	01 97       	sbiw	r24, 0x01	; 1
    6678:	f1 f7       	brne	.-4      	; 0x6676 <main+0x273a>
    667a:	9e 8f       	std	Y+30, r25	; 0x1e
    667c:	8d 8f       	std	Y+29, r24	; 0x1d
									break;
								}
							}

							_delay_ms(1000);
							if(Local_u16ServoAngle > 180)
    667e:	fe 01       	movw	r30, r28
    6680:	e1 5d       	subi	r30, 0xD1	; 209
    6682:	fe 4f       	sbci	r31, 0xFE	; 254
    6684:	80 81       	ld	r24, Z
    6686:	91 81       	ldd	r25, Z+1	; 0x01
    6688:	85 3b       	cpi	r24, 0xB5	; 181
    668a:	91 05       	cpc	r25, r1
    668c:	08 f4       	brcc	.+2      	; 0x6690 <main+0x2754>
    668e:	88 c0       	rjmp	.+272    	; 0x67a0 <main+0x2864>
							{
								CLCD_voidClearDisplay();
    6690:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
								CLCD_u8GoToXY(1, 0);
    6694:	81 e0       	ldi	r24, 0x01	; 1
    6696:	60 e0       	ldi	r22, 0x00	; 0
    6698:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
								CLCD_u8SendString("This Angle is ");
    669c:	87 e5       	ldi	r24, 0x57	; 87
    669e:	91 e0       	ldi	r25, 0x01	; 1
    66a0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
								CLCD_u8GoToXY(2, 1);
    66a4:	82 e0       	ldi	r24, 0x02	; 2
    66a6:	61 e0       	ldi	r22, 0x01	; 1
    66a8:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
								CLCD_u8SendString("out of range");
    66ac:	86 e6       	ldi	r24, 0x66	; 102
    66ae:	91 e0       	ldi	r25, 0x01	; 1
    66b0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
    66b4:	80 e0       	ldi	r24, 0x00	; 0
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	aa ef       	ldi	r26, 0xFA	; 250
    66ba:	b4 e4       	ldi	r27, 0x44	; 68
    66bc:	89 8f       	std	Y+25, r24	; 0x19
    66be:	9a 8f       	std	Y+26, r25	; 0x1a
    66c0:	ab 8f       	std	Y+27, r26	; 0x1b
    66c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66c4:	69 8d       	ldd	r22, Y+25	; 0x19
    66c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    66c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    66cc:	20 e0       	ldi	r18, 0x00	; 0
    66ce:	30 e0       	ldi	r19, 0x00	; 0
    66d0:	4a ef       	ldi	r20, 0xFA	; 250
    66d2:	54 e4       	ldi	r21, 0x44	; 68
    66d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66d8:	dc 01       	movw	r26, r24
    66da:	cb 01       	movw	r24, r22
    66dc:	8d 8b       	std	Y+21, r24	; 0x15
    66de:	9e 8b       	std	Y+22, r25	; 0x16
    66e0:	af 8b       	std	Y+23, r26	; 0x17
    66e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    66e4:	6d 89       	ldd	r22, Y+21	; 0x15
    66e6:	7e 89       	ldd	r23, Y+22	; 0x16
    66e8:	8f 89       	ldd	r24, Y+23	; 0x17
    66ea:	98 8d       	ldd	r25, Y+24	; 0x18
    66ec:	20 e0       	ldi	r18, 0x00	; 0
    66ee:	30 e0       	ldi	r19, 0x00	; 0
    66f0:	40 e8       	ldi	r20, 0x80	; 128
    66f2:	5f e3       	ldi	r21, 0x3F	; 63
    66f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    66f8:	88 23       	and	r24, r24
    66fa:	2c f4       	brge	.+10     	; 0x6706 <main+0x27ca>
		__ticks = 1;
    66fc:	81 e0       	ldi	r24, 0x01	; 1
    66fe:	90 e0       	ldi	r25, 0x00	; 0
    6700:	9c 8b       	std	Y+20, r25	; 0x14
    6702:	8b 8b       	std	Y+19, r24	; 0x13
    6704:	3f c0       	rjmp	.+126    	; 0x6784 <main+0x2848>
	else if (__tmp > 65535)
    6706:	6d 89       	ldd	r22, Y+21	; 0x15
    6708:	7e 89       	ldd	r23, Y+22	; 0x16
    670a:	8f 89       	ldd	r24, Y+23	; 0x17
    670c:	98 8d       	ldd	r25, Y+24	; 0x18
    670e:	20 e0       	ldi	r18, 0x00	; 0
    6710:	3f ef       	ldi	r19, 0xFF	; 255
    6712:	4f e7       	ldi	r20, 0x7F	; 127
    6714:	57 e4       	ldi	r21, 0x47	; 71
    6716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    671a:	18 16       	cp	r1, r24
    671c:	4c f5       	brge	.+82     	; 0x6770 <main+0x2834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    671e:	69 8d       	ldd	r22, Y+25	; 0x19
    6720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6726:	20 e0       	ldi	r18, 0x00	; 0
    6728:	30 e0       	ldi	r19, 0x00	; 0
    672a:	40 e2       	ldi	r20, 0x20	; 32
    672c:	51 e4       	ldi	r21, 0x41	; 65
    672e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6732:	dc 01       	movw	r26, r24
    6734:	cb 01       	movw	r24, r22
    6736:	bc 01       	movw	r22, r24
    6738:	cd 01       	movw	r24, r26
    673a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    673e:	dc 01       	movw	r26, r24
    6740:	cb 01       	movw	r24, r22
    6742:	9c 8b       	std	Y+20, r25	; 0x14
    6744:	8b 8b       	std	Y+19, r24	; 0x13
    6746:	0f c0       	rjmp	.+30     	; 0x6766 <main+0x282a>
    6748:	88 ec       	ldi	r24, 0xC8	; 200
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	9a 8b       	std	Y+18, r25	; 0x12
    674e:	89 8b       	std	Y+17, r24	; 0x11
    6750:	89 89       	ldd	r24, Y+17	; 0x11
    6752:	9a 89       	ldd	r25, Y+18	; 0x12
    6754:	01 97       	sbiw	r24, 0x01	; 1
    6756:	f1 f7       	brne	.-4      	; 0x6754 <main+0x2818>
    6758:	9a 8b       	std	Y+18, r25	; 0x12
    675a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    675c:	8b 89       	ldd	r24, Y+19	; 0x13
    675e:	9c 89       	ldd	r25, Y+20	; 0x14
    6760:	01 97       	sbiw	r24, 0x01	; 1
    6762:	9c 8b       	std	Y+20, r25	; 0x14
    6764:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6766:	8b 89       	ldd	r24, Y+19	; 0x13
    6768:	9c 89       	ldd	r25, Y+20	; 0x14
    676a:	00 97       	sbiw	r24, 0x00	; 0
    676c:	69 f7       	brne	.-38     	; 0x6748 <main+0x280c>
    676e:	14 c0       	rjmp	.+40     	; 0x6798 <main+0x285c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6770:	6d 89       	ldd	r22, Y+21	; 0x15
    6772:	7e 89       	ldd	r23, Y+22	; 0x16
    6774:	8f 89       	ldd	r24, Y+23	; 0x17
    6776:	98 8d       	ldd	r25, Y+24	; 0x18
    6778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    677c:	dc 01       	movw	r26, r24
    677e:	cb 01       	movw	r24, r22
    6780:	9c 8b       	std	Y+20, r25	; 0x14
    6782:	8b 8b       	std	Y+19, r24	; 0x13
    6784:	8b 89       	ldd	r24, Y+19	; 0x13
    6786:	9c 89       	ldd	r25, Y+20	; 0x14
    6788:	98 8b       	std	Y+16, r25	; 0x10
    678a:	8f 87       	std	Y+15, r24	; 0x0f
    678c:	8f 85       	ldd	r24, Y+15	; 0x0f
    678e:	98 89       	ldd	r25, Y+16	; 0x10
    6790:	01 97       	sbiw	r24, 0x01	; 1
    6792:	f1 f7       	brne	.-4      	; 0x6790 <main+0x2854>
    6794:	98 8b       	std	Y+16, r25	; 0x10
    6796:	8f 87       	std	Y+15, r24	; 0x0f
								_delay_ms(2000);

								Main_u8SystemIndicator = 0;
    6798:	10 92 90 03 	sts	0x0390, r1
    679c:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <main+0xcf4>
							}
							else
							{
								/*Move the servo*/
								CLCD_voidClearDisplay();
    67a0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
								CLCD_u8GoToXY(0, 0);
    67a4:	80 e0       	ldi	r24, 0x00	; 0
    67a6:	60 e0       	ldi	r22, 0x00	; 0
    67a8:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
								CLCD_u8SendString("Angle: ");
    67ac:	80 e4       	ldi	r24, 0x40	; 64
    67ae:	91 e0       	ldi	r25, 0x01	; 1
    67b0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
								CLCD_voidSendDecimalNumber(Local_u16ServoAngle);
    67b4:	fe 01       	movw	r30, r28
    67b6:	e1 5d       	subi	r30, 0xD1	; 209
    67b8:	fe 4f       	sbci	r31, 0xFE	; 254
    67ba:	80 81       	ld	r24, Z
    67bc:	91 81       	ldd	r25, Z+1	; 0x01
    67be:	cc 01       	movw	r24, r24
    67c0:	a0 e0       	ldi	r26, 0x00	; 0
    67c2:	b0 e0       	ldi	r27, 0x00	; 0
    67c4:	bc 01       	movw	r22, r24
    67c6:	cd 01       	movw	r24, r26
    67c8:	0e 94 2d 0a 	call	0x145a	; 0x145a <CLCD_voidSendDecimalNumber>

								Local_u16ServoAngleTicks = LIBRARY_s32Mapping(0, 180, 750, 2250, Local_u16ServoAngle);
    67cc:	fe 01       	movw	r30, r28
    67ce:	e1 5d       	subi	r30, 0xD1	; 209
    67d0:	fe 4f       	sbci	r31, 0xFE	; 254
    67d2:	80 81       	ld	r24, Z
    67d4:	91 81       	ldd	r25, Z+1	; 0x01
    67d6:	cc 01       	movw	r24, r24
    67d8:	a0 e0       	ldi	r26, 0x00	; 0
    67da:	b0 e0       	ldi	r27, 0x00	; 0
    67dc:	00 d0       	rcall	.+0      	; 0x67de <main+0x28a2>
    67de:	00 d0       	rcall	.+0      	; 0x67e0 <main+0x28a4>
    67e0:	ed b7       	in	r30, 0x3d	; 61
    67e2:	fe b7       	in	r31, 0x3e	; 62
    67e4:	31 96       	adiw	r30, 0x01	; 1
    67e6:	80 83       	st	Z, r24
    67e8:	91 83       	std	Z+1, r25	; 0x01
    67ea:	a2 83       	std	Z+2, r26	; 0x02
    67ec:	b3 83       	std	Z+3, r27	; 0x03
    67ee:	60 e0       	ldi	r22, 0x00	; 0
    67f0:	70 e0       	ldi	r23, 0x00	; 0
    67f2:	80 e0       	ldi	r24, 0x00	; 0
    67f4:	90 e0       	ldi	r25, 0x00	; 0
    67f6:	24 eb       	ldi	r18, 0xB4	; 180
    67f8:	30 e0       	ldi	r19, 0x00	; 0
    67fa:	40 e0       	ldi	r20, 0x00	; 0
    67fc:	50 e0       	ldi	r21, 0x00	; 0
    67fe:	0f 2e       	mov	r0, r31
    6800:	fe ee       	ldi	r31, 0xEE	; 238
    6802:	ef 2e       	mov	r14, r31
    6804:	f2 e0       	ldi	r31, 0x02	; 2
    6806:	ff 2e       	mov	r15, r31
    6808:	f0 e0       	ldi	r31, 0x00	; 0
    680a:	0f 2f       	mov	r16, r31
    680c:	f0 e0       	ldi	r31, 0x00	; 0
    680e:	1f 2f       	mov	r17, r31
    6810:	f0 2d       	mov	r31, r0
    6812:	0f 2e       	mov	r0, r31
    6814:	fa ec       	ldi	r31, 0xCA	; 202
    6816:	af 2e       	mov	r10, r31
    6818:	f8 e0       	ldi	r31, 0x08	; 8
    681a:	bf 2e       	mov	r11, r31
    681c:	f0 e0       	ldi	r31, 0x00	; 0
    681e:	cf 2e       	mov	r12, r31
    6820:	f0 e0       	ldi	r31, 0x00	; 0
    6822:	df 2e       	mov	r13, r31
    6824:	f0 2d       	mov	r31, r0
    6826:	0e 94 36 13 	call	0x266c	; 0x266c <LIBRARY_s32Mapping>
    682a:	0f 90       	pop	r0
    682c:	0f 90       	pop	r0
    682e:	0f 90       	pop	r0
    6830:	0f 90       	pop	r0
    6832:	dc 01       	movw	r26, r24
    6834:	cb 01       	movw	r24, r22
    6836:	fe 01       	movw	r30, r28
    6838:	e3 5d       	subi	r30, 0xD3	; 211
    683a:	fe 4f       	sbci	r31, 0xFE	; 254
    683c:	91 83       	std	Z+1, r25	; 0x01
    683e:	80 83       	st	Z, r24
								TIMER1_voidInit();
    6840:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <TIMER1_voidInit>
								TIMER1_voidSetCompValue(Local_u16ServoAngleTicks);
    6844:	fe 01       	movw	r30, r28
    6846:	e3 5d       	subi	r30, 0xD3	; 211
    6848:	fe 4f       	sbci	r31, 0xFE	; 254
    684a:	80 81       	ld	r24, Z
    684c:	91 81       	ldd	r25, Z+1	; 0x01
    684e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <TIMER1_voidSetCompValue>
    6852:	80 e0       	ldi	r24, 0x00	; 0
    6854:	90 e0       	ldi	r25, 0x00	; 0
    6856:	aa ef       	ldi	r26, 0xFA	; 250
    6858:	b4 e4       	ldi	r27, 0x44	; 68
    685a:	8b 87       	std	Y+11, r24	; 0x0b
    685c:	9c 87       	std	Y+12, r25	; 0x0c
    685e:	ad 87       	std	Y+13, r26	; 0x0d
    6860:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6862:	6b 85       	ldd	r22, Y+11	; 0x0b
    6864:	7c 85       	ldd	r23, Y+12	; 0x0c
    6866:	8d 85       	ldd	r24, Y+13	; 0x0d
    6868:	9e 85       	ldd	r25, Y+14	; 0x0e
    686a:	20 e0       	ldi	r18, 0x00	; 0
    686c:	30 e0       	ldi	r19, 0x00	; 0
    686e:	4a ef       	ldi	r20, 0xFA	; 250
    6870:	54 e4       	ldi	r21, 0x44	; 68
    6872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6876:	dc 01       	movw	r26, r24
    6878:	cb 01       	movw	r24, r22
    687a:	8f 83       	std	Y+7, r24	; 0x07
    687c:	98 87       	std	Y+8, r25	; 0x08
    687e:	a9 87       	std	Y+9, r26	; 0x09
    6880:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6882:	6f 81       	ldd	r22, Y+7	; 0x07
    6884:	78 85       	ldd	r23, Y+8	; 0x08
    6886:	89 85       	ldd	r24, Y+9	; 0x09
    6888:	9a 85       	ldd	r25, Y+10	; 0x0a
    688a:	20 e0       	ldi	r18, 0x00	; 0
    688c:	30 e0       	ldi	r19, 0x00	; 0
    688e:	40 e8       	ldi	r20, 0x80	; 128
    6890:	5f e3       	ldi	r21, 0x3F	; 63
    6892:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6896:	88 23       	and	r24, r24
    6898:	2c f4       	brge	.+10     	; 0x68a4 <main+0x2968>
		__ticks = 1;
    689a:	81 e0       	ldi	r24, 0x01	; 1
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	9e 83       	std	Y+6, r25	; 0x06
    68a0:	8d 83       	std	Y+5, r24	; 0x05
    68a2:	3f c0       	rjmp	.+126    	; 0x6922 <main+0x29e6>
	else if (__tmp > 65535)
    68a4:	6f 81       	ldd	r22, Y+7	; 0x07
    68a6:	78 85       	ldd	r23, Y+8	; 0x08
    68a8:	89 85       	ldd	r24, Y+9	; 0x09
    68aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    68ac:	20 e0       	ldi	r18, 0x00	; 0
    68ae:	3f ef       	ldi	r19, 0xFF	; 255
    68b0:	4f e7       	ldi	r20, 0x7F	; 127
    68b2:	57 e4       	ldi	r21, 0x47	; 71
    68b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    68b8:	18 16       	cp	r1, r24
    68ba:	4c f5       	brge	.+82     	; 0x690e <main+0x29d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    68be:	7c 85       	ldd	r23, Y+12	; 0x0c
    68c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    68c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    68c4:	20 e0       	ldi	r18, 0x00	; 0
    68c6:	30 e0       	ldi	r19, 0x00	; 0
    68c8:	40 e2       	ldi	r20, 0x20	; 32
    68ca:	51 e4       	ldi	r21, 0x41	; 65
    68cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68d0:	dc 01       	movw	r26, r24
    68d2:	cb 01       	movw	r24, r22
    68d4:	bc 01       	movw	r22, r24
    68d6:	cd 01       	movw	r24, r26
    68d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68dc:	dc 01       	movw	r26, r24
    68de:	cb 01       	movw	r24, r22
    68e0:	9e 83       	std	Y+6, r25	; 0x06
    68e2:	8d 83       	std	Y+5, r24	; 0x05
    68e4:	0f c0       	rjmp	.+30     	; 0x6904 <main+0x29c8>
    68e6:	88 ec       	ldi	r24, 0xC8	; 200
    68e8:	90 e0       	ldi	r25, 0x00	; 0
    68ea:	9c 83       	std	Y+4, r25	; 0x04
    68ec:	8b 83       	std	Y+3, r24	; 0x03
    68ee:	8b 81       	ldd	r24, Y+3	; 0x03
    68f0:	9c 81       	ldd	r25, Y+4	; 0x04
    68f2:	01 97       	sbiw	r24, 0x01	; 1
    68f4:	f1 f7       	brne	.-4      	; 0x68f2 <main+0x29b6>
    68f6:	9c 83       	std	Y+4, r25	; 0x04
    68f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68fa:	8d 81       	ldd	r24, Y+5	; 0x05
    68fc:	9e 81       	ldd	r25, Y+6	; 0x06
    68fe:	01 97       	sbiw	r24, 0x01	; 1
    6900:	9e 83       	std	Y+6, r25	; 0x06
    6902:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6904:	8d 81       	ldd	r24, Y+5	; 0x05
    6906:	9e 81       	ldd	r25, Y+6	; 0x06
    6908:	00 97       	sbiw	r24, 0x00	; 0
    690a:	69 f7       	brne	.-38     	; 0x68e6 <main+0x29aa>
    690c:	14 c0       	rjmp	.+40     	; 0x6936 <main+0x29fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    690e:	6f 81       	ldd	r22, Y+7	; 0x07
    6910:	78 85       	ldd	r23, Y+8	; 0x08
    6912:	89 85       	ldd	r24, Y+9	; 0x09
    6914:	9a 85       	ldd	r25, Y+10	; 0x0a
    6916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    691a:	dc 01       	movw	r26, r24
    691c:	cb 01       	movw	r24, r22
    691e:	9e 83       	std	Y+6, r25	; 0x06
    6920:	8d 83       	std	Y+5, r24	; 0x05
    6922:	8d 81       	ldd	r24, Y+5	; 0x05
    6924:	9e 81       	ldd	r25, Y+6	; 0x06
    6926:	9a 83       	std	Y+2, r25	; 0x02
    6928:	89 83       	std	Y+1, r24	; 0x01
    692a:	89 81       	ldd	r24, Y+1	; 0x01
    692c:	9a 81       	ldd	r25, Y+2	; 0x02
    692e:	01 97       	sbiw	r24, 0x01	; 1
    6930:	f1 f7       	brne	.-4      	; 0x692e <main+0x29f2>
    6932:	9a 83       	std	Y+2, r25	; 0x02
    6934:	89 83       	std	Y+1, r24	; 0x01
								_delay_ms(2000);
								Main_u8SystemIndicator = 0;
    6936:	10 92 90 03 	sts	0x0390, r1
    693a:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <main+0xcf4>
							}
						}
						else if(Local_u8ServoMotorManage == 2)
    693e:	fe 01       	movw	r30, r28
    6940:	eb 5c       	subi	r30, 0xCB	; 203
    6942:	fe 4f       	sbci	r31, 0xFE	; 254
    6944:	80 81       	ld	r24, Z
    6946:	82 30       	cpi	r24, 0x02	; 2
    6948:	11 f0       	breq	.+4      	; 0x694e <main+0x2a12>
    694a:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <main+0xcf4>
						{
							/*Initialize the timer*/
							TIMER1_voidInit();
    694e:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <TIMER1_voidInit>

							CLCD_voidClearDisplay();
    6952:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <CLCD_voidClearDisplay>
							CLCD_u8GoToXY(2, 0);
    6956:	82 e0       	ldi	r24, 0x02	; 2
    6958:	60 e0       	ldi	r22, 0x00	; 0
    695a:	0e 94 05 0c 	call	0x180a	; 0x180a <CLCD_u8GoToXY>
							CLCD_u8SendString("Map with Pot");
    695e:	85 e2       	ldi	r24, 0x25	; 37
    6960:	91 e0       	ldi	r25, 0x01	; 1
    6962:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_u8SendString>
    6966:	48 c0       	rjmp	.+144    	; 0x69f8 <main+0x2abc>
							while(Main_u8SystemIndicator == 3)
							{

								/*Measure the potentiometer voltage*/
								ADC_u8StartConversionSynch(ADC_u8SINGLE_ENDED_CH7, &Local_u16PotentiometerVoltage);
    6968:	9e 01       	movw	r18, r28
    696a:	23 5c       	subi	r18, 0xC3	; 195
    696c:	3e 4f       	sbci	r19, 0xFE	; 254
    696e:	87 e0       	ldi	r24, 0x07	; 7
    6970:	b9 01       	movw	r22, r18
    6972:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_u8StartConversionSynch>

								/*Map the ADC output to the ticks we need to control the servo*/
								Local_u16ServoAngleTicks = LIBRARY_s32Mapping(0, 1023, 500, 2500, Local_u16PotentiometerVoltage);
    6976:	fe 01       	movw	r30, r28
    6978:	e3 5c       	subi	r30, 0xC3	; 195
    697a:	fe 4f       	sbci	r31, 0xFE	; 254
    697c:	80 81       	ld	r24, Z
    697e:	91 81       	ldd	r25, Z+1	; 0x01
    6980:	cc 01       	movw	r24, r24
    6982:	a0 e0       	ldi	r26, 0x00	; 0
    6984:	b0 e0       	ldi	r27, 0x00	; 0
    6986:	00 d0       	rcall	.+0      	; 0x6988 <main+0x2a4c>
    6988:	00 d0       	rcall	.+0      	; 0x698a <main+0x2a4e>
    698a:	ed b7       	in	r30, 0x3d	; 61
    698c:	fe b7       	in	r31, 0x3e	; 62
    698e:	31 96       	adiw	r30, 0x01	; 1
    6990:	80 83       	st	Z, r24
    6992:	91 83       	std	Z+1, r25	; 0x01
    6994:	a2 83       	std	Z+2, r26	; 0x02
    6996:	b3 83       	std	Z+3, r27	; 0x03
    6998:	60 e0       	ldi	r22, 0x00	; 0
    699a:	70 e0       	ldi	r23, 0x00	; 0
    699c:	80 e0       	ldi	r24, 0x00	; 0
    699e:	90 e0       	ldi	r25, 0x00	; 0
    69a0:	2f ef       	ldi	r18, 0xFF	; 255
    69a2:	33 e0       	ldi	r19, 0x03	; 3
    69a4:	40 e0       	ldi	r20, 0x00	; 0
    69a6:	50 e0       	ldi	r21, 0x00	; 0
    69a8:	0f 2e       	mov	r0, r31
    69aa:	f4 ef       	ldi	r31, 0xF4	; 244
    69ac:	ef 2e       	mov	r14, r31
    69ae:	f1 e0       	ldi	r31, 0x01	; 1
    69b0:	ff 2e       	mov	r15, r31
    69b2:	f0 e0       	ldi	r31, 0x00	; 0
    69b4:	0f 2f       	mov	r16, r31
    69b6:	f0 e0       	ldi	r31, 0x00	; 0
    69b8:	1f 2f       	mov	r17, r31
    69ba:	f0 2d       	mov	r31, r0
    69bc:	0f 2e       	mov	r0, r31
    69be:	f4 ec       	ldi	r31, 0xC4	; 196
    69c0:	af 2e       	mov	r10, r31
    69c2:	f9 e0       	ldi	r31, 0x09	; 9
    69c4:	bf 2e       	mov	r11, r31
    69c6:	f0 e0       	ldi	r31, 0x00	; 0
    69c8:	cf 2e       	mov	r12, r31
    69ca:	f0 e0       	ldi	r31, 0x00	; 0
    69cc:	df 2e       	mov	r13, r31
    69ce:	f0 2d       	mov	r31, r0
    69d0:	0e 94 36 13 	call	0x266c	; 0x266c <LIBRARY_s32Mapping>
    69d4:	0f 90       	pop	r0
    69d6:	0f 90       	pop	r0
    69d8:	0f 90       	pop	r0
    69da:	0f 90       	pop	r0
    69dc:	dc 01       	movw	r26, r24
    69de:	cb 01       	movw	r24, r22
    69e0:	fe 01       	movw	r30, r28
    69e2:	e3 5d       	subi	r30, 0xD3	; 211
    69e4:	fe 4f       	sbci	r31, 0xFE	; 254
    69e6:	91 83       	std	Z+1, r25	; 0x01
    69e8:	80 83       	st	Z, r24

								/*Send ticks number to the timer 1*/
								TIMER1_voidSetCompValue(Local_u16ServoAngleTicks);
    69ea:	fe 01       	movw	r30, r28
    69ec:	e3 5d       	subi	r30, 0xD3	; 211
    69ee:	fe 4f       	sbci	r31, 0xFE	; 254
    69f0:	80 81       	ld	r24, Z
    69f2:	91 81       	ldd	r25, Z+1	; 0x01
    69f4:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <TIMER1_voidSetCompValue>
							TIMER1_voidInit();

							CLCD_voidClearDisplay();
							CLCD_u8GoToXY(2, 0);
							CLCD_u8SendString("Map with Pot");
							while(Main_u8SystemIndicator == 3)
    69f8:	80 91 90 03 	lds	r24, 0x0390
    69fc:	83 30       	cpi	r24, 0x03	; 3
    69fe:	09 f4       	brne	.+2      	; 0x6a02 <main+0x2ac6>
    6a00:	b3 cf       	rjmp	.-154    	; 0x6968 <main+0x2a2c>
    6a02:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <main+0xcf4>

00006a06 <Main_voidInt0ISR>:
		}
	}
}

void Main_voidInt0ISR(void)
{
    6a06:	df 93       	push	r29
    6a08:	cf 93       	push	r28
    6a0a:	cd b7       	in	r28, 0x3d	; 61
    6a0c:	de b7       	in	r29, 0x3e	; 62
	Main_u8SystemIndicator = 0;
    6a0e:	10 92 90 03 	sts	0x0390, r1
}
    6a12:	cf 91       	pop	r28
    6a14:	df 91       	pop	r29
    6a16:	08 95       	ret

00006a18 <__mulsi3>:
    6a18:	62 9f       	mul	r22, r18
    6a1a:	d0 01       	movw	r26, r0
    6a1c:	73 9f       	mul	r23, r19
    6a1e:	f0 01       	movw	r30, r0
    6a20:	82 9f       	mul	r24, r18
    6a22:	e0 0d       	add	r30, r0
    6a24:	f1 1d       	adc	r31, r1
    6a26:	64 9f       	mul	r22, r20
    6a28:	e0 0d       	add	r30, r0
    6a2a:	f1 1d       	adc	r31, r1
    6a2c:	92 9f       	mul	r25, r18
    6a2e:	f0 0d       	add	r31, r0
    6a30:	83 9f       	mul	r24, r19
    6a32:	f0 0d       	add	r31, r0
    6a34:	74 9f       	mul	r23, r20
    6a36:	f0 0d       	add	r31, r0
    6a38:	65 9f       	mul	r22, r21
    6a3a:	f0 0d       	add	r31, r0
    6a3c:	99 27       	eor	r25, r25
    6a3e:	72 9f       	mul	r23, r18
    6a40:	b0 0d       	add	r27, r0
    6a42:	e1 1d       	adc	r30, r1
    6a44:	f9 1f       	adc	r31, r25
    6a46:	63 9f       	mul	r22, r19
    6a48:	b0 0d       	add	r27, r0
    6a4a:	e1 1d       	adc	r30, r1
    6a4c:	f9 1f       	adc	r31, r25
    6a4e:	bd 01       	movw	r22, r26
    6a50:	cf 01       	movw	r24, r30
    6a52:	11 24       	eor	r1, r1
    6a54:	08 95       	ret

00006a56 <__udivmodhi4>:
    6a56:	aa 1b       	sub	r26, r26
    6a58:	bb 1b       	sub	r27, r27
    6a5a:	51 e1       	ldi	r21, 0x11	; 17
    6a5c:	07 c0       	rjmp	.+14     	; 0x6a6c <__udivmodhi4_ep>

00006a5e <__udivmodhi4_loop>:
    6a5e:	aa 1f       	adc	r26, r26
    6a60:	bb 1f       	adc	r27, r27
    6a62:	a6 17       	cp	r26, r22
    6a64:	b7 07       	cpc	r27, r23
    6a66:	10 f0       	brcs	.+4      	; 0x6a6c <__udivmodhi4_ep>
    6a68:	a6 1b       	sub	r26, r22
    6a6a:	b7 0b       	sbc	r27, r23

00006a6c <__udivmodhi4_ep>:
    6a6c:	88 1f       	adc	r24, r24
    6a6e:	99 1f       	adc	r25, r25
    6a70:	5a 95       	dec	r21
    6a72:	a9 f7       	brne	.-22     	; 0x6a5e <__udivmodhi4_loop>
    6a74:	80 95       	com	r24
    6a76:	90 95       	com	r25
    6a78:	bc 01       	movw	r22, r24
    6a7a:	cd 01       	movw	r24, r26
    6a7c:	08 95       	ret

00006a7e <__udivmodsi4>:
    6a7e:	a1 e2       	ldi	r26, 0x21	; 33
    6a80:	1a 2e       	mov	r1, r26
    6a82:	aa 1b       	sub	r26, r26
    6a84:	bb 1b       	sub	r27, r27
    6a86:	fd 01       	movw	r30, r26
    6a88:	0d c0       	rjmp	.+26     	; 0x6aa4 <__udivmodsi4_ep>

00006a8a <__udivmodsi4_loop>:
    6a8a:	aa 1f       	adc	r26, r26
    6a8c:	bb 1f       	adc	r27, r27
    6a8e:	ee 1f       	adc	r30, r30
    6a90:	ff 1f       	adc	r31, r31
    6a92:	a2 17       	cp	r26, r18
    6a94:	b3 07       	cpc	r27, r19
    6a96:	e4 07       	cpc	r30, r20
    6a98:	f5 07       	cpc	r31, r21
    6a9a:	20 f0       	brcs	.+8      	; 0x6aa4 <__udivmodsi4_ep>
    6a9c:	a2 1b       	sub	r26, r18
    6a9e:	b3 0b       	sbc	r27, r19
    6aa0:	e4 0b       	sbc	r30, r20
    6aa2:	f5 0b       	sbc	r31, r21

00006aa4 <__udivmodsi4_ep>:
    6aa4:	66 1f       	adc	r22, r22
    6aa6:	77 1f       	adc	r23, r23
    6aa8:	88 1f       	adc	r24, r24
    6aaa:	99 1f       	adc	r25, r25
    6aac:	1a 94       	dec	r1
    6aae:	69 f7       	brne	.-38     	; 0x6a8a <__udivmodsi4_loop>
    6ab0:	60 95       	com	r22
    6ab2:	70 95       	com	r23
    6ab4:	80 95       	com	r24
    6ab6:	90 95       	com	r25
    6ab8:	9b 01       	movw	r18, r22
    6aba:	ac 01       	movw	r20, r24
    6abc:	bd 01       	movw	r22, r26
    6abe:	cf 01       	movw	r24, r30
    6ac0:	08 95       	ret

00006ac2 <__divmodsi4>:
    6ac2:	97 fb       	bst	r25, 7
    6ac4:	09 2e       	mov	r0, r25
    6ac6:	05 26       	eor	r0, r21
    6ac8:	0e d0       	rcall	.+28     	; 0x6ae6 <__divmodsi4_neg1>
    6aca:	57 fd       	sbrc	r21, 7
    6acc:	04 d0       	rcall	.+8      	; 0x6ad6 <__divmodsi4_neg2>
    6ace:	d7 df       	rcall	.-82     	; 0x6a7e <__udivmodsi4>
    6ad0:	0a d0       	rcall	.+20     	; 0x6ae6 <__divmodsi4_neg1>
    6ad2:	00 1c       	adc	r0, r0
    6ad4:	38 f4       	brcc	.+14     	; 0x6ae4 <__divmodsi4_exit>

00006ad6 <__divmodsi4_neg2>:
    6ad6:	50 95       	com	r21
    6ad8:	40 95       	com	r20
    6ada:	30 95       	com	r19
    6adc:	21 95       	neg	r18
    6ade:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae0:	4f 4f       	sbci	r20, 0xFF	; 255
    6ae2:	5f 4f       	sbci	r21, 0xFF	; 255

00006ae4 <__divmodsi4_exit>:
    6ae4:	08 95       	ret

00006ae6 <__divmodsi4_neg1>:
    6ae6:	f6 f7       	brtc	.-4      	; 0x6ae4 <__divmodsi4_exit>
    6ae8:	90 95       	com	r25
    6aea:	80 95       	com	r24
    6aec:	70 95       	com	r23
    6aee:	61 95       	neg	r22
    6af0:	7f 4f       	sbci	r23, 0xFF	; 255
    6af2:	8f 4f       	sbci	r24, 0xFF	; 255
    6af4:	9f 4f       	sbci	r25, 0xFF	; 255
    6af6:	08 95       	ret

00006af8 <__prologue_saves__>:
    6af8:	2f 92       	push	r2
    6afa:	3f 92       	push	r3
    6afc:	4f 92       	push	r4
    6afe:	5f 92       	push	r5
    6b00:	6f 92       	push	r6
    6b02:	7f 92       	push	r7
    6b04:	8f 92       	push	r8
    6b06:	9f 92       	push	r9
    6b08:	af 92       	push	r10
    6b0a:	bf 92       	push	r11
    6b0c:	cf 92       	push	r12
    6b0e:	df 92       	push	r13
    6b10:	ef 92       	push	r14
    6b12:	ff 92       	push	r15
    6b14:	0f 93       	push	r16
    6b16:	1f 93       	push	r17
    6b18:	cf 93       	push	r28
    6b1a:	df 93       	push	r29
    6b1c:	cd b7       	in	r28, 0x3d	; 61
    6b1e:	de b7       	in	r29, 0x3e	; 62
    6b20:	ca 1b       	sub	r28, r26
    6b22:	db 0b       	sbc	r29, r27
    6b24:	0f b6       	in	r0, 0x3f	; 63
    6b26:	f8 94       	cli
    6b28:	de bf       	out	0x3e, r29	; 62
    6b2a:	0f be       	out	0x3f, r0	; 63
    6b2c:	cd bf       	out	0x3d, r28	; 61
    6b2e:	09 94       	ijmp

00006b30 <__epilogue_restores__>:
    6b30:	2a 88       	ldd	r2, Y+18	; 0x12
    6b32:	39 88       	ldd	r3, Y+17	; 0x11
    6b34:	48 88       	ldd	r4, Y+16	; 0x10
    6b36:	5f 84       	ldd	r5, Y+15	; 0x0f
    6b38:	6e 84       	ldd	r6, Y+14	; 0x0e
    6b3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    6b3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    6b3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6b40:	aa 84       	ldd	r10, Y+10	; 0x0a
    6b42:	b9 84       	ldd	r11, Y+9	; 0x09
    6b44:	c8 84       	ldd	r12, Y+8	; 0x08
    6b46:	df 80       	ldd	r13, Y+7	; 0x07
    6b48:	ee 80       	ldd	r14, Y+6	; 0x06
    6b4a:	fd 80       	ldd	r15, Y+5	; 0x05
    6b4c:	0c 81       	ldd	r16, Y+4	; 0x04
    6b4e:	1b 81       	ldd	r17, Y+3	; 0x03
    6b50:	aa 81       	ldd	r26, Y+2	; 0x02
    6b52:	b9 81       	ldd	r27, Y+1	; 0x01
    6b54:	ce 0f       	add	r28, r30
    6b56:	d1 1d       	adc	r29, r1
    6b58:	0f b6       	in	r0, 0x3f	; 63
    6b5a:	f8 94       	cli
    6b5c:	de bf       	out	0x3e, r29	; 62
    6b5e:	0f be       	out	0x3f, r0	; 63
    6b60:	cd bf       	out	0x3d, r28	; 61
    6b62:	ed 01       	movw	r28, r26
    6b64:	08 95       	ret

00006b66 <_exit>:
    6b66:	f8 94       	cli

00006b68 <__stop_program>:
    6b68:	ff cf       	rjmp	.-2      	; 0x6b68 <__stop_program>
