
TIMER_Lec1BlinkingLedsAss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000b62  2**0
                  ALLOC
  2 .stab         000010d4  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a44  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_10>
  2c:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 27 05 	call	0xa4e	; 0xa4e <main>
  74:	0c 94 75 05 	jmp	0xaea	; 0xaea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
  96:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinDirection+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinDirection+0x2c>
  a6:	72 c0       	rjmp	.+228    	; 0x18c <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	49 f1       	breq	.+82     	; 0x10e <DIO_u8SetPinDirection+0x92>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinDirection+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	61 f0       	breq	.+24     	; 0xe6 <DIO_u8SetPinDirection+0x6a>
  ce:	5b c0       	rjmp	.+182    	; 0x186 <DIO_u8SetPinDirection+0x10a>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	71 f1       	breq	.+92     	; 0x136 <DIO_u8SetPinDirection+0xba>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	e9 f1       	breq	.+122    	; 0x15e <DIO_u8SetPinDirection+0xe2>
  e4:	50 c0       	rjmp	.+160    	; 0x186 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
  e6:	aa e3       	ldi	r26, 0x3A	; 58
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	ea e3       	ldi	r30, 0x3A	; 58
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	48 2f       	mov	r20, r24
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 2e       	mov	r0, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinDirection+0x88>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinDirection+0x84>
 108:	84 2b       	or	r24, r20
 10a:	8c 93       	st	X, r24
 10c:	bf c0       	rjmp	.+382    	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
 10e:	a7 e3       	ldi	r26, 0x37	; 55
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e7 e3       	ldi	r30, 0x37	; 55
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	48 2f       	mov	r20, r24
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_u8SetPinDirection+0xb0>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_u8SetPinDirection+0xac>
 130:	84 2b       	or	r24, r20
 132:	8c 93       	st	X, r24
 134:	ab c0       	rjmp	.+342    	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
 136:	a4 e3       	ldi	r26, 0x34	; 52
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e4 e3       	ldi	r30, 0x34	; 52
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	48 2f       	mov	r20, r24
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 2e       	mov	r0, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_u8SetPinDirection+0xd8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_u8SetPinDirection+0xd4>
 158:	84 2b       	or	r24, r20
 15a:	8c 93       	st	X, r24
 15c:	97 c0       	rjmp	.+302    	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
 15e:	a1 e3       	ldi	r26, 0x31	; 49
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e1 e3       	ldi	r30, 0x31	; 49
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_u8SetPinDirection+0x100>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_u8SetPinDirection+0xfc>
 180:	84 2b       	or	r24, r20
 182:	8c 93       	st	X, r24
 184:	83 c0       	rjmp	.+262    	; 0x28c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	80 c0       	rjmp	.+256    	; 0x28c <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
 18c:	8c 81       	ldd	r24, Y+4	; 0x04
 18e:	88 23       	and	r24, r24
 190:	09 f0       	breq	.+2      	; 0x194 <DIO_u8SetPinDirection+0x118>
 192:	77 c0       	rjmp	.+238    	; 0x282 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	3e 83       	std	Y+6, r19	; 0x06
 19c:	2d 83       	std	Y+5, r18	; 0x05
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	9e 81       	ldd	r25, Y+6	; 0x06
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	59 f1       	breq	.+86     	; 0x1fe <DIO_u8SetPinDirection+0x182>
 1a8:	2d 81       	ldd	r18, Y+5	; 0x05
 1aa:	3e 81       	ldd	r19, Y+6	; 0x06
 1ac:	22 30       	cpi	r18, 0x02	; 2
 1ae:	31 05       	cpc	r19, r1
 1b0:	2c f4       	brge	.+10     	; 0x1bc <DIO_u8SetPinDirection+0x140>
 1b2:	8d 81       	ldd	r24, Y+5	; 0x05
 1b4:	9e 81       	ldd	r25, Y+6	; 0x06
 1b6:	00 97       	sbiw	r24, 0x00	; 0
 1b8:	69 f0       	breq	.+26     	; 0x1d4 <DIO_u8SetPinDirection+0x158>
 1ba:	60 c0       	rjmp	.+192    	; 0x27c <DIO_u8SetPinDirection+0x200>
 1bc:	2d 81       	ldd	r18, Y+5	; 0x05
 1be:	3e 81       	ldd	r19, Y+6	; 0x06
 1c0:	22 30       	cpi	r18, 0x02	; 2
 1c2:	31 05       	cpc	r19, r1
 1c4:	89 f1       	breq	.+98     	; 0x228 <DIO_u8SetPinDirection+0x1ac>
 1c6:	8d 81       	ldd	r24, Y+5	; 0x05
 1c8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	91 05       	cpc	r25, r1
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <DIO_u8SetPinDirection+0x156>
 1d0:	40 c0       	rjmp	.+128    	; 0x252 <DIO_u8SetPinDirection+0x1d6>
 1d2:	54 c0       	rjmp	.+168    	; 0x27c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
 1d4:	aa e3       	ldi	r26, 0x3A	; 58
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	ea e3       	ldi	r30, 0x3A	; 58
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8SetPinDirection+0x176>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8SetPinDirection+0x172>
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	47 c0       	rjmp	.+142    	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
 1fe:	a7 e3       	ldi	r26, 0x37	; 55
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e7 e3       	ldi	r30, 0x37	; 55
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	48 2f       	mov	r20, r24
 20a:	8b 81       	ldd	r24, Y+3	; 0x03
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 2e       	mov	r0, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_u8SetPinDirection+0x1a0>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_u8SetPinDirection+0x19c>
 220:	80 95       	com	r24
 222:	84 23       	and	r24, r20
 224:	8c 93       	st	X, r24
 226:	32 c0       	rjmp	.+100    	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
 228:	a4 e3       	ldi	r26, 0x34	; 52
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	e4 e3       	ldi	r30, 0x34	; 52
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_u8SetPinDirection+0x1ca>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_u8SetPinDirection+0x1c6>
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	8c 93       	st	X, r24
 250:	1d c0       	rjmp	.+58     	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
 252:	a1 e3       	ldi	r26, 0x31	; 49
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	e1 e3       	ldi	r30, 0x31	; 49
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	48 2f       	mov	r20, r24
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_u8SetPinDirection+0x1f4>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_u8SetPinDirection+0x1f0>
 274:	80 95       	com	r24
 276:	84 23       	and	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	28 97       	sbiw	r28, 0x08	; 8
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	8a 83       	std	Y+2, r24	; 0x02
 2b6:	6b 83       	std	Y+3, r22	; 0x03
 2b8:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
 2ba:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	88 30       	cpi	r24, 0x08	; 8
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <DIO_u8SetPinValue+0x24>
 2c2:	f4 c0       	rjmp	.+488    	; 0x4ac <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	09 f0       	breq	.+2      	; 0x2cc <DIO_u8SetPinValue+0x2c>
 2ca:	72 c0       	rjmp	.+228    	; 0x3b0 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	38 87       	std	Y+8, r19	; 0x08
 2d4:	2f 83       	std	Y+7, r18	; 0x07
 2d6:	8f 81       	ldd	r24, Y+7	; 0x07
 2d8:	98 85       	ldd	r25, Y+8	; 0x08
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	91 05       	cpc	r25, r1
 2de:	49 f1       	breq	.+82     	; 0x332 <DIO_u8SetPinValue+0x92>
 2e0:	2f 81       	ldd	r18, Y+7	; 0x07
 2e2:	38 85       	ldd	r19, Y+8	; 0x08
 2e4:	22 30       	cpi	r18, 0x02	; 2
 2e6:	31 05       	cpc	r19, r1
 2e8:	2c f4       	brge	.+10     	; 0x2f4 <DIO_u8SetPinValue+0x54>
 2ea:	8f 81       	ldd	r24, Y+7	; 0x07
 2ec:	98 85       	ldd	r25, Y+8	; 0x08
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	61 f0       	breq	.+24     	; 0x30a <DIO_u8SetPinValue+0x6a>
 2f2:	5b c0       	rjmp	.+182    	; 0x3aa <DIO_u8SetPinValue+0x10a>
 2f4:	2f 81       	ldd	r18, Y+7	; 0x07
 2f6:	38 85       	ldd	r19, Y+8	; 0x08
 2f8:	22 30       	cpi	r18, 0x02	; 2
 2fa:	31 05       	cpc	r19, r1
 2fc:	71 f1       	breq	.+92     	; 0x35a <DIO_u8SetPinValue+0xba>
 2fe:	8f 81       	ldd	r24, Y+7	; 0x07
 300:	98 85       	ldd	r25, Y+8	; 0x08
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	91 05       	cpc	r25, r1
 306:	e9 f1       	breq	.+122    	; 0x382 <DIO_u8SetPinValue+0xe2>
 308:	50 c0       	rjmp	.+160    	; 0x3aa <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
 30a:	ab e3       	ldi	r26, 0x3B	; 59
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	eb e3       	ldi	r30, 0x3B	; 59
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_u8SetPinValue+0x88>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_u8SetPinValue+0x84>
 32c:	84 2b       	or	r24, r20
 32e:	8c 93       	st	X, r24
 330:	bf c0       	rjmp	.+382    	; 0x4b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
 332:	a8 e3       	ldi	r26, 0x38	; 56
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e8 e3       	ldi	r30, 0x38	; 56
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	48 2f       	mov	r20, r24
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	28 2f       	mov	r18, r24
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 2e       	mov	r0, r18
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_u8SetPinValue+0xb0>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_u8SetPinValue+0xac>
 354:	84 2b       	or	r24, r20
 356:	8c 93       	st	X, r24
 358:	ab c0       	rjmp	.+342    	; 0x4b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
 35a:	a5 e3       	ldi	r26, 0x35	; 53
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e5 e3       	ldi	r30, 0x35	; 53
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_u8SetPinValue+0xd8>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_u8SetPinValue+0xd4>
 37c:	84 2b       	or	r24, r20
 37e:	8c 93       	st	X, r24
 380:	97 c0       	rjmp	.+302    	; 0x4b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
 382:	a2 e3       	ldi	r26, 0x32	; 50
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	e2 e3       	ldi	r30, 0x32	; 50
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	48 2f       	mov	r20, r24
 38e:	8b 81       	ldd	r24, Y+3	; 0x03
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 2e       	mov	r0, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_u8SetPinValue+0x100>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_u8SetPinValue+0xfc>
 3a4:	84 2b       	or	r24, r20
 3a6:	8c 93       	st	X, r24
 3a8:	83 c0       	rjmp	.+262    	; 0x4b0 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	89 83       	std	Y+1, r24	; 0x01
 3ae:	80 c0       	rjmp	.+256    	; 0x4b0 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	88 23       	and	r24, r24
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <DIO_u8SetPinValue+0x118>
 3b6:	77 c0       	rjmp	.+238    	; 0x4a6 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	3e 83       	std	Y+6, r19	; 0x06
 3c0:	2d 83       	std	Y+5, r18	; 0x05
 3c2:	8d 81       	ldd	r24, Y+5	; 0x05
 3c4:	9e 81       	ldd	r25, Y+6	; 0x06
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	91 05       	cpc	r25, r1
 3ca:	59 f1       	breq	.+86     	; 0x422 <DIO_u8SetPinValue+0x182>
 3cc:	2d 81       	ldd	r18, Y+5	; 0x05
 3ce:	3e 81       	ldd	r19, Y+6	; 0x06
 3d0:	22 30       	cpi	r18, 0x02	; 2
 3d2:	31 05       	cpc	r19, r1
 3d4:	2c f4       	brge	.+10     	; 0x3e0 <DIO_u8SetPinValue+0x140>
 3d6:	8d 81       	ldd	r24, Y+5	; 0x05
 3d8:	9e 81       	ldd	r25, Y+6	; 0x06
 3da:	00 97       	sbiw	r24, 0x00	; 0
 3dc:	69 f0       	breq	.+26     	; 0x3f8 <DIO_u8SetPinValue+0x158>
 3de:	60 c0       	rjmp	.+192    	; 0x4a0 <DIO_u8SetPinValue+0x200>
 3e0:	2d 81       	ldd	r18, Y+5	; 0x05
 3e2:	3e 81       	ldd	r19, Y+6	; 0x06
 3e4:	22 30       	cpi	r18, 0x02	; 2
 3e6:	31 05       	cpc	r19, r1
 3e8:	89 f1       	breq	.+98     	; 0x44c <DIO_u8SetPinValue+0x1ac>
 3ea:	8d 81       	ldd	r24, Y+5	; 0x05
 3ec:	9e 81       	ldd	r25, Y+6	; 0x06
 3ee:	83 30       	cpi	r24, 0x03	; 3
 3f0:	91 05       	cpc	r25, r1
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <DIO_u8SetPinValue+0x156>
 3f4:	40 c0       	rjmp	.+128    	; 0x476 <DIO_u8SetPinValue+0x1d6>
 3f6:	54 c0       	rjmp	.+168    	; 0x4a0 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
 3f8:	ab e3       	ldi	r26, 0x3B	; 59
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	eb e3       	ldi	r30, 0x3B	; 59
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	48 2f       	mov	r20, r24
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 2e       	mov	r0, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_u8SetPinValue+0x176>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_u8SetPinValue+0x172>
 41a:	80 95       	com	r24
 41c:	84 23       	and	r24, r20
 41e:	8c 93       	st	X, r24
 420:	47 c0       	rjmp	.+142    	; 0x4b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
 422:	a8 e3       	ldi	r26, 0x38	; 56
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	e8 e3       	ldi	r30, 0x38	; 56
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	48 2f       	mov	r20, r24
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 2e       	mov	r0, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_u8SetPinValue+0x1a0>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	0a 94       	dec	r0
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_u8SetPinValue+0x19c>
 444:	80 95       	com	r24
 446:	84 23       	and	r24, r20
 448:	8c 93       	st	X, r24
 44a:	32 c0       	rjmp	.+100    	; 0x4b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
 44c:	a5 e3       	ldi	r26, 0x35	; 53
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	e5 e3       	ldi	r30, 0x35	; 53
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	48 2f       	mov	r20, r24
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 2e       	mov	r0, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_u8SetPinValue+0x1ca>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_u8SetPinValue+0x1c6>
 46e:	80 95       	com	r24
 470:	84 23       	and	r24, r20
 472:	8c 93       	st	X, r24
 474:	1d c0       	rjmp	.+58     	; 0x4b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
 476:	a2 e3       	ldi	r26, 0x32	; 50
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	e2 e3       	ldi	r30, 0x32	; 50
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	48 2f       	mov	r20, r24
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 2e       	mov	r0, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_u8SetPinValue+0x1f4>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	0a 94       	dec	r0
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_u8SetPinValue+0x1f0>
 498:	80 95       	com	r24
 49a:	84 23       	and	r24, r20
 49c:	8c 93       	st	X, r24
 49e:	08 c0       	rjmp	.+16     	; 0x4b0 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	89 83       	std	Y+1, r24	; 0x01
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 4b2:	28 96       	adiw	r28, 0x08	; 8
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	cf 91       	pop	r28
 4c0:	df 91       	pop	r29
 4c2:	08 95       	ret

000004c4 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
 4c4:	df 93       	push	r29
 4c6:	cf 93       	push	r28
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <DIO_u8TogglePinValue+0x6>
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <DIO_u8TogglePinValue+0x8>
 4cc:	0f 92       	push	r0
 4ce:	cd b7       	in	r28, 0x3d	; 61
 4d0:	de b7       	in	r29, 0x3e	; 62
 4d2:	8a 83       	std	Y+2, r24	; 0x02
 4d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 4d6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	88 30       	cpi	r24, 0x08	; 8
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <DIO_u8TogglePinValue+0x1c>
 4de:	72 c0       	rjmp	.+228    	; 0x5c4 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	3d 83       	std	Y+5, r19	; 0x05
 4e8:	2c 83       	std	Y+4, r18	; 0x04
 4ea:	8c 81       	ldd	r24, Y+4	; 0x04
 4ec:	9d 81       	ldd	r25, Y+5	; 0x05
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	91 05       	cpc	r25, r1
 4f2:	49 f1       	breq	.+82     	; 0x546 <DIO_u8TogglePinValue+0x82>
 4f4:	2c 81       	ldd	r18, Y+4	; 0x04
 4f6:	3d 81       	ldd	r19, Y+5	; 0x05
 4f8:	22 30       	cpi	r18, 0x02	; 2
 4fa:	31 05       	cpc	r19, r1
 4fc:	2c f4       	brge	.+10     	; 0x508 <DIO_u8TogglePinValue+0x44>
 4fe:	8c 81       	ldd	r24, Y+4	; 0x04
 500:	9d 81       	ldd	r25, Y+5	; 0x05
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	61 f0       	breq	.+24     	; 0x51e <DIO_u8TogglePinValue+0x5a>
 506:	5b c0       	rjmp	.+182    	; 0x5be <DIO_u8TogglePinValue+0xfa>
 508:	2c 81       	ldd	r18, Y+4	; 0x04
 50a:	3d 81       	ldd	r19, Y+5	; 0x05
 50c:	22 30       	cpi	r18, 0x02	; 2
 50e:	31 05       	cpc	r19, r1
 510:	71 f1       	breq	.+92     	; 0x56e <DIO_u8TogglePinValue+0xaa>
 512:	8c 81       	ldd	r24, Y+4	; 0x04
 514:	9d 81       	ldd	r25, Y+5	; 0x05
 516:	83 30       	cpi	r24, 0x03	; 3
 518:	91 05       	cpc	r25, r1
 51a:	e9 f1       	breq	.+122    	; 0x596 <DIO_u8TogglePinValue+0xd2>
 51c:	50 c0       	rjmp	.+160    	; 0x5be <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
 51e:	ab e3       	ldi	r26, 0x3B	; 59
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	eb e3       	ldi	r30, 0x3B	; 59
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	48 2f       	mov	r20, r24
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 2e       	mov	r0, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_u8TogglePinValue+0x78>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_u8TogglePinValue+0x74>
 540:	84 27       	eor	r24, r20
 542:	8c 93       	st	X, r24
 544:	41 c0       	rjmp	.+130    	; 0x5c8 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
 546:	a8 e3       	ldi	r26, 0x38	; 56
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	e8 e3       	ldi	r30, 0x38	; 56
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	48 2f       	mov	r20, r24
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 2e       	mov	r0, r18
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_u8TogglePinValue+0xa0>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	0a 94       	dec	r0
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_u8TogglePinValue+0x9c>
 568:	84 27       	eor	r24, r20
 56a:	8c 93       	st	X, r24
 56c:	2d c0       	rjmp	.+90     	; 0x5c8 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
 56e:	a5 e3       	ldi	r26, 0x35	; 53
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	e5 e3       	ldi	r30, 0x35	; 53
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	48 2f       	mov	r20, r24
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 2e       	mov	r0, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_u8TogglePinValue+0xc8>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_u8TogglePinValue+0xc4>
 590:	84 27       	eor	r24, r20
 592:	8c 93       	st	X, r24
 594:	19 c0       	rjmp	.+50     	; 0x5c8 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
 596:	a2 e3       	ldi	r26, 0x32	; 50
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	e2 e3       	ldi	r30, 0x32	; 50
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	48 2f       	mov	r20, r24
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	28 2f       	mov	r18, r24
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 2e       	mov	r0, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_u8TogglePinValue+0xf0>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_u8TogglePinValue+0xec>
 5b8:	84 27       	eor	r24, r20
 5ba:	8c 93       	st	X, r24
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	cf 91       	pop	r28
 5d6:	df 91       	pop	r29
 5d8:	08 95       	ret

000005da <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
 5da:	df 93       	push	r29
 5dc:	cf 93       	push	r28
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	27 97       	sbiw	r28, 0x07	; 7
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	8a 83       	std	Y+2, r24	; 0x02
 5f0:	6b 83       	std	Y+3, r22	; 0x03
 5f2:	5d 83       	std	Y+5, r21	; 0x05
 5f4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
 5f6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	88 30       	cpi	r24, 0x08	; 8
 5fc:	08 f0       	brcs	.+2      	; 0x600 <DIO_u8GetPinValue+0x26>
 5fe:	74 c0       	rjmp	.+232    	; 0x6e8 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
 600:	8a 81       	ldd	r24, Y+2	; 0x02
 602:	28 2f       	mov	r18, r24
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	3f 83       	std	Y+7, r19	; 0x07
 608:	2e 83       	std	Y+6, r18	; 0x06
 60a:	4e 81       	ldd	r20, Y+6	; 0x06
 60c:	5f 81       	ldd	r21, Y+7	; 0x07
 60e:	41 30       	cpi	r20, 0x01	; 1
 610:	51 05       	cpc	r21, r1
 612:	59 f1       	breq	.+86     	; 0x66a <DIO_u8GetPinValue+0x90>
 614:	8e 81       	ldd	r24, Y+6	; 0x06
 616:	9f 81       	ldd	r25, Y+7	; 0x07
 618:	82 30       	cpi	r24, 0x02	; 2
 61a:	91 05       	cpc	r25, r1
 61c:	34 f4       	brge	.+12     	; 0x62a <DIO_u8GetPinValue+0x50>
 61e:	2e 81       	ldd	r18, Y+6	; 0x06
 620:	3f 81       	ldd	r19, Y+7	; 0x07
 622:	21 15       	cp	r18, r1
 624:	31 05       	cpc	r19, r1
 626:	69 f0       	breq	.+26     	; 0x642 <DIO_u8GetPinValue+0x68>
 628:	5c c0       	rjmp	.+184    	; 0x6e2 <DIO_u8GetPinValue+0x108>
 62a:	4e 81       	ldd	r20, Y+6	; 0x06
 62c:	5f 81       	ldd	r21, Y+7	; 0x07
 62e:	42 30       	cpi	r20, 0x02	; 2
 630:	51 05       	cpc	r21, r1
 632:	79 f1       	breq	.+94     	; 0x692 <DIO_u8GetPinValue+0xb8>
 634:	8e 81       	ldd	r24, Y+6	; 0x06
 636:	9f 81       	ldd	r25, Y+7	; 0x07
 638:	83 30       	cpi	r24, 0x03	; 3
 63a:	91 05       	cpc	r25, r1
 63c:	09 f4       	brne	.+2      	; 0x640 <DIO_u8GetPinValue+0x66>
 63e:	3d c0       	rjmp	.+122    	; 0x6ba <DIO_u8GetPinValue+0xe0>
 640:	50 c0       	rjmp	.+160    	; 0x6e2 <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
 642:	e9 e3       	ldi	r30, 0x39	; 57
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	88 2f       	mov	r24, r24
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	a9 01       	movw	r20, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_u8GetPinValue+0x80>
 656:	55 95       	asr	r21
 658:	47 95       	ror	r20
 65a:	8a 95       	dec	r24
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_u8GetPinValue+0x7c>
 65e:	ca 01       	movw	r24, r20
 660:	81 70       	andi	r24, 0x01	; 1
 662:	ec 81       	ldd	r30, Y+4	; 0x04
 664:	fd 81       	ldd	r31, Y+5	; 0x05
 666:	80 83       	st	Z, r24
 668:	41 c0       	rjmp	.+130    	; 0x6ec <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
 66a:	e6 e3       	ldi	r30, 0x36	; 54
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	28 2f       	mov	r18, r24
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	8b 81       	ldd	r24, Y+3	; 0x03
 676:	88 2f       	mov	r24, r24
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	a9 01       	movw	r20, r18
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_u8GetPinValue+0xa8>
 67e:	55 95       	asr	r21
 680:	47 95       	ror	r20
 682:	8a 95       	dec	r24
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_u8GetPinValue+0xa4>
 686:	ca 01       	movw	r24, r20
 688:	81 70       	andi	r24, 0x01	; 1
 68a:	ec 81       	ldd	r30, Y+4	; 0x04
 68c:	fd 81       	ldd	r31, Y+5	; 0x05
 68e:	80 83       	st	Z, r24
 690:	2d c0       	rjmp	.+90     	; 0x6ec <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
 692:	e3 e3       	ldi	r30, 0x33	; 51
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	28 2f       	mov	r18, r24
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	8b 81       	ldd	r24, Y+3	; 0x03
 69e:	88 2f       	mov	r24, r24
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	a9 01       	movw	r20, r18
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_u8GetPinValue+0xd0>
 6a6:	55 95       	asr	r21
 6a8:	47 95       	ror	r20
 6aa:	8a 95       	dec	r24
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_u8GetPinValue+0xcc>
 6ae:	ca 01       	movw	r24, r20
 6b0:	81 70       	andi	r24, 0x01	; 1
 6b2:	ec 81       	ldd	r30, Y+4	; 0x04
 6b4:	fd 81       	ldd	r31, Y+5	; 0x05
 6b6:	80 83       	st	Z, r24
 6b8:	19 c0       	rjmp	.+50     	; 0x6ec <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
 6ba:	e0 e3       	ldi	r30, 0x30	; 48
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	28 2f       	mov	r18, r24
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	8b 81       	ldd	r24, Y+3	; 0x03
 6c6:	88 2f       	mov	r24, r24
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	a9 01       	movw	r20, r18
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_u8GetPinValue+0xf8>
 6ce:	55 95       	asr	r21
 6d0:	47 95       	ror	r20
 6d2:	8a 95       	dec	r24
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_u8GetPinValue+0xf4>
 6d6:	ca 01       	movw	r24, r20
 6d8:	81 70       	andi	r24, 0x01	; 1
 6da:	ec 81       	ldd	r30, Y+4	; 0x04
 6dc:	fd 81       	ldd	r31, Y+5	; 0x05
 6de:	80 83       	st	Z, r24
 6e0:	05 c0       	rjmp	.+10     	; 0x6ec <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	89 83       	std	Y+1, r24	; 0x01
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ee:	27 96       	adiw	r28, 0x07	; 7
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	de bf       	out	0x3e, r29	; 62
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	cd bf       	out	0x3d, r28	; 61
 6fa:	cf 91       	pop	r28
 6fc:	df 91       	pop	r29
 6fe:	08 95       	ret

00000700 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
 700:	df 93       	push	r29
 702:	cf 93       	push	r28
 704:	00 d0       	rcall	.+0      	; 0x706 <DIO_u8SetPortDirection+0x6>
 706:	00 d0       	rcall	.+0      	; 0x708 <DIO_u8SetPortDirection+0x8>
 708:	0f 92       	push	r0
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	8a 83       	std	Y+2, r24	; 0x02
 710:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 712:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 714:	8a 81       	ldd	r24, Y+2	; 0x02
 716:	28 2f       	mov	r18, r24
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	3d 83       	std	Y+5, r19	; 0x05
 71c:	2c 83       	std	Y+4, r18	; 0x04
 71e:	8c 81       	ldd	r24, Y+4	; 0x04
 720:	9d 81       	ldd	r25, Y+5	; 0x05
 722:	81 30       	cpi	r24, 0x01	; 1
 724:	91 05       	cpc	r25, r1
 726:	d1 f0       	breq	.+52     	; 0x75c <DIO_u8SetPortDirection+0x5c>
 728:	2c 81       	ldd	r18, Y+4	; 0x04
 72a:	3d 81       	ldd	r19, Y+5	; 0x05
 72c:	22 30       	cpi	r18, 0x02	; 2
 72e:	31 05       	cpc	r19, r1
 730:	2c f4       	brge	.+10     	; 0x73c <DIO_u8SetPortDirection+0x3c>
 732:	8c 81       	ldd	r24, Y+4	; 0x04
 734:	9d 81       	ldd	r25, Y+5	; 0x05
 736:	00 97       	sbiw	r24, 0x00	; 0
 738:	61 f0       	breq	.+24     	; 0x752 <DIO_u8SetPortDirection+0x52>
 73a:	1f c0       	rjmp	.+62     	; 0x77a <DIO_u8SetPortDirection+0x7a>
 73c:	2c 81       	ldd	r18, Y+4	; 0x04
 73e:	3d 81       	ldd	r19, Y+5	; 0x05
 740:	22 30       	cpi	r18, 0x02	; 2
 742:	31 05       	cpc	r19, r1
 744:	81 f0       	breq	.+32     	; 0x766 <DIO_u8SetPortDirection+0x66>
 746:	8c 81       	ldd	r24, Y+4	; 0x04
 748:	9d 81       	ldd	r25, Y+5	; 0x05
 74a:	83 30       	cpi	r24, 0x03	; 3
 74c:	91 05       	cpc	r25, r1
 74e:	81 f0       	breq	.+32     	; 0x770 <DIO_u8SetPortDirection+0x70>
 750:	14 c0       	rjmp	.+40     	; 0x77a <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
 752:	ea e3       	ldi	r30, 0x3A	; 58
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	80 83       	st	Z, r24
 75a:	11 c0       	rjmp	.+34     	; 0x77e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
 75c:	e7 e3       	ldi	r30, 0x37	; 55
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	8b 81       	ldd	r24, Y+3	; 0x03
 762:	80 83       	st	Z, r24
 764:	0c c0       	rjmp	.+24     	; 0x77e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
 766:	e4 e3       	ldi	r30, 0x34	; 52
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
 76c:	80 83       	st	Z, r24
 76e:	07 c0       	rjmp	.+14     	; 0x77e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
 770:	e1 e3       	ldi	r30, 0x31	; 49
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	8b 81       	ldd	r24, Y+3	; 0x03
 776:	80 83       	st	Z, r24
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 77e:	89 81       	ldd	r24, Y+1	; 0x01
}
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	cf 91       	pop	r28
 78c:	df 91       	pop	r29
 78e:	08 95       	ret

00000790 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
 790:	df 93       	push	r29
 792:	cf 93       	push	r28
 794:	00 d0       	rcall	.+0      	; 0x796 <DIO_u8SetPortValue+0x6>
 796:	00 d0       	rcall	.+0      	; 0x798 <DIO_u8SetPortValue+0x8>
 798:	0f 92       	push	r0
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	8a 83       	std	Y+2, r24	; 0x02
 7a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 7a2:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 7a4:	8a 81       	ldd	r24, Y+2	; 0x02
 7a6:	28 2f       	mov	r18, r24
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	3d 83       	std	Y+5, r19	; 0x05
 7ac:	2c 83       	std	Y+4, r18	; 0x04
 7ae:	8c 81       	ldd	r24, Y+4	; 0x04
 7b0:	9d 81       	ldd	r25, Y+5	; 0x05
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	91 05       	cpc	r25, r1
 7b6:	d1 f0       	breq	.+52     	; 0x7ec <DIO_u8SetPortValue+0x5c>
 7b8:	2c 81       	ldd	r18, Y+4	; 0x04
 7ba:	3d 81       	ldd	r19, Y+5	; 0x05
 7bc:	22 30       	cpi	r18, 0x02	; 2
 7be:	31 05       	cpc	r19, r1
 7c0:	2c f4       	brge	.+10     	; 0x7cc <DIO_u8SetPortValue+0x3c>
 7c2:	8c 81       	ldd	r24, Y+4	; 0x04
 7c4:	9d 81       	ldd	r25, Y+5	; 0x05
 7c6:	00 97       	sbiw	r24, 0x00	; 0
 7c8:	61 f0       	breq	.+24     	; 0x7e2 <DIO_u8SetPortValue+0x52>
 7ca:	1f c0       	rjmp	.+62     	; 0x80a <DIO_u8SetPortValue+0x7a>
 7cc:	2c 81       	ldd	r18, Y+4	; 0x04
 7ce:	3d 81       	ldd	r19, Y+5	; 0x05
 7d0:	22 30       	cpi	r18, 0x02	; 2
 7d2:	31 05       	cpc	r19, r1
 7d4:	81 f0       	breq	.+32     	; 0x7f6 <DIO_u8SetPortValue+0x66>
 7d6:	8c 81       	ldd	r24, Y+4	; 0x04
 7d8:	9d 81       	ldd	r25, Y+5	; 0x05
 7da:	83 30       	cpi	r24, 0x03	; 3
 7dc:	91 05       	cpc	r25, r1
 7de:	81 f0       	breq	.+32     	; 0x800 <DIO_u8SetPortValue+0x70>
 7e0:	14 c0       	rjmp	.+40     	; 0x80a <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
 7e2:	eb e3       	ldi	r30, 0x3B	; 59
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	8b 81       	ldd	r24, Y+3	; 0x03
 7e8:	80 83       	st	Z, r24
 7ea:	11 c0       	rjmp	.+34     	; 0x80e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
 7ec:	e8 e3       	ldi	r30, 0x38	; 56
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	80 83       	st	Z, r24
 7f4:	0c c0       	rjmp	.+24     	; 0x80e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
 7f6:	e5 e3       	ldi	r30, 0x35	; 53
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	8b 81       	ldd	r24, Y+3	; 0x03
 7fc:	80 83       	st	Z, r24
 7fe:	07 c0       	rjmp	.+14     	; 0x80e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
 800:	e2 e3       	ldi	r30, 0x32	; 50
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	8b 81       	ldd	r24, Y+3	; 0x03
 806:	80 83       	st	Z, r24
 808:	02 c0       	rjmp	.+4      	; 0x80e <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 80e:	89 81       	ldd	r24, Y+1	; 0x01
}
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	0f 90       	pop	r0
 81a:	cf 91       	pop	r28
 81c:	df 91       	pop	r29
 81e:	08 95       	ret

00000820 <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
 820:	df 93       	push	r29
 822:	cf 93       	push	r28
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
 828:	78 94       	sei
}
 82a:	cf 91       	pop	r28
 82c:	df 91       	pop	r29
 82e:	08 95       	ret

00000830 <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
 830:	df 93       	push	r29
 832:	cf 93       	push	r28
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
 838:	f8 94       	cli
}
 83a:	cf 91       	pop	r28
 83c:	df 91       	pop	r29
 83e:	08 95       	ret

00000840 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
 840:	df 93       	push	r29
 842:	cf 93       	push	r28
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
 848:	ea e3       	ldi	r30, 0x3A	; 58
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
 850:	e7 e3       	ldi	r30, 0x37	; 55
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	8f ef       	ldi	r24, 0xFF	; 255
 856:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
 858:	e4 e3       	ldi	r30, 0x34	; 52
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	8f ef       	ldi	r24, 0xFF	; 255
 85e:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
 860:	e1 e3       	ldi	r30, 0x31	; 49
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	8f ef       	ldi	r24, 0xFF	; 255
 866:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
 868:	eb e3       	ldi	r30, 0x3B	; 59
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
 86e:	e8 e3       	ldi	r30, 0x38	; 56
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	87 e0       	ldi	r24, 0x07	; 7
 874:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
 876:	e5 e3       	ldi	r30, 0x35	; 53
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
 87c:	e2 e3       	ldi	r30, 0x32	; 50
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	10 82       	st	Z, r1
}
 882:	cf 91       	pop	r28
 884:	df 91       	pop	r29
 886:	08 95       	ret

00000888 <TIMER_voidInit>:

static void (* TIMER_pvCTCNotificationFunc)(void) = NULL;
static void (* TIMER_pvOverflowNotificationFunc)(void) = NULL;

void TIMER_voidInit(void)
{
 888:	df 93       	push	r29
 88a:	cf 93       	push	r28
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
	/*Select Wave Generation Mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
 890:	a3 e5       	ldi	r26, 0x53	; 83
 892:	b0 e0       	ldi	r27, 0x00	; 0
 894:	e3 e5       	ldi	r30, 0x53	; 83
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	8f 7b       	andi	r24, 0xBF	; 191
 89c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
 89e:	a3 e5       	ldi	r26, 0x53	; 83
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	e3 e5       	ldi	r30, 0x53	; 83
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	88 60       	ori	r24, 0x08	; 8
 8aa:	8c 93       	st	X, r24

	/*Select Compare Match Output Mode*/
	CLR_BIT(TCCR0,TCCR0_COM00);
 8ac:	a3 e5       	ldi	r26, 0x53	; 83
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	e3 e5       	ldi	r30, 0x53	; 83
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	80 81       	ld	r24, Z
 8b6:	8f 7e       	andi	r24, 0xEF	; 239
 8b8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM01);
 8ba:	a3 e5       	ldi	r26, 0x53	; 83
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
 8be:	e3 e5       	ldi	r30, 0x53	; 83
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	8f 7d       	andi	r24, 0xDF	; 223
 8c6:	8c 93       	st	X, r24

	/*Select Prescaler*/
	CLR_BIT(TCCR0,TCCR0_CS00);
 8c8:	a3 e5       	ldi	r26, 0x53	; 83
 8ca:	b0 e0       	ldi	r27, 0x00	; 0
 8cc:	e3 e5       	ldi	r30, 0x53	; 83
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	8e 7f       	andi	r24, 0xFE	; 254
 8d4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
 8d6:	a3 e5       	ldi	r26, 0x53	; 83
 8d8:	b0 e0       	ldi	r27, 0x00	; 0
 8da:	e3 e5       	ldi	r30, 0x53	; 83
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	82 60       	ori	r24, 0x02	; 2
 8e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
 8e4:	a3 e5       	ldi	r26, 0x53	; 83
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	e3 e5       	ldi	r30, 0x53	; 83
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	8b 7f       	andi	r24, 0xFB	; 251
 8f0:	8c 93       	st	X, r24

	/*Enable The Timer Interrupt*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
 8f2:	a9 e5       	ldi	r26, 0x59	; 89
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	e9 e5       	ldi	r30, 0x59	; 89
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	82 60       	ori	r24, 0x02	; 2
 8fe:	8c 93       	st	X, r24

	/*Set the Compare Match Value*/
	OCR0 = 250;
 900:	ec e5       	ldi	r30, 0x5C	; 92
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	8a ef       	ldi	r24, 0xFA	; 250
 906:	80 83       	st	Z, r24
}
 908:	cf 91       	pop	r28
 90a:	df 91       	pop	r29
 90c:	08 95       	ret

0000090e <TIMER_u8SetCallBackCompareMatch>:

uint8 TIMER_u8SetCallBackCompareMatch(void (* Copy_pvNotificationFunc)(void))
{
 90e:	df 93       	push	r29
 910:	cf 93       	push	r28
 912:	00 d0       	rcall	.+0      	; 0x914 <TIMER_u8SetCallBackCompareMatch+0x6>
 914:	0f 92       	push	r0
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
 91a:	9b 83       	std	Y+3, r25	; 0x03
 91c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
 91e:	19 82       	std	Y+1, r1	; 0x01

	/*Validating the pointer to the function*/
	if(Copy_pvNotificationFunc != NULL)
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	9b 81       	ldd	r25, Y+3	; 0x03
 924:	00 97       	sbiw	r24, 0x00	; 0
 926:	39 f0       	breq	.+14     	; 0x936 <TIMER_u8SetCallBackCompareMatch+0x28>
	{
		/*Convert the local pointer to global to be sent to ISR*/
		TIMER_pvCTCNotificationFunc = Copy_pvNotificationFunc;
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	9b 81       	ldd	r25, Y+3	; 0x03
 92c:	90 93 61 00 	sts	0x0061, r25
 930:	80 93 60 00 	sts	0x0060, r24
 934:	02 c0       	rjmp	.+4      	; 0x93a <TIMER_u8SetCallBackCompareMatch+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 936:	82 e0       	ldi	r24, 0x02	; 2
 938:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
 93a:	89 81       	ldd	r24, Y+1	; 0x01
}
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	cf 91       	pop	r28
 944:	df 91       	pop	r29
 946:	08 95       	ret

00000948 <TIMER_u8SetCallBackOverflow>:


uint8 TIMER_u8SetCallBackOverflow(void (* Copy_pvNotificationFunc)(void))
{
 948:	df 93       	push	r29
 94a:	cf 93       	push	r28
 94c:	00 d0       	rcall	.+0      	; 0x94e <TIMER_u8SetCallBackOverflow+0x6>
 94e:	0f 92       	push	r0
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
 954:	9b 83       	std	Y+3, r25	; 0x03
 956:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
 958:	19 82       	std	Y+1, r1	; 0x01

	/*Validating the pointer to the function*/
	if(Copy_pvNotificationFunc != NULL)
 95a:	8a 81       	ldd	r24, Y+2	; 0x02
 95c:	9b 81       	ldd	r25, Y+3	; 0x03
 95e:	00 97       	sbiw	r24, 0x00	; 0
 960:	39 f0       	breq	.+14     	; 0x970 <TIMER_u8SetCallBackOverflow+0x28>
	{
		/*Convert the local pointer to global to be sent to ISR*/
		TIMER_pvOverflowNotificationFunc = Copy_pvNotificationFunc;
 962:	8a 81       	ldd	r24, Y+2	; 0x02
 964:	9b 81       	ldd	r25, Y+3	; 0x03
 966:	90 93 63 00 	sts	0x0063, r25
 96a:	80 93 62 00 	sts	0x0062, r24
 96e:	02 c0       	rjmp	.+4      	; 0x974 <TIMER_u8SetCallBackOverflow+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 970:	82 e0       	ldi	r24, 0x02	; 2
 972:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
 974:	89 81       	ldd	r24, Y+1	; 0x01
}
 976:	0f 90       	pop	r0
 978:	0f 90       	pop	r0
 97a:	0f 90       	pop	r0
 97c:	cf 91       	pop	r28
 97e:	df 91       	pop	r29
 980:	08 95       	ret

00000982 <__vector_11>:


/*OverFlow Event ISR*/
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
 982:	1f 92       	push	r1
 984:	0f 92       	push	r0
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	0f 92       	push	r0
 98a:	11 24       	eor	r1, r1
 98c:	2f 93       	push	r18
 98e:	3f 93       	push	r19
 990:	4f 93       	push	r20
 992:	5f 93       	push	r21
 994:	6f 93       	push	r22
 996:	7f 93       	push	r23
 998:	8f 93       	push	r24
 99a:	9f 93       	push	r25
 99c:	af 93       	push	r26
 99e:	bf 93       	push	r27
 9a0:	ef 93       	push	r30
 9a2:	ff 93       	push	r31
 9a4:	df 93       	push	r29
 9a6:	cf 93       	push	r28
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMER_pvOverflowNotificationFunc != NULL)
 9ac:	80 91 62 00 	lds	r24, 0x0062
 9b0:	90 91 63 00 	lds	r25, 0x0063
 9b4:	00 97       	sbiw	r24, 0x00	; 0
 9b6:	29 f0       	breq	.+10     	; 0x9c2 <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMER_pvOverflowNotificationFunc();
 9b8:	e0 91 62 00 	lds	r30, 0x0062
 9bc:	f0 91 63 00 	lds	r31, 0x0063
 9c0:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
 9c2:	cf 91       	pop	r28
 9c4:	df 91       	pop	r29
 9c6:	ff 91       	pop	r31
 9c8:	ef 91       	pop	r30
 9ca:	bf 91       	pop	r27
 9cc:	af 91       	pop	r26
 9ce:	9f 91       	pop	r25
 9d0:	8f 91       	pop	r24
 9d2:	7f 91       	pop	r23
 9d4:	6f 91       	pop	r22
 9d6:	5f 91       	pop	r21
 9d8:	4f 91       	pop	r20
 9da:	3f 91       	pop	r19
 9dc:	2f 91       	pop	r18
 9de:	0f 90       	pop	r0
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	0f 90       	pop	r0
 9e4:	1f 90       	pop	r1
 9e6:	18 95       	reti

000009e8 <__vector_10>:


/*Compare Match Event ISR*/
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
 9e8:	1f 92       	push	r1
 9ea:	0f 92       	push	r0
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
 9f2:	2f 93       	push	r18
 9f4:	3f 93       	push	r19
 9f6:	4f 93       	push	r20
 9f8:	5f 93       	push	r21
 9fa:	6f 93       	push	r22
 9fc:	7f 93       	push	r23
 9fe:	8f 93       	push	r24
 a00:	9f 93       	push	r25
 a02:	af 93       	push	r26
 a04:	bf 93       	push	r27
 a06:	ef 93       	push	r30
 a08:	ff 93       	push	r31
 a0a:	df 93       	push	r29
 a0c:	cf 93       	push	r28
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMER_pvCTCNotificationFunc != NULL)
 a12:	80 91 60 00 	lds	r24, 0x0060
 a16:	90 91 61 00 	lds	r25, 0x0061
 a1a:	00 97       	sbiw	r24, 0x00	; 0
 a1c:	29 f0       	breq	.+10     	; 0xa28 <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMER_pvCTCNotificationFunc();
 a1e:	e0 91 60 00 	lds	r30, 0x0060
 a22:	f0 91 61 00 	lds	r31, 0x0061
 a26:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
 a28:	cf 91       	pop	r28
 a2a:	df 91       	pop	r29
 a2c:	ff 91       	pop	r31
 a2e:	ef 91       	pop	r30
 a30:	bf 91       	pop	r27
 a32:	af 91       	pop	r26
 a34:	9f 91       	pop	r25
 a36:	8f 91       	pop	r24
 a38:	7f 91       	pop	r23
 a3a:	6f 91       	pop	r22
 a3c:	5f 91       	pop	r21
 a3e:	4f 91       	pop	r20
 a40:	3f 91       	pop	r19
 a42:	2f 91       	pop	r18
 a44:	0f 90       	pop	r0
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	0f 90       	pop	r0
 a4a:	1f 90       	pop	r1
 a4c:	18 95       	reti

00000a4e <main>:

void MAIN_voidLedAss(void);

/*It is the main*/
void main(void)
{
 a4e:	df 93       	push	r29
 a50:	cf 93       	push	r28
 a52:	cd b7       	in	r28, 0x3d	; 61
 a54:	de b7       	in	r29, 0x3e	; 62
	 * Led 1 on port B pin 1,
	 * Led 2 on port B pin 2.
	 * */

	/*Peripherals Initialization*/
	PORT_voidInit();
 a56:	0e 94 20 04 	call	0x840	; 0x840 <PORT_voidInit>
	GIE_voidEnable();
 a5a:	0e 94 10 04 	call	0x820	; 0x820 <GIE_voidEnable>

	TIMER_voidInit();
 a5e:	0e 94 44 04 	call	0x888	; 0x888 <TIMER_voidInit>
	TIMER_u8SetCallBackCompareMatch(MAIN_voidLedAss);
 a62:	86 e3       	ldi	r24, 0x36	; 54
 a64:	95 e0       	ldi	r25, 0x05	; 5
 a66:	0e 94 87 04 	call	0x90e	; 0x90e <TIMER_u8SetCallBackCompareMatch>
 a6a:	ff cf       	rjmp	.-2      	; 0xa6a <main+0x1c>

00000a6c <MAIN_voidLedAss>:
 * LED 0: On for 5 milli seconds, Off for 15 milli seconds.
 * LED 1: On for 10 milli seconds, Off for 10 milli seconds.
 * LED 2: On for 15 milli seconds, Off for 5 milli seconds.
 */
void MAIN_voidLedAss(void)
{
 a6c:	df 93       	push	r29
 a6e:	cf 93       	push	r28
 a70:	cd b7       	in	r28, 0x3d	; 61
 a72:	de b7       	in	r29, 0x3e	; 62
	/*Define the Counter*/
	static uint8 Local_u8Counter = 0;

	Local_u8Counter++;
 a74:	80 91 64 00 	lds	r24, 0x0064
 a78:	8f 5f       	subi	r24, 0xFF	; 255
 a7a:	80 93 64 00 	sts	0x0064, r24

	/*After 5 milli seconds*/
	if(Local_u8Counter == 20)
 a7e:	80 91 64 00 	lds	r24, 0x0064
 a82:	84 31       	cpi	r24, 0x14	; 20
 a84:	31 f4       	brne	.+12     	; 0xa92 <MAIN_voidLedAss+0x26>
	{
		/*LED 0*/
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_LOW);
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	60 e0       	ldi	r22, 0x00	; 0
 a8a:	40 e0       	ldi	r20, 0x00	; 0
 a8c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_u8SetPinValue>
 a90:	29 c0       	rjmp	.+82     	; 0xae4 <MAIN_voidLedAss+0x78>

	}
	/*After 10 milli seconds*/
	else if(Local_u8Counter == 40)
 a92:	80 91 64 00 	lds	r24, 0x0064
 a96:	88 32       	cpi	r24, 0x28	; 40
 a98:	31 f4       	brne	.+12     	; 0xaa6 <MAIN_voidLedAss+0x3a>
	{
		/*LED 1*/
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN1, DIO_u8PIN_LOW);
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	61 e0       	ldi	r22, 0x01	; 1
 a9e:	40 e0       	ldi	r20, 0x00	; 0
 aa0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_u8SetPinValue>
 aa4:	1f c0       	rjmp	.+62     	; 0xae4 <MAIN_voidLedAss+0x78>
	}
	/*After 15 milli seconds*/
	else if(Local_u8Counter == 60)
 aa6:	80 91 64 00 	lds	r24, 0x0064
 aaa:	8c 33       	cpi	r24, 0x3C	; 60
 aac:	31 f4       	brne	.+12     	; 0xaba <MAIN_voidLedAss+0x4e>
	{
		/*LED 2*/
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_LOW);
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	62 e0       	ldi	r22, 0x02	; 2
 ab2:	40 e0       	ldi	r20, 0x00	; 0
 ab4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_u8SetPinValue>
 ab8:	15 c0       	rjmp	.+42     	; 0xae4 <MAIN_voidLedAss+0x78>
	}
	/*After 20 milli seconds*/
	else if(Local_u8Counter == 80)
 aba:	80 91 64 00 	lds	r24, 0x0064
 abe:	80 35       	cpi	r24, 0x50	; 80
 ac0:	89 f4       	brne	.+34     	; 0xae4 <MAIN_voidLedAss+0x78>
	{
		/*LED 0*/
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN0, DIO_u8PIN_HIGH);
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	60 e0       	ldi	r22, 0x00	; 0
 ac6:	41 e0       	ldi	r20, 0x01	; 1
 ac8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_u8SetPinValue>
		/*LED 1*/
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN1, DIO_u8PIN_HIGH);
 acc:	81 e0       	ldi	r24, 0x01	; 1
 ace:	61 e0       	ldi	r22, 0x01	; 1
 ad0:	41 e0       	ldi	r20, 0x01	; 1
 ad2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_u8SetPinValue>
		/*LED 2*/
		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN2, DIO_u8PIN_HIGH);
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	62 e0       	ldi	r22, 0x02	; 2
 ada:	41 e0       	ldi	r20, 0x01	; 1
 adc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_u8SetPinValue>

		/*Clear the counter to zero*/
		Local_u8Counter = 0;
 ae0:	10 92 64 00 	sts	0x0064, r1
	}
}
 ae4:	cf 91       	pop	r28
 ae6:	df 91       	pop	r29
 ae8:	08 95       	ret

00000aea <_exit>:
 aea:	f8 94       	cli

00000aec <__stop_program>:
 aec:	ff cf       	rjmp	.-2      	; 0xaec <__stop_program>
